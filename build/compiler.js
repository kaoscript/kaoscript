// Generated by kaoscript 0.6.0
var __ks__ = require("@kaoscript/runtime");
var Helper = __ks__.Helper, Type = __ks__.Type;
module.exports = function() {
	var __ks__ = require("@kaoscript/ast")();
	var AssignmentOperator = __ks__.AssignmentOperator, BinaryOperator = __ks__.BinaryOperator, FunctionModifier = __ks__.FunctionModifier, Kind = __ks__.Kind, MemberModifier = __ks__.MemberModifier, ParameterModifier = __ks__.ParameterModifier, ScopeModifier = __ks__.ScopeModifier, UnaryOperator = __ks__.UnaryOperator, VariableModifier = __ks__.VariableModifier;
	var fs = require("../src/fs.js");
	var metadata = require("../package.json");
	var parse = require("@kaoscript/parser").parse;
	var path = require("path");
	var Mode = {
		None: 0,
		Async: 1
	};
	var CalleeKind = {
		ClassMethod: 0,
		InstanceMethod: 1,
		VariableProperty: 2
	};
	var VariableKind = {
		Class: 1,
		Enum: 2,
		Function: 3,
		TypeAlias: 4,
		Variable: 5
	};
	var $defaultTypes = {
		Array: "Array",
		Boolean: "Boolean",
		Function: "Function",
		Number: "Number",
		Object: "Object",
		RegExp: "RegExp",
		String: "String"
	};
	var $extensions = {
		binary: ".ksb",
		hash: ".ksh",
		metadata: ".ksm",
		source: ".ks"
	};
	var $generics = {
		Array: true
	};
	var $literalTypes = {
		false: "Boolean",
		Infinity: "Number",
		NaN: "Number",
		true: "Boolean"
	};
	var $operator = {
		binaries: {},
		lefts: {},
		numerics: {}
	};
	$operator.binaries[BinaryOperator.And] = true;
	$operator.binaries[BinaryOperator.Equality] = true;
	$operator.binaries[BinaryOperator.GreaterThan] = true;
	$operator.binaries[BinaryOperator.GreaterThanOrEqual] = true;
	$operator.binaries[BinaryOperator.Inequality] = true;
	$operator.binaries[BinaryOperator.LessThan] = true;
	$operator.binaries[BinaryOperator.LessThanOrEqual] = true;
	$operator.binaries[BinaryOperator.NullCoalescing] = true;
	$operator.binaries[BinaryOperator.Or] = true;
	$operator.binaries[BinaryOperator.TypeEquality] = true;
	$operator.binaries[BinaryOperator.TypeInequality] = true;
	$operator.lefts[BinaryOperator.Addition] = true;
	$operator.lefts[BinaryOperator.Assignment] = true;
	$operator.numerics[BinaryOperator.BitwiseAnd] = true;
	$operator.numerics[BinaryOperator.BitwiseLeftShift] = true;
	$operator.numerics[BinaryOperator.BitwiseOr] = true;
	$operator.numerics[BinaryOperator.BitwiseRightShift] = true;
	$operator.numerics[BinaryOperator.BitwiseXor] = true;
	$operator.numerics[BinaryOperator.Division] = true;
	$operator.numerics[BinaryOperator.Modulo] = true;
	$operator.numerics[BinaryOperator.Multiplication] = true;
	$operator.numerics[BinaryOperator.Subtraction] = true;
	var $types = {
		any: "Any",
		array: "Array",
		bool: "Boolean",
		class: "Class",
		enum: "Enum",
		func: "Function",
		number: "Number",
		object: "Object",
		string: "String"
	};
	var $typekinds = {
		"Class": VariableKind.Class,
		"Enum": VariableKind.Enum,
		"Function": VariableKind.Function
	};
	var $typeofs = {
		Array: true,
		Boolean: true,
		Function: true,
		NaN: true,
		Number: true,
		Object: true,
		RegExp: true,
		String: true
	};
	var $attribute = {
		apply: function(data, options) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(options === undefined || options === null) {
				throw new Error("Missing parameter 'options'");
			}
			var nc = true;
			if(data.attributes && data.attributes.length) {
				for(var __ks_0 = 0, __ks_1 = data.attributes.length, attr; __ks_0 < __ks_1; ++__ks_0) {
					attr = data.attributes[__ks_0];
					if((attr.declaration.kind === Kind.AttributeExpression) && (attr.declaration.name.name === "cfg")) {
						if(nc) {
							options = __ks_Object._cm_clone(options);
							nc = false;
						}
						$attribute.expression(attr.declaration, options);
					}
				}
			}
			return options;
		},
		expression: function(attr, options) {
			if(attr === undefined || attr === null) {
				throw new Error("Missing parameter 'attr'");
			}
			if(options === undefined || options === null) {
				throw new Error("Missing parameter 'options'");
			}
			for(var __ks_0 = 0, __ks_1 = attr.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = attr.arguments[__ks_0];
				if(arg.kind === Kind.AttributeExpression) {
					if(!Type.isValue(options[arg.name.name])) {
						options[arg.name.name] = {};
					}
					$attribute.expression(arg, options[arg.name.name]);
				}
				else if(arg.kind === Kind.AttributeOperator) {
					options[arg.name.name] = arg.value.value;
				}
			}
		}
	};
	function $block(data) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(data.kind === Kind.Block) {
			return data;
		}
		return {
			kind: Kind.Block,
			statements: [data]
		};
	}
	function $body(data) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(data.kind === Kind.Block) {
			return data.statements;
		}
		return [{
			kind: Kind.ReturnStatement,
			value: data
		}];
	}
	function $identifier(name) {
		if(name === undefined || name === null) {
			throw new Error("Missing parameter 'name'");
		}
		if(Type.isString(name)) {
			return {
				kind: Kind.Identifier,
				name: name
			};
		}
		else {
			return name;
		}
	}
	var $runtime = {
		helper: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			return node._options.runtime.Helper;
		},
		package: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			return node._options.runtime.package;
		},
		type: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(Type.isValue(node.module)) {
				node.module().flag("Type");
			}
			return node._options.runtime.Type;
		},
		typeof: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var type = arguments[++__ks_i];
			if(arguments.length > 1) {
				var node = arguments[++__ks_i];
			}
			else {
				var node = null;
			}
			if(Type.isValue(node)) {
				if(!$typeofs[type]) {
					return false;
				}
				if(type === "NaN") {
					return "isNaN";
				}
				else {
					return $runtime.type(node) + ".is" + type;
				}
			}
			else {
				return $typeofs[type];
			}
		}
	};
	var $signature = {
		type: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			if(arguments.length > 1) {
				var type = arguments[++__ks_i];
			}
			else {
				var type = null;
			}
			var scope = arguments[++__ks_i];
			if(type) {
				if(type.typeName) {
					if($types[type.typeName.name]) {
						return $types[type.typeName.name];
					}
					var variable, __ks_0;
					if((Type.isValue(__ks_0 = scope.getVariable(type.typeName.name)) ? (variable = __ks_0, true) : false) && (variable.kind === VariableKind.TypeAlias)) {
						return $signature.type(variable.type, scope);
					}
					return type.typeName.name;
				}
				else if(type.types) {
					var types = [];
					for(var i = 0, __ks_0 = type.types.length; i < __ks_0; ++i) {
						types.push($signature.type(type.types[i], scope));
					}
					return types;
				}
				else {
					throw new Error("Not Implemented");
				}
			}
			else {
				return "Any";
			}
		}
	};
	function $throw() {
		if(arguments.length < 1) {
			throw new Error("Wrong number of arguments");
		}
		var __ks_i = -1;
		var message = arguments[++__ks_i];
		if(arguments.length > 1) {
			var node = arguments[++__ks_i];
		}
		else {
			var node = null;
		}
		var error = new Error(message);
		if(Type.isValue(node)) {
			error.filename = node.file();
		}
		throw error;
	}
	function $toInt(data, defaultValue) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(defaultValue === undefined || defaultValue === null) {
			throw new Error("Missing parameter 'defaultValue'");
		}
		var __ks_0 = data.kind;
		if(__ks_0 === Kind.NumericExpression) {
			return data.value;
		}
		else {
			return defaultValue;
		}
	}
	var $type = {
		check: function(node, fragments, name, type) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(type === undefined || type === null) {
				throw new Error("Missing parameter 'type'");
			}
			if(type.kind === Kind.TypeReference) {
				type = $type.unalias(type, node.scope());
				if(type.typeParameters) {
					if($generics[type.typeName.name] || !$types[type.typeName.name] || $generics[$types[type.typeName.name]]) {
						var tof = $runtime.typeof(type.typeName.name, node) || $runtime.typeof($types[type.typeName.name], node);
						if(tof) {
							fragments.code(tof + "(").compile(name);
							for(var __ks_0 = 0, __ks_1 = type.typeParameters.length, typeParameter; __ks_0 < __ks_1; ++__ks_0) {
								typeParameter = type.typeParameters[__ks_0];
								fragments.code($comma);
								$type.compile(typeParameter, fragments);
							}
							fragments.code(")");
						}
						else {
							fragments.code($runtime.type(node), ".is(").compile(name).code(", ").expression(type.typeName.name);
							for(var __ks_0 = 0, __ks_1 = type.typeParameters.length, typeParameter; __ks_0 < __ks_1; ++__ks_0) {
								typeParameter = type.typeParameters[__ks_0];
								fragments.code($comma);
								$type.compile(typeParameter, fragments);
							}
							fragments.code(")");
						}
					}
					else {
						$throw("Generic on primitive at line " + type.start.line, node);
					}
				}
				else {
					var tof = $runtime.typeof(type.typeName.name, node) || $runtime.typeof($types[type.typeName.name], node);
					if(tof) {
						fragments.code(tof + "(").compile(name).code(")");
					}
					else {
						fragments.code($runtime.type(node), ".is(").compile(name).code(", ");
						$type.compile(type, fragments);
						fragments.code(")");
					}
				}
			}
			else if(Type.isValue(type.types)) {
				fragments.code("(");
				for(var i = 0, __ks_0 = type.types.length; i < __ks_0; ++i) {
					if(i) {
						fragments.code(" || ");
					}
					$type.check(node, fragments, name, type.types[i]);
				}
				fragments.code(")");
			}
			else {
				$throw("Not Implemented", node);
			}
		},
		compile: function(data, fragments) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			var __ks_0 = data.kind;
			if(__ks_0 === Kind.TypeReference) {
				fragments.code(Type.isValue($types[data.typeName.name]) ? $types[data.typeName.name] : data.typeName.name);
			}
		},
		fromAST: function(type) {
			if(type === undefined) {
				type = null;
			}
			if(!Type.isValue(type)) {
				return VariableKind.Variable;
			}
			if(type.kind === Kind.ClassDeclaration) {
				return VariableKind.Class;
			}
			if(type.kind === Kind.EnumDeclaration) {
				return VariableKind.Enum;
			}
			if(type.kind === Kind.FunctionExpression) {
				return VariableKind.Function;
			}
			return VariableKind.Variable;
		},
		isAny: function(type) {
			if(type === undefined) {
				type = null;
			}
			if(!type) {
				return true;
			}
			if((type.kind === Kind.TypeReference) && (type.typeName.kind === Kind.Identifier) && ((type.typeName.name === "any") || (type.typeName.name === "Any"))) {
				return true;
			}
			return false;
		},
		reference: function(name) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(Type.isString(name)) {
				return {
					kind: Kind.TypeReference,
					typeName: {
						kind: Kind.Identifier,
						name: name
					}
				};
			}
			else {
				return {
					kind: Kind.TypeReference,
					typeName: name
				};
			}
		},
		same: function(a, b) {
			if(a === undefined || a === null) {
				throw new Error("Missing parameter 'a'");
			}
			if(b === undefined || b === null) {
				throw new Error("Missing parameter 'b'");
			}
			if(a.kind !== b.kind) {
				return false;
			}
			if(a.kind === Kind.TypeReference) {
				if(a.typeName.kind !== b.typeName.kind) {
					return false;
				}
				if(a.typeName.kind === Kind.Identifier) {
					if(a.typeName.name !== b.typeName.name) {
						return false;
					}
				}
			}
			return true;
		},
		type: function(data, scope, node) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(!data.kind) {
				return data;
			}
			var type = null;
			var __ks_0 = data.kind;
			if(__ks_0 === Kind.ArrayComprehension) {
				return {
					typeName: {
						kind: Kind.Identifier,
						name: "Array"
					}
				};
			}
			else if(__ks_0 === Kind.ArrayExpression) {
				return {
					typeName: {
						kind: Kind.Identifier,
						name: "Array"
					}
				};
			}
			else if(__ks_0 === Kind.ArrayRange) {
				return {
					typeName: {
						kind: Kind.Identifier,
						name: "Array"
					}
				};
			}
			else if(__ks_0 === Kind.BinaryOperator) {
				if(data.operator.kind === BinaryOperator.TypeCasting) {
					return $type.type(data.right, scope, node);
				}
				else if($operator.binaries[data.operator.kind]) {
					return {
						typeName: {
							kind: Kind.Identifier,
							name: "Boolean"
						}
					};
				}
				else if($operator.lefts[data.operator.kind]) {
					return $type.type(data.left, scope, node);
				}
				else if($operator.numerics[data.operator.kind]) {
					return {
						typeName: {
							kind: Kind.Identifier,
							name: "Number"
						}
					};
				}
			}
			else if(__ks_0 === Kind.CreateExpression) {
				return {
					typeName: data.class
				};
			}
			else if(__ks_0 === Kind.Identifier) {
				var variable = scope.getVariable(data.name);
				if(variable && variable.type) {
					return variable.type;
				}
			}
			else if(__ks_0 === Kind.Literal) {
				return {
					typeName: {
						kind: Kind.Identifier,
						name: $literalTypes[data.value] || "String"
					}
				};
			}
			else if(__ks_0 === Kind.NumericExpression) {
				return {
					typeName: {
						kind: Kind.Identifier,
						name: "Number"
					}
				};
			}
			else if(__ks_0 === Kind.ObjectExpression) {
				type = {
					typeName: {
						kind: Kind.Identifier,
						name: "Object"
					},
					properties: {}
				};
				var prop;
				for(var __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
					property = data.properties[__ks_1];
					prop = {
						kind: $type.fromAST(property.value),
						name: property.name.name
					};
					if(property.value.kind === Kind.FunctionExpression) {
						prop.signature = $function.signature(property.value, node);
						if(property.value.type) {
							prop.type = $type.type(property.value.type, scope, node);
						}
					}
					type.properties[property.name.name] = prop;
				}
			}
			else if(__ks_0 === Kind.RegularExpression) {
				return {
					typeName: {
						kind: Kind.Identifier,
						name: "RegExp"
					}
				};
			}
			else if(__ks_0 === Kind.Template) {
				return {
					typeName: {
						kind: Kind.Identifier,
						name: "String"
					}
				};
			}
			else if(__ks_0 === Kind.TypeReference) {
				if(data.typeName) {
					if(data.properties) {
						type = {
							typeName: {
								kind: Kind.Identifier,
								name: "Object"
							},
							properties: {}
						};
						var prop;
						for(var __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
							property = data.properties[__ks_1];
							prop = {
								kind: $type.fromAST(property.type),
								name: property.name.name
							};
							if(Type.isValue(property.type)) {
								if(property.type.kind === Kind.FunctionExpression) {
									prop.signature = $function.signature(property.type, node);
									if(property.type.type) {
										prop.type = $type.type(property.type.type, scope, node);
									}
								}
								else {
									prop.type = $type.type(property.type, scope, node);
								}
							}
							type.properties[property.name.name] = prop;
						}
					}
					else {
						type = {
							typeName: $type.typeName(data.typeName)
						};
						if(data.nullable) {
							type.nullable = true;
						}
						if(data.typeParameters) {
							type.typeParameters = Helper.mapArray(data.typeParameters, function(parameter) {
								return $type.type(parameter, scope, node);
							});
						}
					}
				}
			}
			else if(__ks_0 === Kind.UnionType) {
				return {
					types: Helper.mapArray(data.types, function(type) {
						return $type.type(type, scope, node);
					})
				};
			}
			return type;
		},
		typeName: function(data) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(data.kind === Kind.Identifier) {
				return {
					kind: Kind.Identifier,
					name: data.name
				};
			}
			else {
				return {
					kind: Kind.MemberExpression,
					object: $type.typeName(data.object),
					property: $type.typeName(data.property),
					computed: false
				};
			}
		},
		unalias: function(type, scope) {
			if(type === undefined || type === null) {
				throw new Error("Missing parameter 'type'");
			}
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			var variable = scope.getVariable(type.typeName.name);
			if(variable && (variable.kind === VariableKind.TypeAlias)) {
				return $type.unalias(variable.type, scope);
			}
			return type;
		}
	};
	var $variable = {
		define: function() {
			if(arguments.length < 4) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			var scope = arguments[++__ks_i];
			var name = arguments[++__ks_i];
			var kind = arguments[++__ks_i];
			if(arguments.length > 4) {
				var type = arguments[++__ks_i];
			}
			else {
				var type = null;
			}
			var variable = scope.getVariable(name.name || name);
			if(variable && (variable.kind === kind)) {
				variable.new = false;
			}
			else {
				scope.addVariable(name.name || name, variable = {
					name: name,
					kind: kind,
					new: true
				});
				if(kind === VariableKind.Class) {
					variable.constructors = [];
					variable.destructors = 0;
					variable.instanceVariables = {};
					variable.classVariables = {};
					variable.instanceMethods = {};
					variable.classMethods = {};
				}
				else if(kind === VariableKind.Enum) {
					if(type) {
						if(type.typeName.name === "string") {
							variable.type = "string";
						}
					}
					if(!variable.type) {
						variable.type = "number";
						variable.counter = -1;
					}
				}
				else if(kind === VariableKind.TypeAlias) {
					variable.type = $type.type(type, scope, node);
				}
				else if(((kind === VariableKind.Function) || (kind === VariableKind.Variable)) && type) {
					var __ks_0;
					if(Type.isValue(__ks_0 = $type.type(type, scope, node)) ? (type = __ks_0, true) : false) {
						variable.type = type;
					}
				}
			}
			return variable;
		},
		filterMember: function(variable, name, node) {
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(variable.kind === VariableKind.Class) {
				if(Type.isArray(variable.instanceMethods[name])) {
					var variables = [];
					for(var __ks_0 = 0, __ks_1 = variable.instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = variable.instanceMethods[name][__ks_0];
						if(Type.isValue(method.type)) {
							$variable.push(variables, {
								kind: VariableKind.Variable,
								type: method.type
							});
						}
						else {
							return null;
						}
					}
					if(variables.length === 1) {
						return variables[0];
					}
					if(variables.length > 0) {
						return variables;
					}
				}
				else if(Type.isObject(variable.instanceVariables[name])) {
					if(Type.isValue(variable.instanceVariables[name].type)) {
						return {
							kind: VariableKind.Variable,
							type: {
								kind: Kind.TypeReference,
								typeName: {
									kind: Kind.Identifier,
									name: variable.instanceVariables[name].type
								}
							}
						};
					}
				}
			}
			else if(variable.kind === VariableKind.Enum) {
				$throw("Not implemented", node);
			}
			else if(variable.kind === VariableKind.TypeAlias) {
				if(variable.type.types) {
					var variables = [];
					for(var __ks_0 = 0, __ks_1 = variable.type.types.length, type; __ks_0 < __ks_1; ++__ks_0) {
						type = variable.type.types[__ks_0];
						var v, __ks_2, __ks_3;
						if(!((Type.isValue(__ks_2 = $variable.fromType(type, node)) ? (v = __ks_2, true) : false) && (Type.isValue(__ks_3 = $variable.filterMember(v, name, node)) ? (v = __ks_3, true) : false))) {
							return null;
						}
						$variable.push(variables, v);
					}
					if(variables.length === 1) {
						return variables[0];
					}
					if(variables.length > 0) {
						return variables;
					}
				}
				else {
					if(Type.isValue(variable.type.properties)) {
						if(Type.isObject(variable.type.properties[name])) {
							return variable.type.properties[name];
						}
					}
					else {
						if(Type.isValue(__ks_0 = $variable.fromType(variable.type, node)) ? (variable = __ks_0, true) : false) {
							return $variable.filterMember(variable, name, node);
						}
					}
				}
			}
			else if(variable.kind === VariableKind.Variable) {
				$throw("Not implemented", node);
			}
			else {
				$throw("Not implemented", node);
			}
			return null;
		},
		filterType: function(variable, name, node) {
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(Type.isValue(variable.type)) {
				if(variable.type.properties) {
					if(Type.isObject(variable.type.properties[name])) {
						return variable.type.properties[name];
					}
				}
				else if(variable.type.typeName) {
					var __ks_0;
					if(Type.isValue(__ks_0 = $variable.fromType(variable.type, node)) ? (variable = __ks_0, true) : false) {
						return $variable.filterMember(variable, name, node);
					}
				}
				else if(variable.type.types) {
					var variables = [];
					for(var __ks_0 = 0, __ks_1 = variable.type.types.length, type; __ks_0 < __ks_1; ++__ks_0) {
						type = variable.type.types[__ks_0];
						var v, __ks_2, __ks_3;
						if(!((Type.isValue(__ks_2 = $variable.fromType(type, node)) ? (v = __ks_2, true) : false) && (Type.isValue(__ks_3 = $variable.filterMember(v, name, node)) ? (v = __ks_3, true) : false))) {
							return null;
						}
						$variable.push(variables, v);
					}
					if(variables.length === 1) {
						return variables[0];
					}
					if(variables.length > 0) {
						return variables;
					}
				}
				else {
					$throw("Not implemented", node);
				}
			}
			return null;
		},
		fromAST: function(data, node) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			var __ks_0 = data.kind;
			if(__ks_0 === Kind.ArrayComprehension || __ks_0 === Kind.ArrayExpression || __ks_0 === Kind.ArrayRange) {
				return {
					kind: VariableKind.Variable,
					type: {
						kind: Kind.TypeReference,
						typeName: {
							kind: Kind.Identifier,
							name: "Array"
						}
					}
				};
			}
			else if(__ks_0 === Kind.BinaryOperator) {
				if(data.operator.kind === BinaryOperator.TypeCasting) {
					return {
						kind: VariableKind.Variable,
						type: data.right
					};
				}
				else if($operator.binaries[data.operator.kind]) {
					return {
						kind: VariableKind.Variable,
						type: {
							kind: Kind.TypeReference,
							typeName: {
								kind: Kind.Identifier,
								name: "Boolean"
							}
						}
					};
				}
				else if($operator.lefts[data.operator.kind]) {
					var type = $type.type(data.left, node.scope(), node);
					if(type) {
						return {
							kind: VariableKind.Variable,
							type: type
						};
					}
				}
				else if($operator.numerics[data.operator.kind]) {
					return {
						kind: VariableKind.Variable,
						type: {
							kind: Kind.TypeReference,
							typeName: {
								kind: Kind.Identifier,
								name: "Number"
							}
						}
					};
				}
			}
			else if(__ks_0 === Kind.CallExpression) {
				var variable = $variable.fromAST(data.callee, node);
				if(Type.isValue(variable)) {
					if(variable.kind === VariableKind.Class) {
						return {
							kind: VariableKind.Variable,
							type: {
								kind: Kind.TypeReference,
								typeName: $identifier(variable.name)
							}
						};
					}
					else if((variable.kind === VariableKind.Function) || (variable.kind === VariableKind.Variable)) {
						if(Type.isValue(variable.type)) {
							return {
								kind: VariableKind.Variable,
								type: variable.type
							};
						}
					}
					else {
						$throw("Not implemented", node);
					}
				}
			}
			else if(__ks_0 === Kind.CreateExpression) {
				var variable, __ks_1;
				if(Type.isValue(__ks_1 = $variable.fromAST(data.class, node)) ? (variable = __ks_1, true) : false) {
					return {
						kind: VariableKind.Variable,
						type: {
							kind: Kind.TypeReference,
							typeName: $identifier(variable.name)
						}
					};
				}
			}
			else if(__ks_0 === Kind.FunctionExpression) {
				return {
					kind: VariableKind.Variable,
					type: {
						kind: Kind.TypeReference,
						typeName: {
							kind: Kind.Identifier,
							name: "Function"
						}
					}
				};
			}
			else if(__ks_0 === Kind.Identifier) {
				if(Type.isString($literalTypes[data.name])) {
					return {
						kind: VariableKind.Variable,
						type: {
							kind: Kind.TypeReference,
							typeName: {
								kind: Kind.Identifier,
								name: $literalTypes[data.name]
							}
						}
					};
				}
				else {
					return node.scope().getVariable(data.name);
				}
			}
			else if(__ks_0 === Kind.LambdaExpression) {
				return {
					kind: VariableKind.Variable,
					type: {
						kind: Kind.TypeReference,
						typeName: {
							kind: Kind.Identifier,
							name: "Function"
						}
					}
				};
			}
			else if(__ks_0 === Kind.Literal) {
				return {
					kind: VariableKind.Variable,
					type: {
						kind: Kind.TypeReference,
						typeName: {
							kind: Kind.Identifier,
							name: "String"
						}
					}
				};
			}
			else if(__ks_0 === Kind.MemberExpression) {
				var variable = $variable.fromAST(data.object, node);
				if(Type.isValue(variable)) {
					if(variable.kind === VariableKind.TypeAlias) {
						variable = $variable.fromType($type.unalias(variable.type, node.scope()), node);
					}
					if(data.computed) {
						if(Type.isValue(variable.type) && (Type.isValue(__ks_1 = $variable.fromType(variable.type, node)) ? (variable = __ks_1, true) : false)) {
							if(Type.isValue(variable.type) && (Type.isValue(__ks_1 = $variable.fromType(variable.type, node)) ? (variable = __ks_1, true) : false)) {
								return {
									kind: VariableKind.Variable,
									type: {
										kind: Kind.TypeReference,
										typeName: $identifier(variable.name)
									}
								};
							}
						}
					}
					else {
						var name = data.property.name;
						if(variable.kind === VariableKind.Class) {
							if(data.object.kind === Kind.Identifier) {
								if(Type.isValue(variable.classMethods[name])) {
									var variables = [];
									for(var __ks_1 = 0, __ks_2 = variable.classMethods[name].length, method; __ks_1 < __ks_2; ++__ks_1) {
										method = variable.classMethods[name][__ks_1];
										if(Type.isValue(method.type) && Type.isValue(method.type.typeName)) {
											$variable.push(variables, {
												kind: VariableKind.Variable,
												type: {
													kind: Kind.TypeReference,
													typeName: method.type.typeName
												}
											});
										}
										else {
											return null;
										}
									}
									if(variables.length === 1) {
										return variables[0];
									}
									if(variables.length > 0) {
										return variables;
									}
								}
								else if(Type.isValue(variable.classVariables[name])) {
									if(Type.isValue(variable.classVariables[name].type)) {
										return $variable.fromReflectType(variable.classVariables[name].type, node);
									}
								}
							}
							else {
								return $variable.filterMember(variable, name, node);
							}
						}
						else {
							return $variable.filterType(variable, name, node);
						}
					}
				}
			}
			else if(__ks_0 === Kind.NumericExpression) {
				return {
					kind: VariableKind.Variable,
					type: {
						kind: Kind.TypeReference,
						typeName: {
							kind: Kind.Identifier,
							name: "Number"
						}
					}
				};
			}
			else if(__ks_0 === Kind.ObjectExpression) {
				return {
					kind: VariableKind.Variable,
					type: {
						kind: Kind.TypeReference,
						typeName: {
							kind: Kind.Identifier,
							name: "Object"
						}
					}
				};
			}
			else if(__ks_0 === Kind.TernaryConditionalExpression) {
				var a = $type.type(data.then, node.scope(), node);
				var b = $type.type(data.else, node.scope(), node);
				if(a && b && $type.same(a, b)) {
					return {
						kind: VariableKind.Variable,
						type: a
					};
				}
			}
			else if(__ks_0 === Kind.TemplateExpression) {
				return {
					kind: VariableKind.Variable,
					type: {
						kind: Kind.TypeReference,
						typeName: {
							kind: Kind.Identifier,
							name: "String"
						}
					}
				};
			}
			else if(__ks_0 === Kind.TypeReference) {
				if(data.typeName) {
					return node.scope().getVariable($types[data.typeName.name] || data.typeName.name);
				}
			}
			return null;
		},
		fromType: function(data, node) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(Type.isValue(data.typeName)) {
				if(data.typeName.kind === Kind.Identifier) {
					var name = $types[data.typeName.name] || data.typeName.name;
					var variable = node.scope().getVariable(name);
					if(variable) {
						return variable;
					}
					if((name = $defaultTypes[name])) {
						variable = {
							name: name,
							kind: VariableKind.Class,
							constructors: [],
							instanceVariables: {},
							classVariables: {},
							instanceMethods: {},
							classMethods: {}
						};
						if(data.typeParameters && (data.typeParameters.length === 1)) {
							variable.type = data.typeParameters[0];
						}
						return variable;
					}
				}
				else {
					var variable = $variable.fromAST(data.typeName.object, node);
					if(variable && (variable.kind === VariableKind.Variable) && variable.type && variable.type.properties) {
						var name = data.typeName.property.name;
						var property = variable.type.properties[name];
						if(Type.isObject(property)) {
							property.accessPath = (variable.accessPath || variable.name.name) + ".";
							return property;
						}
					}
					else {
						$throw("Not implemented", node);
					}
				}
			}
			return null;
		},
		fromReflectType: function(type, node) {
			if(type === undefined || type === null) {
				throw new Error("Missing parameter 'type'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(type === "Any") {
				return null;
			}
			else if(Type.isString(type)) {
				return node.scope().getVariable(type);
			}
			else {
				$throw("Not implemented", node);
			}
		},
		kind: function(type) {
			if(type === undefined) {
				type = null;
			}
			if(type) {
				var __ks_0 = type.kind;
				if(__ks_0 === Kind.TypeReference) {
					if(type.typeName) {
						if(type.typeName.kind === Kind.Identifier) {
							var name = $types[type.typeName.name] || type.typeName.name;
							return $typekinds[name] || VariableKind.Variable;
						}
					}
				}
			}
			return VariableKind.Variable;
		},
		merge: function(variable, importedVariable) {
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			if(importedVariable === undefined || importedVariable === null) {
				throw new Error("Missing parameter 'importedVariable'");
			}
			if(variable.kind === VariableKind.Class) {
				__ks_Array._cm_merge(variable.constructors, importedVariable.constructors);
				__ks_Object._cm_merge(variable.instanceVariables, importedVariable.instanceVariables);
				__ks_Object._cm_merge(variable.classVariables, importedVariable.classVariables);
				__ks_Object._cm_merge(variable.instanceMethods, importedVariable.instanceMethods);
				__ks_Object._cm_merge(variable.classMethods, importedVariable.classMethods);
				__ks_Object._cm_merge(variable.sealed.instanceMethods, importedVariable.sealed.instanceMethods);
				__ks_Object._cm_merge(variable.sealed.classMethods, importedVariable.sealed.classMethods);
			}
			return variable;
		},
		push: function(variables, variable) {
			if(variables === undefined || variables === null) {
				throw new Error("Missing parameter 'variables'");
			}
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			var nf = true;
			if(variable.kind === VariableKind.Variable) {
				if(Type.isValue(variable.type)) {
					for(var __ks_0 = 0, __ks_1 = variables.length, v; nf && __ks_0 < __ks_1; ++__ks_0) {
						v = variables[__ks_0];
						if((v.kind === VariableKind.Variable) && Type.isValue(v.type) && $type.same(variable.type, v.type)) {
							nf = false;
						}
					}
				}
			}
			else {
				$throw("Not implemented");
			}
			if(nf) {
				variables.push(variable);
			}
		},
		scope: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			return (node._options.format.variables === "es5") ? "var " : "let ";
		},
		value: function(variable, data) {
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(variable.kind === VariableKind.Enum) {
				if(variable.type === "number") {
					if(data.value) {
						variable.counter = $toInt(data.value, variable.counter);
					}
					else {
						++variable.counter;
					}
					return variable.counter;
				}
				else if(variable.type === "string") {
					return $quote(data.name.name.toLowerCase());
				}
			}
			return "";
		}
	};
	var AbstractNode = Helper.class({
		$name: "AbstractNode",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._parent = null;
			this._scope = null;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			var parent = arguments[++__ks_i];
			if(arguments.length > 2) {
				var scope = arguments[++__ks_i];
			}
			else {
				var scope = parent.scope();
			}
			this._data = data;
			this._parent = parent;
			this._scope = scope;
			this._options = $attribute.apply(data, parent._options);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				AbstractNode.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		},
		__ks_func_directory_0: function() {
			return this._parent.directory();
		},
		directory: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_directory_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_file_0: function() {
			return this._parent.file();
		},
		file: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_file_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_greatParent_0: function() {
			return Type.isValue(this._parent) ? this._parent._parent : undefined;
		},
		greatParent: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_greatParent_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_greatScope_0: function() {
			return Type.isValue(this._parent) ? this._parent._scope : undefined;
		},
		greatScope: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_greatScope_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_module_0: function() {
			return this._parent.module();
		},
		module: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_module_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newScope_0: function() {
			if(this._options.format.variables === "es6") {
				return new Scope(this._scope);
			}
			else {
				return new XScope(this._scope);
			}
		},
		__ks_func_newScope_1: function(scope) {
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			if(this._options.format.variables === "es6") {
				return new Scope(scope);
			}
			else {
				return new XScope(scope);
			}
		},
		newScope: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_newScope_0.apply(this);
			}
			else if(arguments.length === 1) {
				return AbstractNode.prototype.__ks_func_newScope_1.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_parent_0: function() {
			return this._parent;
		},
		parent: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_parent_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_reference_0: function() {
			if(Type.isValue(this._parent) && Type.isValue(this._parent.reference())) {
				return this._parent.reference() + this._reference;
			}
			else {
				return this._reference;
			}
		},
		__ks_func_reference_1: function(reference) {
			if(reference === undefined || reference === null) {
				throw new Error("Missing parameter 'reference'");
			}
			this._reference = reference;
		},
		reference: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_reference_0.apply(this);
			}
			else if(arguments.length === 1) {
				return AbstractNode.prototype.__ks_func_reference_1.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_scope_0: function() {
			return this._scope;
		},
		scope: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_scope_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_statement_0: function() {
			return Type.isValue(this._parent) ? this._parent.statement() : undefined;
		},
		statement: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_statement_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AbstractNode.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_data: {
				access: 1,
				type: "Any"
			},
			_options: {
				access: 1,
				type: "Any"
			},
			_parent: {
				access: 1,
				type: "Any"
			},
			_reference: {
				access: 1,
				type: "Any"
			},
			_scope: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			directory: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			file: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			greatParent: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			greatScope: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			module: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			newScope: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				},
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			parent: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			reference: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				},
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			scope: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			statement: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			]
		},
		classMethods: {}
	};
	function $clone(value) {
		if(value === undefined) {
			value = null;
		}
		if(value === null) {
			return null;
		}
		else if(Type.isArray(value)) {
			return __ks_Array._im_clone(value);
		}
		else if(Type.isObject(value)) {
			return __ks_Object._cm_clone(value);
		}
		else {
			return value;
		}
	}
	var $merge = {
		merge: function(source, key, value) {
			if(source === undefined || source === null) {
				throw new Error("Missing parameter 'source'");
			}
			if(key === undefined || key === null) {
				throw new Error("Missing parameter 'key'");
			}
			if(value === undefined || value === null) {
				throw new Error("Missing parameter 'value'");
			}
			if(Type.isArray(value)) {
				source[key] = __ks_Array._im_clone(value);
			}
			else if(Type.isObject(value)) {
				if(Type.isObject(source[key])) {
					$merge.object(source[key], value);
				}
				else {
					source[key] = $clone(value);
				}
			}
			else {
				source[key] = value;
			}
			return source;
		},
		object: function(source, current) {
			if(source === undefined || source === null) {
				throw new Error("Missing parameter 'source'");
			}
			if(current === undefined || current === null) {
				throw new Error("Missing parameter 'current'");
			}
			for(var key in current) {
				if(source[key]) {
					$merge.merge(source, key, current[key]);
				}
				else {
					source[key] = current[key];
				}
			}
		}
	};
	var __ks_Array = {};
	var __ks_Object = {};
	Helper.newInstanceMethod({
		class: Array,
		name: "append",
		sealed: __ks_Array,
		function: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var l, i, j, arg;
			for(var k = 0, __ks_0 = args.length; k < __ks_0; ++k) {
				arg = __ks_Array._cm_from(args[k]);
				if((l = arg.length) > 50000) {
					i = 0;
					j = 50000;
					while(i < l) {
						this.push.apply(this, [].concat(arg.slice(i, j)));
						i = j;
						j += 50000;
					}
				}
				else {
					this.push.apply(this, [].concat(arg));
				}
			}
			return this;
		},
		signature: {
			access: 3,
			min: 1,
			max: Infinity,
			parameters: [
				{
					type: "Any",
					min: 1,
					max: Infinity
				}
			]
		}
	});
	Helper.newInstanceMethod({
		class: Array,
		name: "appendUniq",
		sealed: __ks_Array,
		function: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			if(args.length === 1) {
				__ks_Array._im_pushUniq.apply(__ks_Array, [this].concat(args[0]));
			}
			else {
				for(var i = 0, __ks_0 = args.length; i < __ks_0; ++i) {
					__ks_Array._im_pushUniq.apply(__ks_Array, [this].concat(args[i]));
				}
			}
			return this;
		},
		signature: {
			access: 3,
			min: 1,
			max: Infinity,
			parameters: [
				{
					type: "Any",
					min: 1,
					max: Infinity
				}
			]
		}
	});
	Helper.newInstanceMethod({
		class: Array,
		name: "clone",
		sealed: __ks_Array,
		function: function() {
			var i = this.length;
			var clone = new Array(i);
			while(i) {
				clone[--i] = $clone(this[i]);
			}
			return clone;
		},
		signature: {
			access: 3,
			min: 0,
			max: 0,
			parameters: []
		}
	});
	Helper.newInstanceMethod({
		class: Array,
		name: "contains",
		sealed: __ks_Array,
		function: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var item = arguments[++__ks_i];
			if(arguments.length > 1) {
				var from = arguments[++__ks_i];
			}
			else {
				var from = 0;
			}
			return this.indexOf(item, from) !== -1;
		},
		signature: {
			access: 3,
			min: 1,
			max: 2,
			parameters: [
				{
					type: "Any",
					min: 1,
					max: 2
				}
			]
		}
	});
	Helper.newClassMethod({
		class: Array,
		name: "from",
		sealed: __ks_Array,
		function: function(item) {
			if(item === undefined || item === null) {
				throw new Error("Missing parameter 'item'");
			}
			if(Type.isEnumerable(item) && !Type.isString(item)) {
				return Type.isArray(item) ? item : Array.prototype.slice.call(item);
			}
			else {
				return [item];
			}
		},
		signature: {
			access: 3,
			min: 1,
			max: 1,
			parameters: [
				{
					type: "Any",
					min: 1,
					max: 1
				}
			]
		}
	});
	Helper.newInstanceMethod({
		class: Array,
		name: "last",
		sealed: __ks_Array,
		function: function(index) {
			if(index === undefined || index === null) {
				index = 1;
			}
			return this.length ? this[this.length - index] : null;
		},
		signature: {
			access: 3,
			min: 0,
			max: 1,
			parameters: [
				{
					type: "Any",
					min: 0,
					max: 1
				}
			]
		}
	});
	Helper.newClassMethod({
		class: Array,
		name: "merge",
		sealed: __ks_Array,
		function: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var source;
			var i = 0;
			var l = args.length;
			while((i < l) && !((Type.isValue(args[i]) ? (source = args[i], true) : false) && Type.isArray(source))) {
				++i;
			}
			++i;
			while(i < l) {
				if(Type.isArray(args[i])) {
					for(var value in args[i]) {
						source.pushUniq(value);
					}
				}
				++i;
			}
			return source;
		},
		signature: {
			access: 3,
			min: 1,
			max: Infinity,
			parameters: [
				{
					type: "Any",
					min: 1,
					max: Infinity
				}
			]
		}
	});
	Helper.newInstanceMethod({
		class: Array,
		name: "pushUniq",
		sealed: __ks_Array,
		function: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			if(args.length === 1) {
				if(!__ks_Array._im_contains(this, args[0])) {
					this.push(args[0]);
				}
			}
			else {
				for(var __ks_0 = 0, __ks_1 = args.length, item; __ks_0 < __ks_1; ++__ks_0) {
					item = args[__ks_0];
					if(!__ks_Array._im_contains(this, item)) {
						this.push(item);
					}
				}
			}
			return this;
		},
		signature: {
			access: 3,
			min: 1,
			max: Infinity,
			parameters: [
				{
					type: "Any",
					min: 1,
					max: Infinity
				}
			]
		}
	});
	Helper.newClassMethod({
		class: Object,
		name: "clone",
		sealed: __ks_Object,
		function: function(object) {
			if(object === undefined || object === null) {
				throw new Error("Missing parameter 'object'");
			}
			if(Type.isFunction(object.constructor.clone) && (object.constructor.clone !== this)) {
				return object.constructor.clone(object);
			}
			if(Type.isFunction(object.constructor.prototype.clone)) {
				return object.clone();
			}
			var clone = {};
			for(var key in object) {
				var value = object[key];
				clone[key] = $clone(value);
			}
			return clone;
		},
		signature: {
			access: 3,
			min: 1,
			max: 1,
			parameters: [
				{
					type: "Any",
					min: 1,
					max: 1
				}
			]
		}
	});
	Helper.newClassMethod({
		class: Object,
		name: "defaults",
		sealed: __ks_Object,
		function: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			return __ks_Object._cm_merge.apply(__ks_Object, [].concat({}, args));
		},
		signature: {
			access: 3,
			min: 1,
			max: Infinity,
			parameters: [
				{
					type: "Any",
					min: 1,
					max: Infinity
				}
			]
		}
	});
	Helper.newClassMethod({
		class: Object,
		name: "isEmpty",
		sealed: __ks_Object,
		function: function(item) {
			if(item === undefined || item === null) {
				throw new Error("Missing parameter 'item'");
			}
			for(var key in item) {
				if(item.hasOwnProperty(key)) {
					return false;
				}
			}
			return true;
		},
		signature: {
			access: 3,
			min: 1,
			max: 1,
			parameters: [
				{
					type: "Any",
					min: 1,
					max: 1
				}
			]
		}
	});
	Helper.newClassMethod({
		class: Object,
		name: "merge",
		sealed: __ks_Object,
		function: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var source;
			var i = 0;
			var l = args.length;
			while((i < l) && !((Type.isValue(args[i]) ? (source = args[i], true) : false) && Type.isObject(source))) {
				++i;
			}
			++i;
			while(i < l) {
				if(Type.isObject(args[i])) {
					for(var key in args[i]) {
						var value = args[i][key];
						$merge.merge(source, key, value);
					}
				}
				++i;
			}
			return source;
		},
		signature: {
			access: 3,
			min: 1,
			max: Infinity,
			parameters: [
				{
					type: "Any",
					min: 1,
					max: Infinity
				}
			]
		}
	});
	var $indentations = [];
	var CodeFragment = Helper.class({
		$name: "CodeFragment",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this.end = null;
			this.start = null;
		},
		__ks_init: function() {
			CodeFragment.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(code) {
			if(code === undefined || code === null) {
				throw new Error("Missing parameter 'code'");
			}
			this.code = code;
		},
		__ks_cons_1: function(code, start, end) {
			if(code === undefined || code === null) {
				throw new Error("Missing parameter 'code'");
			}
			if(start === undefined || start === null) {
				throw new Error("Missing parameter 'start'");
			}
			if(end === undefined || end === null) {
				throw new Error("Missing parameter 'end'");
			}
			this.code = code;
			this.start = start;
			this.end = end;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				CodeFragment.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 3) {
				CodeFragment.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		},
		__ks_func_toString_0: function() {
			if(Type.isValue(this._start)) {
				return this._code + ": " + $locationDataToString(this._location);
			}
			else {
				return this.code;
			}
		},
		toString: function() {
			if(arguments.length === 0) {
				return CodeFragment.prototype.__ks_func_toString_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	CodeFragment.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 1,
				max: 1,
				parameters: [
					{
						type: "Any",
						min: 1,
						max: 1
					}
				]
			},
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			end: {
				access: 1,
				type: "Any"
			},
			code: {
				access: 1,
				type: "Any"
			},
			start: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			toString: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			]
		},
		classMethods: {}
	};
	function $code(code) {
		if(code === undefined || code === null) {
			throw new Error("Missing parameter 'code'");
		}
		return new CodeFragment(code);
	}
	function $codeLoc(code, start, end) {
		if(code === undefined || code === null) {
			throw new Error("Missing parameter 'code'");
		}
		if(start === undefined || start === null) {
			throw new Error("Missing parameter 'start'");
		}
		if(end === undefined || end === null) {
			throw new Error("Missing parameter 'end'");
		}
		return new CodeFragment(code, start, end);
	}
	function $fragmentsToText(fragments) {
		if(fragments === undefined || fragments === null) {
			throw new Error("Missing parameter 'fragments'");
		}
		return Helper.mapArray(fragments, function(fragment) {
			return fragment.code;
		}).join("");
	}
	function $indent(indent) {
		if(indent === undefined || indent === null) {
			throw new Error("Missing parameter 'indent'");
		}
		return Type.isValue($indentations[indent]) ? $indentations[indent] : ($indentations[indent] = $code("\t".repeat(indent)));
	}
	function $locationDataToString(location) {
		if(location === undefined) {
			location = null;
		}
		if(Type.isValue(location)) {
			return location.first_line + 1 + ":" + location.first_column + 1 + "-" + location.last_line + 1 + ":" + location.last_column + 1;
		}
		else {
			return "No location data";
		}
	}
	function $quote(value) {
		if(value === undefined || value === null) {
			throw new Error("Missing parameter 'value'");
		}
		return "\"" + value.replace(/"/g, "\\\"") + "\"";
	}
	var $comma = $code(", ");
	var $dot = $code(".");
	var $equals = $code(" = ");
	var $space = $code(" ");
	var $terminator = $code(";\n");
	var FragmentBuilder = Helper.class({
		$name: "FragmentBuilder",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._arrays = {};
			this._blocks = {};
			this._expressions = {};
			this._fragments = [];
			this._lines = {};
			this._objects = {};
		},
		__ks_init: function() {
			FragmentBuilder.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(indent) {
			if(indent === undefined || indent === null) {
				throw new Error("Missing parameter 'indent'");
			}
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				FragmentBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var line = LineBuilder.create(this, this._indent);
			if((args.length === 1) && Type.isObject(args[0])) {
				line.compile(args[0]);
			}
			else {
				line.code.apply(line, args);
			}
			line.done();
			return this;
		},
		line: function() {
			return FragmentBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			return new ControlBuilder(this, this._indent);
		},
		newControl: function() {
			if(arguments.length === 0) {
				return FragmentBuilder.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			return LineBuilder.create(this, this._indent);
		},
		newLine: function() {
			if(arguments.length === 0) {
				return FragmentBuilder.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toArray_0: function() {
			return this._fragments;
		},
		toArray: function() {
			if(arguments.length === 0) {
				return FragmentBuilder.prototype.__ks_func_toArray_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	FragmentBuilder.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 1,
				max: 1,
				parameters: [
					{
						type: "Any",
						min: 1,
						max: 1
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_arrays: {
				access: 1,
				type: "Any"
			},
			_blocks: {
				access: 1,
				type: "Any"
			},
			_expressions: {
				access: 1,
				type: "Any"
			},
			_fragments: {
				access: 1,
				type: "Any"
			},
			_indent: {
				access: 1,
				type: "Any"
			},
			_lines: {
				access: 1,
				type: "Any"
			},
			_objects: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			line: [
				{
					access: 3,
					min: 1,
					max: Infinity,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: Infinity
						}
					]
				}
			],
			newControl: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			newLine: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toArray: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			]
		},
		classMethods: {}
	};
	var ControlBuilder = Helper.class({
		$name: "ControlBuilder",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._firstStep = true;
		},
		__ks_init: function() {
			ControlBuilder.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var builder = arguments[++__ks_i];
			var indent = arguments[++__ks_i];
			if(arguments.length > 2) {
				var addLastNewLine = arguments[++__ks_i];
			}
			else {
				var addLastNewLine = true;
			}
			this._builder = builder;
			this._indent = indent;
			this._addLastNewLine = addLastNewLine;
			this._step = ExpressionBuilder.create(this._builder, this._indent);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				ControlBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		},
		__ks_func_code_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			this._step.code.apply(this._step, args);
			return this;
		},
		code: function() {
			return ControlBuilder.prototype.__ks_func_code_0.apply(this, arguments);
		},
		__ks_func_compile_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(arguments.length > 1) {
				var mode = arguments[++__ks_i];
			}
			else {
				var mode = Mode.None;
			}
			this._step.compile(node, mode);
			return this;
		},
		compile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ControlBuilder.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_compileBoolean_0: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			this._step.compileBoolean(node);
			return this;
		},
		compileBoolean: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_compileBoolean_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_compileNullable_0: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			this._step.compileNullable(node);
			return this;
		},
		compileNullable: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_compileNullable_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_done_0: function() {
			this._step.done();
			if(this._addLastNewLine) {
				this._builder._fragments.push(new CodeFragment("\n"));
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ControlBuilder.prototype.__ks_func_done_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isFirstStep_0: function() {
			return this._firstStep;
		},
		isFirstStep: function() {
			if(arguments.length === 0) {
				return ControlBuilder.prototype.__ks_func_isFirstStep_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			this._step.line.apply(this._step, args);
			return this;
		},
		line: function() {
			return ControlBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			return this._step.newControl();
		},
		newControl: function() {
			if(arguments.length === 0) {
				return ControlBuilder.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			return this._step.newLine();
		},
		newLine: function() {
			if(arguments.length === 0) {
				return ControlBuilder.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_step_0: function() {
			this._step.done();
			if(Type.is(this._step, ExpressionBuilder)) {
				this._step = BlockBuilder.create(this._builder, this._indent);
			}
			else {
				if(this._addLastNewLine) {
					this._builder._fragments.push(new CodeFragment("\n"));
				}
				this._step = ExpressionBuilder.create(this._builder, this._indent);
			}
			if(this._firstStep) {
				this._firstStep = false;
			}
			return this;
		},
		step: function() {
			if(arguments.length === 0) {
				return ControlBuilder.prototype.__ks_func_step_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_wrap_0: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			this._step.wrap(node);
			return this;
		},
		wrap: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_wrap_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_wrapBoolean_0: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			this._step.wrapBoolean(node);
			return this;
		},
		wrapBoolean: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_wrapBoolean_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_wrapNullable_0: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			this._step.wrapNullable(node);
			return this;
		},
		wrapNullable: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_wrapNullable_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ControlBuilder.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_addLastNewLine: {
				access: 1,
				type: "Any"
			},
			_builder: {
				access: 1,
				type: "Any"
			},
			_firstStep: {
				access: 1,
				type: "Any"
			},
			_indent: {
				access: 1,
				type: "Any"
			},
			_step: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			code: [
				{
					access: 3,
					min: 1,
					max: Infinity,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: Infinity
						}
					]
				}
			],
			compile: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			compileBoolean: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			compileNullable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			done: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isFirstStep: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			line: [
				{
					access: 3,
					min: 1,
					max: Infinity,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: Infinity
						}
					]
				}
			],
			newControl: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			newLine: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			step: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			wrap: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			wrapBoolean: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			wrapNullable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BlockBuilder = Helper.class({
		$name: "BlockBuilder",
		$static: {
			__ks_sttc_create_0: function(builder, indent) {
				if(builder === undefined || builder === null) {
					throw new Error("Missing parameter 'builder'");
				}
				if(indent === undefined || indent === null) {
					throw new Error("Missing parameter 'indent'");
				}
				if(!Type.isValue(builder._blocks[indent])) {
					builder._blocks[indent] = new BlockBuilder(builder, indent);
				}
				return builder._blocks[indent].init();
			},
			create: function() {
				if(arguments.length === 2) {
					return BlockBuilder.__ks_sttc_create_0.apply(this, arguments);
				}
				throw new Error("Wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(builder, indent) {
			if(builder === undefined || builder === null) {
				throw new Error("Missing parameter 'builder'");
			}
			if(indent === undefined || indent === null) {
				throw new Error("Missing parameter 'indent'");
			}
			this._builder = builder;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				BlockBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		},
		__ks_func_compile_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(arguments.length > 1) {
				var mode = arguments[++__ks_i];
			}
			else {
				var mode = Mode.None;
			}
			if(Type.isObject(node)) {
				node.toFragments(this, mode);
			}
			else {
				this._builder._fragments.push(new CodeFragment(node));
			}
			return this;
		},
		compile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return BlockBuilder.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_done_0: function() {
			this._builder._fragments.push($indent(this._indent), new CodeFragment("}"));
		},
		done: function() {
			if(arguments.length === 0) {
				return BlockBuilder.prototype.__ks_func_done_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._builder._fragments.push(new CodeFragment(" {\n"));
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return BlockBuilder.prototype.__ks_func_init_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var line = LineBuilder.create(this._builder, this._indent + 1);
			if((args.length === 1) && Type.isObject(args[0])) {
				line.compile(args[0]);
			}
			else {
				line.code.apply(line, args);
			}
			line.done();
			return this;
		},
		line: function() {
			return BlockBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function(indent) {
			if(indent === undefined || indent === null) {
				indent = this._indent + 1;
			}
			return new ControlBuilder(this._builder, indent);
		},
		newControl: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return BlockBuilder.prototype.__ks_func_newControl_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newLine_0: function(indent) {
			if(indent === undefined || indent === null) {
				indent = this._indent + 1;
			}
			return LineBuilder.create(this._builder, indent);
		},
		newLine: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return BlockBuilder.prototype.__ks_func_newLine_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BlockBuilder.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_builder: {
				access: 1,
				type: "Any"
			},
			_indent: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			compile: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			done: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			init: [
				{
					access: 1,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			line: [
				{
					access: 3,
					min: 1,
					max: Infinity,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: Infinity
						}
					]
				}
			],
			newControl: [
				{
					access: 3,
					min: 0,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 0,
							max: 1
						}
					]
				}
			],
			newLine: [
				{
					access: 3,
					min: 0,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 0,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {
			create: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		}
	};
	var ExpressionBuilder = Helper.class({
		$name: "ExpressionBuilder",
		$static: {
			__ks_sttc_create_0: function(builder, indent) {
				if(builder === undefined || builder === null) {
					throw new Error("Missing parameter 'builder'");
				}
				if(indent === undefined || indent === null) {
					throw new Error("Missing parameter 'indent'");
				}
				if(!Type.isValue(builder._expressions[indent])) {
					builder._expressions[indent] = new ExpressionBuilder(builder, indent);
				}
				return builder._expressions[indent].init();
			},
			create: function() {
				if(arguments.length === 2) {
					return ExpressionBuilder.__ks_sttc_create_0.apply(this, arguments);
				}
				throw new Error("Wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(builder, indent) {
			if(builder === undefined || builder === null) {
				throw new Error("Missing parameter 'builder'");
			}
			if(indent === undefined || indent === null) {
				throw new Error("Missing parameter 'indent'");
			}
			this._builder = builder;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ExpressionBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		},
		__ks_func_code_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var arg, data;
			for(var i = 0, __ks_0 = args.length; i < __ks_0; ++i) {
				arg = args[i];
				if(Type.isArray(arg)) {
					this.push.apply(this, [].concat(arg));
				}
				else if(Type.isObject(arg)) {
					this._builder._fragments.push(arg);
				}
				else {
					if(((i + 1) < args.length) && Type.isObject(data = args[i + 1]) && Type.isValue(data.kind)) {
						if(Type.isValue(data.start)) {
							this._builder._fragments.push(new CodeFragment(arg, data.start, data.end));
						}
						else {
							this._builder._fragments.push(new CodeFragment(arg));
						}
						i++;
					}
					else {
						this._builder._fragments.push(new CodeFragment(arg));
					}
				}
			}
			return this;
		},
		code: function() {
			return ExpressionBuilder.prototype.__ks_func_code_0.apply(this, arguments);
		},
		__ks_func_compile_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(arguments.length > 1) {
				var mode = arguments[++__ks_i];
			}
			else {
				var mode = Mode.None;
			}
			if(Type.isObject(node)) {
				node.toFragments(this, mode);
			}
			else {
				this._builder._fragments.push(new CodeFragment(node));
			}
			return this;
		},
		compile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_compileBoolean_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(arguments.length > 1) {
				var mode = arguments[++__ks_i];
			}
			else {
				var mode = Mode.None;
			}
			if(Type.isObject(node)) {
				node.toBooleanFragments(this, mode);
			}
			else {
				this._builder._fragments.push(new CodeFragment(node));
			}
			return this;
		},
		compileBoolean: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_compileBoolean_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_compileNullable_0: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(Type.isObject(node)) {
				node.toNullableFragments(this);
			}
			else {
				this._builder._fragments.push(new CodeFragment(node));
			}
			return this;
		},
		compileNullable: function() {
			if(arguments.length === 1) {
				return ExpressionBuilder.prototype.__ks_func_compileNullable_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_compileReusable_0: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(Type.isObject(node)) {
				node.toReusableFragments(this);
			}
			else {
				this._builder._fragments.push(new CodeFragment(node));
			}
			return this;
		},
		compileReusable: function() {
			if(arguments.length === 1) {
				return ExpressionBuilder.prototype.__ks_func_compileReusable_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_done_0: function(skipLastNewLine) {
			if(skipLastNewLine === undefined || skipLastNewLine === null) {
				skipLastNewLine = false;
			}
		},
		done: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionBuilder.prototype.__ks_func_done_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._builder._fragments.push($indent(this._indent));
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ExpressionBuilder.prototype.__ks_func_init_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newArray_0: function(indent) {
			if(indent === undefined || indent === null) {
				indent = this._indent;
			}
			return ArrayBuilder.create(this._builder, indent);
		},
		newArray: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionBuilder.prototype.__ks_func_newArray_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newBlock_0: function(indent) {
			if(indent === undefined || indent === null) {
				indent = this._indent;
			}
			return BlockBuilder.create(this._builder, indent);
		},
		newBlock: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionBuilder.prototype.__ks_func_newBlock_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newControl_0: function(indent) {
			if(indent === undefined || indent === null) {
				indent = this._indent + 1;
			}
			return new ControlBuilder(this._builder, indent);
		},
		newControl: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionBuilder.prototype.__ks_func_newControl_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newLine_0: function(indent) {
			if(indent === undefined || indent === null) {
				indent = this._indent + 1;
			}
			return LineBuilder.create(this._builder, indent);
		},
		newLine: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionBuilder.prototype.__ks_func_newLine_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newObject_0: function(indent) {
			if(indent === undefined || indent === null) {
				indent = this._indent;
			}
			return ObjectBuilder.create(this._builder, indent);
		},
		newObject: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionBuilder.prototype.__ks_func_newObject_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_wrap_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(arguments.length > 1) {
				var mode = arguments[++__ks_i];
			}
			else {
				var mode = Mode.None;
			}
			if(node.isComputed()) {
				this.code("(");
				node.toFragments(this, mode);
				this.code(")");
			}
			else {
				node.toFragments(this, mode);
			}
			return this;
		},
		wrap: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_wrap_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_wrapBoolean_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(arguments.length > 1) {
				var mode = arguments[++__ks_i];
			}
			else {
				var mode = Mode.None;
			}
			if(node.isBooleanComputed()) {
				this.code("(");
				node.toBooleanFragments(this, mode);
				this.code(")");
			}
			else {
				node.toBooleanFragments(this, mode);
			}
			return this;
		},
		wrapBoolean: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_wrapBoolean_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_wrapNullable_0: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(node.isNullableComputed()) {
				this.code("(");
				node.toNullableFragments(this);
				this.code(")");
			}
			else {
				node.toNullableFragments(this);
			}
			return this;
		},
		wrapNullable: function() {
			if(arguments.length === 1) {
				return ExpressionBuilder.prototype.__ks_func_wrapNullable_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ExpressionBuilder.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_builder: {
				access: 1,
				type: "Any"
			},
			_indent: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			code: [
				{
					access: 3,
					min: 1,
					max: Infinity,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: Infinity
						}
					]
				}
			],
			compile: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			compileBoolean: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			compileNullable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			compileReusable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			done: [
				{
					access: 3,
					min: 0,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 0,
							max: 1
						}
					]
				}
			],
			init: [
				{
					access: 1,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			newArray: [
				{
					access: 3,
					min: 0,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 0,
							max: 1
						}
					]
				}
			],
			newBlock: [
				{
					access: 3,
					min: 0,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 0,
							max: 1
						}
					]
				}
			],
			newControl: [
				{
					access: 3,
					min: 0,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 0,
							max: 1
						}
					]
				}
			],
			newLine: [
				{
					access: 3,
					min: 0,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 0,
							max: 1
						}
					]
				}
			],
			newObject: [
				{
					access: 3,
					min: 0,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 0,
							max: 1
						}
					]
				}
			],
			wrap: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			wrapBoolean: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			wrapNullable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {
			create: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		}
	};
	var LineBuilder = Helper.class({
		$name: "LineBuilder",
		$extends: ExpressionBuilder,
		$static: {
			__ks_sttc_create_0: function(builder, indent) {
				if(builder === undefined || builder === null) {
					throw new Error("Missing parameter 'builder'");
				}
				if(indent === undefined || indent === null) {
					throw new Error("Missing parameter 'indent'");
				}
				if(!Type.isValue(builder._lines[indent])) {
					builder._lines[indent] = new LineBuilder(builder, indent);
				}
				return builder._lines[indent].init();
			},
			create: function() {
				if(arguments.length === 2) {
					return LineBuilder.__ks_sttc_create_0.apply(this, arguments);
				}
				return ExpressionBuilder.create.apply(null, arguments);
			}
		},
		__ks_init: function() {
			ExpressionBuilder.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ExpressionBuilder.prototype.__ks_cons.call(this, args);
		},
		__ks_func_done_0: function() {
			this._builder._fragments.push($terminator);
		},
		done: function() {
			if(arguments.length === 0) {
				return LineBuilder.prototype.__ks_func_done_0.apply(this);
			}
			return ExpressionBuilder.prototype.done.apply(this, arguments);
		}
	});
	LineBuilder.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			done: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			]
		},
		classMethods: {
			create: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		}
	};
	var ObjectBuilder = Helper.class({
		$name: "ObjectBuilder",
		$static: {
			__ks_sttc_create_0: function(builder, indent) {
				if(builder === undefined || builder === null) {
					throw new Error("Missing parameter 'builder'");
				}
				if(indent === undefined || indent === null) {
					throw new Error("Missing parameter 'indent'");
				}
				if(!Type.isValue(builder._objects[indent])) {
					builder._objects[indent] = new ObjectBuilder(builder, indent);
				}
				return builder._objects[indent].init();
			},
			create: function() {
				if(arguments.length === 2) {
					return ObjectBuilder.__ks_sttc_create_0.apply(this, arguments);
				}
				throw new Error("Wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(builder, indent) {
			if(builder === undefined || builder === null) {
				throw new Error("Missing parameter 'builder'");
			}
			if(indent === undefined || indent === null) {
				throw new Error("Missing parameter 'indent'");
			}
			this._builder = builder;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ObjectBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		},
		__ks_func_done_0: function() {
			if(Type.isValue(this._line)) {
				this._line.done();
				this._line = null;
				this._builder._fragments.push(new CodeFragment("\n"), $indent(this._indent), new CodeFragment("}"));
			}
			else {
				this._builder._fragments.push(new CodeFragment("}"));
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ObjectBuilder.prototype.__ks_func_done_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._line = null;
			this._builder._fragments.push(new CodeFragment("{"));
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ObjectBuilder.prototype.__ks_func_init_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var line = this.newLine();
			line.code.apply(line, args);
			return this;
		},
		line: function() {
			return ObjectBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			if(Type.isValue(this._line)) {
				this._line.done();
				this._builder._fragments.push(new CodeFragment(",\n"));
			}
			else {
				this._builder._fragments.push(new CodeFragment("\n"));
			}
			return this._line = new ControlBuilder(this._builder, this._indent + 1, false);
		},
		newControl: function() {
			if(arguments.length === 0) {
				return ObjectBuilder.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			if(Type.isValue(this._line)) {
				this._line.done();
				this._builder._fragments.push(new CodeFragment(",\n"));
			}
			else {
				this._builder._fragments.push(new CodeFragment("\n"));
			}
			return this._line = ExpressionBuilder.create(this._builder, this._indent + 1);
		},
		newLine: function() {
			if(arguments.length === 0) {
				return ObjectBuilder.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ObjectBuilder.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_builder: {
				access: 1,
				type: "Any"
			},
			_indent: {
				access: 1,
				type: "Any"
			},
			_line: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			done: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			init: [
				{
					access: 1,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			line: [
				{
					access: 3,
					min: 1,
					max: Infinity,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: Infinity
						}
					]
				}
			],
			newControl: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			newLine: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			]
		},
		classMethods: {
			create: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		}
	};
	var ArrayBuilder = Helper.class({
		$name: "ArrayBuilder",
		$static: {
			__ks_sttc_create_0: function(builder, indent) {
				if(builder === undefined || builder === null) {
					throw new Error("Missing parameter 'builder'");
				}
				if(indent === undefined || indent === null) {
					throw new Error("Missing parameter 'indent'");
				}
				if(!Type.isValue(builder._arrays[indent])) {
					builder._arrays[indent] = new ArrayBuilder(builder, indent);
				}
				return builder._arrays[indent].init();
			},
			create: function() {
				if(arguments.length === 2) {
					return ArrayBuilder.__ks_sttc_create_0.apply(this, arguments);
				}
				throw new Error("Wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(builder, indent) {
			if(builder === undefined || builder === null) {
				throw new Error("Missing parameter 'builder'");
			}
			if(indent === undefined || indent === null) {
				throw new Error("Missing parameter 'indent'");
			}
			this._builder = builder;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ArrayBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		},
		__ks_func_done_0: function() {
			if(Type.isValue(this._line)) {
				this._line.done();
				this._line = null;
				this._builder._fragments.push(new CodeFragment("\n"), $indent(this._indent), new CodeFragment("]"));
			}
			else {
				this._builder._fragments.push(new CodeFragment("]"));
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ArrayBuilder.prototype.__ks_func_done_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._line = null;
			this._builder._fragments.push(new CodeFragment("["));
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ArrayBuilder.prototype.__ks_func_init_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_0;
			(__ks_0 = this.newLine(), __ks_0.code).apply(__ks_0, args);
			return this;
		},
		line: function() {
			return ArrayBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			if(Type.isValue(this._line)) {
				this._line.done();
				this._builder._fragments.push(new CodeFragment(",\n"));
			}
			else {
				this._builder._fragments.push(new CodeFragment("\n"));
			}
			return this._line = new ControlBuilder(this._builder, this._indent + 1, false);
		},
		newControl: function() {
			if(arguments.length === 0) {
				return ArrayBuilder.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			if(Type.isValue(this._line)) {
				this._line.done();
				this._builder._fragments.push(new CodeFragment(",\n"));
			}
			else {
				this._builder._fragments.push(new CodeFragment("\n"));
			}
			return this._line = ExpressionBuilder.create(this._builder, this._indent + 1);
		},
		newLine: function() {
			if(arguments.length === 0) {
				return ArrayBuilder.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ArrayBuilder.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_builder: {
				access: 1,
				type: "Any"
			},
			_indent: {
				access: 1,
				type: "Any"
			},
			_line: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			done: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			init: [
				{
					access: 1,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			line: [
				{
					access: 3,
					min: 1,
					max: Infinity,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: Infinity
						}
					]
				}
			],
			newControl: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			newLine: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			]
		},
		classMethods: {
			create: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		}
	};
	var $keywords = {
		abstract: true,
		boolean: true,
		break: true,
		byte: true,
		case: true,
		catch: true,
		char: true,
		class: true,
		const: true,
		continue: true,
		debugger: true,
		default: true,
		delete: true,
		do: true,
		double: true,
		else: true,
		enum: true,
		export: true,
		extends: true,
		finally: true,
		float: true,
		for: true,
		function: true,
		goto: true,
		if: true,
		implements: true,
		import: true,
		in: true,
		instanceof: true,
		int: true,
		interface: true,
		long: true,
		native: true,
		new: true,
		package: true,
		private: true,
		protected: true,
		public: true,
		return: true,
		sealed: true,
		short: true,
		static: true,
		switch: true,
		synchronized: true,
		throw: true,
		throws: true,
		transient: true,
		try: true,
		typeof: true,
		var: true,
		void: true,
		volatile: true,
		while: true,
		with: true
	};
	var AbstractScope = Helper.class({
		$name: "AbstractScope",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._body = [];
			this._prepared = false;
			this._renamedIndexes = {};
			this._renamedVariables = {};
			this._variables = {};
		},
		__ks_init: function() {
			AbstractScope.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(parent) {
			if(parent === undefined || parent === null) {
				parent = null;
			}
			this._parent = parent;
		},
		__ks_cons: function(args) {
			if(args.length >= 0 && args.length <= 1) {
				AbstractScope.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		},
		__ks_func_addVariable_0: function(name, definition) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(definition === undefined || definition === null) {
				throw new Error("Missing parameter 'definition'");
			}
			if($keywords[name] === true) {
				var index = this._renamedIndexes[name] ? this._renamedIndexes[name] : 0;
				var newName = "__ks_" + name + "_" + ++index;
				while(this._variables[newName]) {
					newName = "__ks_" + name + "_" + ++index;
				}
				this._renamedIndexes[name] = index;
				this._renamedVariables[name] = newName;
			}
			this._variables[name] = definition;
			return this;
		},
		addVariable: function() {
			if(arguments.length === 2) {
				return AbstractScope.prototype.__ks_func_addVariable_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_getVariable_0: function(name) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(Type.isObject(this._variables[name])) {
				return this._variables[name];
			}
			else if(Type.isValue(this._parent)) {
				return this._parent.getVariable(name);
			}
			else {
				return null;
			}
		},
		getVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_getVariable_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_hasVariable_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(arguments.length > 1) {
				var lookAtParent = arguments[++__ks_i];
			}
			else {
				var lookAtParent = true;
			}
			return Type.isObject(this._variables[name]) || (lookAtParent && (Type.isValue(this._parent) ? this._parent.hasVariable(name) : false));
		},
		hasVariable: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return AbstractScope.prototype.__ks_func_hasVariable_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isDeclaredVariable_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(arguments.length > 1) {
				var lookAtParent = arguments[++__ks_i];
			}
			else {
				var lookAtParent = true;
			}
			return Type.isValue(this._variables[name]) || (lookAtParent && (Type.isValue(this._parent) ? this._parent.isDeclaredVariable(name) : false));
		},
		isDeclaredVariable: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return AbstractScope.prototype.__ks_func_isDeclaredVariable_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_parent_0: function() {
			return this._parent;
		},
		parent: function() {
			if(arguments.length === 0) {
				return AbstractScope.prototype.__ks_func_parent_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_removeVariable_0: function(name) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(Type.isObject(this._variables[name])) {
				this._variables[name] = false;
			}
			else {
				Type.isValue(this._parent) ? this._parent.removeVariable(name) : undefined;
			}
			return this;
		},
		removeVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_removeVariable_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_rename_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(arguments.length > 1) {
				var newName = arguments[++__ks_i];
			}
			else {
				var newName = this.newRenamedVariable(name);
			}
			if(newName !== name) {
				this._renamedVariables[name] = newName;
			}
			return this;
		},
		rename: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return AbstractScope.prototype.__ks_func_rename_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AbstractScope.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 0,
				max: 1,
				parameters: [
					{
						type: "Any",
						min: 0,
						max: 1
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Array"
			},
			_parent: {
				access: 1,
				type: "Any"
			},
			_prepared: {
				access: 1,
				type: "Any"
			},
			_renamedIndexes: {
				access: 1,
				type: "Any"
			},
			_renamedVariables: {
				access: 1,
				type: "Any"
			},
			_variables: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			addVariable: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			getVariable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			hasVariable: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			isDeclaredVariable: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			parent: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			removeVariable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			rename: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var Scope = Helper.class({
		$name: "Scope",
		$extends: AbstractScope,
		__ks_init_1: function() {
			this._tempNextIndex = 0;
			this._tempNames = {};
			this._tempParentNames = {};
		},
		__ks_init: function() {
			AbstractScope.prototype.__ks_init.call(this);
			Scope.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(parent) {
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			AbstractScope.prototype.__ks_cons.call(this, [parent]);
			while(Type.isValue(parent) && !Type.is(parent, Scope)) {
				parent = parent._parent;
			}
			if(Type.isValue(parent)) {
				this._scopeParent = parent;
				this._tempNextIndex = parent._tempNextIndex;
			}
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				Scope.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				AbstractScope.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_acquireTempName_0: function(statement) {
			if(statement === undefined) {
				statement = null;
			}
			if(statement !== null && !Type.is(statement, Statement)) {
				throw new Error("Invalid type for parameter 'statement'");
			}
			var name, __ks_0;
			if(Type.isValue(this._scopeParent) && Type.isValue(__ks_0 = this._scopeParent.acquireTempNameFromKid()) ? (name = __ks_0, true) : false) {
				this._tempParentNames[name] = true;
				return name;
			}
			for(name in this._tempNames) {
				if(this._tempNames[name]) {
					this._tempNames[name] = false;
					return name;
				}
			}
			while(this._tempParentNames[name = "__ks_" + this._tempNextIndex]) {
				++this._tempNextIndex;
			}
			++this._tempNextIndex;
			if(Type.isValue(statement)) {
				__ks_Array._im_pushUniq(statement._variables, name);
			}
			return name;
		},
		acquireTempName: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Scope.prototype.__ks_func_acquireTempName_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_acquireTempNameFromKid_0: function() {
			var name, __ks_0;
			if(Type.isValue(this._parent) && Type.isValue(__ks_0 = this._parent.acquireTempNameFromKid()) ? (name = __ks_0, true) : false) {
				return name;
			}
			for(name in this._tempNames) {
				if(this._tempNames[name]) {
					this._tempNames[name] = false;
					return name;
				}
			}
			return null;
		},
		acquireTempNameFromKid: function() {
			if(arguments.length === 0) {
				return Scope.prototype.__ks_func_acquireTempNameFromKid_0.apply(this);
			}
			else if(AbstractScope.prototype.acquireTempNameFromKid) {
				return AbstractScope.prototype.acquireTempNameFromKid.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_getRenamedVariable_0: function(name) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(Type.isString(this._renamedVariables[name])) {
				return this._renamedVariables[name];
			}
			else if(Type.isValue(this._scopeParent)) {
				return this._scopeParent.getRenamedVariable(name);
			}
			else {
				return name;
			}
		},
		getRenamedVariable: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_getRenamedVariable_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.getRenamedVariable) {
				return AbstractScope.prototype.getRenamedVariable.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newRenamedVariable_0: function(name) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(this._variables[name]) {
				var index = this._renamedIndexes[name] ? this._renamedIndexes[name] : 0;
				var newName = "__ks_" + name + "_" + ++index;
				while(this._variables[newName]) {
					newName = "__ks_" + name + "_" + ++index;
				}
				this._renamedIndexes[name] = index;
				return newName;
			}
			else {
				return name;
			}
		},
		newRenamedVariable: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_newRenamedVariable_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.newRenamedVariable) {
				return AbstractScope.prototype.newRenamedVariable.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_releaseTempName_0: function(name) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if((name.length > 5) && (name.substr(0, 5) === "__ks_")) {
				if(this._scopeParent && this._tempParentNames[name]) {
					this._scopeParent.releaseTempNameFromKid(name);
					this._tempParentNames[name] = false;
				}
				else {
					this._tempNames[name] = true;
				}
			}
			return this;
		},
		releaseTempName: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_releaseTempName_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.releaseTempName) {
				return AbstractScope.prototype.releaseTempName.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_releaseTempNameFromKid_0: function(name) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(this._parent && this._tempParentNames[name]) {
				this._parent.releaseTempNameFromKid(name);
				this._tempParentNames[name] = false;
			}
			else {
				this._tempNames[name] = true;
			}
		},
		releaseTempNameFromKid: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_releaseTempNameFromKid_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.releaseTempNameFromKid) {
				return AbstractScope.prototype.releaseTempNameFromKid.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_updateTempNames_0: function() {
			if(this._parent && (this._parent._tempNextIndex > this._tempNextIndex)) {
				this._tempNextIndex = this._parent._tempNextIndex;
			}
		},
		updateTempNames: function() {
			if(arguments.length === 0) {
				return Scope.prototype.__ks_func_updateTempNames_0.apply(this);
			}
			else if(AbstractScope.prototype.updateTempNames) {
				return AbstractScope.prototype.updateTempNames.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	Scope.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 1,
				max: 1,
				parameters: [
					{
						type: "Any",
						min: 1,
						max: 1
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_scopeParent: {
				access: 1,
				type: "Any"
			},
			_tempNextIndex: {
				access: 1,
				type: "Any"
			},
			_tempNames: {
				access: 1,
				type: "Any"
			},
			_tempParentNames: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			acquireTempName: [
				{
					access: 3,
					min: 0,
					max: 1,
					parameters: [
						{
							type: "#Statement",
							min: 0,
							max: 1
						}
					]
				}
			],
			acquireTempNameFromKid: [
				{
					access: 1,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			getRenamedVariable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			newRenamedVariable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			releaseTempName: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			releaseTempNameFromKid: [
				{
					access: 1,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			updateTempNames: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			]
		},
		classMethods: {}
	};
	var XScope = Helper.class({
		$name: "XScope",
		$extends: AbstractScope,
		__ks_init: function() {
			AbstractScope.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractScope.prototype.__ks_cons.call(this, args);
		},
		__ks_func_acquireTempName_0: function(statement) {
			if(statement === undefined) {
				statement = null;
			}
			if(statement !== null && !Type.is(statement, Statement)) {
				throw new Error("Invalid type for parameter 'statement'");
			}
			return this._parent.acquireTempName(statement);
		},
		acquireTempName: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return XScope.prototype.__ks_func_acquireTempName_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_getRenamedVariable_0: function(name) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(this._renamedVariables[name]) {
				return this._renamedVariables[name];
			}
			else if(this._variables[name]) {
				return name;
			}
			else {
				return this._parent.getRenamedVariable(name);
			}
		},
		getRenamedVariable: function() {
			if(arguments.length === 1) {
				return XScope.prototype.__ks_func_getRenamedVariable_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.getRenamedVariable) {
				return AbstractScope.prototype.getRenamedVariable.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newRenamedVariable_0: function(name) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(this._variables[name]) {
				var index = this._renamedIndexes[name] ? this._renamedIndexes[name] : 0;
				var newName = "__ks_" + name + "_" + ++index;
				while(this._variables[newName]) {
					newName = "__ks_" + name + "_" + ++index;
				}
				this._renamedIndexes[name] = index;
				return newName;
			}
			else {
				return this._parent.newRenamedVariable(name);
			}
		},
		newRenamedVariable: function() {
			if(arguments.length === 1) {
				return XScope.prototype.__ks_func_newRenamedVariable_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.newRenamedVariable) {
				return AbstractScope.prototype.newRenamedVariable.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_releaseTempName_0: function(name) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			this._parent.releaseTempName(name);
			return this;
		},
		releaseTempName: function() {
			if(arguments.length === 1) {
				return XScope.prototype.__ks_func_releaseTempName_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.releaseTempName) {
				return AbstractScope.prototype.releaseTempName.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_updateTempNames_0: function() {
		},
		updateTempNames: function() {
			if(arguments.length === 0) {
				return XScope.prototype.__ks_func_updateTempNames_0.apply(this);
			}
			else if(AbstractScope.prototype.updateTempNames) {
				return AbstractScope.prototype.updateTempNames.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	XScope.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			acquireTempName: [
				{
					access: 3,
					min: 0,
					max: 1,
					parameters: [
						{
							type: "#Statement",
							min: 0,
							max: 1
						}
					]
				}
			],
			getRenamedVariable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			newRenamedVariable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			releaseTempName: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			updateTempNames: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			]
		},
		classMethods: {}
	};
	var Module = Helper.class({
		$name: "Module",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._binary = false;
			this._dynamicRequirements = [];
			this._exportSource = [];
			this._exportMeta = {};
			this._flags = {};
			this._hashes = {};
			this._imports = {};
			this._includes = {};
			this._references = {};
			this._register = false;
			this._requirements = {};
		},
		__ks_init: function() {
			Module.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, compiler, file) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(compiler === undefined || compiler === null) {
				throw new Error("Missing parameter 'compiler'");
			}
			if(file === undefined || file === null) {
				throw new Error("Missing parameter 'file'");
			}
			this._compiler = compiler;
			this._file = file;
			try {
				this._data = parse(data);
			}
			catch(error) {
				error.filename = file;
				throw error;
			}
			this._directory = path.dirname(file);
			this._options = $attribute.apply(this._data, this._compiler._options.config);
			for(var __ks_0 = 0, __ks_1 = this._data.attributes.length, attr; __ks_0 < __ks_1; ++__ks_0) {
				attr = this._data.attributes[__ks_0];
				if((attr.declaration.kind === Kind.Identifier) && (attr.declaration.name === "bin")) {
					this._binary = true;
				}
				else if((attr.declaration.kind === Kind.AttributeExpression) && (attr.declaration.name.name === "cfg")) {
					for(var __ks_2 = 0, __ks_3 = attr.declaration.arguments.length, arg; __ks_2 < __ks_3; ++__ks_2) {
						arg = attr.declaration.arguments[__ks_2];
						if(arg.kind === Kind.AttributeOperator) {
							this._options[arg.name.name] = arg.value.value;
						}
					}
				}
			}
			this._body = new ModuleBlock(this._data, this);
			if(this._compiler._options.output) {
				this._output = this._compiler._options.output;
				if(Type.isArray(this._compiler._options.rewire)) {
					this._rewire = this._compiler._options.rewire;
				}
				else {
					this._rewire = [];
				}
			}
			else {
				this._output = null;
			}
			this._hashes["."] = this._compiler.sha256(file, data);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				Module.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		},
		__ks_func_addHash_0: function(file, hash) {
			if(file === undefined || file === null) {
				throw new Error("Missing parameter 'file'");
			}
			if(hash === undefined || hash === null) {
				throw new Error("Missing parameter 'hash'");
			}
			this._hashes[path.relative(this._directory, file)] = hash;
		},
		addHash: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addHash_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_addHashes_0: function(file, hashes) {
			if(file === undefined || file === null) {
				throw new Error("Missing parameter 'file'");
			}
			if(hashes === undefined || hashes === null) {
				throw new Error("Missing parameter 'hashes'");
			}
			var root = path.dirname(file);
			for(var name in hashes) {
				var hash = hashes[name];
				if(name === ".") {
					this._hashes[path.relative(this._directory, file)] = hash;
				}
				else {
					this._hashes[path.relative(this._directory, path.join(root, name))] = hash;
				}
			}
		},
		addHashes: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addHashes_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_addInclude_0: function(path) {
			if(path === undefined || path === null) {
				throw new Error("Missing parameter 'path'");
			}
			this._includes[path] = true;
		},
		addInclude: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_addInclude_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_addReference_0: function(key, code) {
			if(key === undefined || key === null) {
				throw new Error("Missing parameter 'key'");
			}
			if(code === undefined || code === null) {
				throw new Error("Missing parameter 'code'");
			}
			if(this._references[key]) {
				this._references[key].push(code);
			}
			else {
				this._references[key] = [code];
			}
			return this;
		},
		addReference: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addReference_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_analyse_0: function() {
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_analyse_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_compiler_0: function() {
			return this._compiler;
		},
		compiler: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_compiler_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._directory;
		},
		directory: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_directory_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_export_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(arguments.length > 1) {
				var alias = arguments[++__ks_i];
			}
			else {
				var alias = false;
			}
			if(this._binary) {
				$throw("Binary file can't export", this);
			}
			var variable = this._body.scope().getVariable(name.name);
			if(!variable) {
				$throw("Undefined variable " + name.name, this);
			}
			if(variable.kind !== VariableKind.TypeAlias) {
				if(alias) {
					this._exportSource.push(alias.name + ": " + name.name);
				}
				else {
					this._exportSource.push(name.name + ": " + name.name);
				}
				if(variable.sealed) {
					if(alias) {
						this._exportSource.push("__ks_" + alias.name + ": " + variable.sealed.name);
					}
					else {
						this._exportSource.push("__ks_" + name.name + ": " + variable.sealed.name);
					}
				}
			}
			if(alias) {
				this._exportMeta[alias.name] = variable;
			}
			else {
				this._exportMeta[name.name] = variable;
			}
		},
		export: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Module.prototype.__ks_func_export_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_file_0: function() {
			return this._file;
		},
		file: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_file_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_flag_0: function(name) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			this._flags[name] = true;
		},
		flag: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_flag_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._body.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_fuse_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_hasInclude_0: function(path) {
			if(path === undefined || path === null) {
				throw new Error("Missing parameter 'path'");
			}
			return Type.isValue(this._includes) ? this._includes[path] : undefined;
		},
		hasInclude: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_hasInclude_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_import_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(arguments.length > 1) {
				var file = arguments[++__ks_i];
			}
			else {
				var file = null;
			}
			this._imports[name] = true;
			if(file && (file.slice(-$extensions.source.length).toLowerCase() === $extensions.source)) {
				this._register = true;
			}
		},
		import: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Module.prototype.__ks_func_import_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isUpToDate_0: function(file, target, data) {
			if(file === undefined || file === null) {
				throw new Error("Missing parameter 'file'");
			}
			if(target === undefined || target === null) {
				throw new Error("Missing parameter 'target'");
			}
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			var hashes;
			try {
				hashes = JSON.parse(fs.readFile(getHashPath(file, target)));
			}
			catch(__ks_0) {
				return null;
			}
			var root = path.dirname(file);
			for(var name in hashes) {
				var hash = hashes[name];
				if(name === ".") {
					if(this._compiler.sha256(file, data) !== hash) {
						return null;
					}
				}
				else {
					if(this._compiler.sha256(path.join(root, name)) !== hash) {
						return null;
					}
				}
			}
			return hashes;
		},
		isUpToDate: function() {
			if(arguments.length === 3) {
				return Module.prototype.__ks_func_isUpToDate_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_listReferences_0: function(key) {
			if(key === undefined || key === null) {
				throw new Error("Missing parameter 'key'");
			}
			if(this._references[key]) {
				var references = this._references[key];
				this._references[key] = null;
				return references;
			}
			else {
				return null;
			}
		},
		listReferences: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_listReferences_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_path_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			if(arguments.length > 1) {
				var x = arguments[++__ks_i];
			}
			else {
				var x = null;
			}
			var name = arguments[++__ks_i];
			if(!x || !this._output) {
				return name;
			}
			var output = null;
			for(var __ks_0 = 0, __ks_1 = this._rewire.length, rewire; __ks_0 < __ks_1; ++__ks_0) {
				rewire = this._rewire[__ks_0];
				if(rewire.input === x) {
					output = path.relative(this._output, rewire.output);
					break;
				}
			}
			if(!output) {
				output = path.relative(this._output, x);
			}
			if(output[0] !== ".") {
				output = "./" + output;
			}
			return output;
		},
		path: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Module.prototype.__ks_func_path_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_require_0: function(variable) {
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			if(this._binary) {
				$throw("Binary file can't require", this);
			}
			this._requirements[variable.requirement] = {
				name: variable.requirement,
				extendable: (variable.kind === VariableKind.Class) || variable.sealed,
				requireFirst: false
			};
		},
		__ks_func_require_1: function(variable, requireFirst) {
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			if(requireFirst === undefined || requireFirst === null) {
				throw new Error("Missing parameter 'requireFirst'");
			}
			if(this._binary) {
				$throw("Binary file can't require", this);
			}
			var requirement = {
				name: variable.requirement,
				extendable: (variable.kind === VariableKind.Class) || variable.sealed,
				parameter: this._body.scope().acquireTempName(),
				requireFirst: requireFirst
			};
			this._requirements[requirement.parameter] = requirement;
			this._dynamicRequirements.push(requirement);
		},
		require: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_require_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return Module.prototype.__ks_func_require_1.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toHashes_0: function() {
			return this._hashes;
		},
		toHashes: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_toHashes_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function() {
			var builder = new FragmentBuilder(this._binary ? 0 : 1);
			this._body.toFragments(builder);
			var fragments = [];
			if(this._options.header) {
				fragments.push($code("// Generated by kaoscript " + metadata.version + "\n"));
			}
			if(this._register && this._options.register) {
				fragments.push($code("require(\"kaoscript/register\");\n"));
			}
			var helper = $runtime.helper(this);
			var type = $runtime.type(this);
			var hasHelper = !this._flags.Helper || this._requirements[helper] || this._imports[helper];
			var hasType = !this._flags.Type || this._requirements[type] || this._imports[type];
			if(!hasHelper || !hasType) {
				if(hasHelper) {
					fragments.push($code("var " + type + " = require(\"" + $runtime.package(this) + "\").Type;\n"));
				}
				else if(hasType) {
					fragments.push($code("var " + helper + " = require(\"" + $runtime.package(this) + "\").Helper;\n"));
				}
				else if(this._options.format.destructuring === "es5") {
					fragments.push($code("var __ks__ = require(\"@kaoscript/runtime\");\n"));
					fragments.push($code("var " + helper + " = __ks__.Helper, " + type + " = __ks__.Type;\n"));
				}
				else {
					if(!(helper === "Helper")) {
						helper = "Helper: " + helper;
					}
					if(!(type === "Type")) {
						type = "Type: " + type;
					}
					fragments.push($code("var {" + helper + ", " + type + "} = require(\"" + $runtime.package(this) + "\");\n"));
				}
			}
			if(this._binary) {
				__ks_Array._im_append(fragments, builder.toArray());
			}
			else {
				if(this._dynamicRequirements.length) {
					fragments.push($code("function __ks_require("));
					for(var i = 0, __ks_0 = this._dynamicRequirements.length, requirement; i < __ks_0; ++i) {
						requirement = this._dynamicRequirements[i];
						if(i) {
							fragments.push($comma);
						}
						fragments.push($code(requirement.parameter));
						if(requirement.extendable) {
							fragments.push($code(", __ks_" + requirement.parameter));
						}
					}
					fragments.push($code(") {\n"));
					if(this._dynamicRequirements.length === 1) {
						var requirement = this._dynamicRequirements[0];
						if(requirement.requireFirst) {
							fragments.push($code("\tif(Type.isValue(" + requirement.parameter + ")) {\n"));
							if(requirement.extendable) {
								fragments.push($code("\t\treturn [" + requirement.parameter + ", __ks_" + requirement.parameter + "];\n"));
								fragments.push($code("\t}\n"));
								fragments.push($code("\telse {\n"));
								fragments.push($code("\t\treturn [" + requirement.name + ", typeof __ks_" + requirement.name + " === \"undefined\" ? {} : __ks_" + requirement.name + "];\n"));
								fragments.push($code("\t}\n"));
							}
							else {
								fragments.push($code("\t\treturn [" + requirement.parameter + "];\n"));
								fragments.push($code("\t}\n"));
								fragments.push($code("\telse {\n"));
								fragments.push($code("\t\treturn [" + requirement.name + "];\n"));
								fragments.push($code("\t}\n"));
							}
						}
						else {
							fragments.push($code("\tif(Type.isValue(" + requirement.name + ")) {\n"));
							if(requirement.extendable) {
								fragments.push($code("\t\treturn [" + requirement.name + ", typeof __ks_" + requirement.name + " === \"undefined\" ? {} : __ks_" + requirement.name + "];\n"));
								fragments.push($code("\t}\n"));
								fragments.push($code("\telse {\n"));
								fragments.push($code("\t\treturn [" + requirement.parameter + ", __ks_" + requirement.parameter + "];\n"));
								fragments.push($code("\t}\n"));
							}
							else {
								fragments.push($code("\t\treturn [" + requirement.name + "];\n"));
								fragments.push($code("\t}\n"));
								fragments.push($code("\telse {\n"));
								fragments.push($code("\t\treturn [" + requirement.parameter + "];\n"));
								fragments.push($code("\t}\n"));
							}
						}
					}
					else {
						fragments.push($code("\tvar req = [];\n"));
						for(var __ks_0 = 0, __ks_1 = this._dynamicRequirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
							requirement = this._dynamicRequirements[__ks_0];
							if(requirement.requireFirst) {
								fragments.push($code("\tif(Type.isValue(" + requirement.parameter + ")) {\n"));
								if(requirement.extendable) {
									fragments.push($code("\t\treq.push(" + requirement.parameter + ", __ks_" + requirement.parameter + ");\n"));
									fragments.push($code("\t}\n"));
									fragments.push($code("\telse {\n"));
									fragments.push($code("\t\treq.push(" + requirement.name + ", typeof __ks_" + requirement.name + " === \"undefined\" ? {} : __ks_" + requirement.name + ");\n"));
									fragments.push($code("\t}\n"));
								}
								else {
									fragments.push($code("\t\treq.push(" + requirement.parameter + ");\n"));
									fragments.push($code("\t}\n"));
									fragments.push($code("\telse {\n"));
									fragments.push($code("\t\treq.push(" + requirement.name + ");\n"));
									fragments.push($code("\t}\n"));
								}
							}
							else {
								fragments.push($code("\tif(Type.isValue(" + requirement.name + ")) {\n"));
								if(requirement.extendable) {
									fragments.push($code("\t\treq.push(" + requirement.name + ", typeof __ks_" + requirement.name + " === \"undefined\" ? {} : __ks_" + requirement.name + ");\n"));
									fragments.push($code("\t}\n"));
									fragments.push($code("\telse {\n"));
									fragments.push($code("\t\treq.push(" + requirement.parameter + ", __ks_" + requirement.parameter + ");\n"));
									fragments.push($code("\t}\n"));
								}
								else {
									fragments.push($code("\t\treq.push(" + requirement.name + ");\n"));
									fragments.push($code("\t}\n"));
									fragments.push($code("\telse {\n"));
									fragments.push($code("\t\treq.push(" + requirement.parameter + ");\n"));
									fragments.push($code("\t}\n"));
								}
							}
						}
						fragments.push($code("\treturn req;\n"));
					}
					fragments.push($code("}\n"));
				}
				fragments.push($code("module.exports = function("));
				var nf = false;
				for(var name in this._requirements) {
					if(nf) {
						fragments.push($comma);
					}
					else {
						nf = true;
					}
					fragments.push($code(name));
					if(this._requirements[name].extendable) {
						fragments.push($code(", __ks_" + name));
					}
				}
				fragments.push($code(") {\n"));
				if(this._dynamicRequirements.length) {
					if(this._options.format.destructuring === "es5") {
						fragments.push($code("\tvar __ks__ = __ks_require("));
						for(var i = 0, __ks_0 = this._dynamicRequirements.length, requirement; i < __ks_0; ++i) {
							requirement = this._dynamicRequirements[i];
							if(i) {
								fragments.push($comma);
							}
							fragments.push($code(requirement.parameter));
							if(requirement.extendable) {
								fragments.push($code(", __ks_" + requirement.parameter));
							}
						}
						fragments.push($code(");\n"));
						fragments.push($code("\tvar "));
						var i = -1;
						for(var __ks_0 = 0, __ks_1 = this._dynamicRequirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
							requirement = this._dynamicRequirements[__ks_0];
							if(i !== -1) {
								fragments.push($comma);
							}
							fragments.push($code(requirement.name + " = __ks__[" + ++i + "]"));
							if(requirement.extendable) {
								fragments.push($code(", __ks_" + requirement.name + " = __ks__[" + ++i + "]"));
							}
						}
						fragments.push($code(";\n"));
					}
					else {
						fragments.push($code("\tvar ["));
						for(var i = 0, __ks_0 = this._dynamicRequirements.length, requirement; i < __ks_0; ++i) {
							requirement = this._dynamicRequirements[i];
							if(i !== 0) {
								fragments.push($comma);
							}
							fragments.push($code(requirement.name));
							if(requirement.extendable) {
								fragments.push($code(", __ks_" + requirement.name));
							}
						}
						fragments.push($code("] = __ks_require("));
						for(var i = 0, __ks_0 = this._dynamicRequirements.length, requirement; i < __ks_0; ++i) {
							requirement = this._dynamicRequirements[i];
							if(i) {
								fragments.push($comma);
							}
							fragments.push($code(requirement.parameter));
							if(requirement.extendable) {
								fragments.push($code(", __ks_" + requirement.parameter));
							}
						}
						fragments.push($code(");\n"));
					}
				}
				__ks_Array._im_append(fragments, builder.toArray());
				if(this._exportSource.length) {
					fragments.push($code("\treturn {"));
					nf = false;
					for(var __ks_0 = 0, __ks_1 = this._exportSource.length, src; __ks_0 < __ks_1; ++__ks_0) {
						src = this._exportSource[__ks_0];
						if(nf) {
							fragments.push($code(","));
						}
						else {
							nf = true;
						}
						fragments.push($code("\n\t\t" + src));
					}
					fragments.push($code("\n\t};\n"));
				}
				fragments.push($code("}\n"));
			}
			return fragments;
		},
		toFragments: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_toFragments_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toMetadata_0: function() {
			var data = {
				requirements: {},
				exports: {}
			};
			for(var name in this._requirements) {
				var variable = this._requirements[name];
				if(variable.parameter) {
					if(variable.extendable) {
						data.requirements[variable.name] = {
							class: true,
							nullable: true
						};
					}
					else {
						data.requirements[variable.name] = {
							nullable: true
						};
					}
				}
				else {
					if(variable.extendable) {
						data.requirements[name] = {
							class: true
						};
					}
					else {
						data.requirements[name] = {};
					}
				}
			}
			var d;
			for(var name in this._exportMeta) {
				var variable = this._exportMeta[name];
				d = {};
				for(var n in variable) {
					if(n === "name") {
						d[n] = variable[n].name || variable[n];
					}
					else if(!(n === "accessPath")) {
						d[n] = variable[n];
					}
				}
				data.exports[name] = d;
			}
			return data;
		},
		toMetadata: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_toMetadata_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	Module.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_binary: {
				access: 1,
				type: "Boolean"
			},
			_body: {
				access: 1,
				type: "Any"
			},
			_compiler: {
				access: 1,
				type: "#Compiler"
			},
			_data: {
				access: 1,
				type: "Any"
			},
			_directory: {
				access: 1,
				type: "Any"
			},
			_dynamicRequirements: {
				access: 1,
				type: "Any"
			},
			_exportSource: {
				access: 1,
				type: "Any"
			},
			_exportMeta: {
				access: 1,
				type: "Any"
			},
			_file: {
				access: 1,
				type: "Any"
			},
			_flags: {
				access: 1,
				type: "Any"
			},
			_hashes: {
				access: 1,
				type: "Any"
			},
			_imports: {
				access: 1,
				type: "Any"
			},
			_includes: {
				access: 1,
				type: "Any"
			},
			_options: {
				access: 1,
				type: "Any"
			},
			_output: {
				access: 1,
				type: "Any"
			},
			_references: {
				access: 1,
				type: "Any"
			},
			_register: {
				access: 1,
				type: "Any"
			},
			_requirements: {
				access: 1,
				type: "Any"
			},
			_rewire: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			addHash: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			addHashes: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			addInclude: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			addReference: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			compiler: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			directory: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			export: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			file: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			flag: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			hasInclude: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			import: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			isUpToDate: [
				{
					access: 3,
					min: 3,
					max: 3,
					parameters: [
						{
							type: "Any",
							min: 3,
							max: 3
						}
					]
				}
			],
			listReferences: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			path: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			require: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				},
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toHashes: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toMetadata: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			]
		},
		classMethods: {}
	};
	var ModuleBlock = Helper.class({
		$name: "ModuleBlock",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._body = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			ModuleBlock.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, module) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(module === undefined || module === null) {
				throw new Error("Missing parameter 'module'");
			}
			this._module = module;
			this._data = data;
			this._options = $attribute.apply(data, module._options);
			this._scope = new Scope();
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ModuleBlock.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				AbstractNode.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._data.body[__ks_0];
				this._body.push(statement = $compile.statement(statement, this));
				statement.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._module.directory();
		},
		directory: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_directory_0.apply(this);
			}
			return AbstractNode.prototype.directory.apply(this, arguments);
		},
		__ks_func_file_0: function() {
			return this._module.file();
		},
		file: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_file_0.apply(this);
			}
			return AbstractNode.prototype.file.apply(this, arguments);
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._body[__ks_0];
				statement.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_module_0: function() {
			return this._module;
		},
		module: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_module_0.apply(this);
			}
			return AbstractNode.prototype.module.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			for(var __ks_0 = 0, __ks_1 = this._body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._body[__ks_0];
				statement.toFragments(fragments, Mode.None);
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return ModuleBlock.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ModuleBlock.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Array"
			},
			_module: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			directory: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			file: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			module: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var $sealed = {
		callee: function(data, node) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(data.computed) {
				return false;
			}
			else {
				var variable = $variable.fromAST(data.object, node);
				return $sealed.filter(variable, data.property.name, data, node);
			}
		},
		filter: function() {
			if(arguments.length < 3) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			if(arguments.length > 3) {
				var variable = arguments[++__ks_i];
			}
			else {
				var variable = null;
			}
			var name = arguments[++__ks_i];
			var data = arguments[++__ks_i];
			var node = arguments[++__ks_i];
			if(arguments.length > 4) {
				var instance = arguments[++__ks_i];
			}
			else {
				var instance = false;
			}
			if(Type.isValue(variable)) {
				if(variable.kind === VariableKind.Class) {
					if(Type.isValue(variable.sealed)) {
						if(instance) {
							if(variable.sealed.instanceMethods[name] === true) {
								return {
									kind: CalleeKind.InstanceMethod,
									variable: variable
								};
							}
						}
						else {
							if(variable.sealed.classMethods[name] === true) {
								return {
									kind: CalleeKind.ClassMethod,
									variable: variable
								};
							}
						}
					}
				}
				else if(variable.kind === VariableKind.Enum) {
					$throw("Invalid Enum syntax at line " + data.start.line, node);
				}
				else if(variable.kind === VariableKind.Function) {
					return $sealed.filterType({
						kind: Kind.TypeReference,
						typeName: {
							kind: Kind.Identifier,
							name: "Function"
						}
					}, name, data, node);
				}
				else if(variable.kind === VariableKind.TypeAlias) {
					if(Type.isValue(variable.type) && Type.isValue(variable.type.types)) {
						var variables = [];
						for(var __ks_0 = 0, __ks_1 = variable.type.types.length, type; __ks_0 < __ks_1; ++__ks_0) {
							type = variable.type.types[__ks_0];
							var v;
							if(!(v = $sealed.filter($variable.fromType(type, node), name, data, node, true))) {
								return false;
							}
							variables.push(v);
						}
						if(variables.length === 1) {
							return variables[0];
						}
						if(variables.length > 0) {
							return variables;
						}
					}
					else {
						if(Type.isValue(__ks_0 = $variable.fromType(variable.type, node)) ? (variable = __ks_0, true) : false) {
							return $sealed.filter(variable, name, data, node, true);
						}
					}
				}
				else if(variable.kind === VariableKind.Variable) {
					if(Type.isValue(variable.sealed) && Type.isObject(variable.sealed.properties[name])) {
						return {
							kind: CalleeKind.VariableProperty,
							variable: variable
						};
					}
					if(Type.isValue(variable.type)) {
						return $sealed.filterType(variable.type, name, data, node);
					}
				}
				else {
					$throw("Not implemented", node);
				}
			}
			return false;
		},
		filterType: function(type, name, data, node) {
			if(type === undefined || type === null) {
				throw new Error("Missing parameter 'type'");
			}
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(Type.isValue(type.typeName)) {
				return $sealed.filter($variable.fromType(type, node), name, data, node, true);
			}
			else if(Type.isValue(type.types)) {
				var variables = [];
				for(var __ks_0 = 0, __ks_1 = type.types.length, t; __ks_0 < __ks_1; ++__ks_0) {
					t = type.types[__ks_0];
					var v;
					if(!(v = $sealed.filter($variable.fromType(t, node), name, data, node, true))) {
						return false;
					}
					variables.push(v);
				}
				if(variables.length === 1) {
					return variables[0];
				}
				if(variables.length > 0) {
					return variables;
				}
			}
			else {
				$throw("Not implemented", node);
			}
			return false;
		}
	};
	var Statement = Helper.class({
		$name: "Statement",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._afterwards = [];
			this._variables = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			Statement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_afterward_0: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			this._afterwards.push(node);
		},
		afterward: function() {
			if(arguments.length === 1) {
				return Statement.prototype.__ks_func_afterward_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.afterward) {
				return AbstractNode.prototype.afterward.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_assignment_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(arguments.length > 1) {
				var allowAssignement = arguments[++__ks_i];
			}
			else {
				var allowAssignement = false;
			}
			if((data.left.kind === Kind.Identifier) && !this._scope.hasVariable(data.left.name)) {
				this._variables.push(data.left.name);
				$variable.define(this, this._scope, data.left, $variable.kind(data.right.type), data.right.type);
			}
		},
		assignment: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Statement.prototype.__ks_func_assignment_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_compile_0: function(statements) {
			if(statements === undefined || statements === null) {
				throw new Error("Missing parameter 'statements'");
			}
			for(var __ks_0 = 0, __ks_1 = statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = statements[__ks_0];
				statement.analyse();
			}
			for(var __ks_0 = 0, __ks_1 = statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = statements[__ks_0];
				statement.fuse();
			}
		},
		compile: function() {
			if(arguments.length === 1) {
				return Statement.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.compile) {
				return AbstractNode.prototype.compile.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isAsync_0: function() {
			return false;
		},
		isAsync: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_isAsync_0.apply(this);
			}
			else if(AbstractNode.prototype.isAsync) {
				return AbstractNode.prototype.isAsync.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_statement_0: function() {
			return this;
		},
		statement: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_statement_0.apply(this);
			}
			return AbstractNode.prototype.statement.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._variables.length) {
				fragments.newLine().code($variable.scope(this) + this._variables.join(", ")).done();
			}
			var r, __ks_0;
			if(Type.isValue(__ks_0 = this.toStatementFragments(fragments, mode)) ? (r = __ks_0, true) : false) {
				r.afterwards = this._afterwards;
				return r;
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._afterwards.length, afterward; __ks_0 < __ks_1; ++__ks_0) {
					afterward = this._afterwards[__ks_0];
					afterward.toAfterwardFragments(fragments);
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Statement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	Statement.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_afterwards: {
				access: 1,
				type: "Array"
			},
			_variables: {
				access: 1,
				type: "Array"
			}
		},
		classVariables: {},
		instanceMethods: {
			afterward: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			assignment: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			compile: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			isAsync: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			statement: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	Scope.__ks_reflect.instanceMethods.acquireTempName[0].parameters[0].type = Statement;
	XScope.__ks_reflect.instanceMethods.acquireTempName[0].parameters[0].type = Statement;
	var BreakStatement = Helper.class({
		$name: "BreakStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BreakStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return BreakStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.line("break", this._data);
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return BreakStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BreakStatement.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var MemberAccess = {
		Private: 1,
		Protected: 2,
		Public: 3
	};
	var HelperTypeKind = {
		Native: 0,
		Referenced: 1,
		Unreferenced: 2
	};
	var $class = {
		continuous: function(node, fragments) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			var reflect = {
				inits: 0,
				constructors: [],
				destructors: 0,
				instanceVariables: node._instanceVariables,
				classVariables: node._classVariables,
				instanceMethods: {},
				classMethods: {}
			};
			var noinit = Type.isEmptyObject(node._instanceVariables);
			if(!noinit) {
				noinit = true;
				for(var name in node._instanceVariables) {
					var field = node._instanceVariables[name];
					if(!(noinit)) {
						break;
					}
					if(field.data.defaultValue) {
						noinit = false;
					}
				}
			}
			if(node._es5) {
				node.module().flag("Helper");
				var line = fragments.newLine().code($variable.scope(node), node._name, " = ", $runtime.helper(node), ".class(");
				var clazz = line.newObject();
				clazz.line("$name: " + $quote(node._name));
				var ctrl;
				if(node._extends) {
					clazz.line("$extends: ", node._extendsName);
				}
				if(Type.isValue(node._destructor) || !__ks_Object._cm_isEmpty(node._classMethods)) {
					ctrl = clazz.newLine().code("$static: ").newObject();
					if(Type.isValue(node._destructor)) {
						$class.destructor(node, ctrl, node._destructor.statement, reflect);
						$helper.destructor(node, ctrl, reflect);
					}
					for(var name in node._classMethods) {
						var methods = node._classMethods[name];
						for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = methods[__ks_0];
							$class.classMethod(node, ctrl, method.statement, method.signature, method.parameters, reflect, name);
						}
						$helper.classMethod(node, ctrl, reflect, name);
					}
					ctrl.done();
				}
				if(!node._extends) {
					clazz.newControl().code($class.methodHeader("$create", node), "()").step().line("this.__ks_init()").line("this.__ks_cons(arguments)");
				}
				if(noinit) {
					if(node._extends) {
						clazz.newControl().code($class.methodHeader("__ks_init", node), "()").step().line(node._extendsName + ".prototype.__ks_init.call(this)");
					}
					else {
						clazz.newControl().code($class.methodHeader("__ks_init", node), "()").step();
					}
				}
				else {
					++reflect.inits;
					ctrl = clazz.newControl().code($class.methodHeader("__ks_init_1", node), "()").step();
					for(var name in node._instanceVariables) {
						var field = node._instanceVariables[name];
						if(Type.isValue(field.data.defaultValue)) {
							ctrl.newLine().code("this." + name + " = ").compile(field.defaultValue).done();
						}
					}
					ctrl = clazz.newControl().code($class.methodHeader("__ks_init", node), "()").step();
					if(node._extends) {
						ctrl.line(node._extendsName + ".prototype.__ks_init.call(this)");
					}
					ctrl.line(node._name + ".prototype.__ks_init_1.call(this)");
				}
				for(var __ks_0 = 0, __ks_1 = node._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = node._constructors[__ks_0];
					$class.constructor(node, clazz, method.statement, method.signature, method.parameters, reflect);
				}
				$helper.constructor(node, clazz, reflect);
				for(var name in node._instanceMethods) {
					var methods = node._instanceMethods[name];
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						$class.instanceMethod(node, clazz, method.statement, method.signature, method.parameters, reflect, name);
					}
					$helper.instanceMethod(node, clazz, reflect, name);
				}
				clazz.done();
				line.code(")").done();
			}
			else {
				var clazz = fragments.newControl().code("class ", node._name);
				if(node._extends) {
					clazz.code(" extends ", node._extendsName);
				}
				clazz.step();
				var ctrl;
				if(!node._extends) {
					clazz.newControl().code("constructor()").step().line("this.__ks_init()").line("this.__ks_cons(arguments)").done();
				}
				if(noinit) {
					if(node._extends) {
						clazz.newControl().code("__ks_init()").step().line(node._extendsName + ".prototype.__ks_init.call(this)").done();
					}
					else {
						clazz.newControl().code("__ks_init()").step().done();
					}
				}
				else {
					++reflect.inits;
					ctrl = clazz.newControl().code("__ks_init_1()").step();
					for(var name in node._instanceVariables) {
						var field = node._instanceVariables[name];
						if(Type.isValue(field.data.defaultValue)) {
							ctrl.newLine().code("this." + name + " = ").compile(field.defaultValue).done();
						}
					}
					ctrl.done();
					ctrl = clazz.newControl().code("__ks_init()").step();
					if(node._extends) {
						ctrl.line(node._extendsName + ".prototype.__ks_init.call(this)");
					}
					ctrl.line(node._name + ".prototype.__ks_init_1.call(this)");
					ctrl.done();
				}
				for(var __ks_0 = 0, __ks_1 = node._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = node._constructors[__ks_0];
					$class.constructor(node, clazz, method.statement, method.signature, method.parameters, reflect);
				}
				$helper.constructor(node, clazz, reflect);
				if(Type.isValue(node._destructor)) {
					$class.destructor(node, clazz, node._destructor.statement, reflect);
					$helper.destructor(node, clazz, reflect);
				}
				for(var name in node._instanceMethods) {
					var methods = node._instanceMethods[name];
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						$class.instanceMethod(node, clazz, method.statement, method.signature, method.parameters, reflect, name);
					}
					$helper.instanceMethod(node, clazz, reflect, name);
				}
				for(var name in node._classMethods) {
					var methods = node._classMethods[name];
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						$class.classMethod(node, clazz, method.statement, method.signature, method.parameters, reflect, name);
					}
					$helper.classMethod(node, clazz, reflect, name);
				}
				clazz.done();
			}
			for(var name in node._classVariables) {
				var field = node._classVariables[name];
				if(Type.isValue(field.defaultValue)) {
					fragments.newLine().code(node._name + "." + name + " = ").compile(field.defaultValue).done();
				}
			}
			$helper.reflect(node, fragments, reflect);
			var references;
			if(Type.isValue(__ks_0 = node.module().listReferences(node._name)) ? (references = __ks_0, true) : false) {
				for(var __ks_0 = 0, __ks_1 = references.length, ref; __ks_0 < __ks_1; ++__ks_0) {
					ref = references[__ks_0];
					fragments.line(ref);
				}
			}
		},
		classMethod: function(node, fragments, statement, signature, parameters, reflect, name) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(statement === undefined || statement === null) {
				throw new Error("Missing parameter 'statement'");
			}
			if(signature === undefined || signature === null) {
				throw new Error("Missing parameter 'signature'");
			}
			if(parameters === undefined || parameters === null) {
				throw new Error("Missing parameter 'parameters'");
			}
			if(reflect === undefined || reflect === null) {
				throw new Error("Missing parameter 'reflect'");
			}
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(!Type.isArray(reflect.classMethods[name])) {
				reflect.classMethods[name] = [];
			}
			var index = reflect.classMethods[name].length;
			reflect.classMethods[name].push({
				signature: signature,
				parameters: parameters
			});
			statement.name("__ks_sttc_" + name + "_" + index).toFragments(fragments, Mode.None);
		},
		constructor: function(node, fragments, statement, signature, parameters, reflect) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(statement === undefined || statement === null) {
				throw new Error("Missing parameter 'statement'");
			}
			if(signature === undefined || signature === null) {
				throw new Error("Missing parameter 'signature'");
			}
			if(parameters === undefined || parameters === null) {
				throw new Error("Missing parameter 'parameters'");
			}
			if(reflect === undefined || reflect === null) {
				throw new Error("Missing parameter 'reflect'");
			}
			var index = reflect.constructors.length;
			reflect.constructors.push({
				signature: signature,
				parameters: parameters
			});
			statement.name("__ks_cons_" + index).toFragments(fragments, Mode.None);
		},
		destructor: function(node, fragments, statement, reflect) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(statement === undefined || statement === null) {
				throw new Error("Missing parameter 'statement'");
			}
			if(reflect === undefined || reflect === null) {
				throw new Error("Missing parameter 'reflect'");
			}
			statement.name("__ks_destroy_" + reflect.destructors).toFragments(fragments, Mode.None);
			reflect.destructors++;
		},
		instanceMethod: function(node, fragments, statement, signature, parameters, reflect, name) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(statement === undefined || statement === null) {
				throw new Error("Missing parameter 'statement'");
			}
			if(signature === undefined || signature === null) {
				throw new Error("Missing parameter 'signature'");
			}
			if(parameters === undefined || parameters === null) {
				throw new Error("Missing parameter 'parameters'");
			}
			if(reflect === undefined || reflect === null) {
				throw new Error("Missing parameter 'reflect'");
			}
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(!Type.isArray(reflect.instanceMethods[name])) {
				reflect.instanceMethods[name] = [];
			}
			var index = reflect.instanceMethods[name].length;
			reflect.instanceMethods[name].push({
				signature: signature,
				parameters: parameters
			});
			statement.name("__ks_func_" + name + "_" + index).toFragments(fragments, Mode.None);
		},
		methodCall: function(node, fnName, argName, retCode, fragments, method, index) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fnName === undefined || fnName === null) {
				throw new Error("Missing parameter 'fnName'");
			}
			if(argName === undefined || argName === null) {
				throw new Error("Missing parameter 'argName'");
			}
			if(retCode === undefined || retCode === null) {
				throw new Error("Missing parameter 'retCode'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(method === undefined || method === null) {
				throw new Error("Missing parameter 'method'");
			}
			if(index === undefined || index === null) {
				throw new Error("Missing parameter 'index'");
			}
			if(method.max === 0) {
				fragments.line(retCode, node._data.name.name, ".", fnName, index, ".apply(this)");
			}
			else {
				fragments.line(retCode, node._data.name.name, ".", fnName, index, ".apply(this, ", argName, ")");
			}
		},
		methodHeader: function(name, node) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(node._es5) {
				return name + ": function";
			}
			else {
				return name;
			}
		},
		sealed: function(node, fragments) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			var reflect = {
				sealed: true,
				inits: 0,
				constructors: [],
				destructors: 0,
				instanceVariables: node._instanceVariables,
				classVariables: node._classVariables,
				instanceMethods: {},
				classMethods: {}
			};
			var noinit = Type.isEmptyObject(node._instanceVariables);
			if(!noinit) {
				noinit = true;
				for(var name in node._instanceVariables) {
					var field = node._instanceVariables[name];
					if(!(noinit)) {
						break;
					}
					if(field.data.defaultValue) {
						noinit = false;
					}
				}
			}
			if(node._es5) {
				node.module().flag("Helper");
				var line = fragments.newLine().code($variable.scope(node), node._name, " = ", $runtime.helper(node), ".class(");
				var clazz = line.newObject();
				clazz.line("$name: " + $quote(node._name));
				if(node._extends) {
					clazz.line("$extends: ", node._extendsName);
				}
				var ctrl;
				if(Type.isValue(node._destructor) || !__ks_Object._cm_isEmpty(node._classMethods)) {
					ctrl = clazz.newLine().code("$static: ").newObject();
					if(Type.isValue(node._destructor)) {
						$class.destructor(node, ctrl, node._destructor.statement, reflect);
						$helper.destructor(node, ctrl, reflect);
					}
					for(var name in node._classMethods) {
						var methods = node._classMethods[name];
						for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = methods[__ks_0];
							$class.classMethod(node, ctrl, method.statement, method.signature, method.parameters, reflect, name);
						}
						$helper.classMethod(node, ctrl, reflect, name);
					}
					ctrl.done();
				}
				if(node._extends) {
					ctrl = clazz.newControl().code($class.methodHeader("__ks_init", node), "()").step();
					ctrl.line(node._extendsName, ".prototype.__ks_init.call(this)");
					if(!noinit) {
						for(var name in node._instanceVariables) {
							var field = node._instanceVariables[name];
							if(Type.isValue(field.data.defaultValue)) {
								ctrl.newLine().code("this." + name + " = ").compile(field.defaultValue).done();
							}
						}
					}
				}
				else {
					ctrl = clazz.newControl().code($class.methodHeader("$create", node), "()").step();
					if(!noinit) {
						for(var name in node._instanceVariables) {
							var field = node._instanceVariables[name];
							if(Type.isValue(field.data.defaultValue)) {
								ctrl.newLine().code("this." + name + " = ").compile(field.defaultValue).done();
							}
						}
					}
					ctrl.line("this.__ks_cons(arguments)");
				}
				for(var __ks_0 = 0, __ks_1 = node._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = node._constructors[__ks_0];
					$class.constructor(node, clazz, method.statement, method.signature, method.parameters, reflect);
				}
				$helper.constructor(node, clazz, reflect);
				for(var name in node._instanceMethods) {
					var methods = node._instanceMethods[name];
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						$class.instanceMethod(node, clazz, method.statement, method.signature, method.parameters, reflect, name);
					}
					$helper.instanceMethod(node, clazz, reflect, name);
				}
				clazz.done();
				line.code(")").done();
			}
			else {
				var clazz = fragments.newControl().code("class ", node._name);
				if(node._extends) {
					clazz.code(" extends ", node._extendsName);
				}
				clazz.step();
				var ctrl;
				if(node._extends) {
					ctrl = clazz.newControl().code("__ks_init()").step();
					ctrl.line(node._extendsName, ".prototype.__ks_init.call(this)");
					if(!noinit) {
						for(var name in node._instanceVariables) {
							var field = node._instanceVariables[name];
							if(Type.isValue(field.data.defaultValue)) {
								ctrl.newLine().code("this." + name + " = ").compile(field.defaultValue).done();
							}
						}
					}
					ctrl.done();
				}
				else {
					ctrl = clazz.newControl().code("constructor()").step();
					if(!noinit) {
						for(var name in node._instanceVariables) {
							var field = node._instanceVariables[name];
							if(Type.isValue(field.data.defaultValue)) {
								ctrl.newLine().code("this." + name + " = ").compile(field.defaultValue).done();
							}
						}
					}
					ctrl.line("this.__ks_cons(arguments)");
					ctrl.done();
				}
				for(var __ks_0 = 0, __ks_1 = node._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = node._constructors[__ks_0];
					$class.constructor(node, clazz, method.statement, method.signature, method.parameters, reflect);
				}
				$helper.constructor(node, clazz, reflect);
				if(Type.isValue(node._destructor)) {
					$class.destructor(node, clazz, node._destructor.statement, reflect);
					$helper.destructor(node, clazz, reflect);
				}
				for(var name in node._instanceMethods) {
					var methods = node._instanceMethods[name];
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						$class.instanceMethod(node, clazz, method.statement, method.signature, method.parameters, reflect, name);
					}
					$helper.instanceMethod(node, clazz, reflect, name);
				}
				for(var name in node._classMethods) {
					var methods = node._classMethods[name];
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						$class.classMethod(node, clazz, method.statement, method.signature, method.parameters, reflect, name);
					}
					$helper.classMethod(node, clazz, reflect, name);
				}
				clazz.done();
			}
			for(var name in node._classVariables) {
				var field = node._classVariables[name];
				if(Type.isValue(field.defaultValue)) {
					fragments.newLine().code(node._name + "." + name + " = ").compile(field.defaultValue).done();
				}
			}
			$helper.reflect(node, fragments, reflect);
			var references;
			if(Type.isValue(__ks_0 = node.module().listReferences(node._name)) ? (references = __ks_0, true) : false) {
				for(var __ks_0 = 0, __ks_1 = references.length, ref; __ks_0 < __ks_1; ++__ks_0) {
					ref = references[__ks_0];
					fragments.line(ref);
				}
			}
		}
	};
	var $field = {
		signature: function(data, node) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			var signature = {
				access: MemberAccess.Public
			};
			if(data.modifiers) {
				for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
					modifier = data.modifiers[__ks_0];
					if(modifier.kind === MemberModifier.Private) {
						signature.access = MemberAccess.Private;
					}
					else if(modifier.kind === MemberModifier.Protected) {
						signature.access = MemberAccess.Protected;
					}
				}
			}
			var type;
			if(data.type && (Type.isValue(__ks_0 = $signature.type(data.type, node.scope())) ? (type = __ks_0, true) : false)) {
				signature.type = type;
			}
			return signature;
		}
	};
	var $helper = {
		analyseType: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			if(arguments.length > 1) {
				var type = arguments[++__ks_i];
			}
			else {
				var type = null;
			}
			var node = arguments[++__ks_i];
			if(!Type.isValue(type)) {
				return {
					kind: HelperTypeKind.Native,
					type: "Any"
				};
			}
			else if(Type.isArray(type)) {
				return Helper.mapArray(type, function(t) {
					return $helper.analyseType(t, node);
				});
			}
			else if((type === "Any") || (type === "...") || $typeofs[type]) {
				return {
					kind: HelperTypeKind.Native,
					type: type
				};
			}
			else {
				var variable, __ks_0;
				if(Type.isValue(__ks_0 = $variable.fromReflectType(type, node)) ? (variable = __ks_0, true) : false) {
					return {
						kind: HelperTypeKind.Referenced,
						type: type
					};
				}
				else {
					return {
						kind: HelperTypeKind.Unreferenced,
						type: type
					};
				}
			}
		},
		classMethod: function(node, fragments, reflect, name) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(reflect === undefined || reflect === null) {
				throw new Error("Missing parameter 'reflect'");
			}
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			var extend = false;
			if(node._extends) {
				extend = function(node, fragments, ctrl) {
					if(node === undefined || node === null) {
						throw new Error("Missing parameter 'node'");
					}
					if(fragments === undefined || fragments === null) {
						throw new Error("Missing parameter 'fragments'");
					}
					if(ctrl === undefined || ctrl === null) {
						throw new Error("Missing parameter 'ctrl'");
					}
					if(node._extendsVariable.classMethods[name]) {
						ctrl.done();
						fragments.line("return " + node._extendsName + "." + name + ".apply(null, arguments)");
					}
					else {
						ctrl.step().code("else if(" + node._extendsName + "." + name + ")").step().code("return " + node._extendsName + "." + name + ".apply(null, arguments)").done();
						fragments.line("throw new Error(\"Wrong number of arguments\")");
					}
				};
			}
			$helper.methods(extend, node, fragments.newControl(), node._es5 ? $class.methodHeader(name, node) + "()" : "static " + name + "()", reflect.classMethods[name], Helper.vcurry($class.methodCall, null, node, "__ks_sttc_" + name + "_", "arguments", "return "), "arguments", "classMethods." + name, true);
		},
		constructor: function(node, fragments, reflect) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(reflect === undefined || reflect === null) {
				throw new Error("Missing parameter 'reflect'");
			}
			var extend = false;
			if(node._extends) {
				extend = function() {
					if(arguments.length < 2) {
						throw new Error("Wrong number of arguments");
					}
					var __ks_i = -1;
					var node = arguments[++__ks_i];
					var fragments = arguments[++__ks_i];
					if(arguments.length > 2) {
						var ctrl = arguments[++__ks_i];
					}
					else {
						var ctrl = null;
					}
					if(Type.isValue(ctrl)) {
						ctrl.step().code("else").step().line(node._extendsName + ".prototype.__ks_cons.call(this, args)").done();
					}
					else {
						fragments.line(node._extendsName + ".prototype.__ks_cons.call(this, args)");
					}
				};
			}
			$helper.methods(extend, node, fragments.newControl(), $class.methodHeader("__ks_cons", node) + "(args)", reflect.constructors, Helper.vcurry($class.methodCall, null, node, "prototype.__ks_cons_", "args", ""), "args", "constructors", false);
		},
		decide: function(node, fragments, type, index, path, argName) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(type === undefined || type === null) {
				throw new Error("Missing parameter 'type'");
			}
			if(index === undefined || index === null) {
				throw new Error("Missing parameter 'index'");
			}
			if(path === undefined || path === null) {
				throw new Error("Missing parameter 'path'");
			}
			if(argName === undefined || argName === null) {
				throw new Error("Missing parameter 'argName'");
			}
			node.module().flag("Type");
			var tof;
			if((tof = $runtime.typeof(type, node))) {
				fragments.code(tof + "(" + argName + "[" + index + "])");
			}
			else {
				fragments.code($runtime.type(node), ".is(" + argName + "[" + index + "], " + path + ")");
			}
		},
		destructor: function(node, fragments, reflect) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(reflect === undefined || reflect === null) {
				throw new Error("Missing parameter 'reflect'");
			}
			var ctrl = fragments.newControl();
			if(node._es5) {
				ctrl.code($class.methodHeader("__ks_destroy", node) + "(that)");
			}
			else {
				ctrl.code("static __ks_destroy(that)");
			}
			ctrl.step();
			if(node._extends) {
				ctrl.line(node._extendsName + ".__ks_destroy(that)");
			}
			for(var i = 0, __ks_0 = reflect.destructors; i < __ks_0; ++i) {
				ctrl.line(node._name + ".__ks_destroy_" + i + "(that)");
			}
			if(!node._es5) {
				ctrl.done();
			}
		},
		instanceMethod: function(node, fragments, reflect, name) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(reflect === undefined || reflect === null) {
				throw new Error("Missing parameter 'reflect'");
			}
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			var extend = false;
			if(node._extends) {
				extend = function(node, fragments, ctrl) {
					if(node === undefined || node === null) {
						throw new Error("Missing parameter 'node'");
					}
					if(fragments === undefined || fragments === null) {
						throw new Error("Missing parameter 'fragments'");
					}
					if(ctrl === undefined || ctrl === null) {
						throw new Error("Missing parameter 'ctrl'");
					}
					if(node._extendsVariable.instanceMethods[name]) {
						ctrl.done();
						fragments.line("return " + node._extendsName + ".prototype." + name + ".apply(this, arguments)");
					}
					else {
						ctrl.step().code("else if(" + node._extendsName + ".prototype." + name + ")").step().line("return " + node._extendsName + ".prototype." + name + ".apply(this, arguments)").done();
						fragments.line("throw new Error(\"Wrong number of arguments\")");
					}
				};
			}
			$helper.methods(extend, node, fragments.newControl(), $class.methodHeader(name, node) + "()", reflect.instanceMethods[name], Helper.vcurry($class.methodCall, null, node, "prototype.__ks_func_" + name + "_", "arguments", "return "), "arguments", "instanceMethods." + name, true);
		},
		methods: function(extend, node, fragments, header, methods, call, argName, refName, returns) {
			if(extend === undefined || extend === null) {
				throw new Error("Missing parameter 'extend'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(header === undefined || header === null) {
				throw new Error("Missing parameter 'header'");
			}
			if(methods === undefined || methods === null) {
				throw new Error("Missing parameter 'methods'");
			}
			if(call === undefined || call === null) {
				throw new Error("Missing parameter 'call'");
			}
			if(argName === undefined || argName === null) {
				throw new Error("Missing parameter 'argName'");
			}
			if(refName === undefined || refName === null) {
				throw new Error("Missing parameter 'refName'");
			}
			if(returns === undefined || returns === null) {
				throw new Error("Missing parameter 'returns'");
			}
			fragments.code(header).step();
			var method;
			if(methods.length === 0) {
				if(extend) {
					extend(node, fragments);
				}
				else {
					fragments.newControl().code("if(" + argName + ".length !== 0)").step().line("throw new Error(\"Wrong number of arguments\")").done();
				}
			}
			else if(methods.length === 1) {
				method = methods[0].signature;
				if((method.min === 0) && (method.max >= Infinity)) {
					call(fragments, method, 0);
				}
				else if(method.min === method.max) {
					var ctrl = fragments.newControl();
					ctrl.code("if(" + argName + ".length === " + method.min + ")").step();
					call(ctrl, method, 0);
					if(returns) {
						if(extend) {
							extend(node, fragments, ctrl);
						}
						else {
							ctrl.done();
							fragments.line("throw new Error(\"Wrong number of arguments\")");
						}
					}
					else {
						if(extend) {
							extend(node, fragments, ctrl);
						}
						else {
							ctrl.step().code("else").step().line("throw new Error(\"Wrong number of arguments\")").done();
						}
					}
				}
				else if(method.max < Infinity) {
					var ctrl = fragments.newControl();
					ctrl.code("if(" + argName + ".length >= " + method.min + " && " + argName + ".length <= " + method.max + ")").step();
					call(ctrl, method, 0);
					if(returns) {
						ctrl.done();
						fragments.line("throw new Error(\"Wrong number of arguments\")");
					}
					else {
						ctrl.step().code("else").step().line("throw new Error(\"Wrong number of arguments\")").done();
					}
				}
				else {
					call(fragments, method, 0);
				}
			}
			else {
				var groups = [];
				var nf, group;
				for(var index = 0, __ks_0 = methods.length; index < __ks_0; ++index) {
					method = methods[index].signature;
					method.index = index;
					nf = true;
					for(var __ks_1 = 0, __ks_2 = groups.length; nf && __ks_1 < __ks_2; ++__ks_1) {
						group = groups[__ks_1];
						if(((method.min <= group.min) && (method.max >= group.min)) || ((method.min >= group.min) && (method.max <= group.max)) || ((method.min <= group.max) && (method.max >= group.max))) {
							nf = false;
						}
					}
					if(nf) {
						groups.push({
							min: method.min,
							max: method.max,
							methods: [method]
						});
					}
					else {
						group.min = Math.min(group.min, method.min);
						group.max = Math.max(group.max, method.max);
						group.methods.push(method);
					}
				}
				var ctrl = fragments.newControl();
				nf = true;
				for(var __ks_1 = 0, __ks_2 = groups.length; __ks_1 < __ks_2; ++__ks_1) {
					group = groups[__ks_1];
					if(group.min === group.max) {
						if(!ctrl.isFirstStep()) {
							ctrl.step().code("else ");
						}
						ctrl.code("if(" + argName + ".length === " + group.min + ")").step();
						if(group.methods.length === 1) {
							call(ctrl, group.methods[0], group.methods[0].index);
						}
						else {
							$helper.methodCheck(node, ctrl, group, call, argName, refName, returns);
						}
					}
					else if(group.max < Infinity) {
						if(!ctrl.isFirstStep()) {
							ctrl.step().code("else ");
						}
						ctrl.code("if(" + argName + ".length >= " + group.min + " && arguments.length <= " + group.max + ")").step();
						if(group.methods.length === 1) {
							call(ctrl, group.methods[0], group.methods[0].index);
						}
						else {
							$helper.methodCheck(node, ctrl, group, call, argName, refName, returns);
						}
					}
					else {
						if(!ctrl.isFirstStep()) {
							ctrl.step().code("else").step();
						}
						nf = false;
						if(group.methods.length === 1) {
							call(ctrl, group.methods[0], group.methods[0].index);
						}
						else {
							$helper.methodCheck(node, ctrl, group, call, argName, refName, returns);
						}
					}
				}
				if(nf) {
					if(returns) {
						ctrl.done();
						fragments.line("throw new Error(\"Wrong number of arguments\")");
					}
					else {
						ctrl.step().code("else").step().line("throw new Error(\"Wrong number of arguments\")").done();
					}
				}
				else {
					ctrl.done();
				}
			}
			if(!node._es5) {
				fragments.done();
			}
		},
		methodCheck: function(node, fragments, group, call, argName, refName, returns) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(group === undefined || group === null) {
				throw new Error("Missing parameter 'group'");
			}
			if(call === undefined || call === null) {
				throw new Error("Missing parameter 'call'");
			}
			if(argName === undefined || argName === null) {
				throw new Error("Missing parameter 'argName'");
			}
			if(refName === undefined || refName === null) {
				throw new Error("Missing parameter 'refName'");
			}
			if(returns === undefined || returns === null) {
				throw new Error("Missing parameter 'returns'");
			}
			if($helper.methodCheckTree(group.methods, 0, node, fragments, call, argName, refName, returns)) {
				if(returns) {
					fragments.line("throw new Error(\"Wrong type of arguments\")");
				}
				else {
					fragments.step().code("else").step().code("throw new Error(\"Wrong type of arguments\")");
				}
			}
		},
		methodCheckTree: function(methods, index, node, fragments, call, argName, refName, returns) {
			if(methods === undefined || methods === null) {
				throw new Error("Missing parameter 'methods'");
			}
			if(index === undefined || index === null) {
				throw new Error("Missing parameter 'index'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(call === undefined || call === null) {
				throw new Error("Missing parameter 'call'");
			}
			if(argName === undefined || argName === null) {
				throw new Error("Missing parameter 'argName'");
			}
			if(refName === undefined || refName === null) {
				throw new Error("Missing parameter 'refName'");
			}
			if(returns === undefined || returns === null) {
				throw new Error("Missing parameter 'returns'");
			}
			var tree = [];
			var usages = [];
			var types, usage, type, nf, t, item;
			for(var i = 0, __ks_0 = methods.length; i < __ks_0; ++i) {
				types = $helper.methodTypes(methods[i], index);
				usage = {
					method: methods[i],
					usage: 0,
					tree: []
				};
				for(var __ks_1 = 0, __ks_2 = types.length; __ks_1 < __ks_2; ++__ks_1) {
					type = types[__ks_1];
					nf = true;
					for(var __ks_3 = 0, __ks_4 = tree.length, tt; nf && __ks_3 < __ks_4; ++__ks_3) {
						tt = tree[__ks_3];
						if($method.sameType(type.type, tt.type)) {
							tt.methods.push(methods[i]);
							nf = false;
						}
					}
					if(nf) {
						item = {
							type: type.type,
							path: "this.constructor.__ks_reflect." + refName + "[" + methods[i].index + "].parameters[" + type.index + "]" + type.path,
							methods: [methods[i]]
						};
						tree.push(item);
						usage.tree.push(item);
						++usage.usage;
					}
				}
				usages.push(usage);
			}
			if(tree.length === 1) {
				var __ks_item_1 = tree[0];
				if(__ks_item_1.methods.length === 1) {
					call(fragments, __ks_item_1.methods[0], __ks_item_1.methods[0].index);
					return false;
				}
				else {
					return $helper.methodCheckTree(__ks_item_1.methods, index + 1, node, fragments, call, argName, refName, returns);
				}
			}
			else {
				var ctrl = fragments.newControl();
				var ne = true;
				usages.sort(function(a, b) {
					if(a === undefined || a === null) {
						throw new Error("Missing parameter 'a'");
					}
					if(b === undefined || b === null) {
						throw new Error("Missing parameter 'b'");
					}
					return a.usage - b.usage;
				});
				for(var u = 0, __ks_3 = usages.length; u < __ks_3; ++u) {
					usage = usages[u];
					if(usage.tree.length === usage.usage) {
						item = usage.tree[0];
						if((u + 1) === usages.length) {
							if(!ctrl.isFirstStep()) {
								ctrl.step().code("else");
								ne = false;
							}
						}
						else {
							if(!ctrl.isFirstStep()) {
								ctrl.step().code("else");
							}
							ctrl.code("if(");
							$helper.decide(node, ctrl, item.type, index, item.path, argName);
							ctrl.code(")");
						}
						ctrl.step();
						if(item.methods.length === 1) {
							call(ctrl, item.methods[0], item.methods[0].index);
						}
						else {
							$helper.methodCheckTree(item.methods, index + 1, node, ctrl, call, argName, refName, returns);
						}
					}
					else {
						$throw("Not Implemented", node);
					}
				}
				ctrl.done();
				return ne;
			}
		},
		methodTypes: function(method, index) {
			if(method === undefined || method === null) {
				throw new Error("Missing parameter 'method'");
			}
			if(index === undefined || index === null) {
				throw new Error("Missing parameter 'index'");
			}
			var types = [];
			var k = -1;
			var parameter;
			for(var i = 0, __ks_0 = method.parameters.length; i < __ks_0; ++i) {
				parameter = method.parameters[i];
				if(k < index) {
					if((k + parameter.max) >= index) {
						if(Type.isArray(parameter.type)) {
							for(var j = 0, __ks_1 = parameter.type.length; j < __ks_1; ++j) {
								types.push({
									type: parameter.type[j],
									index: i,
									path: ".type[" + j + "]"
								});
							}
						}
						else {
							types.push({
								type: parameter.type,
								index: i,
								path: ".type"
							});
						}
					}
					k += parameter.min;
				}
			}
			return types;
		},
		reflect: function(node, fragments, reflect) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(reflect === undefined || reflect === null) {
				throw new Error("Missing parameter 'reflect'");
			}
			var classname = node._name;
			var line = fragments.newLine();
			line.code(classname + ".__ks_reflect = ");
			var object = line.newObject();
			if(reflect.sealed) {
				object.line("sealed: true");
			}
			object.newLine().code("inits: " + reflect.inits);
			var a = object.newLine().code("constructors: ").newArray();
			for(var i = 0, __ks_0 = reflect.constructors.length; i < __ks_0; ++i) {
				$helper.reflectMethod(node, a.newLine(), reflect.constructors[i].signature, reflect.constructors[i].parameters, classname + ".__ks_reflect.constructors[" + i + "].type");
			}
			a.done();
			object.line("destructors: ", reflect.destructors);
			var o = object.newLine().code("instanceVariables: ").newObject();
			for(var name in reflect.instanceVariables) {
				var variable = reflect.instanceVariables[name];
				$helper.reflectVariable(node, o.newLine(), name, variable.signature, variable.type, classname + ".__ks_reflect.instanceVariables." + name);
			}
			o.done();
			o = object.newLine().code("classVariables: ").newObject();
			for(var name in reflect.classVariables) {
				var variable = reflect.classVariables[name];
				$helper.reflectVariable(node, o.newLine(), name, variable.signature, variable.type, classname + ".__ks_reflect.classVariables." + name);
			}
			o.done();
			o = object.newLine().code("instanceMethods: ").newObject();
			for(var name in reflect.instanceMethods) {
				var methods = reflect.instanceMethods[name];
				a = o.newLine().code(name + ": ").newArray();
				for(var i = 0, __ks_0 = methods.length; i < __ks_0; ++i) {
					$helper.reflectMethod(node, a.newLine(), methods[i].signature, methods[i].parameters, classname + ".__ks_reflect.instanceMethods." + name + "[" + i + "]");
				}
				a.done();
			}
			o.done();
			o = object.newLine().code("classMethods: ").newObject();
			for(var name in reflect.classMethods) {
				var methods = reflect.classMethods[name];
				a = o.newLine().code(name + ": ").newArray();
				for(var i = 0, __ks_0 = methods.length; i < __ks_0; ++i) {
					$helper.reflectMethod(node, a.newLine(), methods[i].signature, methods[i].parameters, classname + ".__ks_reflect.classMethods." + name + "[" + i + "]");
				}
				a.done();
			}
			o.done();
			object.done();
			line.done();
		},
		reflectMethod: function() {
			if(arguments.length < 4) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			var fragments = arguments[++__ks_i];
			var signature = arguments[++__ks_i];
			var parameters = arguments[++__ks_i];
			if(arguments.length > 4) {
				var path = arguments[++__ks_i];
			}
			else {
				var path = null;
			}
			var object = fragments.newObject();
			object.newLine().code("access: " + signature.access);
			object.newLine().code("min: " + signature.min);
			object.newLine().code("max: " + ((signature.max === Infinity) ? "Infinity" : signature.max));
			var array = object.newLine().code("parameters: ").newArray();
			for(var i = 0, __ks_0 = signature.parameters.length; i < __ks_0; ++i) {
				$helper.reflectParameter(node, array.newLine(), signature.parameters[i], parameters[i], path + ".parameters[" + i + "]");
			}
			array.done();
			object.done();
		},
		reflectParameter: function() {
			if(arguments.length < 4) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			var fragments = arguments[++__ks_i];
			var signature = arguments[++__ks_i];
			var type = arguments[++__ks_i];
			if(arguments.length > 4) {
				var path = arguments[++__ks_i];
			}
			else {
				var path = null;
			}
			var object = fragments.newObject();
			object.newLine().code("type: " + $helper.type(type, node, path));
			object.newLine().code("min: " + signature.min);
			object.newLine().code("max: " + signature.max);
			object.done();
		},
		reflectVariable: function() {
			if(arguments.length < 4) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			var fragments = arguments[++__ks_i];
			var name = arguments[++__ks_i];
			var signature = arguments[++__ks_i];
			if(arguments.length > 4) {
				var type = arguments[++__ks_i];
			}
			else {
				var type = null;
			}
			if(arguments.length > 5) {
				var path = arguments[++__ks_i];
			}
			else {
				var path = null;
			}
			var object = fragments.code(name, ": ").newObject();
			object.line("access: " + signature.access);
			if(Type.isValue(type)) {
				object.line("type: " + $helper.type(type, node, path));
			}
			object.done();
		},
		type: function() {
			if(arguments.length < 2) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var type = arguments[++__ks_i];
			var node = arguments[++__ks_i];
			if(arguments.length > 2) {
				var path = arguments[++__ks_i];
			}
			else {
				var path = null;
			}
			if(Type.isArray(type)) {
				var src = "";
				for(var i = 0, __ks_0 = type.length; i < __ks_0; ++i) {
					if(i) {
						src += ",";
					}
					src += $helper.type(type[i], node, path);
				}
				return "[" + src + "]";
			}
			else if(type.kind === HelperTypeKind.Native) {
				return $quote(type.type);
			}
			else if(type.kind === HelperTypeKind.Referenced) {
				return type.type;
			}
			else if(type.kind === HelperTypeKind.Unreferenced) {
				if(Type.isValue(path)) {
					node.module().addReference(type.type, path + ".type = " + type.type);
					return $quote("#" + type.type);
				}
				else {
					$throw("Invalid type " + type.type, node);
				}
			}
		}
	};
	var $method = {
		isConstructor: function(name, variable) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			return name === "$create";
		},
		isDestructor: function(name, variable) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			return name === "$destroy";
		},
		sameType: function(s1, s2) {
			if(s1 === undefined || s1 === null) {
				throw new Error("Missing parameter 's1'");
			}
			if(s2 === undefined || s2 === null) {
				throw new Error("Missing parameter 's2'");
			}
			if(Type.isArray(s1)) {
				if(Type.isArray(s2) && (s1.length === s2.length)) {
					for(var i = 0, __ks_0 = s1.length; i < __ks_0; ++i) {
						if(!$method.sameType(s1[i], s2[i])) {
							return false;
						}
					}
					return true;
				}
				else {
					return false;
				}
			}
			else {
				return s1 === s2;
			}
		},
		signature: function(data, node) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			var signature = {
				access: MemberAccess.Public,
				min: 0,
				max: 0,
				parameters: []
			};
			if(data.modifiers) {
				for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
					modifier = data.modifiers[__ks_0];
					if(modifier.kind === FunctionModifier.Async) {
						signature.async = true;
					}
					else if(modifier.kind === MemberModifier.Private) {
						signature.access = MemberAccess.Private;
					}
					else if(modifier.kind === MemberModifier.Protected) {
						signature.access = MemberAccess.Protected;
					}
				}
			}
			var type, last, nf;
			for(var __ks_0 = 0, __ks_1 = data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = data.parameters[__ks_0];
				type = $signature.type(parameter.type, node.scope());
				if(!last || !$method.sameType(type, last.type)) {
					if(last) {
						signature.min += last.min;
						signature.max += last.max;
					}
					last = {
						type: $signature.type(parameter.type, node.scope()),
						min: (parameter.defaultValue || (parameter.type && parameter.type.nullable)) ? 0 : 1,
						max: 1
					};
					if(parameter.modifiers) {
						for(var __ks_2 = 0, __ks_3 = parameter.modifiers.length, modifier; __ks_2 < __ks_3; ++__ks_2) {
							modifier = parameter.modifiers[__ks_2];
							if(modifier.kind === ParameterModifier.Rest) {
								if(modifier.arity) {
									last.min += modifier.arity.min;
									last.max += modifier.arity.max;
								}
								else {
									last.max = Infinity;
								}
							}
						}
					}
					signature.parameters.push(last);
				}
				else {
					nf = true;
					if(parameter.modifiers) {
						for(var __ks_2 = 0, __ks_3 = parameter.modifiers.length, modifier; __ks_2 < __ks_3; ++__ks_2) {
							modifier = parameter.modifiers[__ks_2];
							if(modifier.kind === ParameterModifier.Rest) {
								if(modifier.arity) {
									last.min += modifier.arity.min;
									last.max += modifier.arity.max;
								}
								else {
									last.max = Infinity;
								}
								nf = false;
							}
						}
					}
					if(nf) {
						if(!(parameter.defaultValue || (parameter.type && parameter.type.nullable))) {
							++last.min;
						}
						++last.max;
					}
				}
			}
			if(last) {
				signature.min += last.min;
				signature.max += last.max;
			}
			return signature;
		}
	};
	var ClassDeclaration = Helper.class({
		$name: "ClassDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._classMethods = {};
			this._classVariables = {};
			this._constructors = [];
			this._destructor = null;
			this._es5 = false;
			this._sealed = false;
			this._instanceMethods = {};
			this._instanceVariables = {};
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ClassDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			this._constructorScope = new Scope(parent.scope());
			this._destructorScope = new Scope(parent.scope());
			this._instanceVariableScope = new Scope(parent.scope());
			this._es5 = this._options.format.classes === "es5";
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			var scope = this._scope;
			this._name = data.name.name;
			this._variable = $variable.define(this, scope, data.name, VariableKind.Class, data.type);
			var classname = data.name;
			var thisVariable = $variable.define(this, this._constructorScope, {
				kind: Kind.Identifier,
				name: "this"
			}, VariableKind.Variable, $type.reference(classname.name));
			thisVariable.callable = function(data) {
				if(data === undefined || data === null) {
					throw new Error("Missing parameter 'data'");
				}
				data.arguments = [{
					kind: Kind.Identifier,
					name: "this"
				}, {
					kind: Kind.ArrayExpression,
					values: data.arguments
				}];
				data.callee = {
					kind: Kind.MemberExpression,
					object: {
						kind: Kind.MemberExpression,
						object: {
							kind: Kind.MemberExpression,
							object: classname,
							property: {
								kind: Kind.Identifier,
								name: "prototype"
							},
							computed: false,
							nullable: false
						},
						property: {
							kind: Kind.Identifier,
							name: "__ks_cons"
						},
						computed: false,
						nullable: false
					},
					property: {
						kind: Kind.Identifier,
						name: "call"
					},
					computed: false,
					nullable: false
				};
			};
			thisVariable = $variable.define(this, this._destructorScope, {
				kind: Kind.Identifier,
				name: "this"
			}, VariableKind.Variable, $type.reference(classname.name));
			this._destructorScope.rename("this", "that");
			$variable.define(this, this._instanceVariableScope, {
				kind: Kind.Identifier,
				name: "this"
			}, VariableKind.Variable, $type.reference(classname.name));
			if((this._extends = Type.isValue(data.extends))) {
				var __ks_0;
				if(!(Type.isValue(__ks_0 = this._scope.getVariable(data.extends.name)) ? (this._extendsVariable = __ks_0, true) : false)) {
					$throw("Undefined class " + data.extends.name + " at line " + data.extends.start.line, this);
				}
				this._extendsName = data.extends.name;
				var extname = data.extends;
				var superVariable = $variable.define(this, this._constructorScope, {
					kind: Kind.Identifier,
					name: "super"
				}, VariableKind.Variable);
				superVariable.callable = function(data) {
					if(data === undefined || data === null) {
						throw new Error("Missing parameter 'data'");
					}
					data.arguments = [{
						kind: Kind.Identifier,
						name: "this"
					}, {
						kind: Kind.ArrayExpression,
						values: data.arguments
					}];
					data.callee = {
						kind: Kind.MemberExpression,
						object: {
							kind: Kind.MemberExpression,
							object: {
								kind: Kind.MemberExpression,
								object: extname,
								property: {
									kind: Kind.Identifier,
									name: "prototype"
								},
								computed: false,
								nullable: false
							},
							property: {
								kind: Kind.Identifier,
								name: "__ks_cons"
							},
							computed: false,
							nullable: false
						},
						property: {
							kind: Kind.Identifier,
							name: "call"
						},
						computed: false,
						nullable: false
					};
				};
				$variable.define(this, this._instanceVariableScope, {
					kind: Kind.Identifier,
					name: "super"
				}, VariableKind.Variable);
			}
			var signature, method;
			for(var __ks_0 = 0, __ks_1 = data.members.length, member; __ks_0 < __ks_1; ++__ks_0) {
				member = data.members[__ks_0];
				var __ks_2 = member.kind;
				if(__ks_2 === Kind.CommentBlock) {
				}
				else if(__ks_2 === Kind.CommentLine) {
				}
				else if(__ks_2 === Kind.FieldDeclaration) {
					var instance = true;
					for(var i = 0, __ks_3 = member.modifiers.length; instance && i < __ks_3; ++i) {
						if(member.modifiers[i].kind === MemberModifier.Static) {
							instance = false;
						}
					}
					signature = $field.signature(member, this);
					var variable = {
						data: member,
						signature: signature,
						type: $helper.analyseType(signature.type, this)
					};
					if(Type.isValue(member.defaultValue)) {
						if(instance) {
							this._scope = this._instanceVariableScope;
						}
						variable.defaultValue = $compile.expression(member.defaultValue, this);
						if(instance) {
							this._scope = scope;
						}
					}
					if(instance) {
						this._instanceVariables[member.name.name] = variable;
						this._variable.instanceVariables[member.name.name] = signature;
					}
					else {
						this._classVariables[member.name.name] = variable;
						this._variable.classVariables[member.name.name] = signature;
					}
				}
				else if(__ks_2 === Kind.MethodDeclaration) {
					if($method.isConstructor(member.name.name, this._variable)) {
						this._scope = this._constructorScope;
						method = $compile.statement(member, this);
						signature = $method.signature(member, this);
						this._constructors.push({
							data: member,
							signature: signature,
							statement: method,
							parameters: Helper.mapArray(signature.parameters, Helper.vcurry(function(parameter) {
								return $helper.analyseType(parameter.type, this);
							}, this))
						});
						this._variable.constructors.push(signature);
						this._scope = scope;
					}
					else if($method.isDestructor(member.name.name, this._variable)) {
						this._scope = this._destructorScope;
						member.parameters.push({
							kind: Kind.Parameter,
							modifiers: [],
							name: $identifier("that")
						});
						method = $compile.statement(member, this);
						method.instance(false);
						this._destructor = {
							data: member,
							statement: method
						};
						this._variable.destructors++;
						this._scope = scope;
					}
					else {
						var instance = true;
						for(var i = 0, __ks_3 = member.modifiers.length; instance && i < __ks_3; ++i) {
							if(member.modifiers[i].kind === MemberModifier.Static) {
								instance = false;
							}
						}
						if(instance) {
							this._scope = this.newInstanceMethodScope(data, member);
						}
						signature = $method.signature(member, this);
						method = {
							data: member,
							signature: signature,
							statement: $compile.statement(member, this),
							parameters: Helper.mapArray(signature.parameters, Helper.vcurry(function(parameter) {
								return $helper.analyseType(parameter.type, this);
							}, this))
						};
						if(instance) {
							if(!Type.isArray(this._instanceMethods[member.name.name])) {
								this._instanceMethods[member.name.name] = [];
								this._variable.instanceMethods[member.name.name] = [];
							}
							this._instanceMethods[member.name.name].push(method);
							this._variable.instanceMethods[member.name.name].push(signature);
							this._scope = scope;
						}
						else {
							method.statement.instance(false);
							if(!Type.isArray(this._classMethods[member.name.name])) {
								this._classMethods[member.name.name] = [];
								this._variable.classMethods[member.name.name] = [];
							}
							this._classMethods[member.name.name].push(method);
							this._variable.classMethods[member.name.name].push(signature);
						}
					}
				}
				else {
					$throw("Unknow kind " + member.kind, this);
				}
			}
			this._sealed = !!data.sealed;
			if(this._sealed) {
				this._variable.sealed = {
					name: "__ks_" + this._variable.name.name,
					constructors: false,
					instanceMethods: {},
					classMethods: {}
				};
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.statement.analyse();
			}
			if(Type.isValue(this._destructor)) {
				this._destructor.statement.analyse();
			}
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.statement.analyse();
				}
			}
			for(var name in this._classMethods) {
				var methods = this._classMethods[name];
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.statement.analyse();
				}
			}
			for(var name in this._instanceVariables) {
				var variable = this._instanceVariables[name];
				if(Type.isValue(variable.defaultValue)) {
					variable.defaultValue.fuse();
				}
			}
			for(var name in this._classVariables) {
				var variable = this._classVariables[name];
				if(Type.isValue(variable.defaultValue)) {
					variable.defaultValue.fuse();
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.statement.fuse();
			}
			if(Type.isValue(this._destructor)) {
				this._destructor.statement.fuse();
			}
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.statement.fuse();
				}
			}
			for(var name in this._classMethods) {
				var methods = this._classMethods[name];
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.statement.fuse();
				}
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_newInstanceMethodScope_0: function(data, member) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(member === undefined || member === null) {
				throw new Error("Missing parameter 'member'");
			}
			var scope = new Scope(this._scope);
			$variable.define(this, scope, {
				kind: Kind.Identifier,
				name: "this"
			}, VariableKind.Variable, $type.reference(data.name.name));
			if(this._extends) {
				var variable = $variable.define(this, scope, {
					kind: Kind.Identifier,
					name: "super"
				}, VariableKind.Variable);
				if(this._es5) {
					var extname = this._data.extends;
					variable.callable = function(data) {
						if(data === undefined || data === null) {
							throw new Error("Missing parameter 'data'");
						}
						data.arguments = [{
							kind: Kind.Identifier,
							name: "this"
						}, {
							kind: Kind.ArrayExpression,
							values: data.arguments
						}];
						data.callee = {
							kind: Kind.MemberExpression,
							object: {
								kind: Kind.MemberExpression,
								object: {
									kind: Kind.MemberExpression,
									object: extname,
									property: {
										kind: Kind.Identifier,
										name: "prototype"
									},
									computed: false,
									nullable: false
								},
								property: member.name,
								computed: false,
								nullable: false
							},
							property: {
								kind: Kind.Identifier,
								name: "call"
							},
							computed: false,
							nullable: false
						};
					};
					variable.reduce = function(data) {
						if(data === undefined || data === null) {
							throw new Error("Missing parameter 'data'");
						}
						data.arguments = [{
							kind: Kind.Identifier,
							name: "this"
						}, {
							kind: Kind.ArrayExpression,
							values: data.arguments
						}];
						data.callee = {
							kind: Kind.MemberExpression,
							object: {
								kind: Kind.MemberExpression,
								object: {
									kind: Kind.MemberExpression,
									object: extname,
									property: {
										kind: Kind.Identifier,
										name: "prototype"
									},
									computed: false,
									nullable: false
								},
								property: member.name,
								computed: false,
								nullable: false
							},
							property: {
								kind: Kind.Identifier,
								name: "apply"
							},
							computed: false,
							nullable: false
						};
					};
				}
				else {
					variable.callable = function(data) {
						if(data === undefined || data === null) {
							throw new Error("Missing parameter 'data'");
						}
						data.callee = {
							kind: Kind.MemberExpression,
							object: data.callee,
							property: member.name,
							computed: false,
							nullable: false
						};
					};
				}
			}
			return scope;
		},
		newInstanceMethodScope: function() {
			if(arguments.length === 2) {
				return ClassDeclaration.prototype.__ks_func_newInstanceMethodScope_0.apply(this, arguments);
			}
			else if(Statement.prototype.newInstanceMethodScope) {
				return Statement.prototype.newInstanceMethodScope.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._sealed) {
				$class.sealed(this, fragments);
				fragments.line("var " + this._variable.sealed.name + " = {}");
			}
			else {
				$class.continuous(this, fragments);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ClassDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ClassDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_classMethods: {
				access: 1,
				type: "Any"
			},
			_classVariables: {
				access: 1,
				type: "Any"
			},
			_constructors: {
				access: 1,
				type: "Any"
			},
			_constructorScope: {
				access: 1,
				type: "Any"
			},
			_destructor: {
				access: 1,
				type: "Any"
			},
			_destructorScope: {
				access: 1,
				type: "Any"
			},
			_es5: {
				access: 1,
				type: "Any"
			},
			_extends: {
				access: 1,
				type: "Any"
			},
			_extendsName: {
				access: 1,
				type: "Any"
			},
			_extendsVariable: {
				access: 1,
				type: "Any"
			},
			_sealed: {
				access: 1,
				type: "Any"
			},
			_instanceMethods: {
				access: 1,
				type: "Any"
			},
			_instanceVariables: {
				access: 1,
				type: "Any"
			},
			_instanceVariableScope: {
				access: 1,
				type: "Any"
			},
			_name: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			newInstanceMethodScope: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var MethodDeclaration = Helper.class({
		$name: "MethodDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._instance = true;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			MethodDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				MethodDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._parameters = Helper.mapArray(this._data.parameters, Helper.vcurry(function(parameter) {
				return new Parameter(parameter, this);
			}, this));
			if(Type.isValue(this._data.body)) {
				this._statements = Helper.mapArray($body(this._data.body), Helper.vcurry(function(statement) {
					return $compile.statement(statement, this);
				}, this));
			}
			else {
				this._statements = [];
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return MethodDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this.compile(this._parameters);
			this.compile(this._statements);
		},
		fuse: function() {
			if(arguments.length === 0) {
				return MethodDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_instance_0: function(instance) {
			if(instance === undefined || instance === null) {
				throw new Error("Missing parameter 'instance'");
			}
			this._instance = instance;
			return this;
		},
		instance: function() {
			if(arguments.length === 1) {
				return MethodDeclaration.prototype.__ks_func_instance_0.apply(this, arguments);
			}
			else if(Statement.prototype.instance) {
				return Statement.prototype.instance.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_name_0: function(name) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			this._name = name;
			return this;
		},
		name: function() {
			if(arguments.length === 1) {
				return MethodDeclaration.prototype.__ks_func_name_0.apply(this, arguments);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var ctrl = fragments.newControl();
			if(this._parent._es5) {
				ctrl.code($class.methodHeader(this._name, this._parent) + "(");
			}
			else {
				if(!this._instance) {
					ctrl.code("static ");
				}
				ctrl.code(this._name + "(");
			}
			$function.parameters(this, ctrl, function(node) {
				if(node === undefined || node === null) {
					throw new Error("Missing parameter 'node'");
				}
				return node.code(")").step();
			});
			var variable = this._parent._variable;
			var nf, modifier;
			for(var p = 0, __ks_0 = this._data.parameters.length, parameter; p < __ks_0; ++p) {
				parameter = this._data.parameters[p];
				nf = true;
				for(var __ks_1 = 0, __ks_2 = parameter.modifiers.length; nf && __ks_1 < __ks_2; ++__ks_1) {
					modifier = parameter.modifiers[__ks_1];
					if(modifier.kind === ParameterModifier.Member) {
						var name = parameter.name.name;
						if(variable.instanceVariables[name]) {
							ctrl.newLine().code("this." + name + " = ").compile(this._parameters[p]).done();
						}
						else if(variable.instanceVariables["_" + name]) {
							ctrl.newLine().code("this._" + name + " = ").compile(this._parameters[p]).done();
						}
						else if(variable.instanceMethods[name] && variable.instanceMethods[name]["1"]) {
							ctrl.newLine().code("this." + name + "(").compile(this._parameters[p]).code(")").done();
						}
						else {
							$throw("Can't set member " + name + " (line " + parameter.start.line + ")", this);
						}
						nf = false;
					}
				}
			}
			for(var __ks_1 = 0, __ks_2 = this._statements.length, statement; __ks_1 < __ks_2; ++__ks_1) {
				statement = this._statements[__ks_1];
				ctrl.compile(statement);
			}
			if(!this._parent._es5) {
				ctrl.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return MethodDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	MethodDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_name: {
				access: 1,
				type: "Any"
			},
			_parameters: {
				access: 1,
				type: "Any"
			},
			_statements: {
				access: 1,
				type: "Any"
			},
			_instance: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			instance: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			name: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ContinueStatement = Helper.class({
		$name: "ContinueStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ContinueStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ContinueStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.line("continue", this._data);
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ContinueStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ContinueStatement.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var DestroyStatement = Helper.class({
		$name: "DestroyStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._expression = $compile.expression(this._data.variable, this);
			if(this._data.variable.kind === Kind.Identifier) {
				this._variable = this._scope.getVariable(this._data.variable.name);
				this._scope.removeVariable(this._data.variable.name);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DestroyStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._expression.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return DestroyStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var type, __ks_0;
			if(Type.isValue(this._variable) && Type.isValue(this._variable.type) && (Type.isValue(__ks_0 = $variable.fromType(this._variable.type, this)) ? (type = __ks_0, true) : false) && (type.destructors > 0)) {
				fragments.newLine().code(type.name.name, ".__ks_destroy(").compile(this._expression).code(")").done();
			}
			if(Type.is(this._expression, IdentifierLiteral)) {
				fragments.newLine().compile(this._expression).code(" = undefined").done();
			}
			else {
				fragments.newLine().code("delete ").compile(this._expression).done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return DestroyStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	DestroyStatement.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_expression: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var DoUntilStatement = Helper.class({
		$name: "DoUntilStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._body = $compile.expression(this._data.body, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DoUntilStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._condition.fuse();
			this._body.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return DoUntilStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.newControl().code("do").step().compile(this._body).step().code("while(!(").compileBoolean(this._condition).code("))").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return DoUntilStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	DoUntilStatement.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_condition: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var DoWhileStatement = Helper.class({
		$name: "DoWhileStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._body = $compile.expression(this._data.body, this);
			this._condition = $compile.expression(this._data.condition, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DoWhileStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._body.fuse();
			this._condition.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return DoWhileStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.newControl().code("do").step().compile(this._body).step().code("while(").compileBoolean(this._condition).code(")").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return DoWhileStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	DoWhileStatement.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_condition: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var EnumDeclaration = Helper.class({
		$name: "EnumDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._members = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			EnumDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._variable = $variable.define(this, this._scope, this._data.name, VariableKind.Enum, this._data.type);
			this._new = this._variable.new;
			for(var __ks_0 = 0, __ks_1 = this._data.members.length, member; __ks_0 < __ks_1; ++__ks_0) {
				member = this._data.members[__ks_0];
				this._members.push(new EnumMember(member, this));
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._new) {
				var line = fragments.newLine().code($variable.scope(this), this._variable.name.name, $equals);
				var object = line.newObject();
				for(var __ks_0 = 0, __ks_1 = this._members.length, member; __ks_0 < __ks_1; ++__ks_0) {
					member = this._members[__ks_0];
					member.toFragments(object.newLine());
				}
				object.done();
				line.done();
			}
			else {
				var line;
				for(var __ks_0 = 0, __ks_1 = this._members.length, member; __ks_0 < __ks_1; ++__ks_0) {
					member = this._members[__ks_0];
					member.toFragments(line = fragments.newLine());
					line.done();
				}
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return EnumDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	EnumDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_members: {
				access: 1,
				type: "Any"
			},
			_new: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var EnumMember = Helper.class({
		$name: "EnumMember",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			var variable = this._parent._variable;
			if(this._parent._new) {
				fragments.code(this._data.name.name, ": ", $variable.value(variable, this._data));
			}
			else {
				fragments.code(variable.name.name || variable.name, ".", this._data.name.name, " = ", $variable.value(variable, this._data));
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return EnumMember.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	EnumMember.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ExportDeclaration = Helper.class({
		$name: "ExportDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarations = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ExportDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			var module = this.module();
			var statement;
			for(var __ks_0 = 0, __ks_1 = data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = data.declarations[__ks_0];
				var __ks_2 = declaration.kind;
				if(__ks_2 === Kind.ClassDeclaration) {
					this._declarations.push(statement = $compile.statement(declaration, this));
					statement.analyse();
					module.export(declaration.name);
				}
				else if(__ks_2 === Kind.ExportAlias) {
					module.export(declaration.name, declaration.alias);
				}
				else if(__ks_2 === Kind.EnumDeclaration) {
					this._declarations.push(statement = $compile.statement(declaration, this));
					statement.analyse();
					module.export(declaration.name);
				}
				else if(__ks_2 === Kind.FunctionDeclaration) {
					this._declarations.push(statement = $compile.statement(declaration, this));
					statement.analyse();
					module.export(declaration.name);
				}
				else if(__ks_2 === Kind.Identifier) {
					module.export(declaration);
				}
				else if(__ks_2 === Kind.TypeAliasDeclaration) {
					$variable.define(this, this._scope, declaration.name, VariableKind.TypeAlias, declaration.type);
					module.export(declaration.name);
				}
				else if(__ks_2 === Kind.VariableDeclaration) {
					this._declarations.push(statement = $compile.statement(declaration, this));
					statement.analyse();
					for(var j = 0, __ks_3 = declaration.declarations.length; j < __ks_3; ++j) {
						module.export(declaration.declarations[j].name);
					}
				}
				else {
					$throw("Not Implemented", this);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExportDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._declarations[__ks_0];
				declaration.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ExportDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._declarations[__ks_0];
				declaration.toFragments(fragments, Mode.None);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ExportDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ExportDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_declarations: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ExpressionStatement = Helper.class({
		$name: "ExpressionStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._variable = "";
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ExpressionStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._expression = $compile.expression(this._data, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_assignment_0: function(data, expression) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(expression === undefined || expression === null) {
				throw new Error("Missing parameter 'expression'");
			}
			if((data.left.kind === Kind.Identifier) && !this._scope.hasVariable(data.left.name)) {
				if(!expression.isAssignable() || this._variable.length) {
					this._variables.push(data.left.name);
				}
				else {
					this._variable = data.left.name;
				}
				$variable.define(this, this._scope, data.left, $variable.kind(data.right.type), data.right.type);
			}
		},
		assignment: function() {
			if(arguments.length === 2) {
				return ExpressionStatement.prototype.__ks_func_assignment_0.apply(this, arguments);
			}
			return Statement.prototype.assignment.apply(this, arguments);
		},
		__ks_func_fuse_0: function() {
			this._expression.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._expression.isAssignable()) {
				if(this._variables.length) {
					fragments.newLine().code($variable.scope(this) + this._variables.join(", ")).done();
				}
				var line = fragments.newLine();
				if(this._variable.length) {
					line.code($variable.scope(this));
				}
				if(Type.isValue(this._expression.toAssignmentFragments)) {
					this._expression.toAssignmentFragments(line);
				}
				else {
					this._expression.toFragments(line, Mode.None);
				}
				line.done();
			}
			else if(Type.isValue(this._expression.toStatementFragments)) {
				if(this._variable.length) {
					this._variables.unshift(this._variable);
				}
				if(this._variables.length) {
					fragments.newLine().code($variable.scope(this) + this._variables.join(", ")).done();
				}
				this._expression.toStatementFragments(fragments, Mode.None);
			}
			else {
				if(this._variables.length) {
					fragments.newLine().code($variable.scope(this) + this._variables.join(", ")).done();
				}
				var line = fragments.newLine();
				if(this._variable.length) {
					line.code($variable.scope(this));
				}
				line.compile(this._expression, Mode.None).done();
			}
			for(var __ks_0 = 0, __ks_1 = this._afterwards.length, afterward; __ks_0 < __ks_1; ++__ks_0) {
				afterward = this._afterwards[__ks_0];
				afterward.toAfterwardFragments(fragments);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExpressionStatement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	ExpressionStatement.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_expression: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			assignment: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var $extern = {
		classMember: function(data, variable, node) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			var __ks_0 = data.kind;
			if(__ks_0 === Kind.FieldDeclaration) {
				$throw("Not Implemented", node);
			}
			else if(__ks_0 === Kind.MethodAliasDeclaration) {
				$throw("Not Implemented", node);
			}
			else if(__ks_0 === Kind.MethodDeclaration) {
				if($method.isConstructor(data.name.name, variable)) {
					variable.constructors.push($function.signature(data, node));
				}
				else if($method.isDestructor(data.name.name, variable)) {
					$throw("Not Implemented", node);
				}
				else {
					var method = {
						kind: Kind.MethodDeclaration,
						name: data.name.name,
						signature: $method.signature(data, node)
					};
					if(data.type) {
						method.type = $type.type(data.type, node.scope(), node);
					}
					var instance = true;
					for(var i = 0, __ks_1 = data.modifiers.length; instance && i < __ks_1; ++i) {
						if(data.modifiers[i].kind === MemberModifier.Static) {
							instance = false;
						}
					}
					if(instance) {
						if(!Type.isArray(variable.instanceMethods[data.name.name])) {
							variable.instanceMethods[data.name.name] = [];
						}
						variable.instanceMethods[data.name.name].push(method);
					}
					else {
						if(!Type.isArray(variable.classMethods[data.name.name])) {
							variable.classMethods[data.name.name] = [];
						}
						variable.classMethods[data.name.name].push(method);
					}
				}
			}
			else {
				$throw("Unknow kind " + data.kind, node);
			}
		}
	};
	var ExternDeclaration = Helper.class({
		$name: "ExternDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._lines = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ExternDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			for(var __ks_0 = 0, __ks_1 = data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = data.declarations[__ks_0];
				var __ks_2 = declaration.kind;
				if(__ks_2 === Kind.ClassDeclaration) {
					var variable = $variable.define(this, this.greatScope(), declaration.name, VariableKind.Class, declaration);
					if(declaration.sealed) {
						variable.sealed = {
							name: "__ks_" + variable.name.name,
							constructors: false,
							instanceMethods: {},
							classMethods: {}
						};
						this._lines.push("var " + variable.sealed.name + " = {}");
					}
					for(var i = 0, __ks_3 = declaration.members.length; i < __ks_3; ++i) {
						$extern.classMember(declaration.members[i], variable, this);
					}
				}
				else if(__ks_2 === Kind.VariableDeclarator) {
					var variable = $variable.define(this, this.greatScope(), declaration.name, $variable.kind(declaration.type), declaration.type);
					if(declaration.sealed) {
						variable.sealed = {
							name: "__ks_" + variable.name.name,
							properties: {}
						};
						this._lines.push("var " + variable.sealed.name + " = {}");
					}
				}
				else {
					$throw("Unknow kind " + declaration.kind, this);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExternDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ExternDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			for(var __ks_0 = 0, __ks_1 = this._lines.length, line; __ks_0 < __ks_1; ++__ks_0) {
				line = this._lines[__ks_0];
				fragments.line(line);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ExternDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ExternDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_lines: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ExternOrRequireDeclaration = Helper.class({
		$name: "ExternOrRequireDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			var module = this.module();
			module.flag("Type");
			for(var __ks_0 = 0, __ks_1 = data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = data.declarations[__ks_0];
				var __ks_2 = declaration.kind;
				if(__ks_2 === Kind.ClassDeclaration) {
					var variable = $variable.define(this, this.greatScope(), declaration.name, VariableKind.Class, declaration);
					variable.requirement = declaration.name.name;
					if(declaration.sealed) {
						variable.sealed = {
							name: "__ks_" + variable.name.name,
							constructors: false,
							instanceMethods: {},
							classMethods: {}
						};
					}
					for(var i = 0, __ks_3 = declaration.members.length; i < __ks_3; ++i) {
						$extern.classMember(declaration.members[i], variable, this);
					}
					module.require(variable, false);
				}
				else if(__ks_2 === Kind.VariableDeclarator) {
					var type;
					var variable = $variable.define(this, this.greatScope(), declaration.name, type = $variable.kind(declaration.type), declaration.type);
					variable.requirement = declaration.name.name;
					if(declaration.sealed) {
						variable.sealed = {
							name: "__ks_" + variable.name.name,
							properties: {}
						};
					}
					module.require(variable, false);
				}
				else {
					$throw("Unknow kind " + declaration.kind, this);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExternOrRequireDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ExternOrRequireDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ExternOrRequireDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ExternOrRequireDeclaration.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ForFromStatement = Helper.class({
		$name: "ForFromStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._defineVariable = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForFromStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ForFromStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			if(!this._scope.hasVariable(data.variable.name)) {
				$variable.define(this, this._scope, data.variable.name, $variable.kind(data.variable.type), data.variable.type);
				this._defineVariable = true;
			}
			this._variable = $compile.expression(data.variable, this);
			this._from = $compile.expression(data.from, this);
			var context = this._defineVariable ? null : this;
			if(data.til) {
				this._til = $compile.expression(data.til, this);
				if(this._til.isComposite()) {
					this._boundName = this._scope.acquireTempName(context);
				}
			}
			else {
				this._to = $compile.expression(data.to, this);
				if(this._to.isComposite()) {
					this._boundName = this._scope.acquireTempName(context);
				}
			}
			if(data.by) {
				this._by = $compile.expression(data.by, this);
				if(this._by.isComposite()) {
					this._byName = this._scope.acquireTempName(context);
				}
			}
			if(data.until) {
				this._until = $compile.expression(data.until, this);
			}
			else if(data.while) {
				this._while = $compile.expression(data.while, this);
			}
			if(data.when) {
				this._when = $compile.expression(data.when, this);
			}
			this._body = $compile.expression($block(data.body), this);
			if(Type.isValue(this._boundName)) {
				this._scope.releaseTempName(this._boundName);
			}
			if(Type.isValue(this._byName)) {
				this._scope.releaseTempName(this._byName);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForFromStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._body.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ForFromStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var data = this._data;
			var ctrl = fragments.newControl().code("for(");
			if(data.declaration || this._defineVariable) {
				ctrl.code($variable.scope(this));
			}
			ctrl.compile(this._variable).code($equals).compile(this._from);
			if(Type.isValue(this._boundName)) {
				ctrl.code($comma, this._boundName, $equals).compile(Type.isValue(this._til) ? this._til : this._to);
			}
			if(Type.isValue(this._byName)) {
				ctrl.code($comma, this._byName, $equals).compile(this._by);
			}
			ctrl.code("; ");
			if(data.until) {
				ctrl.code("!(").compileBoolean(this._until).code(") && ");
			}
			else if(data.while) {
				ctrl.compileBoolean(this._while).code(" && ");
			}
			ctrl.compile(this._variable);
			var desc = (data.by && (data.by.kind === Kind.NumericExpression) && (data.by.value < 0)) || ((data.from.kind === Kind.NumericExpression) && ((data.to && (data.to.kind === Kind.NumericExpression) && (data.from.value > data.to.value)) || (data.til && (data.til.kind === Kind.NumericExpression) && (data.from.value > data.til.value))));
			if(data.til) {
				if(desc) {
					ctrl.code(" > ");
				}
				else {
					ctrl.code(" < ");
				}
				ctrl.compile(Type.isValue(this._boundName) ? this._boundName : this._til);
			}
			else {
				if(desc) {
					ctrl.code(" >= ");
				}
				else {
					ctrl.code(" <= ");
				}
				ctrl.compile(Type.isValue(this._boundName) ? this._boundName : this._to);
			}
			ctrl.code("; ");
			if(data.by) {
				if(data.by.kind === Kind.NumericExpression) {
					if(data.by.value === 1) {
						ctrl.code("++").compile(this._variable);
					}
					else if(data.by.value === -1) {
						ctrl.code("--").compile(this._variable);
					}
					else if(data.by.value >= 0) {
						ctrl.compile(this._variable).code(" += ").compile(this._by);
					}
					else {
						ctrl.compile(this._variable).code(" -= ", -data.by.value);
					}
				}
				else {
					ctrl.compile(this._variable).code(" += ").compile(Type.isValue(this._byName) ? this._byName : this._by);
				}
			}
			else if(desc) {
				ctrl.code("--").compile(this._variable);
			}
			else {
				ctrl.code("++").compile(this._variable);
			}
			ctrl.code(")").step();
			if(data.when) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForFromStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ForFromStatement.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_by: {
				access: 1,
				type: "Any"
			},
			_defineVariable: {
				access: 1,
				type: "Any"
			},
			_til: {
				access: 1,
				type: "Any"
			},
			_to: {
				access: 1,
				type: "Any"
			},
			_until: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			},
			_when: {
				access: 1,
				type: "Any"
			},
			_while: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ForInStatement = Helper.class({
		$name: "ForInStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._defineIndex = false;
			this._defineVariable = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForInStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ForInStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			this._value = $compile.expression(data.value, this);
			if(!this._scope.hasVariable(data.variable.name)) {
				var variable, __ks_0;
				if(Type.isValue(data.variable.type)) {
					$variable.define(this, this._scope, data.variable.name, $variable.kind(data.variable.type), data.variable.type);
				}
				else if((Type.isValue(__ks_0 = $variable.fromAST(data.value, this)) ? (variable = __ks_0, true) : false) && ((Type.isValue(variable.type) && Type.isValue(variable.type.typeName)) ? variable.type.typeName.name === "Array" : false) && Type.isValue(variable.type.typeParameters)) {
					if(variable.type.typeParameters.length === 1) {
						$variable.define(this, this._scope, data.variable.name, $variable.kind(variable.type.typeParameters[0]), variable.type.typeParameters[0]);
					}
					else {
						$variable.define(this, this._scope, data.variable.name, VariableKind.Variable, variable.type.typeParameters);
					}
				}
				else {
					$variable.define(this, this._scope, data.variable.name, VariableKind.Variable);
				}
				this._defineVariable = true;
			}
			this._variable = $compile.expression(data.variable, this);
			if(data.index) {
				if(data.index && (data.declaration || !this._scope.hasVariable(data.index.name))) {
					$variable.define(this, this._scope, data.index.name, $variable.kind(data.index.type), data.index.type);
					this._defineIndex = true;
				}
				this._index = $compile.expression(data.index, this);
			}
			if(data.until) {
				this._until = $compile.expression(data.until, this);
			}
			else if(data.while) {
				this._while = $compile.expression(data.while, this);
			}
			if(data.when) {
				this._when = $compile.expression(data.when, this);
			}
			if(this._value.isEntangled()) {
				this._valueName = this.greatScope().acquireTempName();
				this._scope.updateTempNames();
			}
			if(!Type.isValue(this._index) && !(data.index && !data.declaration && this.greatScope().hasVariable(data.index.name))) {
				this._indexName = this._scope.acquireTempName();
			}
			if(!data.desc) {
				this._boundName = this._scope.acquireTempName();
			}
			this._body = $compile.expression($block(data.body), this);
			if(Type.isValue(this._valueName)) {
				this.greatScope().releaseTempName(this._valueName);
			}
			if(Type.isValue(this._indexName)) {
				this._scope.releaseTempName(this._indexName);
			}
			if(Type.isValue(this._boundName)) {
				this._scope.releaseTempName(this._boundName);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForInStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._value.fuse();
			this._body.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ForInStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var data = this._data;
			if(Type.isValue(this._valueName)) {
				var line = fragments.newLine();
				if(!this.greatScope().hasVariable(this._valueName)) {
					line.code($variable.scope(this));
					$variable.define(this, this.greatScope(), this._valueName, VariableKind.Variable);
				}
				line.code(this._valueName, $equals).compile(this._value).done();
			}
			var ctrl;
			if(data.desc) {
				if(data.index && !data.declaration && !this._defineIndex) {
					fragments.newLine().compile(this._index).code($equals).compile(Type.isValue(this._valueName) ? this._valueName : this._value).code(".length - 1").done();
					ctrl = fragments.newControl().code("for(");
				}
				else {
					ctrl = fragments.newControl().code("for(", $variable.scope(this)).compile(Type.isValue(this._indexName) ? this._indexName : this._index).code($equals).compile(Type.isValue(this._valueName) ? this._valueName : this._value).code(".length - 1");
				}
			}
			else {
				if(data.index && !data.declaration && !this._defineIndex) {
					fragments.newLine().compile(this._index).code(" = 0").done();
					ctrl = fragments.newControl().code("for(", $variable.scope(this));
				}
				else {
					ctrl = fragments.newControl().code("for(", $variable.scope(this)).compile(Type.isValue(this._indexName) ? this._indexName : this._index).code(" = 0, ");
				}
				ctrl.code(this._boundName, $equals).compile(Type.isValue(this._valueName) ? this._valueName : this._value).code(".length");
			}
			if(data.declaration || this._defineVariable) {
				ctrl.code($comma, data.variable.name);
			}
			ctrl.code("; ");
			if(data.until) {
				ctrl.code("!(").compile(this._until).code(") && ");
			}
			else if(data.while) {
				ctrl.compile(this._while).code(" && ");
			}
			if(data.desc) {
				ctrl.compile(Type.isValue(this._indexName) ? this._indexName : this._index).code(" >= 0; --").compile(Type.isValue(this._indexName) ? this._indexName : this._index);
			}
			else {
				ctrl.compile(Type.isValue(this._indexName) ? this._indexName : this._index).code(" < " + this._boundName + "; ++").compile(Type.isValue(this._indexName) ? this._indexName : this._index);
			}
			ctrl.code(")").step();
			ctrl.newLine().compile(this._variable).code($equals).compile(Type.isValue(this._valueName) ? this._valueName : this._value).code("[").compile(Type.isValue(this._indexName) ? this._indexName : this._index).code("]").done();
			if(data.when) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForInStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ForInStatement.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_defineIndex: {
				access: 1,
				type: "Any"
			},
			_defineVariable: {
				access: 1,
				type: "Any"
			},
			_index: {
				access: 1,
				type: "Any"
			},
			_until: {
				access: 1,
				type: "Any"
			},
			_value: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			},
			_when: {
				access: 1,
				type: "Any"
			},
			_while: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ForOfStatement = Helper.class({
		$name: "ForOfStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._defineIndex = false;
			this._defineVariable = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForOfStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ForOfStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			this._value = $compile.expression(data.value, this);
			if(!this._scope.hasVariable(data.variable.name)) {
				$variable.define(this, this._scope, data.variable.name, $variable.kind(data.variable.type), data.variable.type);
				this._defineVariable = true;
			}
			this._variable = $compile.expression(data.variable, this);
			if(data.index) {
				if(data.index && (data.declaration || !this._scope.hasVariable(data.index.name))) {
					$variable.define(this, this._scope, data.index.name, $variable.kind(data.index.type), data.index.type);
					this._defineIndex = true;
				}
				this._index = $compile.expression(data.index, this);
			}
			if(data.until) {
				this._until = $compile.expression(data.until, this);
			}
			else if(data.while) {
				this._while = $compile.expression(data.while, this);
			}
			if(data.when) {
				this._when = $compile.expression(data.when, this);
			}
			if(this._value.isEntangled()) {
				this._valueName = this.greatScope().acquireTempName();
				this._scope.updateTempNames();
			}
			this._body = $compile.expression($block(data.body), this);
			if(Type.isValue(this._valueName)) {
				this.greatScope().releaseTempName(this._valueName);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForOfStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._value.fuse();
			this._body.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ForOfStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var data = this._data;
			if(Type.isValue(this._valueName)) {
				var line = fragments.newLine();
				if(!this.greatScope().hasVariable(this._valueName)) {
					line.code($variable.scope(this));
					$variable.define(this, this.greatScope(), this._valueName, VariableKind.Variable);
				}
				line.code(this._valueName, $equals).compile(this._value).done();
			}
			var ctrl = fragments.newControl().code("for(");
			if(data.declaration || this._defineVariable) {
				ctrl.code($variable.scope(this));
			}
			ctrl.compile(this._variable).code(" in ").compile(Type.isValue(this._valueName) ? this._valueName : this._value).code(")").step();
			if(data.index) {
				var line = ctrl.newLine();
				if(data.declaration || this._defineIndex) {
					line.code($variable.scope(this));
				}
				line.compile(this._index).code($equals).compile(Type.isValue(this._valueName) ? this._valueName : this._value).code("[").compile(this._variable).code("]").done();
			}
			if(data.until) {
				ctrl.newControl().code("if(").compile(this._until).code(")").step().line("break").done();
			}
			else if(data.while) {
				ctrl.newControl().code("if(!(").compile(this._while).code("))").step().line("break").done();
			}
			if(data.when) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForOfStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ForOfStatement.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_defineIndex: {
				access: 1,
				type: "Any"
			},
			_defineVariable: {
				access: 1,
				type: "Any"
			},
			_index: {
				access: 1,
				type: "Any"
			},
			_until: {
				access: 1,
				type: "Any"
			},
			_value: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			},
			_when: {
				access: 1,
				type: "Any"
			},
			_while: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ForRangeStatement = Helper.class({
		$name: "ForRangeStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._defineVariable = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForRangeStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ForRangeStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			if(!this._scope.hasVariable(data.variable.name)) {
				$variable.define(this, this._scope, data.variable.name, $variable.kind(data.variable.type), data.variable.type);
				this._defineVariable = true;
			}
			this._variable = $compile.expression(data.variable, this);
			this._from = $compile.expression(data.from, this);
			this._to = $compile.expression(data.to, this);
			if(this._to.isComposite()) {
				this._boundName = this._scope.acquireTempName();
			}
			if(data.by) {
				this._by = $compile.expression(data.by, this);
				if(this._by.isComposite()) {
					this._byName = this._scope.acquireTempName();
				}
			}
			if(data.until) {
				this._until = $compile.expression(data.until, this);
			}
			else if(data.while) {
				this._while = $compile.expression(data.while, this);
			}
			if(data.when) {
				this._when = $compile.expression(data.when, this);
			}
			this._body = $compile.expression($block(data.body), this);
			if(Type.isValue(this._boundName)) {
				this._scope.releaseTempName(this._boundName);
			}
			if(Type.isValue(this._byName)) {
				this._scope.releaseTempName(this._byName);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForRangeStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._body.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ForRangeStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var data = this._data;
			var ctrl = fragments.newControl().code("for(");
			if(data.declaration || this._defineVariable) {
				ctrl.code($variable.scope(this));
			}
			ctrl.compile(this._variable).code($equals).compile(this._from);
			if(Type.isValue(this._boundName)) {
				ctrl.code(this._boundName, $equals).compile(this._to);
			}
			if(Type.isValue(this._byName)) {
				ctrl.code($comma, this._byName, $equals).compile(this._by);
			}
			ctrl.code("; ");
			if(data.until) {
				ctrl.code("!(").compile(this._until).code(") && ");
			}
			else if(data.while) {
				ctrl.compile(this._while).code(" && ");
			}
			ctrl.compile(this._variable).code(" <= ").compile(Type.isValue(this._boundName) ? this._boundName : this._to).code("; ");
			if(data.by) {
				if(data.by.kind === Kind.NumericExpression) {
					if(data.by.value === 1) {
						ctrl.code("++").compile(this._variable);
					}
					else {
						ctrl.compile(this._variable).code(" += ").compile(this._by);
					}
				}
				else {
					ctrl.compile(this._variable).code(" += ").compile(Type.isValue(this._byName) ? this._byName : this._by);
				}
			}
			else {
				ctrl.code("++").compile(this._variable);
			}
			ctrl.code(")").step();
			if(data.when) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForRangeStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ForRangeStatement.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_by: {
				access: 1,
				type: "Any"
			},
			_defineVariable: {
				access: 1,
				type: "Any"
			},
			_til: {
				access: 1,
				type: "Any"
			},
			_to: {
				access: 1,
				type: "Any"
			},
			_until: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			},
			_when: {
				access: 1,
				type: "Any"
			},
			_while: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var $function = {
		arity: function(parameter) {
			if(parameter === undefined || parameter === null) {
				throw new Error("Missing parameter 'parameter'");
			}
			for(var i = 0, __ks_0 = parameter.modifiers.length; i < __ks_0; ++i) {
				if(parameter.modifiers[i].kind === ParameterModifier.Rest) {
					return parameter.modifiers[i].arity;
				}
			}
			return null;
		},
		isArgumentsRequired: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(node._data.kind === Kind.ArrayComprehension) {
				return false;
			}
			var signature = $function.signature(node._data, node);
			var optional = false;
			for(var i = 0, __ks_0 = signature.parameters.length, parameter; i < __ks_0; ++i) {
				parameter = signature.parameters[i];
				if(optional) {
					if(parameter.min > 0) {
						return true;
					}
				}
				else if((parameter.max === Infinity) || (parameter.min === 0)) {
					optional = true;
				}
			}
			return false;
		},
		parameters: function(node, fragments, fn) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(fn === undefined || fn === null) {
				throw new Error("Missing parameter 'fn'");
			}
			if(node._options.parse.parameters === "es5") {
				return $function.parametersES5(node, fragments, fn);
			}
			else if(node._options.parse.parameters === "es6") {
				return $function.parametersES6(node, fragments, fn);
			}
			else {
				return $function.parametersKS(node, fragments, fn);
			}
		},
		parametersES5: function(node, fragments, fn) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(fn === undefined || fn === null) {
				throw new Error("Missing parameter 'fn'");
			}
			var data = node._data;
			var signature = $function.signature(data, node);
			for(var i = 0, __ks_0 = node._parameters.length, parameter; i < __ks_0; ++i) {
				parameter = node._parameters[i];
				if(signature.parameters[i].rest) {
					$throw("Parameter can't be a rest parameter at line " + parameter.start.line, node);
				}
				else if(parameter._defaultValue !== null) {
					$throw("Parameter can't have a default value at line " + parameter.start.line, node);
				}
				else if(parameter._nullable) {
					$throw("Parameter can't be nullable at line " + parameter.start.line, node);
				}
				else if(parameter._anonymous) {
					$throw("Parameter must be named at line " + parameter.start.line, node);
				}
				if(i) {
					fragments.code($comma);
				}
				parameter.toParameterFragments(fragments);
			}
			return fn(fragments);
		},
		parametersES6: function(node, fragments, fn) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(fn === undefined || fn === null) {
				throw new Error("Missing parameter 'fn'");
			}
			var data = node._data;
			var signature = $function.signature(data, node);
			var rest = false;
			for(var i = 0, __ks_0 = node._parameters.length, parameter; i < __ks_0; ++i) {
				parameter = node._parameters[i];
				if(parameter._anonymous) {
					$throw("Parameter must be named at line " + parameter.start.line, node);
				}
				if(i) {
					fragments.code($comma);
				}
				if(signature.parameters[i].rest) {
					fragments.code("...");
					parameter.toParameterFragments(fragments);
					rest = true;
				}
				else if(rest) {
					$throw("Parameter must be before the rest parameter at line " + parameter.start.line, node);
				}
				else {
					parameter.toParameterFragments(fragments);
				}
				if(parameter._defaultValue !== null) {
					fragments.code(" = ").compile(parameter._defaultValue);
				}
			}
			return fn(fragments);
		},
		parametersKS: function(node, fragments, fn) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(fn === undefined || fn === null) {
				throw new Error("Missing parameter 'fn'");
			}
			var data = node._data;
			var signature = $function.signature(data, node);
			var parameter, ctrl;
			var maxb = 0;
			var rb = 0;
			var db = 0;
			var rr = 0;
			var maxa = 0;
			var ra = 0;
			var fr = false;
			var rest = -1;
			for(var i = 0, __ks_0 = signature.parameters.length; i < __ks_0; ++i) {
				parameter = signature.parameters[i];
				if(rest !== -1) {
					if(parameter.min) {
						ra += parameter.min;
					}
					maxa += parameter.max;
					if(parameter.rest) {
						fr = true;
					}
				}
				else if(parameter.max === Infinity) {
					rest = i;
					rr = parameter.min;
				}
				else {
					if(parameter.min === 0) {
						++db;
					}
					else {
						rb += parameter.min;
					}
					maxb += parameter.max;
					if(parameter.rest) {
						fr = true;
					}
				}
			}
			var inc = false;
			var l = (rest !== -1) ? rest : node._parameters.length;
			if(((rest !== -1) && !fr && ((db === 0) || ((db + 1) === rest))) || ((rest === -1) && ((!signature.async && (signature.max === l) && ((db === 0) || (db === l))) || (signature.async && (signature.max === (l + 1)) && ((db === 0) || (db === (l + 1))))))) {
				var names = [];
				for(var i = 0, __ks_0 = node._parameters.length; i < l && i < __ks_0; ++i) {
					parameter = node._parameters[i];
					if(i) {
						fragments.code($comma);
					}
					parameter.toParameterFragments(fragments);
					names.push(parameter._name);
				}
				if(!ra && (rest !== -1) && ((signature.parameters[rest].type === "Any") || !maxa) && (node._options.format.parameters === "es6")) {
					parameter = node._parameters[rest];
					if(rest) {
						fragments.code(", ");
					}
					fragments.code("...");
					parameter.toParameterFragments(fragments);
					names.push(parameter._name);
				}
				else if(signature.async && !ra) {
					if(l) {
						fragments.code(", ");
					}
					fragments.code("__ks_cb");
				}
				fragments = fn(fragments);
				if(ra) {
					fragments.newControl().code("if(arguments.length < ", signature.min, ")").step().line("throw new Error(\"Wrong number of arguments\")").done();
				}
				for(var i = 0, __ks_0 = node._parameters.length; i < l && i < __ks_0; ++i) {
					parameter = node._parameters[i];
					if(!parameter._anonymous && ((node._options.format.parameters === "es5") || ((node._options.format.parameters === "es6") && !parameter._nullable) || (parameter._defaultValue !== null))) {
						ctrl = fragments.newControl().code("if(").compile(parameter).code(" === undefined");
						if(!parameter._nullable) {
							ctrl.code(" || ").compile(parameter).code(" === null");
						}
						ctrl.code(")").step();
						if(parameter._defaultValue !== null) {
							ctrl.newLine().compile(parameter).code($equals).compile(parameter._defaultValue).done();
						}
						else if(parameter._nullable) {
							ctrl.newLine().compile(parameter).code($equals, "null").done();
						}
						else {
							ctrl.line("throw new Error(\"Missing parameter '", parameter._name, "'\")");
						}
						ctrl.done();
					}
					if(!$type.isAny(parameter._type)) {
						ctrl = fragments.newControl().code("if(");
						if(parameter._nullable) {
							ctrl.code(names[i], " !== null && ");
						}
						ctrl.code("!");
						$type.check(node, ctrl, names[i], parameter._type);
						ctrl.code(")").step().line("throw new Error(\"Invalid type for parameter '", parameter._name, "'\")");
						ctrl.done();
					}
				}
				if(ra) {
					parameter = data.parameters[rest];
					if(signature.parameters[rest].type === "Any") {
						if(parameter.name) {
							fragments.line($variable.scope(node), "__ks_i");
							fragments.line($variable.scope(node), parameter.name.name, parameter.name, " = arguments.length > " + (maxb + ra) + " ? Array.prototype.slice.call(arguments, " + maxb + ", __ks_i = arguments.length - " + ra + ") : (__ks_i = " + maxb + ", [])");
						}
						else {
							fragments.line($variable.scope(node), "__ks_i = arguments.length > " + (maxb + ra) + " ? arguments.length - " + ra + " : " + maxb);
						}
					}
					else {
						fragments.line($variable.scope(node), "__ks_i");
						if(parameter.name) {
							fragments.line($variable.scope(node), parameter.name, parameter.name.name, " = []");
						}
					}
				}
				else if((rest !== -1) && (signature.parameters[rest].type !== "Any") && maxa) {
					parameter = data.parameters[rest];
					if(maxb) {
					}
					else {
						fragments.line($variable.scope(node), "__ks_i = -1");
					}
					if(parameter.name) {
						fragments.line($variable.scope(node), parameter.name.name, parameter.name, " = []");
					}
					ctrl = fragments.newControl().code("while(");
					$type.check(node, ctrl, "arguments[++__ks_i]", parameter.type);
					ctrl.code(")").step();
					if(parameter.name) {
						ctrl.line(parameter.name.name, parameter.name, ".push(arguments[__ks_i])");
					}
					ctrl.done();
				}
				else if((rest !== -1) && (node._options.format.parameters === "es5")) {
					parameter = node._parameters[rest];
					fragments.newLine().code($variable.scope(node)).compile(parameter).code($equals, "Array.prototype.slice.call(arguments, " + maxb + ", arguments.length)").done();
				}
				if((rest !== -1) && ((parameter = node._parameters[rest])._defaultValue !== null)) {
					ctrl = fragments.newControl().code("if(").compile(parameter).code(".length === 0)").step();
					ctrl.newLine().compile(parameter).code($equals).compile(parameter._defaultValue).done();
					ctrl.done();
				}
				if(rest !== -1) {
					parameter = data.parameters[rest];
					var arity;
					if((arity = $function.arity(parameter)) && arity.min) {
						fragments.newControl().code("if(", parameter.name.name, parameter.name, ".length < ", arity.min, ")").step().line("throw new Error(\"Wrong number of arguments\")").done();
					}
				}
				else if(signature.async && !ra) {
					node.module().flag("Type");
					fragments.newControl().code("if(!", $runtime.type(node), ".isFunction(__ks_cb))").step().line("throw new Error(\"Invalid callback\")").done();
				}
			}
			else {
				fragments = fn(fragments);
				if(signature.min) {
					fragments.newControl().code("if(arguments.length < ", signature.min, ")").step().line("throw new Error(\"Wrong number of arguments\")").done();
				}
				fragments.line($variable.scope(node), "__ks_i = -1");
				var required = rb;
				var optional = 0;
				for(var i = 0; i < l; ++i) {
					parameter = data.parameters[i];
					var arity;
					if((arity = $function.arity(parameter))) {
						required -= arity.min;
						if(parameter.name) {
							if($type.isAny(parameter.type)) {
								if(required) {
									fragments.line($variable.scope(node), parameter.name.name, parameter.name, " = Array.prototype.slice.call(arguments, __ks_i + 1, Math.min(arguments.length - ", required, ", __ks_i + ", arity.max + 1, "))");
									if((i + 1) < data.parameters.length) {
										fragments.line("__ks_i += ", parameter.name.name, parameter.name, ".length");
									}
								}
								else {
									fragments.line($variable.scope(node), parameter.name.name, parameter.name, " = Array.prototype.slice.call(arguments, __ks_i + 1, Math.min(arguments.length, __ks_i + ", arity.max + 1, "))");
									if((i + 1) < data.parameters.length) {
										fragments.line("__ks_i += ", parameter.name.name, parameter.name, ".length");
									}
								}
							}
							else {
								fragments.line($variable.scope(node), parameter.name.name, parameter.name, " = []");
								ctrl = fragments.newControl();
								if(required) {
									ctrl.code("while(__ks_i < arguments.length - ", required, " && ");
								}
								else {
									ctrl.code("while(__ks_i + 1 < arguments.length && ");
								}
								ctrl.code(parameter.name.name, parameter.name, ".length < ", arity.max, " )").step().done();
							}
						}
						else {
						}
						optional += arity.max - arity.min;
					}
					else {
						if((parameter.type && parameter.type.nullable) || parameter.defaultValue) {
							ctrl = fragments.newControl().code("if(arguments.length > ", signature.min + optional, ")").step();
							if($type.isAny(parameter.type)) {
								if(parameter.name) {
									ctrl.line("var ", parameter.name.name, parameter.name, " = arguments[++__ks_i]");
								}
								else {
									ctrl.line("++__ks_i");
								}
							}
							else {
								var ctrl2 = ctrl.newControl().code("if(");
								$type.check(node, ctrl2, "arguments[__ks_i + 1]", parameter.type);
								ctrl2.code(")").step().line("var ", parameter.name.name, parameter.name, " = arguments[++__ks_i]");
								ctrl2.step().code("else").step();
								if(rest === -1) {
									ctrl2.line("throw new Error(\"Invalid type for parameter '", parameter.name.name, parameter.name, "'\")");
								}
								else if(parameter.defaultValue) {
									ctrl2.newLine().code("var ", parameter.name.name, parameter.name, " = ").compile(node._parameters[i]._defaultValue).done();
								}
								else {
									ctrl2.line("var ", parameter.name.name, parameter.name, " = null");
								}
								ctrl2.done();
							}
							if(parameter.name) {
								ctrl.step().code("else").step();
								if(parameter.defaultValue) {
									ctrl.newLine().code("var ", parameter.name.name, parameter.name, " = ").compile(node._parameters[i]._defaultValue).done();
								}
								else {
									ctrl.line("var ", parameter.name.name, parameter.name, " = null");
								}
							}
							ctrl.done();
							++optional;
						}
						else {
							if($type.isAny(parameter.type)) {
								if(parameter.name) {
									fragments.line("var ", parameter.name.name, parameter.name, " = arguments[++__ks_i]");
								}
								else {
									fragments.line("++__ks_i");
								}
							}
							else {
								if(parameter.name) {
									ctrl = fragments.newControl().code("if(");
									$type.check(node, ctrl, "arguments[++__ks_i]", parameter.type);
									ctrl.code(")").step().line("var ", parameter.name.name, parameter.name, " = arguments[__ks_i]");
									ctrl.step().code("else throw new Error(\"Invalid type for parameter '", parameter.name.name, parameter.name, "'\")").done();
								}
								else {
									ctrl = fragments.newControl().code("if(!");
									$type.check(node, ctrl, "arguments[++__ks_i]", parameter.type);
									ctrl.code(")").step().line("throw new Error(\"Wrong type of arguments\")").done();
								}
							}
							--required;
						}
					}
				}
				if(rest !== -1) {
					parameter = data.parameters[rest];
					if(ra) {
						if(parameter.name) {
							fragments.line($variable.scope(node), parameter.name.name, parameter.name, " = arguments.length > __ks_i + ", ra + 1, " ? Array.prototype.slice.call(arguments, __ks_i + 1, arguments.length - " + ra + ") : []");
							if((l + 1) < data.parameters.length) {
								fragments.line("__ks_i += ", parameter.name.name, parameter.name, ".length");
							}
						}
						else if((l + 1) < data.parameters.length) {
							fragments.newControl().code("if(arguments.length > __ks_i + ", ra + 1, ")").step().line("__ks_i = arguments.length - ", ra + 1).done();
						}
					}
					else {
						if(parameter.name) {
							fragments.line($variable.scope(node), parameter.name.name, parameter.name, " = arguments.length > ++__ks_i ? Array.prototype.slice.call(arguments, __ks_i, __ks_i = arguments.length) : []");
							if((l + 1) < data.parameters.length) {
								fragments.line("__ks_i += ", parameter.name.name, parameter.name, ".length");
							}
						}
					}
				}
			}
			if(ra || maxa) {
				if((ra !== maxa) && (signature.parameters[rest].type !== "Any")) {
					if(ra) {
						fragments.line($variable.scope(node), "__ks_m = __ks_i + ", ra);
					}
					else {
						fragments.line($variable.scope(node), "__ks_m = __ks_i");
					}
				}
				for(var i = rest + 1, __ks_0 = data.parameters.length; i < __ks_0; ++i) {
					parameter = data.parameters[i];
					var arity;
					if((arity = $function.arity(parameter))) {
						if(arity.min) {
							if(parameter.name) {
								if($type.isAny(parameter.type)) {
									fragments.line($variable.scope(node), parameter.name.name, parameter.name, " = Array.prototype.slice.call(arguments, __ks_i + 1, __ks_i + ", arity.min + 1, ")");
									if((i + 1) < data.parameters.length) {
										fragments.line("__ks_i += ", parameter.name.name, parameter.name, ".length");
									}
								}
								else {
								}
							}
							else {
							}
						}
						else {
						}
					}
					else if((parameter.type && parameter.type.nullable) || parameter.defaultValue) {
						if(signature.parameters[rest].type === "Any") {
							if(parameter.name) {
								if(parameter.defaultValue) {
									fragments.newLine().code("var ", parameter.name.name, parameter.name, " = ").compile(node._parameters[i]._defaultValue).done();
								}
								else {
									fragments.line("var ", parameter.name.name, parameter.name, " = null");
								}
							}
						}
						else {
							ctrl = fragments.newControl().code("if(arguments.length > __ks_m)").step();
							if($type.isAny(parameter.type)) {
								if(parameter.name) {
									ctrl.line("var ", parameter.name.name, parameter.name, " = arguments[", inc ? "++" : "", "__ks_i]");
								}
								else {
									ctrl.line("++__ks_i");
								}
							}
							else {
								var ctrl2 = ctrl.newControl().code("if(");
								$type.check(node, ctrl2, "arguments[" + (inc ? "++" : "") + "__ks_i]", parameter.type);
								ctrl2.code(")").step().line("var ", parameter.name.name, parameter.name, " = arguments[__ks_i]");
								ctrl2.step().code("else").step();
								if(parameter.defaultValue) {
									ctrl2.newLine().code("var ", parameter.name.name, parameter.name, " = ").compile(node._parameters[i]._defaultValue).done();
								}
								else {
									ctrl2.line("var ", parameter.name.name, parameter.name, " = null");
								}
								ctrl2.done();
							}
							if(parameter.name) {
								ctrl.step().code("else").step();
								if(parameter.defaultValue) {
									ctrl.newLine().code("var ", parameter.name.name, parameter.name, " = ").compile(node._parameters[i]._defaultValue).done();
								}
								else {
									ctrl.line("var ", parameter.name.name, parameter.name, " = null");
								}
							}
							ctrl.done();
							if(!inc) {
								inc = true;
							}
						}
					}
					else {
						if($type.isAny(parameter.type)) {
							if(parameter.name) {
								fragments.line("var ", parameter.name.name, parameter.name, " = arguments[", inc ? "++" : "", "__ks_i]");
							}
							else {
								fragments.line(inc ? "++" : "", "__ks_i");
							}
						}
						else {
							if(parameter.name) {
								ctrl = fragments.newControl().code("if(");
								$type.check(node, ctrl, "arguments[" + (inc ? "++" : "") + "__ks_i]", parameter.type);
								ctrl.code(")").step().line("var ", parameter.name.name, parameter.name, " = arguments[__ks_i]");
								ctrl.step().code("else throw new Error(\"Invalid type for parameter '", parameter.name.name, parameter.name, "'\")").done();
							}
							else {
								ctrl = fragments.newControl().code("if(!");
								$type.check(node, ctrl, "arguments[" + (inc ? "++" : "") + "__ks_i]", parameter.type);
								ctrl.code(")").step().line("throw new Error(\"Wrong type of arguments\")").done();
							}
						}
						if(!inc) {
							inc = true;
						}
					}
				}
			}
			return fragments;
		},
		signature: function(data, node) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			var signature = {
				min: 0,
				max: 0,
				parameters: []
			};
			if(data.modifiers) {
				for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
					modifier = data.modifiers[__ks_0];
					if(modifier.kind === FunctionModifier.Async) {
						signature.async = true;
					}
				}
			}
			var scope = node.scope();
			for(var __ks_0 = 0, __ks_1 = data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = data.parameters[__ks_0];
				signature.parameters.push(parameter = $function.signatureParameter(parameter, scope));
				if(parameter.max === Infinity) {
					if(signature.max === Infinity) {
						$throw("Function can have only one rest parameter", node);
					}
					else {
						signature.max = Infinity;
					}
				}
				else {
					signature.max += parameter.max;
				}
				signature.min += parameter.min;
			}
			if(signature.async) {
				signature.parameters.push({
					type: "Function",
					min: 1,
					max: 1
				});
				++signature.min;
				++signature.max;
			}
			return signature;
		},
		signatureParameter: function(parameter, scope) {
			if(parameter === undefined || parameter === null) {
				throw new Error("Missing parameter 'parameter'");
			}
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			var signature = {
				type: $signature.type(parameter.type, scope),
				min: (parameter.defaultValue || (parameter.type && parameter.type.nullable)) ? 0 : 1,
				max: 1
			};
			if(parameter.modifiers) {
				for(var __ks_0 = 0, __ks_1 = parameter.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
					modifier = parameter.modifiers[__ks_0];
					if(modifier.kind === ParameterModifier.Rest) {
						signature.rest = true;
						if(modifier.arity) {
							signature.min = modifier.arity.min;
							signature.max = modifier.arity.max;
						}
						else {
							signature.min = 0;
							signature.max = Infinity;
						}
					}
				}
			}
			return signature;
		},
		surround: function(node) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			var parent = node._parent;
			while(Type.isValue(parent) && !(Type.is(parent, MethodDeclaration) || Type.is(parent, ImplementClassMethodDeclaration))) {
				parent = parent.parent();
			}
			if(Type.isValue(parent) ? parent._instance : false) {
				if((node._options.format.functions === "es5") || $function.isArgumentsRequired(node)) {
					if($function.useThisVariable(node._data.body)) {
						return {
							beforeParameters: "Helper.vcurry(function(",
							afterParameters: ")",
							footer: ", this)"
						};
					}
					else {
						return {
							beforeParameters: "function(",
							afterParameters: ")",
							footer: ""
						};
					}
				}
				else {
					return {
						beforeParameters: "(",
						afterParameters: ") =>",
						footer: ""
					};
				}
			}
			else {
				return {
					beforeParameters: "function(",
					afterParameters: ")",
					footer: ""
				};
			}
		},
		useThisVariable: function(data) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			var __ks_0 = data.kind;
			if(__ks_0 === Kind.ArrayExpression) {
				for(var __ks_1 = 0, __ks_2 = data.values.length, value; __ks_1 < __ks_2; ++__ks_1) {
					value = data.values[__ks_1];
					if($function.useThisVariable(value)) {
						return true;
					}
				}
			}
			else if(__ks_0 === Kind.BinaryOperator) {
				if($function.useThisVariable(data.left) || $function.useThisVariable(data.right)) {
					return true;
				}
			}
			else if(__ks_0 === Kind.Block) {
				for(var __ks_1 = 0, __ks_2 = data.statements.length, statement; __ks_1 < __ks_2; ++__ks_1) {
					statement = data.statements[__ks_1];
					if($function.useThisVariable(statement)) {
						return true;
					}
				}
			}
			else if(__ks_0 === Kind.CallExpression) {
				if($function.useThisVariable(data.callee)) {
					return true;
				}
				for(var __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
					arg = data.arguments[__ks_1];
					if($function.useThisVariable(arg)) {
						return true;
					}
				}
			}
			else if(__ks_0 === Kind.CreateExpression) {
				if($function.useThisVariable(data.class)) {
					return true;
				}
				for(var __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
					arg = data.arguments[__ks_1];
					if($function.useThisVariable(arg)) {
						return true;
					}
				}
			}
			else if(__ks_0 === Kind.EnumExpression) {
				return false;
			}
			else if(__ks_0 === Kind.Identifier) {
				return data.name === "this";
			}
			else if(__ks_0 === Kind.IfStatement) {
				if($function.useThisVariable(data.condition) || $function.useThisVariable(data.then)) {
					return true;
				}
				for(var __ks_1 = 0, __ks_2 = data.elseifs.length, value; __ks_1 < __ks_2; ++__ks_1) {
					value = data.elseifs[__ks_1];
					if($function.useThisVariable(value)) {
						return true;
					}
				}
				if(Type.isValue(data.else) && data.$function.useThisVariable(data.else)) {
					return true;
				}
			}
			else if(__ks_0 === Kind.Literal) {
				return false;
			}
			else if(__ks_0 === Kind.MemberExpression) {
				return $function.useThisVariable(data.object);
			}
			else if(__ks_0 === Kind.NumericExpression) {
				return false;
			}
			else if(__ks_0 === Kind.ObjectExpression) {
				for(var __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
					property = data.properties[__ks_1];
					if($function.useThisVariable(property.value)) {
						return true;
					}
				}
			}
			else if(__ks_0 === Kind.ReturnStatement) {
				return $function.useThisVariable(data.value);
			}
			else if(__ks_0 === Kind.UnaryExpression) {
				return $function.useThisVariable(data.argument);
			}
			else {
				console.error(data);
				$throw("Unknow kind " + data.kind);
			}
			return false;
		}
	};
	var FunctionDeclaration = Helper.class({
		$name: "FunctionDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._async = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			FunctionDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				FunctionDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			$variable.define(this, this._scope, {
				kind: Kind.Identifier,
				name: "this"
			}, VariableKind.Variable);
			var data = this._data;
			var variable = $variable.define(this, this.greatScope(), data.name, VariableKind.Function, data.type);
			for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = data.modifiers[__ks_0];
				if(modifier.kind === FunctionModifier.Async) {
					variable.async = true;
				}
			}
			this._parameters = Helper.mapArray(data.parameters, Helper.vcurry(function(parameter) {
				return new Parameter(parameter, this);
			}, this));
			this._statements = Helper.mapArray($body(data.body), Helper.vcurry(function(statement) {
				return $compile.statement(statement, this);
			}, this));
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.analyse();
				parameter.fuse();
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.analyse();
				if(!this._async) {
					this._async = statement.isAsync();
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var ctrl = fragments.newControl();
			ctrl.code("function " + this._data.name.name + "(");
			$function.parameters(this, ctrl, function(node) {
				if(node === undefined || node === null) {
					throw new Error("Missing parameter 'node'");
				}
				return node.code(")").step();
			});
			if(this._async) {
				var stack = [];
				var f = ctrl;
				var m = Mode.None;
				var item;
				for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._statements[__ks_0];
					var __ks_2;
					if(Type.isValue(__ks_2 = statement.toFragments(f, m)) ? (item = __ks_2, true) : false) {
						f = item.fragments;
						m = item.mode;
						stack.push(item);
					}
				}
				for(var __ks_2 = 0, __ks_0 = stack.length; __ks_2 < __ks_0; ++__ks_2) {
					item = stack[__ks_2];
					item.done(item.fragments);
				}
			}
			else {
				for(var __ks_2 = 0, __ks_0 = this._statements.length, statement; __ks_2 < __ks_0; ++__ks_2) {
					statement = this._statements[__ks_2];
					ctrl.compile(statement, Mode.None);
				}
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return FunctionDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	FunctionDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_async: {
				access: 1,
				type: "Any"
			},
			_parameters: {
				access: 1,
				type: "Any"
			},
			_statements: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var Parameter = Helper.class({
		$name: "Parameter",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._anonymous = false;
			this._defaultValue = null;
			this._name = null;
			this._nullable = false;
			this._variable = null;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			Parameter.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			var parent = this._parent;
			this._type = data.type;
			if(Type.isValue(data.name)) {
				var signature = $function.signatureParameter(data, this._scope);
				if(signature.rest) {
					$variable.define(this, this._scope, data.name, VariableKind.Variable, {
						kind: Kind.TypeReference,
						typeName: {
							kind: Kind.Identifier,
							name: "Array"
						}
					});
				}
				else {
					$variable.define(this, this._scope, data.name, $variable.kind(data.type), data.type);
				}
				this._variable = $compile.expression(data.name, parent);
			}
			else {
				var name = {
					kind: Kind.Identifier,
					name: this._scope.acquireTempName()
				};
				$variable.define(this, this._scope, name, VariableKind.Variable);
				this._variable = $compile.expression(name, parent);
				this._anonymous = true;
			}
			if(Type.isValue(data.defaultValue)) {
				this._defaultValue = $compile.expression(data.defaultValue, parent);
			}
			this._name = this._variable._value;
			this._nullable = Type.isValue(this._data.type) ? this._data.type.nullable : undefined;
		},
		analyse: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			if(this._defaultValue !== null) {
				this._defaultValue.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._variable);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Parameter.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toParameterFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.compile(this._variable);
			if(this._nullable && !Type.isValue(this._data.defaultValue) && (this._options.format.parameters === "es6")) {
				fragments.code(" = null");
			}
		},
		toParameterFragments: function() {
			if(arguments.length === 1) {
				return Parameter.prototype.__ks_func_toParameterFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toParameterFragments) {
				return AbstractNode.prototype.toParameterFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	Parameter.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_anonymous: {
				access: 1,
				type: "Any"
			},
			_defaultValue: {
				access: 1,
				type: "Any"
			},
			_name: {
				access: 1,
				type: "Any"
			},
			_nullable: {
				access: 1,
				type: "Any"
			},
			_type: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toParameterFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var IfStatement = Helper.class({
		$name: "IfStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._items = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			IfStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			this._items.push(new IfClause(data, this));
			for(var __ks_0 = 0, __ks_1 = data.elseifs.length, elseif; __ks_0 < __ks_1; ++__ks_0) {
				elseif = data.elseifs[__ks_0];
				this._items.push(new IfElseClause(elseif, this));
			}
			if(Type.isValue(data.else)) {
				this._items.push(new ElseClause(data.else, this));
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._items.length, item; __ks_0 < __ks_1; ++__ks_0) {
				item = this._items[__ks_0];
				item.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var ctrl = fragments.newControl();
			for(var index = 0, __ks_0 = this._items.length, item; index < __ks_0; ++index) {
				item = this._items[index];
				if(index) {
					ctrl.step();
				}
				item.toFragments(ctrl, mode);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return IfStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	IfStatement.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_items: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var IfClause = Helper.class({
		$name: "IfClause",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
			this.analyse();
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				IfClause.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				AbstractNode.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._body = $compile.expression($block(this._data.then), this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IfClause.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._condition.fuse();
			this._body.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return IfClause.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.code("if(");
			if(this._condition.isAssignable()) {
				fragments.code("(").compileBoolean(this._condition).code(")");
			}
			else {
				fragments.compileBoolean(this._condition);
			}
			fragments.code(")").step().compile(this._body, mode);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IfClause.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	IfClause.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_condition: {
				access: 1,
				type: "Any"
			},
			_body: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var IfElseClause = Helper.class({
		$name: "IfElseClause",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
			this.analyse();
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				IfElseClause.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				AbstractNode.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._body = $compile.expression($block(this._data.body), this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IfElseClause.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._condition.fuse();
			this._body.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return IfElseClause.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.code("else if(");
			if(this._condition.isAssignable()) {
				fragments.code("(").compileBoolean(this._condition).code(")");
			}
			else {
				fragments.compileBoolean(this._condition);
			}
			fragments.code(")").step().compile(this._body);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IfElseClause.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	IfElseClause.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_condition: {
				access: 1,
				type: "Any"
			},
			_body: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ElseClause = Helper.class({
		$name: "ElseClause",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
			this.analyse();
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ElseClause.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				AbstractNode.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._body = $compile.expression($block(this._data.body), this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ElseClause.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._body.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ElseClause.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.code("else").step().compile(this._body);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ElseClause.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ElseClause.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_condition: {
				access: 1,
				type: "Any"
			},
			_body: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ImplementDeclaration = Helper.class({
		$name: "ImplementDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._properties = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			this._variable = this._scope.getVariable(data.variable.name);
			if(this._variable.kind === VariableKind.Class) {
				for(var __ks_0 = 0, __ks_1 = data.properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
					property = data.properties[__ks_0];
					var __ks_2 = property.kind;
					if(__ks_2 === Kind.FieldDeclaration) {
						property = new ImplementClassFieldDeclaration(property, this, this._variable);
					}
					else if(__ks_2 === Kind.MethodAliasDeclaration) {
						property = new ImplementClassMethodAliasDeclaration(property, this, this._variable);
					}
					else if(__ks_2 === Kind.MethodDeclaration) {
						property = new ImplementClassMethodDeclaration(property, this, this._variable);
					}
					else if(__ks_2 === Kind.MethodLinkDeclaration) {
						property = new ImplementClassMethodLinkDeclaration(property, this, this._variable);
					}
					else {
						$throw("Unknow kind " + property.kind, this);
					}
					property.analyse();
					this._properties.push(property);
				}
			}
			else if(this._variable.kind === VariableKind.Variable) {
				for(var __ks_0 = 0, __ks_1 = data.properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
					property = data.properties[__ks_0];
					var __ks_3 = property.kind;
					if(__ks_3 === Kind.FieldDeclaration) {
						property = new ImplementVariableFieldDeclaration(property, this, this._variable);
					}
					else if(__ks_3 === Kind.MethodDeclaration) {
						property = new ImplementVariableMethodDeclaration(property, this, this._variable);
					}
					else {
						$throw("Unknow kind " + property.kind, this);
					}
					property.analyse();
					this._properties.push(property);
				}
			}
			else {
				$throw("Invalid class/variable for impl at line " + data.start.line, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.toFragments(fragments, Mode.None);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImplementDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ImplementDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_properties: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ImplementClassFieldDeclaration = Helper.class({
		$name: "ImplementClassFieldDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			this._variable = variable;
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			if(variable.sealed) {
				$throw("Can't add a field to a sealed class", this);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementClassFieldDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._type = $helper.analyseType($signature.type(this._data.type, this._scope), this);
			if(this._type.kind === HelperTypeKind.Unreferenced) {
				$throw("Invalid type " + this._type.type + " at line " + this._data.start.line, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			this.module().flag("Helper");
			fragments.line($runtime.helper(this), ".newField(" + $quote(this._data.name.name) + ", " + $helper.type(this._type, this) + ")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	ImplementClassFieldDeclaration.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_variable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ImplementClassMethodDeclaration = Helper.class({
		$name: "ImplementClassMethodDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._isContructor = false;
			this._isDestructor = false;
			this._instance = true;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementClassMethodDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			this._variable = variable;
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementClassMethodDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			var variable = this._variable;
			if((this._isContructor = ((data.name.kind === Kind.Identifier) && $method.isConstructor(data.name.name, variable)))) {
				$throw("Not Implemented", this);
			}
			else if((this._isDestructor = ((data.name.kind === Kind.Identifier) && $method.isDestructor(data.name.name, variable)))) {
				$throw("Not Implemented", this);
			}
			else {
				for(var i = 0, __ks_0 = data.modifiers.length; this._instance && i < __ks_0; ++i) {
					if(data.modifiers[i].kind === MemberModifier.Static) {
						this._instance = false;
					}
				}
				if(variable.sealed) {
					if(this._instance) {
						if(variable.sealed.instanceMethods[data.name.name] !== true) {
							variable.sealed.instanceMethods[data.name.name] = true;
						}
					}
					else {
						if(variable.sealed.classMethods[data.name.name] !== true) {
							variable.sealed.classMethods[data.name.name] = true;
						}
					}
				}
				if(data.name.kind === Kind.Identifier) {
					var method = {
						kind: Kind.MethodDeclaration,
						name: data.name.name,
						signature: $method.signature(data, this)
					};
					if(data.type) {
						method.type = $type.type(data.type, this._scope, this);
					}
					if(this._instance) {
						if(!Type.isArray(variable.instanceMethods[data.name.name])) {
							variable.instanceMethods[data.name.name] = [];
						}
						variable.instanceMethods[data.name.name].push(method);
					}
					else {
						if(!Type.isArray(variable.classMethods[data.name.name])) {
							variable.classMethods[data.name.name] = [];
						}
						variable.classMethods[data.name.name].push(method);
					}
				}
				else if(data.name.kind === Kind.TemplateExpression) {
					this._name = $compile.expression(data.name, this);
				}
			}
			$variable.define(this, this._scope, {
				kind: Kind.Identifier,
				name: "this"
			}, VariableKind.Variable, $type.reference(variable.name));
			this._parameters = Helper.mapArray(data.parameters, Helper.vcurry(function(parameter) {
				return new Parameter(parameter, this);
			}, this));
			this._statements = Helper.mapArray($body(data.body), Helper.vcurry(function(statement) {
				return $compile.statement(statement, this);
			}, this));
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this.compile(this._parameters);
			this.compile(this._statements);
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			this.module().flag("Helper");
			var data = this._data;
			var variable = this._variable;
			if(this._isContructor) {
				$throw("Not Implemented", this);
			}
			else if(this._isDestructor) {
				$throw("Not Implemented", this);
			}
			else {
				var line = fragments.newLine().code($runtime.helper(this), ".", this._instance ? "newInstanceMethod" : "newClassMethod", "(");
				var object = line.newObject();
				object.newLine().code("class: " + variable.name.name);
				if(data.name.kind === Kind.Identifier) {
					object.newLine().code("name: " + $quote(data.name.name));
				}
				else if(data.name.kind === Kind.TemplateExpression) {
					object.newLine().code("name: ").compile(this._name);
				}
				else {
					$throw("Not Implemented", this);
				}
				if(variable.sealed) {
					object.newLine().code("sealed: " + variable.sealed.name);
				}
				var ctrl = object.newControl().code("function: function(");
				$function.parameters(this, ctrl, function(fragments) {
					if(fragments === undefined || fragments === null) {
						throw new Error("Missing parameter 'fragments'");
					}
					return fragments.code(")").step();
				});
				for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._statements[__ks_0];
					ctrl.compile(statement);
				}
				var signature = $method.signature(data, this);
				$helper.reflectMethod(this, object.newLine().code("signature: "), signature, Helper.mapArray(signature.parameters, Helper.vcurry(function(parameter) {
					return $helper.analyseType(parameter.type, this);
				}, this)));
				object.done();
				line.code(")").done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ImplementClassMethodDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_isContructor: {
				access: 1,
				type: "Any"
			},
			_isDestructor: {
				access: 1,
				type: "Any"
			},
			_instance: {
				access: 1,
				type: "Any"
			},
			_name: {
				access: 1,
				type: "Any"
			},
			_parameters: {
				access: 1,
				type: "Any"
			},
			_statements: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ImplementClassMethodAliasDeclaration = Helper.class({
		$name: "ImplementClassMethodAliasDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._isContructor = false;
			this._isDestructor = false;
			this._instance = true;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementClassMethodAliasDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			this._variable = variable;
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementClassMethodAliasDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			var variable = this._variable;
			if((this._isContructor = ((data.name.kind === Kind.Identifier) && $method.isConstructor(data.name.name, variable)))) {
				$throw("Not Implemented", this);
			}
			else if((this._isDestructor = ((data.name.kind === Kind.Identifier) && $method.isDestructor(data.name.name, variable)))) {
				$throw("Not Implemented", this);
			}
			else {
				if(data.name.kind === Kind.TemplateExpression) {
					this._name = $compile.expression(data.name, this);
				}
				for(var i = 0, __ks_0 = data.modifiers.length; this._instance && i < __ks_0; ++i) {
					if(data.modifiers[i].kind === MemberModifier.Static) {
						this._instance = false;
					}
				}
				if(variable.sealed) {
					if(this._instance) {
						if(variable.sealed.instanceMethods[data.name.name] !== true) {
							variable.sealed.instanceMethods[data.name.name] = true;
						}
					}
					else {
						if(variable.sealed.classMethods[data.name.name] !== true) {
							variable.sealed.classMethods[data.name.name] = true;
						}
					}
				}
				if(data.name.kind === Kind.Identifier) {
					if(this._instance) {
						variable.instanceMethods[data.name.name] = variable.instanceMethods[data.alias.name];
					}
					else {
						variable.classMethods[data.name.name] = variable.classMethods[data.alias.name];
					}
				}
				this._signature = $method.signature(data, this);
				this._parameters = Helper.mapArray(this._signature.parameters, Helper.vcurry(function(parameter) {
					return $helper.analyseType(parameter.type, this);
				}, this));
				if(Type.isValue(data.arguments)) {
					this._arguments = Helper.mapArray(data.arguments, Helper.vcurry(function(argument) {
						return $compile.expression(argument, this);
					}, this));
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodAliasDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			if(Type.isValue(this._arguments)) {
				for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._arguments[__ks_0];
					argument.fuse();
				}
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodAliasDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			this.module().flag("Helper");
			var data = this._data;
			var variable = this._variable;
			var line = fragments.newLine().code($runtime.helper(this), ".", this._instance ? "newInstanceMethod" : "newClassMethod", "(");
			var object = line.newObject();
			object.line("class: ", variable.name.name);
			if(data.name.kind === Kind.TemplateExpression) {
				object.newLine().code("name: ").compile(this._name).done();
			}
			else if(data.name.kind === Kind.Identifier) {
				object.line("name: ", $quote(data.name.name));
			}
			else {
				$throw("Not Implemented", this);
			}
			if(variable.sealed) {
				object.line("sealed: ", variable.sealed.name);
			}
			object.line("method: ", $quote(data.alias.name));
			if(Type.isValue(data.arguments)) {
				var argsLine = object.newLine().code("arguments: ");
				var array = argsLine.newArray();
				for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._arguments[__ks_0];
					array.newLine().compile(argument).done();
				}
				array.done();
				argsLine.done();
			}
			var signLine = object.newLine().code("signature: ");
			$helper.reflectMethod(this, signLine, this._signature, this._parameters);
			signLine.done();
			object.done();
			line.code(")").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImplementClassMethodAliasDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ImplementClassMethodAliasDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_arguments: {
				access: 1,
				type: "Any"
			},
			_isContructor: {
				access: 1,
				type: "Any"
			},
			_isDestructor: {
				access: 1,
				type: "Any"
			},
			_instance: {
				access: 1,
				type: "Any"
			},
			_name: {
				access: 1,
				type: "Any"
			},
			_parameters: {
				access: 1,
				type: "Any"
			},
			_signature: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ImplementClassMethodLinkDeclaration = Helper.class({
		$name: "ImplementClassMethodLinkDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._isContructor = false;
			this._isDestructor = false;
			this._instance = true;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementClassMethodLinkDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			this._variable = variable;
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementClassMethodLinkDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			var variable = this._variable;
			if((this._isContructor = ((data.name.kind === Kind.Identifier) && $method.isConstructor(data.name.name, variable)))) {
				$throw("Not Implemented", this);
			}
			else if((this._isDestructor = ((data.name.kind === Kind.Identifier) && $method.isDestructor(data.name.name, variable)))) {
				$throw("Not Implemented", this);
			}
			else {
				if(data.name.kind === Kind.TemplateExpression) {
					this._name = $compile.expression(data.name, this);
				}
				for(var i = 0, __ks_0 = data.modifiers.length; this._instance && i < __ks_0; ++i) {
					if(data.modifiers[i].kind === MemberModifier.Static) {
						this._instance = false;
					}
				}
				if(variable.sealed) {
					if(this._instance) {
						if(variable.sealed.instanceMethods[data.name.name] !== true) {
							variable.sealed.instanceMethods[data.name.name] = true;
						}
					}
					else {
						if(variable.sealed.classMethods[data.name.name] !== true) {
							variable.sealed.classMethods[data.name.name] = true;
						}
					}
				}
				this._functionName = $compile.expression(data.alias, this);
				this._signature = $method.signature(data, this);
				this._parameters = Helper.mapArray(this._signature.parameters, Helper.vcurry(function(parameter) {
					return $helper.analyseType(parameter.type, this);
				}, this));
				if(Type.isValue(data.arguments)) {
					this._arguments = Helper.mapArray(data.arguments, Helper.vcurry(function(argument) {
						return $compile.expression(argument, this);
					}, this));
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodLinkDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			if(Type.isValue(this._arguments)) {
				for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._arguments[__ks_0];
					argument.fuse();
				}
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodLinkDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			this.module().flag("Helper");
			var data = this._data;
			var variable = this._variable;
			var line = fragments.newLine().code($runtime.helper(this), ".", this._instance ? "newInstanceMethod" : "newClassMethod", "(");
			var object = line.newObject();
			object.line("class: ", variable.name.name);
			if(data.name.kind === Kind.TemplateExpression) {
				object.newLine().code("name: ").compile(this._name).done();
			}
			else if(data.name.kind === Kind.Identifier) {
				object.line("name: ", $quote(data.name.name));
			}
			else {
				$throw("Not Implemented", this);
			}
			if(variable.sealed) {
				object.line("sealed: ", variable.sealed.name);
			}
			object.newLine().code("function: ").compile(this._functionName);
			if(Type.isValue(data.arguments)) {
				var argsLine = object.newLine().code("arguments: ");
				var array = argsLine.newArray();
				for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._arguments[__ks_0];
					array.newLine().compile(argument).done();
				}
				array.done();
				argsLine.done();
			}
			var signLine = object.newLine().code("signature: ");
			$helper.reflectMethod(this, signLine, this._signature, this._parameters);
			signLine.done();
			object.done();
			line.code(")").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImplementClassMethodLinkDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ImplementClassMethodLinkDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_arguments: {
				access: 1,
				type: "Any"
			},
			_functionName: {
				access: 1,
				type: "Any"
			},
			_isContructor: {
				access: 1,
				type: "Any"
			},
			_isDestructor: {
				access: 1,
				type: "Any"
			},
			_instance: {
				access: 1,
				type: "Any"
			},
			_name: {
				access: 1,
				type: "Any"
			},
			_parameters: {
				access: 1,
				type: "Any"
			},
			_signature: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ImplementVariableFieldDeclaration = Helper.class({
		$name: "ImplementVariableFieldDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			this._variable = variable;
			Statement.prototype.__ks_cons.call(this, [data, parent]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementVariableFieldDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._type = $helper.analyseType($signature.type(this._data.type, this._scope), this);
			this._value = $compile.expression(this._data.defaultValue, this);
			var property = {
				kind: VariableKind.Variable,
				name: this._data.name.name
			};
			if(Type.isValue(this._data.type)) {
				property.type = $type.type(this._data.type, this._scope, this);
			}
			this._variable.sealed.properties[property.name] = property;
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementVariableFieldDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._value.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ImplementVariableFieldDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.newLine().code(this._variable.sealed.name, ".", this._data.name.name, " = ").compile(this._value).done();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ImplementVariableFieldDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	ImplementVariableFieldDeclaration.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_type: {
				access: 1,
				type: "Any"
			},
			_value: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ImplementVariableMethodDeclaration = Helper.class({
		$name: "ImplementVariableMethodDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(variable === undefined || variable === null) {
				throw new Error("Missing parameter 'variable'");
			}
			this._variable = variable;
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementVariableMethodDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._parameters = Helper.mapArray(this._data.parameters, Helper.vcurry(function(parameter) {
				return new Parameter(parameter, this);
			}, this));
			if(Type.isValue(this._data.body)) {
				this._statements = Helper.mapArray($body(this._data.body), Helper.vcurry(function(statement) {
					return $compile.statement(statement, this);
				}, this));
			}
			else {
				this._statements = [];
			}
			var property = {
				kind: VariableKind.Function,
				name: this._data.name.name,
				signature: $function.signature(this._data, this)
			};
			if(Type.isValue(this._data.type)) {
				property.type = $type.type(this._data.type, this._scope, this);
			}
			this._variable.sealed.properties[property.name] = property;
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementVariableMethodDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this.compile(this._parameters);
			this.compile(this._statements);
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ImplementVariableMethodDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var line = fragments.newLine().code(this._variable.sealed.name, ".", this._data.name.name, " = function(");
			var block = $function.parameters(this, line, function(fragments) {
				if(fragments === undefined || fragments === null) {
					throw new Error("Missing parameter 'fragments'");
				}
				return fragments.code(")").newBlock();
			});
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				block.compile(statement);
			}
			block.done();
			line.done();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ImplementVariableMethodDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	ImplementVariableMethodDeclaration.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_parameters: {
				access: 1,
				type: "Any"
			},
			_statements: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ImportKind = {
		KSFile: 0,
		NodeFile: 1
	};
	var $nodeModules = {
		assert: true,
		buffer: true,
		child_process: true,
		cluster: true,
		constants: true,
		crypto: true,
		dgram: true,
		dns: true,
		domain: true,
		events: true,
		fs: true,
		http: true,
		https: true,
		module: true,
		net: true,
		os: true,
		path: true,
		punycode: true,
		querystring: true,
		readline: true,
		repl: true,
		stream: true,
		string_decoder: true,
		tls: true,
		tty: true,
		url: true,
		util: true,
		v8: true,
		vm: true,
		zlib: true
	};
	var $import = {
		addVariable: function() {
			if(arguments.length < 5) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var module = arguments[++__ks_i];
			if(arguments.length > 5) {
				var file = arguments[++__ks_i];
			}
			else {
				var file = null;
			}
			var node = arguments[++__ks_i];
			var name = arguments[++__ks_i];
			var variable = arguments[++__ks_i];
			var data = arguments[++__ks_i];
			if(Type.isValue(variable.requirement) && Type.isValue(data.references)) {
				var nf = true;
				for(var __ks_0 = 0, __ks_1 = data.references.length, reference; nf && __ks_0 < __ks_1; ++__ks_0) {
					reference = data.references[__ks_0];
					if((Type.isValue(reference.foreign) && (reference.foreign.name === variable.requirement)) || (reference.alias.name === variable.requirement)) {
						nf = false;
						variable = $variable.merge(node.scope().getVariable(reference.alias.name), variable);
					}
				}
			}
			node.scope().addVariable(name, variable);
			module.import(name, file);
		},
		define: function() {
			if(arguments.length < 4) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var module = arguments[++__ks_i];
			if(arguments.length > 4) {
				var file = arguments[++__ks_i];
			}
			else {
				var file = null;
			}
			var node = arguments[++__ks_i];
			var name = arguments[++__ks_i];
			var kind = arguments[++__ks_i];
			if(arguments.length > 5) {
				var type = arguments[++__ks_i];
			}
			else {
				var type = null;
			}
			$variable.define(node, node.scope(), name, kind, type);
			module.import(name.name || name, file);
		},
		loadCoreModule: function(x, module, data, node) {
			if(x === undefined || x === null) {
				throw new Error("Missing parameter 'x'");
			}
			if(module === undefined || module === null) {
				throw new Error("Missing parameter 'module'");
			}
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if($nodeModules[x]) {
				return $import.loadNodeFile(null, x, module, data, node);
			}
			return false;
		},
		loadDirectory: function() {
			if(arguments.length < 4) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var x = arguments[++__ks_i];
			if(arguments.length > 4) {
				var moduleName = arguments[++__ks_i];
			}
			else {
				var moduleName = null;
			}
			var module = arguments[++__ks_i];
			var data = arguments[++__ks_i];
			var node = arguments[++__ks_i];
			var pkgfile = path.join(x, "package.json");
			if(fs.isFile(pkgfile)) {
				var pkg;
				try {
					pkg = JSON.parse(fs.readFile(pkgfile));
				}
				catch(__ks_0) {
				}
				if(pkg.kaoscript && $import.loadKSFile(path.join(x, pkg.kaoscript.main), moduleName, module, data, node)) {
					return true;
				}
				else if(pkg.main && ($import.loadFile(path.join(x, pkg.main), moduleName, module, data, node) || $import.loadDirectory(path.join(x, pkg.main), moduleName, module, data, node))) {
					return true;
				}
			}
			return $import.loadFile(path.join(x, "index"), moduleName, module, data, node);
		},
		loadFile: function() {
			if(arguments.length < 4) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var x = arguments[++__ks_i];
			if(arguments.length > 4) {
				var moduleName = arguments[++__ks_i];
			}
			else {
				var moduleName = null;
			}
			var module = arguments[++__ks_i];
			var data = arguments[++__ks_i];
			var node = arguments[++__ks_i];
			if(fs.isFile(x)) {
				if(x.endsWith($extensions.source)) {
					return $import.loadKSFile(x, moduleName, module, data, node);
				}
				else {
					return $import.loadNodeFile(x, moduleName, module, data, node);
				}
			}
			if(fs.isFile(x + $extensions.source)) {
				return $import.loadKSFile(x + $extensions.source, moduleName, module, data, node);
			}
			else {
				for(var ext in require.extensions) {
					if(fs.isFile(x + ext)) {
						return $import.loadNodeFile(x, moduleName, module, data, node);
					}
				}
			}
			return false;
		},
		loadKSFile: function() {
			if(arguments.length < 4) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var x = arguments[++__ks_i];
			if(arguments.length > 4) {
				var moduleName = arguments[++__ks_i];
			}
			else {
				var moduleName = null;
			}
			var module = arguments[++__ks_i];
			var data = arguments[++__ks_i];
			var node = arguments[++__ks_i];
			var file = null;
			if(!moduleName) {
				file = moduleName = module.path(x, data.module);
			}
			var metadata, name, alias, variable, hashes;
			var source = fs.readFile(x);
			var target = module.compiler()._options.target;
			var __ks_0;
			if(fs.isFile(getMetadataPath(x, target)) && fs.isFile(getHashPath(x, target)) && (Type.isValue(__ks_0 = module.isUpToDate(x, target, source)) ? (hashes = __ks_0, true) : false) && (Type.isValue(__ks_0 = $import.readMetadata(getMetadataPath(x, target))) ? (metadata = __ks_0, true) : false)) {
			}
			else {
				var compiler = module.compiler().createServant(x);
				compiler.compile(source);
				compiler.writeFiles();
				metadata = compiler.toMetadata();
				hashes = compiler.toHashes();
			}
			module.addHashes(x, hashes);
			var exports = metadata.exports, requirements = metadata.requirements;
			var importVariables = {};
			var importVarCount = 0;
			var importAll = false;
			var importAlias = "";
			for(var __ks_0 = 0, __ks_1 = data.specifiers.length, specifier; __ks_0 < __ks_1; ++__ks_0) {
				specifier = data.specifiers[__ks_0];
				if(specifier.kind === Kind.ImportWildcardSpecifier) {
					if(specifier.local) {
						importAlias = specifier.local.name;
					}
					else {
						importAll = true;
					}
				}
				else {
					importVariables[specifier.alias.name] = specifier.local ? specifier.local.name : specifier.alias.name;
					++importVarCount;
				}
			}
			if(importVarCount || importAll || importAlias.length) {
				var nf;
				for(name in requirements) {
					var requirement = requirements[name];
					if(!requirement.nullable && (!Type.isValue(data.references) || (data.references.length === 0))) {
						$throw("Missing requirement '" + name + "' at line " + data.start.line, node);
					}
					nf = true;
					if(data.references) {
						for(var __ks_0 = 0, __ks_1 = data.references.length, reference; nf && __ks_0 < __ks_1; ++__ks_0) {
							reference = data.references[__ks_0];
							if(Type.isValue(reference.foreign)) {
								if(reference.foreign.name === name) {
									$import.use(reference.alias, node);
									nf = false;
								}
							}
							else {
								if(reference.alias.name === name) {
									$import.use(reference.alias, node);
									nf = false;
								}
							}
						}
					}
					if(nf) {
						if(!requirement.nullable) {
							$throw("Missing requirement '" + name + "' at line " + data.start.line, node);
						}
					}
				}
			}
			if(importVarCount === 1) {
				for(name in importVariables) {
					alias = importVariables[name];
				}
				if(!(Type.isValue(exports[name]) ? (variable = exports[name], true) : false)) {
					$throw("Undefined variable " + name + " in the imported module at line " + data.start.line, node);
				}
				$import.addVariable(module, file, node, alias, variable, data);
			}
			else if(importVarCount) {
				var nf = false;
				for(name in importVariables) {
					alias = importVariables[name];
					if(!(Type.isValue(exports[name]) ? (variable = exports[name], true) : false)) {
						$throw("Undefined variable " + name + " in the imported module at line " + data.start.line, node);
					}
					$import.addVariable(module, file, node, alias, variable, data);
				}
			}
			if(importAll) {
				for(name in exports) {
					variable = exports[name];
					$import.addVariable(module, file, node, name, variable, data);
				}
			}
			if(importAlias.length) {
				var type = {
					typeName: {
						kind: Kind.Identifier,
						name: "Object"
					},
					properties: {}
				};
				for(name in exports) {
					variable = exports[name];
					type.properties[variable.name] = variable;
				}
				variable = $variable.define(node, node.scope(), {
					kind: Kind.Identifier,
					name: importAlias
				}, VariableKind.Variable, type);
			}
			node._kind = ImportKind.KSFile;
			node._metadata = {
				moduleName: moduleName,
				exports: exports,
				requirements: requirements,
				importVariables: importVariables,
				importVarCount: importVarCount,
				importAll: importAll,
				importAlias: importAlias
			};
			return true;
		},
		loadNodeFile: function() {
			if(arguments.length < 3) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			if(arguments.length > 3) {
				var x = arguments[++__ks_i];
			}
			else {
				var x = null;
			}
			if(arguments.length > 4) {
				var moduleName = arguments[++__ks_i];
			}
			else {
				var moduleName = null;
			}
			var module = arguments[++__ks_i];
			var data = arguments[++__ks_i];
			var node = arguments[++__ks_i];
			var file = null;
			if(!moduleName) {
				file = moduleName = module.path(x, data.module);
			}
			node._kind = ImportKind.NodeFile;
			node._metadata = {
				moduleName: moduleName
			};
			var variables = node._metadata.variables = {};
			var count = 0;
			for(var __ks_0 = 0, __ks_1 = data.specifiers.length, specifier; __ks_0 < __ks_1; ++__ks_0) {
				specifier = data.specifiers[__ks_0];
				if(specifier.kind === Kind.ImportWildcardSpecifier) {
					if(specifier.local) {
						node._metadata.wilcard = specifier.local.name;
						$import.define(module, file, node, specifier.local, VariableKind.Variable);
					}
					else {
						$throw("Wilcard import is only suppoted for ks files", node);
					}
				}
				else {
					variables[specifier.alias.name] = specifier.local ? specifier.local.name : specifier.alias.name;
					++count;
				}
			}
			node._metadata.count = count;
			for(var alias in variables) {
				$import.define(module, file, node, variables[alias], VariableKind.Variable);
			}
			return true;
		},
		loadNodeModule: function(x, start, module, data, node) {
			if(x === undefined || x === null) {
				throw new Error("Missing parameter 'x'");
			}
			if(start === undefined || start === null) {
				throw new Error("Missing parameter 'start'");
			}
			if(module === undefined || module === null) {
				throw new Error("Missing parameter 'module'");
			}
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			var dirs = $import.nodeModulesPaths(start);
			var file;
			for(var __ks_0 = 0, __ks_1 = dirs.length, dir; __ks_0 < __ks_1; ++__ks_0) {
				dir = dirs[__ks_0];
				file = path.join(dir, x);
				if($import.loadFile(file, x, module, data, node) || $import.loadDirectory(file, x, module, data, node)) {
					return true;
				}
			}
			return false;
		},
		nodeModulesPaths: function(start) {
			if(start === undefined || start === null) {
				throw new Error("Missing parameter 'start'");
			}
			start = fs.resolve(start);
			var prefix = "/";
			if(/^([A-Za-z]:)/.test(start)) {
				prefix = "";
			}
			else if(/^\\\\/.test(start)) {
				prefix = "\\\\";
			}
			var splitRe = (process.platform === "win32") ? /[\/\\]/ : /\/+/;
			var parts = start.split(splitRe);
			var dirs = [];
			for(var i = parts.length - 1; i >= 0; --i) {
				if(parts[i] === "node_modules") {
					continue;
				}
				dirs.push(prefix + path.join(path.join.apply(path, [].concat(parts.slice(0, i + 1))), "node_modules"));
			}
			if(process.platform === "win32") {
				dirs[dirs.length - 1] = dirs[dirs.length - 1].replace(":", ":\\");
			}
			return dirs;
		},
		readMetadata: function(file) {
			if(file === undefined || file === null) {
				throw new Error("Missing parameter 'file'");
			}
			try {
				return JSON.parse(fs.readFile(file));
			}
			catch(__ks_0) {
				return null;
			}
		},
		resolve: function(data, y, module, node) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(y === undefined || y === null) {
				throw new Error("Missing parameter 'y'");
			}
			if(module === undefined || module === null) {
				throw new Error("Missing parameter 'module'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			var x = data.module;
			if(/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[\\\/])/.test(x)) {
				x = fs.resolve(y, x);
				if(!($import.loadFile(x, null, module, data, node) || $import.loadDirectory(x, null, module, data, node))) {
					$throw("Cannot find module '" + x + "' from '" + y + "'", node);
				}
			}
			else {
				if(!($import.loadNodeModule(x, y, module, data, node) || $import.loadCoreModule(x, module, data, node))) {
					$throw("Cannot find module '" + x + "' from '" + y + "'", node);
				}
			}
		},
		use: function(data, node) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(Type.isArray(data)) {
				for(var __ks_0 = 0, __ks_1 = data.length, item; __ks_0 < __ks_1; ++__ks_0) {
					item = data[__ks_0];
					if((item.kind === Kind.Identifier) && !node.scope().hasVariable(item.name)) {
						$throw("Undefined variable '" + item.name + "' at line " + item.start.line, node);
					}
				}
			}
			else if(data.kind === Kind.Identifier) {
				if(!node.scope().hasVariable(data.name)) {
					$throw("Undefined variable '" + data.name + "' at line " + data.start.line, node);
				}
			}
		},
		toKSFileFragments: function(node, fragments, data, metadata) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(metadata === undefined || metadata === null) {
				throw new Error("Missing parameter 'metadata'");
			}
			var __ks_0;
			var moduleName = metadata.moduleName, exports = metadata.exports, requirements = metadata.requirements, importVariables = metadata.importVariables, importVarCount = metadata.importVarCount, importAll = metadata.importAll, importAlias = metadata.importAlias;
			var name, alias, variable, importCode;
			var importCodeVariable = false;
			if((importVarCount && importAll) || (importVarCount && importAlias.length) || (importAll && importAlias.length)) {
				importCode = node.scope().acquireTempName();
				importCodeVariable = true;
				var line = fragments.newLine().code("var ", importCode, " = require(", $quote(moduleName), ")(");
				var nf;
				var first = true;
				var nc = 0;
				for(name in requirements) {
					var requirement = requirements[name];
					nf = true;
					if(data.references) {
						for(var __ks_0 = 0, __ks_1 = data.references.length, reference; nf && __ks_0 < __ks_1; ++__ks_0) {
							reference = data.references[__ks_0];
							if(Type.isValue(reference.foreign)) {
								if(reference.foreign.name === name) {
									if(first) {
										first = false;
									}
									else {
										line.code(", ");
									}
									for(var i = 0; i < nc; ++i) {
										if(i) {
											line.code(", ");
										}
										line.code("null");
									}
									line.code(reference.alias.name);
									if(requirement.class) {
										line.code(", __ks_" + reference.alias.name);
									}
									nf = false;
								}
							}
							else {
								if(reference.alias.name === name) {
									if(first) {
										first = false;
									}
									else {
										line.code(", ");
									}
									for(var i = 0; i < nc; ++i) {
										if(i) {
											line.code(", ");
										}
										line.code("null");
									}
									line.code(reference.alias.name);
									if(requirement.class) {
										line.code(", __ks_" + reference.alias.name);
									}
									nf = false;
								}
							}
						}
					}
					if(nf) {
						if(requirement.nullable) {
							++nc;
							if(requirement.class) {
								++nc;
							}
						}
						else {
							$throw("Missing requirement '" + name + "' at line " + data.start.line, node);
						}
					}
				}
				line.code(")").done();
			}
			else if(importVarCount || importAll || importAlias.length) {
				importCode = "require(" + $quote(moduleName) + ")(";
				var nf;
				var first = true;
				var nc = 0;
				for(name in requirements) {
					var requirement = requirements[name];
					if(!requirement.nullable && (!Type.isValue(data.references) || (data.references.length === 0))) {
						$throw("Missing requirement '" + name + "' at line " + data.start.line, node);
					}
					nf = true;
					if(data.references) {
						for(var __ks_0 = 0, __ks_1 = data.references.length, reference; nf && __ks_0 < __ks_1; ++__ks_0) {
							reference = data.references[__ks_0];
							if(Type.isValue(reference.foreign)) {
								if(reference.foreign.name === name) {
									if(first) {
										first = false;
									}
									else {
										importCode += ", ";
									}
									for(var i = 0; i < nc; ++i) {
										if(i) {
											importCode += ", ";
										}
										importCode += "null";
									}
									importCode += reference.alias.name;
									if(requirement.class) {
										importCode += ", __ks_" + reference.alias.name;
									}
									nf = false;
								}
							}
							else {
								if(reference.alias.name === name) {
									if(first) {
										first = false;
									}
									else {
										importCode += ", ";
									}
									for(var i = 0; i < nc; ++i) {
										if(i) {
											importCode += ", ";
										}
										importCode += "null";
									}
									importCode += reference.alias.name;
									if(requirement.class) {
										importCode += ", __ks_" + reference.alias.name;
									}
									nf = false;
								}
							}
						}
					}
					if(nf) {
						if(requirement.nullable) {
							++nc;
							if(requirement.class) {
								++nc;
							}
						}
						else {
							$throw("Missing requirement '" + name + "' at line " + data.start.line, node);
						}
					}
				}
				importCode += ")";
			}
			if(importVarCount === 1) {
				for(name in importVariables) {
					alias = importVariables[name];
				}
				variable = exports[name];
				if(variable.kind !== VariableKind.TypeAlias) {
					if(variable.sealed) {
						variable.sealed.name = "__ks_" + alias;
						fragments.newLine().code("var {" + alias + ", " + variable.sealed.name + "} = " + importCode).done();
					}
					else {
						fragments.newLine().code("var " + alias + " = " + importCode + "." + name).done();
					}
				}
			}
			else if(importVarCount > 0) {
				if(node._options.format.destructuring === "es5") {
					if(importCodeVariable) {
						var line = fragments.newLine().code("var ");
						var nf = false;
						for(name in importVariables) {
							alias = importVariables[name];
							variable = exports[alias];
							if(variable.kind !== VariableKind.TypeAlias) {
								if(nf) {
									line.code(", ");
								}
								else {
									nf = true;
								}
								line.code(alias + " = " + importCode + "." + name);
							}
						}
						line.done();
					}
					else {
						fragments.line("var __ks__ = " + importCode);
						var line = fragments.newLine().code("var ");
						var nf = false;
						for(name in importVariables) {
							alias = importVariables[name];
							variable = exports[alias];
							if(variable.kind !== VariableKind.TypeAlias) {
								if(nf) {
									line.code(", ");
								}
								else {
									nf = true;
								}
								line.code(alias + " = __ks__." + name);
							}
						}
						line.done();
					}
				}
				else {
					var line = fragments.newLine().code("var {");
					var nf = false;
					for(name in importVariables) {
						alias = importVariables[name];
						variable = exports[name];
						if(variable.kind !== VariableKind.TypeAlias) {
							if(nf) {
								line.code(", ");
							}
							else {
								nf = true;
							}
							if(alias === name) {
								line.code(name);
								if(variable.sealed) {
									line.code(", ", variable.sealed.name);
								}
							}
							else {
								line.code(name, ": ", alias);
								if(variable.sealed) {
									variable.sealed.name = "__ks_" + alias;
									line.code(", ", variable.sealed.name);
								}
							}
						}
					}
					line.code("} = ", importCode).done();
				}
			}
			if(importAll) {
				var variables = [];
				for(name in exports) {
					variable = exports[name];
					if(variable.kind !== VariableKind.TypeAlias) {
						variables.push(name);
						if(variable.sealed) {
							variable.sealed.name = "__ks_" + name;
							variables.push(variable.sealed.name);
						}
					}
				}
				if(variables.length === 1) {
					fragments.newLine().code("var ", variables[0], " = ", importCode, "." + variables[0]).done();
				}
				else if(variables.length > 0) {
					if(node._options.format.destructuring === "es5") {
						if(importCodeVariable) {
							var line = fragments.newLine().code("var ");
							for(var i = 0, __ks_0 = variables.length; i < __ks_0; ++i) {
								name = variables[i];
								if(i > 0) {
									line.code(", ");
								}
								line.code(name + " = " + importCode + "." + name);
							}
							line.done();
						}
						else {
							fragments.line("var __ks__ = " + importCode);
							var line = fragments.newLine().code("var ");
							for(var i = 0, __ks_0 = variables.length; i < __ks_0; ++i) {
								name = variables[i];
								if(i > 0) {
									line.code(", ");
								}
								line.code(name + " = __ks__." + name);
							}
							line.done();
						}
					}
					else {
						var line = fragments.newLine().code("var {");
						for(var i = 0, __ks_0 = variables.length; i < __ks_0; ++i) {
							name = variables[i];
							if(i > 0) {
								line.code(", ");
							}
							line.code(name);
						}
						line.code("} = ", importCode).done();
					}
				}
			}
			if(importAlias.length) {
				fragments.newLine().code("var ", importAlias, " = ", importCode).done();
			}
			node.scope().releaseTempName(importCode);
		},
		toNodeFileFragments: function(node, fragments, data, metadata) {
			if(node === undefined || node === null) {
				throw new Error("Missing parameter 'node'");
			}
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(metadata === undefined || metadata === null) {
				throw new Error("Missing parameter 'metadata'");
			}
			var moduleName = metadata.moduleName;
			if(Type.isValue(metadata.wilcard)) {
				fragments.line("var ", metadata.wilcard, " = require(", $quote(moduleName), ")");
			}
			var variables = metadata.variables;
			var count = metadata.count;
			if(count === 1) {
				var alias;
				for(alias in variables) {
				}
				fragments.line("var ", variables[alias], " = require(", $quote(moduleName), ").", alias);
			}
			else if(count > 0) {
				if(node._options.format.destructuring === "es5") {
					fragments.line("var __ks__ = require(", $quote(moduleName), ")");
					var line = fragments.newLine().code("var ");
					var nf = false;
					for(var name in variables) {
						var alias = variables[name];
						if(nf) {
							line.code(", ");
						}
						else {
							nf = true;
						}
						line.code(alias + " = __ks__." + name);
					}
					line.done();
				}
				else {
					var line = fragments.newLine().code("var {");
					var nf = false;
					for(var alias in variables) {
						if(nf) {
							line.code(", ");
						}
						else {
							nf = true;
						}
						if(variables[alias] === alias) {
							line.code(alias);
						}
						else {
							line.code(alias, ": ", variables[alias]);
						}
					}
					line.code("} = require(", $quote(moduleName), ")");
					line.done();
				}
			}
		}
	};
	var ImportDeclaration = Helper.class({
		$name: "ImportDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarators = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImportDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._data.declarations[__ks_0];
				this._declarators.push(declarator = new ImportDeclarator(declarator, this));
				declarator.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImportDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ImportDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.toFragments(fragments, mode);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImportDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ImportDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_declarators: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ImportDeclarator = Helper.class({
		$name: "ImportDeclarator",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			$import.resolve(this._data, this.directory(), this.module(), this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImportDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._kind === ImportKind.KSFile) {
				$import.toKSFileFragments(this, fragments, this._data, this._metadata);
			}
			else if(this._kind === ImportKind.NodeFile) {
				$import.toNodeFileFragments(this, fragments, this._data, this._metadata);
			}
			else {
				$throw("Not Implemented", this);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImportDeclarator.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ImportDeclarator.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_metadata: {
				access: 1,
				type: "Any"
			},
			_kind: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var IncludeDeclaration = Helper.class({
		$name: "IncludeDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._statements = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			IncludeDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var directory = this.directory();
			var module = this.module();
			var compiler = module.compiler();
			var path, data, declarator;
			for(var __ks_0 = 0, __ks_1 = this._data.files.length, file; __ks_0 < __ks_1; ++__ks_0) {
				file = this._data.files[__ks_0];
				if(/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[\\\/])/.test(file)) {
					path = fs.resolve(directory, file);
					if(fs.isFile(path) || fs.isFile(path += $extensions.source)) {
						declarator = new IncludeDeclarator(path, this);
						data = fs.readFile(path);
						module.addHash(path, compiler.sha256(path, data));
						module.addInclude(path);
						try {
							data = parse(data);
						}
						catch(error) {
							error.filename = path;
							throw error;
						}
						for(var __ks_2 = 0, __ks_3 = data.body.length, statement; __ks_2 < __ks_3; ++__ks_2) {
							statement = data.body[__ks_2];
							this._statements.push(statement = $compile.statement(statement, declarator));
							statement.analyse();
						}
					}
					else {
						$throw("Cannot find file '" + file + "' from '" + directory + "'", this);
					}
				}
				else {
					var nf = true;
					var __ks_2 = $import.nodeModulesPaths(directory);
					for(var __ks_3 = 0, __ks_4 = __ks_2.length, dir; nf && __ks_3 < __ks_4; ++__ks_3) {
						dir = __ks_2[__ks_3];
						path = fs.resolve(dir, file);
						if(fs.isFile(path) || fs.isFile(path += $extensions.source)) {
							nf = false;
						}
					}
					if(nf) {
						$throw("Cannot find module '" + file + "' from '" + directory + "'", this);
					}
					declarator = new IncludeDeclarator(path, this);
					data = fs.readFile(path);
					module.addHash(path, compiler.sha256(path, data));
					module.addInclude(path);
					try {
						data = parse(data);
					}
					catch(error) {
						error.filename = path;
						throw error;
					}
					for(var __ks_2 = 0, __ks_3 = data.body.length, statement; __ks_2 < __ks_3; ++__ks_2) {
						statement = data.body[__ks_2];
						this._statements.push(statement = $compile.statement(statement, declarator));
						statement.analyse();
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IncludeDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return IncludeDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.toFragments(fragments, mode);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IncludeDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	IncludeDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_statements: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var IncludeOnceDeclaration = Helper.class({
		$name: "IncludeOnceDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._statements = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			IncludeOnceDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var directory = this.directory();
			var module = this.module();
			var compiler = module.compiler();
			var path, data, declarator;
			for(var __ks_0 = 0, __ks_1 = this._data.files.length, file; __ks_0 < __ks_1; ++__ks_0) {
				file = this._data.files[__ks_0];
				if(/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[\\\/])/.test(file)) {
					path = fs.resolve(directory, file);
					if(fs.isFile(path) || fs.isFile(path += $extensions.source)) {
						if(!module.hasInclude(path)) {
							declarator = new IncludeDeclarator(path, this);
							data = fs.readFile(path);
							module.addHash(path, compiler.sha256(path, data));
							module.addInclude(path);
							try {
								data = parse(data);
							}
							catch(error) {
								error.filename = path;
								throw error;
							}
							for(var __ks_2 = 0, __ks_3 = data.body.length, statement; __ks_2 < __ks_3; ++__ks_2) {
								statement = data.body[__ks_2];
								this._statements.push(statement = $compile.statement(statement, declarator));
								statement.analyse();
							}
						}
					}
					else {
						$throw("Cannot find file '" + file + "' from '" + directory + "'", this);
					}
				}
				else {
					var nf = true;
					var __ks_2 = $import.nodeModulesPaths(directory);
					for(var __ks_3 = 0, __ks_4 = __ks_2.length, dir; nf && __ks_3 < __ks_4; ++__ks_3) {
						dir = __ks_2[__ks_3];
						path = fs.resolve(dir, file);
						if(fs.isFile(path) || fs.isFile(path += $extensions.source)) {
							nf = false;
						}
					}
					if(nf) {
						$throw("Cannot find module '" + file + "' from '" + directory + "'", this);
					}
					if(!module.hasInclude(path)) {
						declarator = new IncludeDeclarator(path, this);
						data = fs.readFile(path);
						module.addHash(path, compiler.sha256(path, data));
						module.addInclude(path);
						try {
							data = parse(data);
						}
						catch(error) {
							error.filename = path;
							throw error;
						}
						for(var __ks_2 = 0, __ks_3 = data.body.length, statement; __ks_2 < __ks_3; ++__ks_2) {
							statement = data.body[__ks_2];
							this._statements.push(statement = $compile.statement(statement, declarator));
							statement.analyse();
						}
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IncludeOnceDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return IncludeOnceDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.toFragments(fragments, mode);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IncludeOnceDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	IncludeOnceDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_statements: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var IncludeDeclarator = Helper.class({
		$name: "IncludeDeclarator",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(file, parent) {
			if(file === undefined || file === null) {
				throw new Error("Missing parameter 'file'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			this._file = file;
			Statement.prototype.__ks_cons.call(this, [{}, parent]);
			this._directory = path.dirname(file);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				IncludeDeclarator.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_directory_0: function() {
			return this._directory;
		},
		directory: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_directory_0.apply(this);
			}
			else if(Statement.prototype.directory) {
				return Statement.prototype.directory.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_file_0: function() {
			return this._file;
		},
		file: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_file_0.apply(this);
			}
			else if(Statement.prototype.file) {
				return Statement.prototype.file.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	IncludeDeclarator.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_directory: {
				access: 1,
				type: "Any"
			},
			_file: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			directory: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			file: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			]
		},
		classMethods: {}
	};
	var RequireDeclaration = Helper.class({
		$name: "RequireDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			var module = this.module();
			var type;
			for(var __ks_0 = 0, __ks_1 = data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = data.declarations[__ks_0];
				var __ks_2 = declaration.kind;
				if(__ks_2 === Kind.ClassDeclaration) {
					var variable = $variable.define(this, this.greatScope(), declaration.name, VariableKind.Class, declaration);
					variable.requirement = declaration.name.name;
					if(declaration.sealed) {
						variable.sealed = {
							name: "__ks_" + variable.name.name,
							constructors: false,
							instanceMethods: {},
							classMethods: {}
						};
					}
					for(var i = 0, __ks_3 = declaration.members.length; i < __ks_3; ++i) {
						$extern.classMember(declaration.members[i], variable, this._parent);
					}
					module.require(variable);
				}
				else if(__ks_2 === Kind.VariableDeclarator) {
					var variable = $variable.define(this, this.greatScope(), declaration.name, type = $variable.kind(declaration.type), declaration.type);
					variable.requirement = declaration.name.name;
					module.require(variable);
				}
				else {
					$throw("Unknow kind " + declaration.kind, this);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RequireDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return RequireDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return RequireDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	RequireDeclaration.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var RequireOrExternDeclaration = Helper.class({
		$name: "RequireOrExternDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			var module = this.module();
			module.flag("Type");
			for(var __ks_0 = 0, __ks_1 = data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = data.declarations[__ks_0];
				var __ks_2 = declaration.kind;
				if(__ks_2 === Kind.ClassDeclaration) {
					var variable = $variable.define(this, this.greatScope(), declaration.name, VariableKind.Class, declaration);
					variable.requirement = declaration.name.name;
					if(declaration.sealed) {
						variable.sealed = {
							name: "__ks_" + variable.name.name,
							constructors: false,
							instanceMethods: {},
							classMethods: {}
						};
					}
					for(var i = 0, __ks_3 = declaration.members.length; i < __ks_3; ++i) {
						$extern.classMember(declaration.members[i], variable, this);
					}
					module.require(variable, true);
				}
				else if(__ks_2 === Kind.VariableDeclarator) {
					var variable = $variable.define(this, this.greatScope(), declaration.name, $variable.kind(declaration.type), declaration.type);
					variable.requirement = declaration.name.name;
					if(declaration.sealed) {
						variable.sealed = {
							name: "__ks_" + variable.name.name,
							properties: {}
						};
					}
					module.require(variable, true);
				}
				else {
					$throw("Unknow kind " + declaration.kind, this);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RequireOrExternDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return RequireOrExternDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return RequireOrExternDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	RequireOrExternDeclaration.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ReturnStatement = Helper.class({
		$name: "ReturnStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._value = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ReturnStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(Type.isValue(this._data.value)) {
				this._value = $compile.expression(this._data.value, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			if((this._value !== null) && Type.isValue(this._value.fuse)) {
				this._value.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(mode === Mode.Async) {
				if(this._value !== null) {
					fragments.newLine().code("return __ks_cb(null, ").compile(this._value).code(")").done();
				}
				else {
					fragments.line("return __ks_cb()");
				}
			}
			else {
				if(this._value !== null) {
					fragments.newLine().code("return ").compile(this._value).done();
				}
				else {
					fragments.line("return", this._data);
				}
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ReturnStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ReturnStatement.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_value: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var $switch = {
		length: function(elements) {
			if(elements === undefined || elements === null) {
				throw new Error("Missing parameter 'elements'");
			}
			var min = 0;
			var max = 0;
			for(var __ks_0 = 0, __ks_1 = elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = elements[__ks_0];
				if(element.spread) {
					max = Infinity;
				}
				else {
					++min;
					++max;
				}
			}
			return {
				min: min,
				max: max
			};
		}
	};
	var SwitchStatement = Helper.class({
		$name: "SwitchStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._clauses = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			SwitchStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var scope = this._scope;
			if(this._data.expression.kind === Kind.Identifier) {
				this._name = this._data.expression.name;
			}
			else {
				this._name = this._scope.acquireTempName();
				this._value = $compile.expression(this._data.expression, this);
			}
			var clause, condition, name, exp, value;
			for(var __ks_0 = 0, __ks_1 = this._data.clauses.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.clauses[__ks_0];
				clause = {
					hasTest: false,
					bindings: [],
					conditions: [],
					scope: this.newScope()
				};
				this._scope = clause.scope;
				for(var conditionIdx = 0, __ks_2 = data.conditions.length; conditionIdx < __ks_2; ++conditionIdx) {
					condition = data.conditions[conditionIdx];
					if(condition.kind === Kind.SwitchConditionArray) {
						condition = new SwitchConditionArray(condition, this);
					}
					else if(condition.kind === Kind.SwitchConditionEnum) {
						$throw("Not Implemented", this);
					}
					else if(condition.kind === Kind.SwitchConditionObject) {
						$throw("Not Implemented", this);
					}
					else if(condition.kind === Kind.SwitchConditionRange) {
						condition = new SwitchConditionRange(condition, this);
					}
					else if(condition.kind === Kind.SwitchConditionType) {
						condition = new SwitchConditionType(condition, this);
					}
					else {
						condition = new SwitchConditionValue(condition, this);
					}
					condition.analyse();
					clause.conditions.push(condition);
				}
				for(var __ks_2 = 0, __ks_3 = data.bindings.length, binding; __ks_2 < __ks_3; ++__ks_2) {
					binding = data.bindings[__ks_2];
					if(binding.kind === Kind.ArrayBinding) {
						binding = new SwitchBindingArray(binding, this);
						clause.hasTest = true;
					}
					else if(binding.kind === Kind.ObjectBinding) {
						$throw("Not Implemented", this);
						clause.hasTest = true;
					}
					else if(binding.kind === Kind.SwitchTypeCasting) {
						binding = new SwitchBindingType(binding, this);
					}
					else {
						binding = new SwitchBindingValue(binding, this);
					}
					binding.analyse();
					clause.bindings.push(binding);
				}
				clause.filter = new SwitchFilter(data, this);
				clause.filter.analyse();
				if(Type.isValue(data.filter)) {
					clause.hasTest = true;
				}
				clause.body = $compile.expression($block(data.body), this);
				this._clauses.push(clause);
				this._scope = scope;
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._clauses[__ks_0];
				for(var __ks_2 = 0, __ks_3 = clause.conditions.length, condition; __ks_2 < __ks_3; ++__ks_2) {
					condition = clause.conditions[__ks_2];
					condition.fuse();
				}
				clause.filter.fuse();
				clause.body.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return SwitchStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(Type.isValue(this._value)) {
				fragments.newLine().code($variable.scope(this), this._name, " = ").compile(this._value).done();
			}
			var condition;
			for(var __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._clauses[__ks_0];
				for(var __ks_2 = 0, __ks_3 = clause.conditions.length; __ks_2 < __ks_3; ++__ks_2) {
					condition = clause.conditions[__ks_2];
					condition.toStatementFragments(fragments);
				}
				clause.filter.toStatementFragments(fragments);
			}
			var ctrl = fragments.newControl();
			var we = false;
			var i, binding;
			for(var clauseIdx = 0, __ks_2 = this._clauses.length, clause; clauseIdx < __ks_2; ++clauseIdx) {
				clause = this._clauses[clauseIdx];
				if(clause.conditions.length) {
					if(we) {
						$throw("The default clause is before this clause", this);
					}
					if(clauseIdx) {
						ctrl.step().code("else if(");
					}
					else {
						ctrl.code("if(");
					}
					i = 0;
					for(var __ks_3 = clause.conditions.length; i < __ks_3; ++i) {
						condition = clause.conditions[i];
						if(i) {
							ctrl.code(" || ");
						}
						condition.toBooleanFragments(ctrl, this._name);
					}
					clause.filter.toBooleanFragments(ctrl, true);
					ctrl.code(")").step();
					for(var __ks_3 = 0, __ks_0 = clause.bindings.length; __ks_3 < __ks_0; ++__ks_3) {
						binding = clause.bindings[__ks_3];
						binding.toFragments(ctrl);
					}
					clause.body.toFragments(ctrl, mode);
				}
				else if(clause.hasTest) {
					if(clauseIdx) {
						ctrl.step().code("else if(");
					}
					else {
						ctrl.code("if(");
					}
					clause.filter.toBooleanFragments(ctrl, false);
					ctrl.code(")").step();
					for(var __ks_3 = 0, __ks_0 = clause.bindings.length; __ks_3 < __ks_0; ++__ks_3) {
						binding = clause.bindings[__ks_3];
						binding.toFragments(ctrl);
					}
					clause.body.toFragments(ctrl, mode);
				}
				else {
					if(clauseIdx) {
						ctrl.step().code("else");
					}
					else {
						ctrl.code("if(true)");
					}
					we = true;
					ctrl.step();
					for(var __ks_3 = 0, __ks_0 = clause.bindings.length; __ks_3 < __ks_0; ++__ks_3) {
						binding = clause.bindings[__ks_3];
						binding.toFragments(ctrl);
					}
					clause.body.toFragments(ctrl, mode);
				}
			}
			ctrl.done();
			if(Type.isValue(this._value)) {
				this._scope.releaseTempName(this._name);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return SwitchStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	SwitchStatement.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_clauses: {
				access: 1,
				type: "Any"
			},
			_name: {
				access: 1,
				type: "Any"
			},
			_value: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var SwitchBindingArray = Helper.class({
		$name: "SwitchBindingArray",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._array = $compile.expression(this._data, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchBindingArray.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._array.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return SwitchBindingArray.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			var line = fragments.newLine();
			this._array.toAssignmentFragments(line, this._parent._name);
			line.done();
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return SwitchBindingArray.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	SwitchBindingArray.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_array: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var SwitchBindingType = Helper.class({
		$name: "SwitchBindingType",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			$variable.define(this, this._scope, this._data.name, VariableKind.Variable);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchBindingType.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return SwitchBindingType.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.line($variable.scope(this), this._data.name.name, " = ", this._parent._name);
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return SwitchBindingType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	SwitchBindingType.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var SwitchBindingValue = Helper.class({
		$name: "SwitchBindingValue",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			$variable.define(this, this._scope, this._data, VariableKind.Variable);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchBindingValue.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return SwitchBindingValue.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.line($variable.scope(this), this._data.name, " = ", this._parent._name);
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return SwitchBindingValue.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	SwitchBindingValue.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var SwitchConditionArray = Helper.class({
		$name: "SwitchConditionArray",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._values = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			SwitchConditionArray.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var nv = true;
			for(var i = 0, __ks_0 = this._data.values.length; nv && i < __ks_0; ++i) {
				if(this._data.values[i].kind !== Kind.OmittedExpression) {
					nv = false;
				}
			}
			if(!nv) {
				this._name = this._scope.parent().acquireTempName();
				for(var __ks_0 = 0, __ks_1 = this._data.values.length, value; __ks_0 < __ks_1; ++__ks_0) {
					value = this._data.values[__ks_0];
					if(value.kind !== Kind.OmittedExpression) {
						if(value.kind === Kind.SwitchConditionRange) {
							value = new SwitchConditionRange(value, this);
						}
						else {
							value = new SwitchConditionValue(value, this);
						}
						value.analyse();
						this._values.push(value);
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionArray.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				value.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return SwitchConditionArray.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			this.module().flag("Type");
			fragments.code("(", $runtime.typeof("Array", this), "(", name, ")");
			var mm = $switch.length(this._data.values);
			if(mm.min === mm.max) {
				if(mm.min !== Infinity) {
					fragments.code(" && ", name, ".length === ", mm.min);
				}
			}
			else {
				fragments.code(" && ", name, ".length >= ", mm.min);
				if(mm.max !== Infinity) {
					fragments.code(" && ", name, ".length <= ", mm.max);
				}
			}
			if(Type.isValue(this._name)) {
				fragments.code(" && ", this._name, "(", name, ")");
			}
			fragments.code(")");
			if(Type.isValue(this._name)) {
				this._scope.parent().releaseTempName(this._name);
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionArray.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(this._values.length > 0) {
				var line = fragments.newLine();
				line.code($variable.scope(this), this._name, " = ([");
				for(var i = 0, __ks_0 = this._data.values.length, value; i < __ks_0; ++i) {
					value = this._data.values[i];
					if(i) {
						line.code(", ");
					}
					if(value.kind === Kind.OmittedExpression) {
						if(value.spread) {
							line.code("...");
						}
					}
					else {
						line.code("__ks_", i);
					}
				}
				line.code("]) => ");
				var index = 0;
				for(var i = 0, __ks_0 = this._data.values.length, value; i < __ks_0; ++i) {
					value = this._data.values[i];
					if(value.kind !== Kind.OmittedExpression) {
						if(index) {
							line.code(" && ");
						}
						this._values[index].toBooleanFragments(line, "__ks_" + i);
						index++;
					}
				}
				line.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionArray.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	SwitchConditionArray.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_name: {
				access: 1,
				type: "Any"
			},
			_values: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toBooleanFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var SwitchConditionRange = Helper.class({
		$name: "SwitchConditionRange",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._from = true;
			this._to = true;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			SwitchConditionRange.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(Type.isValue(this._data.from)) {
				this._left = $compile.expression(this._data.from, this);
			}
			else {
				this._left = $compile.expression(this._data.then, this);
				this._from = false;
			}
			if(Type.isValue(this._data.to)) {
				this._right = $compile.expression(this._data.to, this);
			}
			else {
				this._right = $compile.expression(this._data.til, this);
				this._to = false;
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionRange.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._left.fuse();
			this._right.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return SwitchConditionRange.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			fragments.code(name, this._from ? " >= " : ">").compile(this._left).code(" && ").code(name, this._to ? " <= " : "<").compile(this._right);
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionRange.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionRange.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	SwitchConditionRange.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_from: {
				access: 1,
				type: "Any"
			},
			_left: {
				access: 1,
				type: "Any"
			},
			_right: {
				access: 1,
				type: "Any"
			},
			_to: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toBooleanFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var SwitchConditionType = Helper.class({
		$name: "SwitchConditionType",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionType.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return SwitchConditionType.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			$type.check(this, fragments, name, this._data.type);
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionType.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionType.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	SwitchConditionType.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toBooleanFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var SwitchConditionValue = Helper.class({
		$name: "SwitchConditionValue",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._value = $compile.expression(this._data, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionValue.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._value.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return SwitchConditionValue.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			fragments.code(name, " === ").compile(this._value);
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionValue.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionValue.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	SwitchConditionValue.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_value: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toBooleanFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var SwitchFilter = Helper.class({
		$name: "SwitchFilter",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._bindings = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			SwitchFilter.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(Type.isValue(this._data.filter)) {
				if(this._data.bindings.length > 0) {
					this._name = this._scope.parent().acquireTempName();
					for(var __ks_0 = 0, __ks_1 = this._data.bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
						binding = this._data.bindings[__ks_0];
						this._bindings.push($compile.expression(binding, this));
					}
				}
				this._filter = $compile.expression(this._data.filter, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchFilter.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			if(Type.isValue(this._filter)) {
				this._filter.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return SwitchFilter.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, nf) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(nf === undefined || nf === null) {
				throw new Error("Missing parameter 'nf'");
			}
			var mm;
			for(var __ks_0 = 0, __ks_1 = this._data.bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
				binding = this._data.bindings[__ks_0];
				if(binding.kind === Kind.ArrayBinding) {
					this.module().flag("Type");
					if(nf) {
						fragments.code(" && ");
					}
					else {
						nf = true;
					}
					fragments.code($runtime.typeof("Array", this), "(", this._parent._name, ")");
					mm = $switch.length(binding.elements);
					if(mm.min === mm.max) {
						if(mm.min !== Infinity) {
							fragments.code(" && ", this._parent._name, ".length === ", mm.min);
						}
					}
					else {
						fragments.code(" && ", this._parent._name, ".length >= ", mm.min);
						if(mm.max !== Infinity) {
							fragments.code(" && ", this._parent._name, ".length <= ", mm.max);
						}
					}
				}
			}
			if(Type.isValue(this._name)) {
				if(nf) {
					fragments.code(" && ");
				}
				fragments.code(this._name, "(", this._parent._name, ")");
				this._scope.parent().releaseTempName(this._name);
			}
			else if(Type.isValue(this._filter)) {
				if(nf) {
					fragments.code(" && ");
				}
				fragments.compile(this._filter);
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchFilter.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(Type.isValue(this._name)) {
				var line = fragments.newLine();
				line.code($variable.scope(this), this._name, " = (");
				for(var i = 0, __ks_0 = this._bindings.length, binding; i < __ks_0; ++i) {
					binding = this._bindings[i];
					if(i) {
						line.code(", ");
					}
					line.compile(binding);
				}
				line.code(") => ").compile(this._filter);
				line.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchFilter.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	SwitchFilter.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_bindings: {
				access: 1,
				type: "Any"
			},
			_filter: {
				access: 1,
				type: "Any"
			},
			_name: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toBooleanFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ThrowStatement = Helper.class({
		$name: "ThrowStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._value = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ThrowStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._value = $compile.expression(this._data.value, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._value.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.newLine().code("throw ").compile(this._value).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ThrowStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ThrowStatement.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_value: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var TryStatement = Helper.class({
		$name: "TryStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._catchClauses = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			TryStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			var scope = this._scope;
			this._body = $compile.expression(data.body, this);
			if(Type.isValue(data.catchClauses)) {
				for(var __ks_0 = 0, __ks_1 = data.catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
					clause = data.catchClauses[__ks_0];
					if(Type.isValue(clause.binding)) {
						$variable.define(this, this._scope = new Scope(scope), clause.binding, VariableKind.Variable);
					}
					this._catchClauses.push({
						body: $compile.expression(clause.body, this),
						type: $compile.expression(clause.type, this)
					});
				}
			}
			if(Type.isValue(data.catchClause)) {
				if(Type.isValue(this._data.catchClause.binding)) {
					$variable.define(this, this._scope = new Scope(scope), data.catchClause.binding, VariableKind.Variable);
				}
				this._catchClause = $compile.expression(data.catchClause.body, this);
			}
			this._scope = scope;
			if(Type.isValue(data.finalizer)) {
				this._finalizer = $compile.expression(data.finalizer, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._body.fuse();
			for(var __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._catchClauses[__ks_0];
				clause.body.fuse();
			}
			if(Type.isValue(this._catchClause)) {
				this._catchClause.fuse();
			}
			if(Type.isValue(this._finalizer)) {
				this._finalizer.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var finalizer = null;
			if(Type.isValue(this._finalizer)) {
				finalizer = this._scope.acquireTempName();
				var line = fragments.newLine().code($variable.scope(this), finalizer, " = () =>");
				line.newBlock().compile(this._finalizer).done();
				line.done();
			}
			var ctrl = fragments.newControl().code("try").step().compile(this._body);
			if(Type.isValue(finalizer)) {
				ctrl.line(finalizer, "()");
			}
			ctrl.step();
			if(this._catchClauses.length) {
				this.module().flag("Type");
				var error = this._scope.acquireTempName();
				ctrl.code("catch(", error, ")").step();
				if(Type.isValue(finalizer)) {
					ctrl.line(finalizer, "()");
				}
				var ifs = ctrl.newControl();
				for(var i = 0, __ks_0 = this._data.catchClauses.length, clause; i < __ks_0; ++i) {
					clause = this._data.catchClauses[i];
					if(i) {
						ifs.step().code("else ");
					}
					ifs.code("if(", $runtime.type(this), ".is(", error, ", ").compile(this._catchClauses[i].type).code(")").step();
					if(Type.isValue(clause.binding)) {
						ifs.line($variable.scope(this), clause.binding.name, " = ", error);
					}
					ifs.compile(this._catchClauses[i].body);
				}
				if(Type.isValue(this._catchClause)) {
					ifs.step().code("else").step();
					if(Type.isValue(this._data.catchClause.binding)) {
						ifs.line($variable.scope(this), this._data.catchClause.binding.name, " = ", error);
					}
					ifs.compile(this._catchClause);
				}
				ifs.done();
				this._scope.releaseTempName(error);
			}
			else if(Type.isValue(this._catchClause)) {
				var error = this._scope.acquireTempName();
				if(Type.isValue(this._data.catchClause.binding)) {
					ctrl.code("catch(", this._data.catchClause.binding.name, ")").step();
				}
				else {
					ctrl.code("catch(", error, ")").step();
				}
				if(Type.isValue(finalizer)) {
					ctrl.line(finalizer, "()");
				}
				ctrl.compile(this._catchClause);
				this._scope.releaseTempName(error);
			}
			else {
				var error = this._scope.acquireTempName();
				ctrl.code("catch(", error, ")").step();
				if(Type.isValue(finalizer)) {
					ctrl.line(finalizer, "()");
				}
				this._scope.releaseTempName(error);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return TryStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	TryStatement.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_catchClause: {
				access: 1,
				type: "Any"
			},
			_catchClauses: {
				access: 1,
				type: "Any"
			},
			_finalizer: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var TypeAliasDeclaration = Helper.class({
		$name: "TypeAliasDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			$variable.define(this, this._scope, this._data.name, VariableKind.TypeAlias, this._data.type);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return TypeAliasDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	TypeAliasDeclaration.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var UnlessStatement = Helper.class({
		$name: "UnlessStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._then = $compile.expression($block(this._data.then), this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UnlessStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._condition.fuse();
			this._then.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return UnlessStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.newControl().code("if(!").wrapBoolean(this._condition).code(")").step().compile(this._then).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return UnlessStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	UnlessStatement.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_then: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var UntilStatement = Helper.class({
		$name: "UntilStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._body = $compile.expression(this._data.body, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UntilStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._condition.fuse();
			this._body.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return UntilStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.newControl().code("while(!(").compileBoolean(this._condition).code("))").step().compile(this._body).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return UntilStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	UntilStatement.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_condition: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var VariableDeclaration = Helper.class({
		$name: "VariableDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._async = false;
			this._declarators = [];
			this._init = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			VariableDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._data.declarations[__ks_0];
				if(declarator.kind === Kind.AwaitExpression) {
					declarator = new AwaitDeclarator(declarator, this);
					this._async = true;
				}
				else {
					declarator = new VariableDeclarator(declarator, this);
				}
				declarator.analyse();
				this._declarators.push(declarator);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isAsync_0: function() {
			return this._async;
		},
		isAsync: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_isAsync_0.apply(this);
			}
			return Statement.prototype.isAsync.apply(this, arguments);
		},
		__ks_func_modifier_0: function(data) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if((data.name.kind === Kind.ArrayBinding) || (data.name.kind === Kind.ObjectBinding) || (this._options.format.variables === "es5")) {
				return $code("var");
			}
			else {
				if(this._data.modifiers.kind === VariableModifier.Let) {
					return $code("let", this._data.modifiers.start, this._data.modifiers.end);
				}
				else {
					return $code("const", this._data.modifiers.start, this._data.modifiers.end);
				}
			}
		},
		modifier: function() {
			if(arguments.length === 1) {
				return VariableDeclaration.prototype.__ks_func_modifier_0.apply(this, arguments);
			}
			else if(Statement.prototype.modifier) {
				return Statement.prototype.modifier.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._declarators.length === 1) {
				if(this._async) {
					return this._declarators[0].toFragments(fragments);
				}
				else {
					this._declarators[0].toFragments(fragments, this._data.modifiers);
				}
			}
			else {
				var line = fragments.newLine().code(this.modifier(this._declarators[0]._data), $space);
				for(var index = 0, __ks_0 = this._declarators.length, declarator; index < __ks_0; ++index) {
					declarator = this._declarators[index];
					if(index) {
						line.code($comma);
					}
					line.compile(declarator._name);
				}
				line.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return VariableDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	VariableDeclaration.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_async: {
				access: 1,
				type: "Any"
			},
			_declarators: {
				access: 1,
				type: "Any"
			},
			_init: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isAsync: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			modifier: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AwaitDeclarator = Helper.class({
		$name: "AwaitDeclarator",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._variables = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			AwaitDeclarator.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent, new Scope(parent._scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				AwaitDeclarator.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				AbstractNode.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			this._operation = $compile.expression(data.operation, this);
			for(var __ks_0 = 0, __ks_1 = data.variables.length, variable; __ks_0 < __ks_1; ++__ks_0) {
				variable = data.variables[__ks_0];
				if(variable.kind === Kind.VariableDeclarator) {
					$variable.define(this, this._scope._parent, variable.name, $variable.kind(variable.type), variable.type);
					this._variables.push($compile.expression(variable.name, this));
				}
				else {
					$variable.define(this, this._scope._parent, variable, VariableKind.Variable);
					this._variables.push($compile.expression(variable, this));
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AwaitDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._operation.fuse();
			for(var __ks_0 = 0, __ks_1 = this._variables.length, variable; __ks_0 < __ks_1; ++__ks_0) {
				variable = this._variables[__ks_0];
				variable.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return AwaitDeclarator.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_statement_0: function() {
			return this._parent.statement();
		},
		statement: function() {
			if(arguments.length === 0) {
				return AwaitDeclarator.prototype.__ks_func_statement_0.apply(this);
			}
			return AbstractNode.prototype.statement.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			var line = fragments.newLine();
			this._operation.toFragments(line, Mode.Async);
			line.code("(__ks_e");
			for(var __ks_0 = 0, __ks_1 = this._variables.length, variable; __ks_0 < __ks_1; ++__ks_0) {
				variable = this._variables[__ks_0];
				line.code(", ").compile(variable);
			}
			line.code(") =>");
			var block = line.newBlock();
			block.newControl().code("if(__ks_e)").step().line("return __ks_cb(__ks_e)").done();
			return {
				fragments: block,
				mode: Mode.Async,
				done: function(block) {
					if(block === undefined || block === null) {
						throw new Error("Missing parameter 'block'");
					}
					block.done();
					line.code(")").done();
				}
			};
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return AwaitDeclarator.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AwaitDeclarator.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_operation: {
				access: 1,
				type: "Any"
			},
			_variables: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			statement: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var VariableDeclarator = Helper.class({
		$name: "VariableDeclarator",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._declare = true;
			this._init = null;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			VariableDeclarator.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			if(data.name.kind === Kind.Identifier) {
				if(this._options.format.variables === "es5") {
					this._scope.rename(data.name.name);
				}
				if(this._scope.hasVariable(data.name.name, false)) {
					$throw("Already declared variable '" + data.name.name + "' at line " + data.name.start.line, this);
				}
				if(this._scope.isDeclaredVariable(data.name.name, false)) {
					this._declare = false;
				}
			}
			if(data.autotype) {
				var type = data.type;
				if(!type && data.init) {
					type = data.init;
				}
				$variable.define(this, this._scope, data.name, $variable.kind(data.type), type);
			}
			else {
				$variable.define(this, this._scope, data.name, $variable.kind(data.type), data.type);
			}
			this._name = $compile.expression(data.name, this);
			if(Type.isValue(data.init)) {
				if(data.name.kind === Kind.Identifier) {
					this.reference(data.name.name);
				}
				this._init = $compile.expression(data.init, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return VariableDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			if(this._init !== null) {
				this._init.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return VariableDeclarator.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(AbstractNode.prototype.fuse) {
				return AbstractNode.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_statement_0: function() {
			return this._parent.statement();
		},
		statement: function() {
			if(arguments.length === 0) {
				return VariableDeclarator.prototype.__ks_func_statement_0.apply(this);
			}
			return AbstractNode.prototype.statement.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, modifier) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(modifier === undefined || modifier === null) {
				throw new Error("Missing parameter 'modifier'");
			}
			if((this._options.format.destructuring === "es5") && (Type.is(this._name, ArrayBinding) || Type.is(this._name, ObjectBinding))) {
				if(this._init !== null) {
					var line = fragments.newLine();
					if(this._declare) {
						line.code(this._parent.modifier(this._data), $space);
					}
					this._name.toFlatFragments(line, this._init);
					line.done();
				}
				else if(this._declare) {
					fragments.line(this._parent.modifier(this._data), $space, this._name.listVariables().join(", "));
				}
			}
			else {
				var line = fragments.newLine();
				if(this._declare) {
					line.code(this._parent.modifier(this._data), $space);
				}
				line.compile(this._name);
				if(this._init !== null) {
					line.code($equals).compile(this._init);
				}
				line.done();
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return VariableDeclarator.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	VariableDeclarator.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_declare: {
				access: 1,
				type: "Any"
			},
			_init: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			statement: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var WhileStatement = Helper.class({
		$name: "WhileStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._body = $compile.expression(this._data.body, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._condition.fuse();
			this._body.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Statement.prototype.fuse) {
				return Statement.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.newControl().code("while(").compileBoolean(this._condition).code(")").step().compile(this._body).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return WhileStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	WhileStatement.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_condition: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var Expression = Helper.class({
		$name: "Expression",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(acquire === undefined || acquire === null) {
				throw new Error("Missing parameter 'acquire'");
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.acquireReusable) {
				return AbstractNode.prototype.acquireReusable.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			else if(AbstractNode.prototype.releaseReusable) {
				return AbstractNode.prototype.releaseReusable.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isAssignable_0: function() {
			return false;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isAssignable_0.apply(this);
			}
			else if(AbstractNode.prototype.isAssignable) {
				return AbstractNode.prototype.isAssignable.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isBooleanComputed_0: function() {
			return this.isComputed();
		},
		isBooleanComputed: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isBooleanComputed_0.apply(this);
			}
			else if(AbstractNode.prototype.isBooleanComputed) {
				return AbstractNode.prototype.isBooleanComputed.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isCallable_0: function() {
			return false;
		},
		isCallable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isCallable_0.apply(this);
			}
			else if(AbstractNode.prototype.isCallable) {
				return AbstractNode.prototype.isCallable.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isComposite_0: function() {
			return true;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isComposite_0.apply(this);
			}
			else if(AbstractNode.prototype.isComposite) {
				return AbstractNode.prototype.isComposite.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isComputed_0.apply(this);
			}
			else if(AbstractNode.prototype.isComputed) {
				return AbstractNode.prototype.isComputed.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isConditional_0: function() {
			return this.isNullable();
		},
		isConditional: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isConditional_0.apply(this);
			}
			else if(AbstractNode.prototype.isConditional) {
				return AbstractNode.prototype.isConditional.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isEntangled_0: function() {
			return true;
		},
		isEntangled: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isEntangled_0.apply(this);
			}
			else if(AbstractNode.prototype.isEntangled) {
				return AbstractNode.prototype.isEntangled.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(AbstractNode.prototype.isNullable) {
				return AbstractNode.prototype.isNullable.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isNullableComputed_0: function() {
			return this.isComputed();
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			else if(AbstractNode.prototype.isNullableComputed) {
				return AbstractNode.prototype.isNullableComputed.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_statement_0: function(data) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			var expression = this;
			while(!Type.is(expression._parent, Statement)) {
				expression = expression._parent;
			}
			return expression._parent;
		},
		statement: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_statement_0.apply(this, arguments);
			}
			return AbstractNode.prototype.statement.apply(this, arguments);
		},
		__ks_func_toBooleanFragments_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var fragments = arguments[++__ks_i];
			if(arguments.length > 1) {
				var mode = arguments[++__ks_i];
			}
			else {
				var mode = Mode.None;
			}
			return this.toFragments(fragments, mode);
		},
		toBooleanFragments: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Expression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			return this.toFragments(fragments, Mode.None);
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toNullableFragments) {
				return AbstractNode.prototype.toNullableFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			return this.toFragments(fragments, Mode.None);
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toReusableFragments) {
				return AbstractNode.prototype.toReusableFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	Expression.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			acquireReusable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			releaseReusable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isAssignable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isBooleanComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isCallable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isComposite: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isConditional: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isEntangled: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullableComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			statement: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			toBooleanFragments: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			toNullableFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			toReusableFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var $predefined = {
		false: true,
		null: true,
		string: true,
		true: true,
		Error: true,
		Function: true,
		Infinity: true,
		Math: true,
		NaN: true,
		Object: true,
		String: true,
		Type: true
	};
	var Literal = Helper.class({
		$name: "Literal",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, scope, value) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			if(value === undefined || value === null) {
				throw new Error("Missing parameter 'value'");
			}
			this._value = value;
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				Literal.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isComposite_0: function() {
			return false;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_isEntangled_0: function() {
			return false;
		},
		isEntangled: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_isEntangled_0.apply(this);
			}
			return Expression.prototype.isEntangled.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._data) {
				fragments.code(this._value, this._data);
			}
			else {
				fragments.code(this._value);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Literal.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	Literal.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 4,
				max: 4,
				parameters: [
					{
						type: "Any",
						min: 4,
						max: 4
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_value: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isComposite: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isEntangled: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var IdentifierLiteral = Helper.class({
		$name: "IdentifierLiteral",
		$extends: Literal,
		__ks_init_1: function() {
			this._isVariable = false;
		},
		__ks_init: function() {
			Literal.prototype.__ks_init.call(this);
			IdentifierLiteral.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			var parent = arguments[++__ks_i];
			if(arguments.length > 2) {
				var scope = arguments[++__ks_i];
			}
			else {
				var scope = parent.scope();
			}
			if(arguments.length > 3) {
				var variable = arguments[++__ks_i];
			}
			else {
				var variable = true;
			}
			Literal.prototype.__ks_cons.call(this, [data, parent, scope, data.name]);
			if(variable && ($predefined[data.name] !== true)) {
				if(Type.is(parent, MemberExpression)) {
					if(parent._data.object === data) {
						this._isVariable = true;
					}
					else if(parent._data.computed && (parent._data.property === data)) {
						this._isVariable = true;
					}
				}
				else {
					this._isVariable = true;
				}
			}
			if(this._isVariable && !this._scope.hasVariable(data.name)) {
				$throw("Undefined variable '" + data.name + "' at line " + data.start.line, this);
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 4) {
				IdentifierLiteral.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._isVariable) {
				fragments.code(this._scope.getRenamedVariable(this._value), this._data);
			}
			else {
				fragments.code(this._value, this._data);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IdentifierLiteral.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Literal.prototype.toFragments.apply(this, arguments);
		}
	});
	IdentifierLiteral.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 4,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 4
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_isVariable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var NumberLiteral = Helper.class({
		$name: "NumberLiteral",
		$extends: Literal,
		__ks_init: function() {
			Literal.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			var parent = arguments[++__ks_i];
			if(arguments.length > 2) {
				var scope = arguments[++__ks_i];
			}
			else {
				var scope = parent.scope();
			}
			Literal.prototype.__ks_cons.call(this, [data, parent, scope, data.value]);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				NumberLiteral.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		}
	});
	NumberLiteral.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {},
		classMethods: {}
	};
	var StringLiteral = Helper.class({
		$name: "StringLiteral",
		$extends: Literal,
		__ks_init: function() {
			Literal.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			var parent = arguments[++__ks_i];
			if(arguments.length > 2) {
				var scope = arguments[++__ks_i];
			}
			else {
				var scope = parent.scope();
			}
			Literal.prototype.__ks_cons.call(this, [data, parent, scope, $quote(data.value)]);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				StringLiteral.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		}
	});
	StringLiteral.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {},
		classMethods: {}
	};
	var ArrayExpression = Helper.class({
		$name: "ArrayExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._values = Helper.mapArray(this._data.values, Helper.vcurry(function(value) {
				return $compile.expression(value, this);
			}, this));
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				value.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.code("[");
			for(var index = 0, __ks_0 = this._values.length, value; index < __ks_0; ++index) {
				value = this._values[index];
				if(index) {
					fragments.code($comma);
				}
				fragments.compile(value);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ArrayExpression.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_values: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ArrayRange = Helper.class({
		$name: "ArrayRange",
		$extends: Expression,
		__ks_init_1: function() {
			this._by = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayRange.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			this._from = $compile.expression(Type.isValue(data.from) ? data.from : data.then, this);
			this._to = $compile.expression(Type.isValue(data.to) ? data.to : data.til, this);
			if(Type.isValue(data.by)) {
				this._by = $compile.expression(data.by, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			this.module().flag("Helper");
			fragments.code($runtime.helper(this), ".newArrayRange(").compile(this._from).code($comma).compile(this._to);
			if(this._by === null) {
				fragments.code(", 1");
			}
			else {
				fragments.code(", ").compile(this._by);
			}
			fragments.code($comma, Type.isValue(this._data.from), $comma, Type.isValue(this._data.to), ")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayRange.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ArrayRange.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_by: {
				access: 1,
				type: "Any"
			},
			_from: {
				access: 1,
				type: "Any"
			},
			_to: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	function $return(data) {
		if(data === undefined) {
			data = null;
		}
		return {
			kind: Kind.ReturnStatement,
			value: data
		};
	}
	var ArrayComprehensionForFrom = Helper.class({
		$name: "ArrayComprehensionForFrom",
		$extends: Expression,
		__ks_init_1: function() {
			this._by = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayComprehensionForFrom.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, parent.newScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ArrayComprehensionForFrom.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			$variable.define(this, this._scope, data.loop.variable.name, VariableKind.Variable);
			this._variable = $compile.expression(data.loop.variable, this);
			this._from = $compile.expression(data.loop.from, this);
			this._to = $compile.expression(Type.isValue(data.loop.to) ? data.loop.to : data.loop.til, this);
			if(Type.isValue(data.loop.by)) {
				this._by = $compile.expression(data.loop.by, this);
			}
			this._body = $compile.statement($return(data.body), this);
			this._body.analyse();
			if(Type.isValue(data.loop.when)) {
				this._when = $compile.statement($return(data.loop.when), this);
				this._when.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._body.fuse();
			if(Type.isValue(this._when)) {
				this._when.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapRange(").compile(this._from).code($comma).compile(this._to);
			if(this._by === null) {
				fragments.code(", 1");
			}
			else {
				fragments.code($comma).compile(this._by);
			}
			fragments.code($comma, Type.isValue(this._data.loop.from), $comma, Type.isValue(this._data.loop.to), $comma);
			fragments.code(surround.beforeParameters).compile(this._variable).code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(Type.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(this._variable).code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForFrom.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ArrayComprehensionForFrom.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_by: {
				access: 1,
				type: "Any"
			},
			_from: {
				access: 1,
				type: "Any"
			},
			_to: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ArrayComprehensionForIn = Helper.class({
		$name: "ArrayComprehensionForIn",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, parent.newScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ArrayComprehensionForIn.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			var variable, __ks_0;
			if((Type.isValue(__ks_0 = $variable.fromAST(data.loop.value, this)) ? (variable = __ks_0, true) : false) && ((Type.isValue(variable.type) && Type.isValue(variable.type.typeName)) ? variable.type.typeName.name === "Array" : false) && (Type.isValue(variable.type.typeParameters) ? variable.type.typeParameters.length === 1 : false)) {
				$variable.define(this, this._scope, data.loop.variable.name, $variable.kind(variable.type.typeParameters[0]), variable.type.typeParameters[0]);
			}
			else {
				$variable.define(this, this._scope, data.loop.variable.name, VariableKind.Variable);
			}
			if(Type.isValue(data.loop.index)) {
				$variable.define(this, this._scope, data.loop.index.name, VariableKind.Variable);
			}
			this._variable = $compile.expression(data.loop.variable, this);
			this._value = $compile.expression(data.loop.value, this);
			if(Type.isValue(data.loop.index)) {
				this._index = $compile.expression(data.loop.index, this);
			}
			this._body = $compile.statement($return(data.body), this);
			this._body.analyse();
			if(Type.isValue(data.loop.when)) {
				this._when = $compile.statement($return(data.loop.when), this);
				this._when.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._variable.fuse();
			this._value.fuse();
			if(Type.isValue(this._index)) {
				this._index.fuse();
			}
			this._body.fuse();
			if(Type.isValue(this._when)) {
				this._when.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapArray(").compile(this._value).code(", ");
			fragments.code(surround.beforeParameters).compile(this._variable);
			if(Type.isValue(this._index)) {
				fragments.code($comma).compile(this._index);
			}
			fragments.code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(Type.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(this._variable);
				if(Type.isValue(this._index)) {
					fragments.code($comma).compile(this._index);
				}
				fragments.code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForIn.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ArrayComprehensionForIn.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_index: {
				access: 1,
				type: "Any"
			},
			_value: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			},
			_when: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ArrayComprehensionForOf = Helper.class({
		$name: "ArrayComprehensionForOf",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, parent.newScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ArrayComprehensionForOf.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			$variable.define(this, this._scope, data.loop.variable.name, VariableKind.Variable);
			if(Type.isValue(data.loop.index)) {
				$variable.define(this, this._scope, data.loop.index.name, VariableKind.Variable);
			}
			this._variable = $compile.expression(data.loop.variable, this);
			this._value = $compile.expression(data.loop.value, this);
			if(Type.isValue(data.loop.index)) {
				this._index = $compile.expression(data.loop.index, this);
			}
			this._body = $compile.statement($return(data.body), this);
			this._body.analyse();
			if(Type.isValue(data.loop.when)) {
				this._when = $compile.statement($return(data.loop.when), this);
				this._when.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._variable.fuse();
			this._value.fuse();
			if(Type.isValue(this._index)) {
				this._index.fuse();
			}
			this._body.fuse();
			if(Type.isValue(this._when)) {
				this._when.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapObject(").compile(this._value).code(", ");
			fragments.code(surround.beforeParameters).compile(this._variable);
			if(Type.isValue(this._index)) {
				fragments.code($comma).compile(this._index);
			}
			fragments.code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(Type.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(this._variable);
				if(Type.isValue(this._index)) {
					fragments.code($comma).compile(this._index);
				}
				fragments.code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForOf.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ArrayComprehensionForOf.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_index: {
				access: 1,
				type: "Any"
			},
			_value: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			},
			_when: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ArrayComprehensionForRange = Helper.class({
		$name: "ArrayComprehensionForRange",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, parent.newScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ArrayComprehensionForRange.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			$variable.define(this, this._scope, data.loop.variable.name, VariableKind.Variable);
			this._variable = $compile.expression(data.loop.variable, this);
			this._from = $compile.expression(data.loop.from, this);
			this._to = $compile.expression(data.loop.to, this);
			if(Type.isValue(data.loop.by)) {
				this._by = $compile.expression(data.loop.by, this);
			}
			this._body = $compile.statement($return(data.body), this);
			this._body.analyse();
			if(Type.isValue(data.loop.when)) {
				this._when = $compile.statement($return(data.loop.when), this);
				this._when.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._variable.fuse();
			this._from.fuse();
			this._to.fuse();
			if(Type.isValue(this._by)) {
				this._by.fuse();
			}
			this._body.fuse();
			if(Type.isValue(this._when)) {
				this._when.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapRange(").compile(this._from).code($comma).compile(this._to);
			if(Type.isValue(this._by)) {
				fragments.code(", ").compile(this._by);
			}
			else {
				fragments.code(", 1");
			}
			fragments.code($comma, "true", $comma, "true", $comma).code(surround.beforeParameters).compile(this._variable).code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(Type.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(this._variable).code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForRange.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ArrayComprehensionForRange.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			},
			_by: {
				access: 1,
				type: "Any"
			},
			_from: {
				access: 1,
				type: "Any"
			},
			_to: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			},
			_when: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ArrayBinding = Helper.class({
		$name: "ArrayBinding",
		$extends: Expression,
		__ks_init_1: function() {
			this._elements = [];
			this._existing = {};
			this._existingCount = 0;
			this._nonexisting = {};
			this._nonexistingCount = 0;
			this._variables = {};
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayBinding.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var index = 0, __ks_0 = this._data.elements.length, element; index < __ks_0; ++index) {
				element = this._data.elements[index];
				if((element.kind === Kind.BindingElement) && !element.name.computed) {
					if(this._scope.hasVariable(element.name.name)) {
						this._existing[element.name.name] = true;
						++this._existingCount;
					}
					else {
						this._nonexisting[element.name.name] = true;
						++this._nonexistingCount;
					}
				}
				this._elements.push(element = $compile.expression(element, this));
				if(Type.is(element, BindingElement)) {
					element.index(index);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._existingCount && this._nonexistingCount) {
				fragments.code("[");
				var name;
				for(var i = 0, __ks_0 = this._data.elements.length, element; i < __ks_0; ++i) {
					element = this._data.elements[i];
					if(i) {
						fragments.code(", ");
					}
					if((element.kind === Kind.BindingElement) && !element.name.computed && this._existing[element.name.name]) {
						name = this._scope.acquireTempName();
						this._elements[i].toExistFragments(fragments, name);
						this._variables[name] = element.name.name;
					}
					else {
						this._elements[i].toFragments(fragments);
					}
				}
				fragments.code("]");
				this.statement().afterward(this);
			}
			else {
				fragments.code("[");
				for(var i = 0, __ks_0 = this._elements.length; i < __ks_0; ++i) {
					if(i) {
						fragments.code(", ");
					}
					this._elements[i].toFragments(fragments);
				}
				fragments.code("]");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayBinding.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toAfterwardFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			for(var name in this._variables) {
				var variable = this._variables[name];
				fragments.line(variable, " = ", name);
				this._scope.releaseTempName(name);
			}
		},
		toAfterwardFragments: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_toAfterwardFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAfterwardFragments) {
				return Expression.prototype.toAfterwardFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments, value) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(value === undefined || value === null) {
				throw new Error("Missing parameter 'value'");
			}
			if(this._nonexistingCount) {
				fragments.code("var ");
			}
			if(this._options.format.destructuring === "es5") {
				this.toFlatFragments(fragments, value);
			}
			else {
				fragments.compile(this).code($equals).compile(value);
			}
		},
		toAssignmentFragments: function() {
			if(arguments.length === 2) {
				return ArrayBinding.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAssignmentFragments) {
				return Expression.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, value) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(value === undefined || value === null) {
				throw new Error("Missing parameter 'value'");
			}
			if(value.isComposite()) {
				if(this._elements.length === 1) {
					this._elements[0].toFlatFragments(fragments, value);
				}
				else {
					var variable = new IdentifierLiteral({
						kind: Kind.Identifier,
						name: this._name
					}, this, this._scope, false);
					this._elements[0].toFlatFragments(fragments, new TempBinding(variable, value, this));
					for(var i = 1, __ks_0 = this._elements.length; i < __ks_0; ++i) {
						fragments.code(", ");
						this._elements[i].toFlatFragments(fragments, variable);
					}
				}
			}
			else {
				for(var i = 0, __ks_0 = this._elements.length; i < __ks_0; ++i) {
					if(i) {
						fragments.code(", ");
					}
					this._elements[i].toFlatFragments(fragments, value);
				}
			}
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return ArrayBinding.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFlatFragments) {
				return Expression.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ArrayBinding.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_elements: {
				access: 1,
				type: "Any"
			},
			_existing: {
				access: 1,
				type: "Any"
			},
			_existingCount: {
				access: 1,
				type: "Any"
			},
			_nonexisting: {
				access: 1,
				type: "Any"
			},
			_nonexistingCount: {
				access: 1,
				type: "Any"
			},
			_variables: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toAfterwardFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			toAssignmentFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toFlatFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BindingElement = Helper.class({
		$name: "BindingElement",
		$extends: Expression,
		__ks_init_1: function() {
			this._defaultValue = null;
			this._index = -1;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			BindingElement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, new Scope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				BindingElement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			$variable.define(this.statement(), this.statement().scope(), this._data.name, VariableKind.Variable);
			if(Type.isValue(this._data.alias)) {
				$variable.define(this, this._scope, this._data.alias, VariableKind.Variable);
				this._alias = $compile.expression(this._data.alias, this);
			}
			this._name = $compile.expression(this._data.name, this);
			if(Type.isValue(this._data.defaultValue)) {
				this._defaultValue = $compile.expression(this._data.defaultValue, this);
				if(this._options.format.destructuring === "es5") {
					this._variable = this._scope.acquireTempName(this.statement());
					this._scope.releaseTempName(this._variable);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BindingElement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			if(Type.isValue(this._alias)) {
				this._alias.fuse();
			}
			this._name.fuse();
			if(Type.isValue(this._defaultValue)) {
				this._defaultValue.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return BindingElement.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_index_0: function(index) {
			if(index === undefined || index === null) {
				throw new Error("Missing parameter 'index'");
			}
			this._index = index;
			return this;
		},
		index: function() {
			if(arguments.length === 1) {
				return BindingElement.prototype.__ks_func_index_0.apply(this, arguments);
			}
			else if(Expression.prototype.index) {
				return Expression.prototype.index.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(this._data.spread) {
				fragments.code("...");
			}
			if(Type.isValue(this._alias)) {
				if(this._data.alias.computed) {
					fragments.code("[").compile(this._alias).code("]: ");
				}
				else {
					fragments.compile(this._alias).code(": ");
				}
			}
			fragments.compile(this._name);
			if(Type.isValue(this._defaultValue)) {
				fragments.code(" = ").compile(this._defaultValue);
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return BindingElement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toExistFragments_0: function(fragments, name) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(this._data.spread) {
				fragments.code("...");
			}
			if(Type.isValue(this._alias)) {
				if(this._data.alias.computed) {
					fragments.code("[").compile(this._alias).code("]: ");
				}
				else {
					fragments.compile(this._alias).code(": ");
				}
			}
			if(this._index === -1) {
				fragments.compile(this._name).code(": ", name);
			}
			else {
				fragments.code(name);
			}
			if(this._defaultValue !== null) {
				fragments.code(" = ").compile(this._defaultValue);
			}
		},
		toExistFragments: function() {
			if(arguments.length === 2) {
				return BindingElement.prototype.__ks_func_toExistFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toExistFragments) {
				return Expression.prototype.toExistFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, value) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(value === undefined || value === null) {
				throw new Error("Missing parameter 'value'");
			}
			if(Type.is(this._name, ObjectBinding)) {
				this._name.toFlatFragments(fragments, new FlatBindingElement(value, Type.isValue(this._alias) ? this._alias : this._name, this));
			}
			else if(Type.isValue(this._defaultValue)) {
				var variable = new IdentifierLiteral({
					kind: Kind.Identifier,
					name: this._variable
				}, this, this._scope, false);
				fragments.compile(this._name).code($equals, "Type.isValue(").compile(variable).code($equals).compile(new FlatBindingElement(value, Type.isValue(this._alias) ? this._alias : this._name, this)).code(") ? ").compile(variable).code(" : ").compile(this._defaultValue);
			}
			else if(this._index === -1) {
				fragments.compile(this._name).code($equals).wrap(value).code(".").compile(Type.isValue(this._alias) ? this._alias : this._name);
			}
			else {
				fragments.compile(this._name).code($equals).wrap(value).code("[" + this._index + "]");
			}
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return BindingElement.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFlatFragments) {
				return Expression.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BindingElement.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_alias: {
				access: 1,
				type: "Any"
			},
			_defaultValue: {
				access: 1,
				type: "Any"
			},
			_index: {
				access: 1,
				type: "Any"
			},
			_name: {
				access: 1,
				type: "Any"
			},
			_variable: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			index: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			toFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			toExistFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toFlatFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var FlatBindingElement = Helper.class({
		$name: "FlatBindingElement",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(item, property, parent) {
			if(item === undefined || item === null) {
				throw new Error("Missing parameter 'item'");
			}
			if(property === undefined || property === null) {
				throw new Error("Missing parameter 'property'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			this._item = item;
			this._property = property;
			Expression.prototype.__ks_cons.call(this, [{}, parent]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				FlatBindingElement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_isComposite_0: function() {
			return false;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return FlatBindingElement.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.wrap(this._item).code(".").compile(this._property);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FlatBindingElement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	FlatBindingElement.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_item: {
				access: 1,
				type: "Any"
			},
			_property: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			isComposite: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ObjectBinding = Helper.class({
		$name: "ObjectBinding",
		$extends: Expression,
		__ks_init_1: function() {
			this._elements = [];
			this._exists = false;
			this._existing = {};
			this._name = null;
			this._variables = {};
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ObjectBinding.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if((this._options.format.destructuring === "es5") && (this._data.elements.length > 1)) {
				this._name = this._scope.acquireTempName(this.statement());
			}
			for(var __ks_0 = 0, __ks_1 = this._data.elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._data.elements[__ks_0];
				if(!element.name.computed && Type.isValue(element.name.name) && this._scope.hasVariable(element.name.name)) {
					this._exists = true;
					this._existing[element.name.name] = true;
				}
				this._elements.push($compile.expression(element, this));
			}
			if(this._name !== null) {
				this._scope.releaseTempName(this._name);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._exists) {
				fragments.code("{");
				var name;
				for(var i = 0, __ks_0 = this._data.elements.length, element; i < __ks_0; ++i) {
					element = this._data.elements[i];
					if(i) {
						fragments.code(", ");
					}
					if(this._existing[element.name.name]) {
						name = this._scope.acquireTempName();
						this._elements[i].toExistFragments(fragments, name);
						this._variables[name] = element.name.name;
					}
					else {
						this._elements[i].toFragments(fragments);
					}
				}
				fragments.code("}");
				this.statement().afterward(this);
			}
			else {
				fragments.code("{");
				for(var i = 0, __ks_0 = this._elements.length; i < __ks_0; ++i) {
					if(i) {
						fragments.code(", ");
					}
					this._elements[i].toFragments(fragments);
				}
				fragments.code("}");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ObjectBinding.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toAfterwardFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			for(var name in this._variables) {
				var variable = this._variables[name];
				fragments.line(variable, " = ", name);
				this._scope.releaseTempName(name);
			}
		},
		toAfterwardFragments: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_toAfterwardFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAfterwardFragments) {
				return Expression.prototype.toAfterwardFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments, value) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(value === undefined || value === null) {
				throw new Error("Missing parameter 'value'");
			}
			fragments.code("var ");
			if(this._options.format.destructuring === "es5") {
				this.toFlatFragments(fragments, value);
			}
			else {
				fragments.compile(this).code($equals).compile(value);
			}
		},
		toAssignmentFragments: function() {
			if(arguments.length === 2) {
				return ObjectBinding.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAssignmentFragments) {
				return Expression.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, value) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(value === undefined || value === null) {
				throw new Error("Missing parameter 'value'");
			}
			if(value.isComposite()) {
				if(this._elements.length === 1) {
					this._elements[0].toFlatFragments(fragments, value);
				}
				else {
					var variable = new IdentifierLiteral({
						kind: Kind.Identifier,
						name: this._name
					}, this, this._scope, false);
					this._elements[0].toFlatFragments(fragments, new TempBinding(variable, value, this));
					for(var i = 1, __ks_0 = this._elements.length; i < __ks_0; ++i) {
						fragments.code(", ");
						this._elements[i].toFlatFragments(fragments, variable);
					}
				}
			}
			else {
				for(var i = 0, __ks_0 = this._elements.length; i < __ks_0; ++i) {
					if(i) {
						fragments.code(", ");
					}
					this._elements[i].toFlatFragments(fragments, value);
				}
			}
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return ObjectBinding.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFlatFragments) {
				return Expression.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ObjectBinding.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_elements: {
				access: 1,
				type: "Any"
			},
			_exists: {
				access: 1,
				type: "Any"
			},
			_existing: {
				access: 1,
				type: "Any"
			},
			_name: {
				access: 1,
				type: "Any"
			},
			_variables: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toAfterwardFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			toAssignmentFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toFlatFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var TempBinding = Helper.class({
		$name: "TempBinding",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(name, value, parent) {
			if(name === undefined || name === null) {
				throw new Error("Missing parameter 'name'");
			}
			if(value === undefined || value === null) {
				throw new Error("Missing parameter 'value'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			this._name = name;
			this._value = value;
			Expression.prototype.__ks_cons.call(this, [{}, parent]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				TempBinding.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return TempBinding.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._name).code($equals).compile(this._value);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return TempBinding.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	TempBinding.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_name: {
				access: 1,
				type: "Any"
			},
			_value: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BlockExpression = Helper.class({
		$name: "BlockExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._body = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			BlockExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(this._data.statements) {
				for(var __ks_0 = 0, __ks_1 = this._data.statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._data.statements[__ks_0];
					this._body.push(statement = $compile.statement(statement, this));
					statement.analyse();
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BlockExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._body[__ks_0];
				statement.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return BlockExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			for(var __ks_0 = 0, __ks_1 = this._body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._body[__ks_0];
				statement.toFragments(fragments, mode);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BlockExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BlockExpression.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_body: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	function $caller(data, node) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(node === undefined || node === null) {
			throw new Error("Missing parameter 'node'");
		}
		if(Type.is(data, IdentifierLiteral)) {
			return data;
		}
		else if(Type.is(data, MemberExpression)) {
			return data._object;
		}
		else {
			console.error(data);
			$throw("Not Implemented", node);
		}
	}
	var CallExpression = Helper.class({
		$name: "CallExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._arguments = [];
			this._list = true;
			this._reusable = false;
			this._reuseName = null;
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			CallExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var callee, __ks_0;
			if((Type.isValue(__ks_0 = $variable.fromAST(this._data.callee, this)) ? (callee = __ks_0, true) : false) && (callee.kind === VariableKind.Class)) {
				$throw("A class is not a function, 'new' operator is required at line " + this._data.callee.start.line, this);
			}
			if(this._data.callee.kind === Kind.Identifier) {
				var variable;
				if(Type.isValue(__ks_0 = this._scope.getVariable(this._data.callee.name)) ? (variable = __ks_0, true) : false) {
					if(Type.isValue(variable.callable)) {
						variable.callable(this._data);
					}
				}
				else {
					$throw("Undefined variable " + this._data.callee.name + " at line " + this._data.callee.start.line, this);
				}
			}
			else if((this._data.callee.kind === Kind.MemberExpression) && (this._data.callee.object.kind === Kind.Identifier)) {
				var variable;
				if(Type.isValue(__ks_0 = this._scope.getVariable(this._data.callee.object.name)) ? (variable = __ks_0, true) : false) {
					if(Type.isValue(variable.reduce)) {
						variable.reduce(this._data);
					}
				}
			}
			if(this._data.callee.kind === Kind.MemberExpression) {
				this._callee = new MemberExpression(this._data.callee, this, this.scope());
				this._callee.analyse();
			}
			else {
				this._callee = $compile.expression(this._data.callee, this, false);
			}
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._data.arguments[__ks_0];
				if((argument.kind === Kind.UnaryExpression) && (argument.operator.kind === UnaryOperator.Spread)) {
					this._arguments.push($compile.expression(argument.argument, this));
					this._list = false;
				}
				else {
					this._arguments.push($compile.expression(argument, this));
				}
			}
			if(this._data.scope.kind === ScopeModifier.Argument) {
				this._callScope = $compile.expression(this._data.scope.value, this);
			}
			if(!this._list) {
				this._caller = $caller(this._callee, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(acquire === undefined || acquire === null) {
				throw new Error("Missing parameter 'acquire'");
			}
			if(acquire) {
				this._reuseName = this.statement().scope().acquireTempName(this.statement());
			}
			this._callee.acquireReusable(this._data.nullable || (!this._list && (this._data.scope.kind === ScopeModifier.This)));
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			if(Type.isValue(this._reuseName)) {
				this.statement().scope().releaseTempName(this._reuseName);
			}
			this._callee.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_fuse_0: function() {
			this._callee.fuse();
			if(Type.isValue(this._caller)) {
				this._caller.fuse();
			}
			if(Type.isValue(this._callScope)) {
				this._callScope.fuse();
			}
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isCallable_0: function() {
			return !this._reusable;
		},
		isCallable: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isCallable_0.apply(this);
			}
			return Expression.prototype.isCallable.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return this.isNullable() && !this._tested;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._data.nullable || this._callee.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNullableComputed_0: function() {
			return this._data.nullable && this._callee.isNullable();
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			return Expression.prototype.isNullableComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(mode === Mode.Async) {
				this.toCallFragments(fragments, mode);
				if(this._arguments.length) {
					fragments.code(", ");
				}
			}
			else {
				if(this._reusable) {
					fragments.code(this._reuseName);
				}
				else if(this.isNullable() && !this._tested) {
					fragments.wrapNullable(this).code(" ? ");
					this._tested = true;
					this.toFragments(fragments, mode);
					fragments.code(" : undefined");
				}
				else {
					this.toCallFragments(fragments, mode);
					fragments.code(")");
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(mode === Mode.Async) {
				this.toCallFragments(fragments, mode);
				if(this._arguments.length) {
					fragments.code(", ");
				}
			}
			else {
				if(this._reusable) {
					fragments.code(this._reuseName);
				}
				else if(this.isNullable() && !this._tested) {
					fragments.wrapNullable(this).code(" ? ");
					this._tested = true;
					this.toFragments(fragments, mode);
					fragments.code(" : false");
				}
				else {
					this.toCallFragments(fragments, mode);
					fragments.code(")");
				}
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return CallExpression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_toCallFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var data = this._data;
			if(this._list) {
				if(data.scope.kind === ScopeModifier.This) {
					fragments.compile(this._callee, mode).code("(");
					for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
						argument = this._arguments[index];
						if(index) {
							fragments.code($comma);
						}
						fragments.compile(argument, mode);
					}
				}
				else if(data.scope.kind === ScopeModifier.Null) {
					fragments.compile(this._callee, mode).code(".call(null");
					for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
						argument = this._arguments[__ks_0];
						fragments.code($comma).compile(argument, mode);
					}
				}
				else {
					fragments.compile(this._callee, mode).code(".call(").compile(this._callScope, mode);
					for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
						argument = this._arguments[__ks_0];
						fragments.code($comma).compile(argument, mode);
					}
				}
			}
			else {
				if(data.scope.kind === ScopeModifier.Null) {
					fragments.compile(this._callee, mode).code(".apply(null");
				}
				else if(data.scope.kind === ScopeModifier.This) {
					fragments.compileReusable(this._callee).code(".apply(").compile(this._caller, mode);
				}
				else {
					fragments.compile(this._callee, mode).code(".apply(").compile(this._callScope, mode);
				}
				if((this._arguments.length === 1) && ($signature.type($type.type(this._data.arguments[0].argument, this._scope, this), this._scope) === "Array")) {
					fragments.code($comma).compile(this._arguments[0]);
				}
				else {
					fragments.code(", [].concat(");
					for(var i = 0, __ks_0 = this._arguments.length; i < __ks_0; ++i) {
						if(i !== 0) {
							fragments.code($comma);
						}
						fragments.compile(this._arguments[i]);
					}
					fragments.code(")");
				}
			}
		},
		toCallFragments: function() {
			if(arguments.length === 2) {
				return CallExpression.prototype.__ks_func_toCallFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toCallFragments) {
				return Expression.prototype.toCallFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(!this._tested) {
				this._tested = true;
				if(this._data.nullable) {
					if(this._callee.isNullable()) {
						fragments.compileNullable(this._callee).code(" && ");
					}
					fragments.code($runtime.type(this) + ".isFunction(").compileReusable(this._callee).code(")");
				}
				else if(this._callee.isNullable()) {
					fragments.compileNullable(this._callee);
				}
				else {
					fragments.code($runtime.type(this) + ".isValue(").compileReusable(this).code(")");
				}
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.code(this._reuseName, $equals).compile(this);
			this._reusable = true;
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toReusableFragments.apply(this, arguments);
		}
	});
	CallExpression.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_arguments: {
				access: 1,
				type: "Any"
			},
			_callee: {
				access: 1,
				type: "Any"
			},
			_caller: {
				access: 1,
				type: "Any"
			},
			_callScope: {
				access: 1,
				type: "Any"
			},
			_list: {
				access: 1,
				type: "Any"
			},
			_reusable: {
				access: 1,
				type: "Any"
			},
			_reuseName: {
				access: 1,
				type: "Any"
			},
			_tested: {
				access: 1,
				type: "Any"
			},
			_type: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			acquireReusable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			releaseReusable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isCallable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullableComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toBooleanFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toCallFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toNullableFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			toReusableFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var CallSealedExpression = Helper.class({
		$name: "CallSealedExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._arguments = [];
			this._list = true;
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			CallSealedExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope, callee) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			if(callee === undefined || callee === null) {
				throw new Error("Missing parameter 'callee'");
			}
			this._callee = callee;
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				CallSealedExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._object = $compile.expression(this._data.callee.object, this);
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._data.arguments[__ks_0];
				if((argument.kind === Kind.UnaryExpression) && (argument.operator.kind === UnaryOperator.Spread)) {
					this._arguments.push($compile.expression(argument.argument, this));
					this._list = false;
				}
				else {
					this._arguments.push($compile.expression(argument, this));
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return CallSealedExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._object.fuse();
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return CallSealedExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return Type.isArray(this._callee);
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return CallSealedExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._data.nullable || this._object.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallSealedExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(Type.isArray(this._callee)) {
				if(this._callee.length === 2) {
					var data = this._data;
					var callee = this._callee;
					this.module().flag("Type");
					var name = null;
					if(data.callee.object.kind === Kind.Identifier) {
						var tof;
						if((tof = $runtime.typeof(callee[0].variable.name, this))) {
							fragments.code(tof, "(").compile(this._object).code(")");
						}
						else {
							fragments.code($runtime.type(this), ".is(").compile(this._object).code(", ", callee[0].variable.name, ")");
						}
					}
					else {
						name = this._scope.acquireTempName();
						var tof;
						if((tof = $runtime.typeof(callee[0].variable.name, this))) {
							fragments.code(tof, "(", name, " = ").compile(this._object).code(")");
						}
						else {
							fragments.code($runtime.type(this), ".is(", name, " = ").compile(this._object).code(", ", callee[0].variable.name, ")");
						}
					}
					fragments.code(" ? ");
					fragments.code(callee[0].variable.accessPath || "", callee[0].variable.sealed.name + "._im_" + data.callee.property.name + "(");
					if(Type.isValue(name)) {
						fragments.code(name);
					}
					else {
						fragments.compile(this._object);
					}
					for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
						argument = this._arguments[__ks_0];
						fragments.code(", ").compile(argument);
					}
					fragments.code(") : ");
					fragments.code(callee[1].variable.accessPath || "", callee[1].variable.sealed.name + "._im_" + data.callee.property.name + "(");
					if(Type.isValue(name)) {
						fragments.code(name);
					}
					else {
						fragments.compile(this._object);
					}
					for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
						argument = this._arguments[__ks_0];
						fragments.code(", ").compile(argument);
					}
					fragments.code(")");
					if(Type.isValue(name)) {
						this._scope.releaseTempName(name);
					}
				}
				else {
					$throw("Not Implemented", this);
				}
			}
			else {
				var path = Type.isValue(this._callee.variable.accessPath) ? this._callee.variable.accessPath + this._callee.variable.sealed.name : this._callee.variable.sealed.name;
				if(this._callee.kind === CalleeKind.InstanceMethod) {
					if(this._list) {
						fragments.code(path + "._im_" + this._data.callee.property.name + "(").compile(this._object);
						for(var i = 0, __ks_0 = this._arguments.length; i < __ks_0; ++i) {
							fragments.code($comma).compile(this._arguments[i]);
						}
						fragments.code(")");
					}
					else {
						fragments.code(path + "._im_" + this._data.callee.property.name + ".apply(" + path + ", [").compile(this._object).code("].concat(");
						for(var i = 0, __ks_0 = this._arguments.length; i < __ks_0; ++i) {
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(this._arguments[i]);
						}
						fragments.code("))");
					}
				}
				else if(this._callee.kind === CalleeKind.ClassMethod) {
					if(this._list) {
						fragments.code(path + "._cm_" + this._data.callee.property.name + "(");
						for(var i = 0, __ks_0 = this._arguments.length; i < __ks_0; ++i) {
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(this._arguments[i]);
						}
						fragments.code(")");
					}
					else if((this._arguments.length === 1) && ($signature.type($type.type(this._data.arguments[0].argument, this._scope, this), this._scope) === "Array")) {
						fragments.code(path + "._cm_" + this._data.callee.property.name + ".apply(" + path + ", ").compile(this._arguments[0]).code(")");
					}
					else {
						fragments.code(path + "._cm_" + this._data.callee.property.name + ".apply(" + path + ", [].concat(");
						for(var i = 0, __ks_0 = this._arguments.length; i < __ks_0; ++i) {
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(this._arguments[i]);
						}
						fragments.code("))");
					}
				}
				else {
					if(this._list) {
						fragments.code(path + "." + this._data.callee.property.name + "(");
						for(var i = 0, __ks_0 = this._arguments.length; i < __ks_0; ++i) {
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(this._arguments[i]);
						}
						fragments.code(")");
					}
					else if((this._arguments.length === 1) && ($signature.type($type.type(this._data.arguments[0].argument, this._scope, this), this._scope) === "Array")) {
						fragments.code(path + "." + this._data.callee.property.name + ".apply(" + path + ", ").compile(this._arguments[0]).code(")");
					}
					else {
						fragments.code(path + "." + this._data.callee.property.name + ".apply(" + path + ", [].concat(");
						for(var i = 0, __ks_0 = this._arguments.length; i < __ks_0; ++i) {
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(this._arguments[i]);
						}
						fragments.code("))");
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallSealedExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	CallSealedExpression.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 4,
				max: 4,
				parameters: [
					{
						type: "Any",
						min: 4,
						max: 4
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_arguments: {
				access: 1,
				type: "Any"
			},
			_callee: {
				access: 1,
				type: "Any"
			},
			_list: {
				access: 1,
				type: "Any"
			},
			_object: {
				access: 1,
				type: "Any"
			},
			_tested: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var CreateExpression = Helper.class({
		$name: "CreateExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._arguments = [];
			this._list = true;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			CreateExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._class = $compile.expression(this._data.class, this);
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._data.arguments[__ks_0];
				if((argument.kind === Kind.UnaryExpression) && (argument.operator.kind === UnaryOperator.Spread)) {
					this._arguments.push($compile.expression(argument.argument, this));
					this._list = false;
				}
				else {
					this._arguments.push($compile.expression(argument, this));
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._class.fuse();
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._list) {
				fragments.code("new ").compile(this._class).code("(");
				for(var i = 0, __ks_0 = this._arguments.length; i < __ks_0; ++i) {
					if(i !== 0) {
						fragments.code($comma);
					}
					fragments.compile(this._arguments[i]);
				}
				fragments.code(")");
			}
			else {
				$throw("Not Implemted");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CreateExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	CreateExpression.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_arguments: {
				access: 1,
				type: "Any"
			},
			_class: {
				access: 1,
				type: "Any"
			},
			_list: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var CurryExpression = Helper.class({
		$name: "CurryExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._arguments = [];
			this._list = true;
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			CurryExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._callee = $compile.expression(this._data.callee, this);
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._data.arguments[__ks_0];
				if((argument.kind === Kind.UnaryExpression) && (argument.operator.kind === UnaryOperator.Spread)) {
					this._arguments.push($compile.expression(argument.argument, this));
					this._list = false;
				}
				else {
					this._arguments.push($compile.expression(argument, this));
				}
			}
			if(this._data.scope.kind === ScopeModifier.This) {
				this._caller = $caller(this._callee, this);
			}
			else if(this._data.scope.kind === ScopeModifier.Argument) {
				this._callScope = $compile.expression(this._data.scope.value, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return CurryExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._callee.fuse();
			if(Type.isValue(this._caller)) {
				this._caller.fuse();
			}
			if(Type.isValue(this._callScope)) {
				this._callScope.fuse();
			}
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return CurryExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return this._data.nullable || this._callee.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CurryExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this.isNullable() && !this._tested) {
				fragments.wrapNullable(this).code(" ? ");
				this._tested = true;
				this.toFragments(fragments);
				fragments.code(" : undefined");
			}
			else if(this._list) {
				this.module().flag("Helper");
				var kind = this._data.scope.kind;
				if(kind === ScopeModifier.This) {
					fragments.code($runtime.helper(this), ".vcurry(").compile(this._callee).code(", ");
					if(Type.isValue(this._caller)) {
						fragments.compile(this._caller);
					}
					else {
						fragments.code("null");
					}
					for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
						argument = this._arguments[__ks_0];
						fragments.code($comma).compile(argument);
					}
					fragments.code(")");
				}
				else if(kind === ScopeModifier.Null) {
					fragments.code($runtime.helper(this), ".vcurry(").compile(this._callee).code(", null");
					for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
						argument = this._arguments[__ks_0];
						fragments.code($comma).compile(argument);
					}
					fragments.code(")");
				}
				else {
					fragments.code($runtime.helper(this), ".vcurry(").compile(this._callee).code($comma).compile(this._callScope);
					for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
						argument = this._arguments[__ks_0];
						fragments.code($comma).compile(argument);
					}
					fragments.code(")");
				}
			}
			else {
				this.module().flag("Helper");
				var kind = this._data.scope.kind;
				if(kind === ScopeModifier.This) {
					fragments.code($runtime.helper(this), ".curry(").compile(this._callee).code($comma);
					if(Type.isValue(this._caller)) {
						fragments.compile(this._caller);
					}
					else {
						fragments.code("null");
					}
					fragments.code($comma);
					if((this._arguments.length === 1) && ($signature.type($type.type(this._data.arguments[0].argument, this._scope, this), this._scope) === "Array")) {
						fragments.compile(this._arguments[0]);
					}
					else {
						fragments.code("[].concat(");
						for(var i = 0, __ks_0 = this._arguments.length; i < __ks_0; ++i) {
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(this._arguments[i]);
						}
						fragments.code(")");
					}
					fragments.code(")");
				}
				else if(kind === ScopeModifier.Null) {
					fragments.code($runtime.helper(this), ".curry(").compile(this._callee).code(", null, ");
					if((this._arguments.length === 1) && ($signature.type($type.type(this._data.arguments[0].argument, this._scope, this), this._scope) === "Array")) {
						fragments.compile(this._arguments[0]);
					}
					else {
						fragments.code("[].concat(");
						for(var i = 0, __ks_0 = this._arguments.length; i < __ks_0; ++i) {
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(this._arguments[i]);
						}
						fragments.code(")");
					}
					fragments.code(")");
				}
				else {
					fragments.code($runtime.helper(this), ".curry(").compile(this._callee).code($comma).compile(this._callScope).code($comma);
					if((this._arguments.length === 1) && ($signature.type($type.type(this._data.arguments[0].argument, this._scope, this), this._scope) === "Array")) {
						fragments.compile(this._arguments[0]);
					}
					else {
						fragments.code("[].concat(");
						for(var i = 0, __ks_0 = this._arguments.length; i < __ks_0; ++i) {
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(this._arguments[i]);
						}
						fragments.code(")");
					}
					fragments.code(")");
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CurryExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(!this._tested) {
				this._tested = true;
				if(this._data.nullable) {
					if(this._callee.isNullable()) {
						fragments.wrapNullable(this._callee).code(" && ");
					}
					fragments.code($runtime.type(this) + ".isFunction(").compileReusable(this._callee).code(")");
				}
				else {
					if(this._callee.isNullable()) {
						fragments.compileNullable(this._callee);
					}
				}
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return CurryExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		}
	});
	CurryExpression.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_arguments: {
				access: 1,
				type: "Any"
			},
			_callee: {
				access: 1,
				type: "Any"
			},
			_caller: {
				access: 1,
				type: "Any"
			},
			_callScope: {
				access: 1,
				type: "Any"
			},
			_list: {
				access: 1,
				type: "Any"
			},
			_tested: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toNullableFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var EnumExpression = Helper.class({
		$name: "EnumExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._enum = $compile.expression(this._data.enum, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._enum).code(".", this._data.member.name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return EnumExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	EnumExpression.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_enum: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var FunctionExpression = Helper.class({
		$name: "FunctionExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._async = false;
			this._isObjectMember = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			FunctionExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, new Scope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				FunctionExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			$variable.define(this, this._scope, {
				kind: Kind.Identifier,
				name: "this"
			}, VariableKind.Variable);
			this._parameters = Helper.mapArray(this._data.parameters, Helper.vcurry(function(parameter) {
				return new Parameter(parameter, this);
			}, this));
			this._statements = Helper.mapArray($body(this._data.body), Helper.vcurry(function(statement) {
				return $compile.statement(statement, this);
			}, this));
			this._isObjectMember = Type.is(this._parent, ObjectMember);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.analyse();
				parameter.fuse();
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.analyse();
				if(!this._async) {
					this._async = statement.isAsync();
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var surround;
			if(this._isObjectMember) {
				if(this._options.format.functions === "es5") {
					surround = {
						beforeParameters: ": function(",
						afterParameters: ")",
						footer: ""
					};
				}
				else {
					surround = {
						beforeParameters: "(",
						afterParameters: ")",
						footer: ""
					};
				}
			}
			else {
				surround = {
					beforeParameters: "function(",
					afterParameters: ")",
					footer: ""
				};
			}
			fragments.code(surround.beforeParameters);
			var block = $function.parameters(this, fragments, function(fragments) {
				if(fragments === undefined || fragments === null) {
					throw new Error("Missing parameter 'fragments'");
				}
				return fragments.code(surround.afterParameters).newBlock();
			});
			if(this._async) {
				var stack = [];
				var f = block;
				var m = Mode.None;
				var item;
				for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._statements[__ks_0];
					var __ks_2;
					if(Type.isValue(__ks_2 = statement.toFragments(f, m)) ? (item = __ks_2, true) : false) {
						f = item.fragments;
						m = item.mode;
						stack.push(item);
					}
				}
				for(var __ks_2 = 0, __ks_0 = stack.length; __ks_2 < __ks_0; ++__ks_2) {
					item = stack[__ks_2];
					item.done(item.fragments);
				}
			}
			else {
				for(var __ks_2 = 0, __ks_0 = this._statements.length, statement; __ks_2 < __ks_0; ++__ks_2) {
					statement = this._statements[__ks_2];
					block.compile(statement);
				}
			}
			block.done();
			if(surround.footer.length > 0) {
				fragments.code(surround.footer);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FunctionExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	FunctionExpression.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_async: {
				access: 1,
				type: "Any"
			},
			_isObjectMember: {
				access: 1,
				type: "Any"
			},
			_parameters: {
				access: 1,
				type: "Any"
			},
			_statements: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var LambdaExpression = Helper.class({
		$name: "LambdaExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._async = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			LambdaExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, new Scope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				LambdaExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._parameters = Helper.mapArray(this._data.parameters, Helper.vcurry(function(parameter) {
				return new Parameter(parameter, this);
			}, this));
			this._statements = Helper.mapArray($body(this._data.body), Helper.vcurry(function(statement) {
				return $compile.statement(statement, this);
			}, this));
		},
		analyse: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.analyse();
				parameter.fuse();
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.analyse();
				if(!this._async) {
					this._async = statement.isAsync();
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var surround = $function.surround(this);
			fragments.code(surround.beforeParameters);
			var block = $function.parameters(this, fragments, function(fragments) {
				if(fragments === undefined || fragments === null) {
					throw new Error("Missing parameter 'fragments'");
				}
				return fragments.code(surround.afterParameters).newBlock();
			});
			if(this._async) {
				var stack = [];
				var f = block;
				var m = Mode.None;
				var item;
				for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._statements[__ks_0];
					var __ks_2;
					if(Type.isValue(__ks_2 = statement.toFragments(f, m)) ? (item = __ks_2, true) : false) {
						f = item.fragments;
						m = item.mode;
						stack.push(item);
					}
				}
				for(var __ks_2 = 0, __ks_0 = stack.length; __ks_2 < __ks_0; ++__ks_2) {
					item = stack[__ks_2];
					item.done(item.fragments);
				}
			}
			else {
				for(var __ks_2 = 0, __ks_0 = this._statements.length, statement; __ks_2 < __ks_0; ++__ks_2) {
					statement = this._statements[__ks_2];
					block.compile(statement);
				}
			}
			block.done();
			if(surround.footer.length > 0) {
				fragments.code(surround.footer);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return LambdaExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	LambdaExpression.__ks_reflect = {
		inits: 1,
		constructors: [
			{
				access: 3,
				min: 3,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 3,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_async: {
				access: 1,
				type: "Any"
			},
			_parameters: {
				access: 1,
				type: "Any"
			},
			_statements: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var IfExpression = Helper.class({
		$name: "IfExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._then = $compile.expression(this._data.then, this);
			if(Type.isValue(this._data.else)) {
				this._else = $compile.expression(this._data.else, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._condition.fuse();
			this._then.fuse();
			if(Type.isValue(this._else)) {
				this._else.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(Type.isValue(this._else)) {
				fragments.wrapBoolean(this._condition).code(" ? ").compile(this._then).code(" : ").compile(this._else);
			}
			else {
				fragments.wrapBoolean(this._condition).code(" ? ").compile(this._then).code(" : undefined");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IfExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var ctrl = fragments.newControl();
			ctrl.code("if(");
			if(this._condition.isAssignable()) {
				ctrl.code("(").compileBoolean(this._condition).code(")");
			}
			else {
				ctrl.compileBoolean(this._condition);
			}
			ctrl.code(")").step().line(this._then).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return IfExpression.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toStatementFragments) {
				return Expression.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	IfExpression.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_condition: {
				access: 1,
				type: "Any"
			},
			_else: {
				access: 1,
				type: "Any"
			},
			_then: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var MemberExpression = Helper.class({
		$name: "MemberExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			MemberExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._object = $compile.expression(this._data.object, this, false);
			this._property = $compile.expression(this._data.property, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(acquire === undefined || acquire === null) {
				throw new Error("Missing parameter 'acquire'");
			}
			this._object.acquireReusable(this._data.nullable || acquire);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._object.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_fuse_0: function() {
			this._object.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isCallable_0: function() {
			return this._object.isCallable();
		},
		isCallable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isCallable_0.apply(this);
			}
			return Expression.prototype.isCallable.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return this.isNullable() && !this._tested;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isEntangled_0: function() {
			return this.isCallable() || this.isNullable();
		},
		isEntangled: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isEntangled_0.apply(this);
			}
			return Expression.prototype.isEntangled.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._data.nullable || this._object.isNullable() || (this._data.computed && this._property.isNullable());
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNullableComputed_0: function() {
			return ((this._object.isNullable() ? 1 : 0) + (this._data.nullable ? 1 : 0) + ((this._data.computed && this._property.isNullable()) ? 1 : 0)) > 1;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			return Expression.prototype.isNullableComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this.isNullable() && !this._tested) {
				fragments.wrapNullable(this).code(" ? ").compile(this._object);
				this._testing = false;
				if(this._data.computed) {
					fragments.code("[").compile(this._property).code("] : undefined");
				}
				else {
					fragments.code($dot).compile(this._property).code(" : undefined");
				}
			}
			else {
				if(this._object.isComputed() || (this._object._data.kind === Kind.NumericExpression)) {
					fragments.code("(").compile(this._object).code(")");
				}
				else {
					fragments.compile(this._object);
				}
				if(this._data.computed) {
					fragments.code("[").compile(this._property).code("]");
				}
				else {
					fragments.code($dot).compile(this._property);
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return MemberExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this.isNullable() && !this._tested) {
				if(this._data.computed) {
					fragments.compileNullable(this).code(" ? ").compile(this._object).code("[").compile(this._property).code("]").code(" : false");
				}
				else {
					fragments.compileNullable(this).code(" ? ").compile(this._object).code($dot).compile(this._property).code(" : false");
				}
			}
			else {
				if(this._data.computed) {
					fragments.compile(this._object).code("[").compile(this._property).code("]");
				}
				else {
					fragments.compile(this._object).code($dot).compile(this._property);
				}
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return MemberExpression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(!this._tested) {
				this._tested = true;
				var conditional = false;
				if(this._object.isNullable()) {
					fragments.compileNullable(this._object);
					conditional = true;
				}
				if(this._data.nullable) {
					if(conditional) {
						fragments.code(" && ");
					}
					fragments.code($runtime.type(this) + ".isValue(").compileReusable(this._object).code(")");
					conditional = true;
				}
				if(this._data.computed && this._property.isNullable()) {
					if(conditional) {
						fragments.code(" && ");
					}
					fragments.compileNullable(this._property);
				}
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(this._object.isCallable()) {
				if(this._data.computed) {
					fragments.code("(").compileReusable(this._object).code(", ").compile(this._object).code("[").compileReusable(this._property).code("]").code(")");
				}
				else {
					fragments.code("(").compileReusable(this._object).code(", ").compile(this._object).code($dot).compile(this._property).code(")");
				}
			}
			else if(this._data.computed) {
				fragments.compile(this._object).code("[").compileReusable(this._property).code("]");
			}
			else {
				fragments.compile(this._object).code($dot).compile(this._property);
			}
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toReusableFragments.apply(this, arguments);
		}
	});
	MemberExpression.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_object: {
				access: 1,
				type: "Any"
			},
			_property: {
				access: 1,
				type: "Any"
			},
			_tested: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			acquireReusable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			releaseReusable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isCallable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isEntangled: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullableComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toBooleanFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toNullableFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			toReusableFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var MemberSealedExpression = Helper.class({
		$name: "MemberSealedExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, scope, callee) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			if(scope === undefined || scope === null) {
				throw new Error("Missing parameter 'scope'");
			}
			if(callee === undefined || callee === null) {
				throw new Error("Missing parameter 'callee'");
			}
			this._callee = callee;
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				MemberSealedExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return MemberSealedExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return MemberSealedExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(Type.isValue(this._callee.variable.accessPath)) {
				fragments.code(this._callee.variable.accessPath);
			}
			fragments.code(this._callee.variable.sealed.name + "." + this._data.property.name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return MemberSealedExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	MemberSealedExpression.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 4,
				max: 4,
				parameters: [
					{
						type: "Any",
						min: 4,
						max: 4
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_callee: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ObjectExpression = Helper.class({
		$name: "ObjectExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._properties = [];
			this._templates = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ObjectExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._data.properties[__ks_0];
				if((property.name.kind === Kind.Identifier) || (property.name.kind === Kind.Literal)) {
					this._properties.push(property = new ObjectMember(property, this));
				}
				else {
					this._templates.push(property = new ObjectTemplateMember(property, this));
				}
				property.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.fuse();
			}
			for(var __ks_0 = 0, __ks_1 = this._templates.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._templates[__ks_0];
				property.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_reference_0: function() {
			return this._parent.reference();
		},
		reference: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_reference_0.apply(this);
			}
			else if(Expression.prototype.reference) {
				return Expression.prototype.reference.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._properties.length) {
				var object = fragments.newObject();
				for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
					property = this._properties[__ks_0];
					object.newLine().compile(property);
				}
				object.done();
			}
			else {
				fragments.code("{}");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ObjectExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ObjectExpression.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_properties: {
				access: 1,
				type: "Any"
			},
			_templates: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			reference: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ObjectMember = Helper.class({
		$name: "ObjectMember",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(this._data.name.kind === Kind.Identifier) {
				this._name = new IdentifierLiteral(this._data.name, this, this.scope(), false);
				this.reference("." + this._data.name.name);
			}
			else {
				this._name = new StringLiteral(this._data.name, this);
				this.reference("[" + $quote(this._data.name.value) + "]");
			}
			this._name.analyse();
			this._value = $compile.expression(this._data.value, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectMember.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._value.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ObjectMember.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._name);
			if(this._data.value.kind !== Kind.FunctionExpression) {
				fragments.code(": ");
			}
			fragments.compile(this._value);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ObjectMember.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ObjectMember.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_name: {
				access: 1,
				type: "Any"
			},
			_value: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var ObjectTemplateMember = Helper.class({
		$name: "ObjectTemplateMember",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = new TemplateExpression(this._data.name, this);
			this._name.analyse();
			this._value = $compile.expression(this._data.value, this);
			this.statement().afterward(this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectTemplateMember.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._value.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return ObjectTemplateMember.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toAfterwardFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.newLine().code(this.parent().reference(), "[").compile(this._name).code("] = ").compile(this._value).done();
		},
		toAfterwardFragments: function() {
			if(arguments.length === 1) {
				return ObjectTemplateMember.prototype.__ks_func_toAfterwardFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAfterwardFragments) {
				return Expression.prototype.toAfterwardFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	ObjectTemplateMember.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_name: {
				access: 1,
				type: "Any"
			},
			_value: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toAfterwardFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var OmittedExpression = Helper.class({
		$name: "OmittedExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return OmittedExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return OmittedExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(this._data.spread) {
				fragments.code("...");
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return OmittedExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	OmittedExpression.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var RegularExpression = Helper.class({
		$name: "RegularExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.code(this._data.value);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return RegularExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	RegularExpression.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_value: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var TernaryConditionalExpression = Helper.class({
		$name: "TernaryConditionalExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._then = $compile.expression(this._data.then, this);
			this._else = $compile.expression(this._data.else, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TernaryConditionalExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._condition.fuse();
			this._then.fuse();
			this._else.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return TernaryConditionalExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return TernaryConditionalExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.wrapBoolean(this._condition).code(" ? ").compile(this._then).code(" : ").compile(this._else);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return TernaryConditionalExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	TernaryConditionalExpression.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_condition: {
				access: 1,
				type: "Any"
			},
			_else: {
				access: 1,
				type: "Any"
			},
			_then: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var TemplateExpression = Helper.class({
		$name: "TemplateExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._elements = Helper.mapArray(this._data.elements, Helper.vcurry(function(element) {
				return $compile.expression(element, this);
			}, this));
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
		},
		fuse: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return this._elements.length > 1;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			for(var index = 0, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
				element = this._elements[index];
				if(index) {
					fragments.code(" + ");
				}
				fragments.compile(element);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return TemplateExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	TemplateExpression.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_elements: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var UnlessExpression = Helper.class({
		$name: "UnlessExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._then = $compile.expression(this._data.then, this);
			if(Type.isValue(this._data.else)) {
				this._else = $compile.expression(this._data.else, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._condition.fuse();
			this._then.fuse();
			if(Type.isValue(this._else)) {
				this._else.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(Type.isValue(this._else)) {
				fragments.wrapBoolean(this._condition).code(" ? ").compile(this._else).code(" : ").compile(this._then);
			}
			else {
				fragments.wrapBoolean(this._condition).code(" ? undefined : ").compile(this._then);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnlessExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.newControl().code("if(!").wrapBoolean(this._condition).code(")").step().line(this._then).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return UnlessExpression.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toStatementFragments) {
				return Expression.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	UnlessExpression.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_condition: {
				access: 1,
				type: "Any"
			},
			_else: {
				access: 1,
				type: "Any"
			},
			_then: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AssignmentOperatorExpression = Helper.class({
		$name: "AssignmentOperatorExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isAssignable_0: function() {
			return true;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return Expression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._right.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_analyse_0: function() {
			var data = this._data;
			this.assignment(data);
			this._left = $compile.expression(data.left, this);
			this._right = $compile.expression(data.right, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_assignment_0: function(data) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			var expression = this;
			while(!Type.is(expression._parent, Statement)) {
				expression = expression._parent;
			}
			expression._parent.assignment(data, expression);
		},
		assignment: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_assignment_0.apply(this, arguments);
			}
			else if(Expression.prototype.assignment) {
				return Expression.prototype.assignment.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._left.fuse();
			this._right.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.compileNullable(this._right);
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		}
	});
	AssignmentOperatorExpression.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_left: {
				access: 1,
				type: "Any"
			},
			_right: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			isAssignable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			assignment: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toNullableFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AssignmentOperatorAddition = Helper.class({
		$name: "AssignmentOperatorAddition",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._left).code(" += ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorAddition.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AssignmentOperatorAddition.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AssignmentOperatorBitwiseAnd = Helper.class({
		$name: "AssignmentOperatorBitwiseAnd",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._left).code(" &= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseAnd.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AssignmentOperatorBitwiseAnd.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AssignmentOperatorBitwiseLeftShift = Helper.class({
		$name: "AssignmentOperatorBitwiseLeftShift",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._left).code(" <<= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseLeftShift.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AssignmentOperatorBitwiseLeftShift.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AssignmentOperatorBitwiseOr = Helper.class({
		$name: "AssignmentOperatorBitwiseOr",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._left).code(" |= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseOr.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AssignmentOperatorBitwiseOr.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AssignmentOperatorBitwiseRightShift = Helper.class({
		$name: "AssignmentOperatorBitwiseRightShift",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._left).code(" >>= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseRightShift.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AssignmentOperatorBitwiseRightShift.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AssignmentOperatorBitwiseXor = Helper.class({
		$name: "AssignmentOperatorBitwiseXor",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._left).code(" ^= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseXor.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AssignmentOperatorBitwiseXor.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AssignmentOperatorEquality = Helper.class({
		$name: "AssignmentOperatorEquality",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._left).code($equals).compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorEquality.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(Type.isValue(this._left.toAssignmentFragments)) {
				this._left.toAssignmentFragments(fragments, this._right);
			}
			else {
				fragments.compile(this._left).code($equals).compile(this._right);
			}
		},
		toAssignmentFragments: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorEquality.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toAssignmentFragments) {
				return AssignmentOperatorExpression.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._left).code($equals).wrap(this._right);
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorEquality.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toBooleanFragments) {
				return AssignmentOperatorExpression.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AssignmentOperatorEquality.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toAssignmentFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			toBooleanFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AssignmentOperatorExistential = Helper.class({
		$name: "AssignmentOperatorExistential",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(acquire === undefined || acquire === null) {
				throw new Error("Missing parameter 'acquire'");
			}
			this._right.acquireReusable(true);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExistential.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.acquireReusable) {
				return AssignmentOperatorExpression.prototype.acquireReusable.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			this._right.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExistential.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			else if(AssignmentOperatorExpression.prototype.releaseReusable) {
				return AssignmentOperatorExpression.prototype.releaseReusable.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_isAssignable_0: function() {
			return false;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExistential.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._right.isNullable()) {
				fragments.wrapNullable(this._right).code(" && ").code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? ").compile(this._left).code($equals).wrap(this._right).code(" : undefined");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorExistential.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._right.isNullable()) {
				fragments.wrapNullable(this._right).code(" && ").code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? (").compile(this._left).code($equals).wrap(this._right).code(", true) : false");
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorExistential.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toBooleanFragments) {
				return AssignmentOperatorExpression.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AssignmentOperatorExistential.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			acquireReusable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			releaseReusable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isAssignable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toBooleanFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AssignmentOperatorModulo = Helper.class({
		$name: "AssignmentOperatorModulo",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._left).code(" %= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorModulo.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AssignmentOperatorModulo.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AssignmentOperatorMultiplication = Helper.class({
		$name: "AssignmentOperatorMultiplication",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._left).code(" *= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorMultiplication.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AssignmentOperatorMultiplication.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AssignmentOperatorNullCoalescing = Helper.class({
		$name: "AssignmentOperatorNullCoalescing",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isAssignable_0: function() {
			return false;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorNullCoalescing.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._left.isNullable()) {
				fragments.code("(");
				this._left.toNullableFragments(fragments);
				fragments.code(" && " + $runtime.type(this) + ".isValue(").compile(this._left).code("))");
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(").compile(this._left).code(")");
			}
			fragments.code(" ? undefined : ").compile(this._left).code($equals).compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNullCoalescing.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var ctrl = fragments.newControl();
			ctrl.code("if(!");
			if(this._left.isNullable()) {
				ctrl.code("(");
				this._left.toNullableFragments(ctrl);
				ctrl.code(" && " + $runtime.type(this) + ".isValue(").compile(this._left).code("))");
			}
			else {
				ctrl.code($runtime.type(this) + ".isValue(").compile(this._left).code(")");
			}
			ctrl.code(")").step().newLine().compile(this._left).code($equals).compile(this._right).done();
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNullCoalescing.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toStatementFragments) {
				return AssignmentOperatorExpression.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AssignmentOperatorNullCoalescing.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			isAssignable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toStatementFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var AssignmentOperatorSubtraction = Helper.class({
		$name: "AssignmentOperatorSubtraction",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._left).code(" -= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorSubtraction.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	AssignmentOperatorSubtraction.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorExpression = Helper.class({
		$name: "BinaryOperatorExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			BinaryOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._left.isNullable() || this._right.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNullableComputed_0: function() {
			return (this._left.isNullable() && this._right.isNullable()) || this._left.isNullableComputed() || this._right.isNullableComputed();
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			return Expression.prototype.isNullableComputed.apply(this, arguments);
		},
		__ks_func_analyse_0: function() {
			this._left = $compile.expression(this._data.left, this, false);
			this._right = $compile.expression(this._data.right, this, false);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(acquire === undefined || acquire === null) {
				throw new Error("Missing parameter 'acquire'");
			}
			this._left.acquireReusable(false);
			this._right.acquireReusable(false);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return BinaryOperatorExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._left.releaseReusable();
			this._right.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_fuse_0: function() {
			this._left.fuse();
			this._right.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this.isNullable() && !this._tested) {
				fragments.wrapNullable(this).code(" ? ");
				this.toOperatorFragments(fragments);
				fragments.code(" : false");
			}
			else {
				this.toOperatorFragments(fragments);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(!this._tested) {
				if(this._left.isNullable()) {
					fragments.compileNullable(this._left);
					if(this._right.isNullable()) {
						fragments.code(" && ").compileNullable(this._right);
					}
				}
				else {
					fragments.compileNullable(this._right);
				}
				this._tested = true;
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		}
	});
	BinaryOperatorExpression.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_left: {
				access: 1,
				type: "Any"
			},
			_right: {
				access: 1,
				type: "Any"
			},
			_tested: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullableComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			acquireReusable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			releaseReusable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toNullableFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorAddition = Helper.class({
		$name: "BinaryOperatorAddition",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code("+", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorAddition.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorAddition.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorAnd = Helper.class({
		$name: "BinaryOperatorAnd",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.wrapBoolean(this._left).code($space).code("&&", this._data.operator).code($space).wrapBoolean(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorAnd.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		}
	});
	BinaryOperatorAnd.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorBitwiseAnd = Helper.class({
		$name: "BinaryOperatorBitwiseAnd",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code("&", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseAnd.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorBitwiseAnd.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorBitwiseLeftShift = Helper.class({
		$name: "BinaryOperatorBitwiseLeftShift",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code("<<", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseLeftShift.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorBitwiseLeftShift.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorBitwiseOr = Helper.class({
		$name: "BinaryOperatorBitwiseOr",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code("|", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseOr.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorBitwiseOr.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorBitwiseRightShift = Helper.class({
		$name: "BinaryOperatorBitwiseRightShift",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code(">>", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseRightShift.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorBitwiseRightShift.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorBitwiseXor = Helper.class({
		$name: "BinaryOperatorBitwiseXor",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code("^", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseXor.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorBitwiseXor.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorDivision = Helper.class({
		$name: "BinaryOperatorDivision",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code("/", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorDivision.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorDivision.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorEquality = Helper.class({
		$name: "BinaryOperatorEquality",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code("===", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorEquality.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorEquality.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorGreaterThan = Helper.class({
		$name: "BinaryOperatorGreaterThan",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code(">", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorGreaterThan.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorGreaterThan.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorGreaterThanOrEqual = Helper.class({
		$name: "BinaryOperatorGreaterThanOrEqual",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code(">=", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorGreaterThanOrEqual.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorGreaterThanOrEqual.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorInequality = Helper.class({
		$name: "BinaryOperatorInequality",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code("!==", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorInequality.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorInequality.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorLessThan = Helper.class({
		$name: "BinaryOperatorLessThan",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code("<", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorLessThan.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorLessThan.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorLessThanOrEqual = Helper.class({
		$name: "BinaryOperatorLessThanOrEqual",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code("<=", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorLessThanOrEqual.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorLessThanOrEqual.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorModulo = Helper.class({
		$name: "BinaryOperatorModulo",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code("%", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorModulo.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorModulo.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorMultiplication = Helper.class({
		$name: "BinaryOperatorMultiplication",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space).code("*", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorMultiplication.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorMultiplication.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorNullCoalescing = Helper.class({
		$name: "BinaryOperatorNullCoalescing",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			BinaryOperatorExpression.prototype.analyse.apply(this, []);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_analyse_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.analyse.apply(this, arguments);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(acquire === undefined || acquire === null) {
				throw new Error("Missing parameter 'acquire'");
			}
			this._left.acquireReusable(true);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._left.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._left.isNullable()) {
				fragments.code("(");
				this._left.toNullableFragments(fragments);
				fragments.code(" && " + $runtime.type(this) + ".isValue(").compileReusable(this._left).code("))");
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(").compileReusable(this._left).code(")");
			}
			fragments.code(" ? ").compile(this._left).code(" : ").wrap(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		}
	});
	BinaryOperatorNullCoalescing.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			acquireReusable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			releaseReusable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorOr = Helper.class({
		$name: "BinaryOperatorOr",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.wrapBoolean(this._left).code($space).code("||", this._data.operator).code($space).wrapBoolean(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorOr.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		}
	});
	BinaryOperatorOr.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorSubtraction = Helper.class({
		$name: "BinaryOperatorSubtraction",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			fragments.wrap(this._left).code($space, "-", this._data.operator, $space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorSubtraction.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorSubtraction.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorTypeCasting = Helper.class({
		$name: "BinaryOperatorTypeCasting",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._left.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_analyse_0: function() {
			this._left = $compile.expression(this._data.left, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._left.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.compile(this._left);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorTypeCasting.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_left: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorTypeEquality = Helper.class({
		$name: "BinaryOperatorTypeEquality",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_analyse_0: function() {
			this._left = $compile.expression(this._data.left, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._left.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			$type.check(this, fragments, this._left, this._data.right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorTypeEquality.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var BinaryOperatorTypeInequality = Helper.class({
		$name: "BinaryOperatorTypeInequality",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_analyse_0: function() {
			this._left = $compile.expression(this._data.left, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._left.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._data.right.kind === Kind.TypeReference) {
				fragments.code("!");
				$type.check(this, fragments, this._left, this._data.right);
			}
			else if(Type.isValue(this._data.right.types)) {
				fragments.code("!(");
				$type.check(this, fragments, this._left, this._data.right);
				fragments.code(")");
			}
			else {
				$throw("Not Implemented", this);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	BinaryOperatorTypeInequality.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorExpression = Helper.class({
		$name: "PolyadicOperatorExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			PolyadicOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(operand.isNullable()) {
					return true;
				}
			}
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_analyse_0: function() {
			this._operands = Helper.mapArray(this._data.operands, Helper.vcurry(function(operand) {
				return $compile.expression(operand, this);
			}, this));
		},
		analyse: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.fuse();
			}
		},
		fuse: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var test = this.isNullable() && !this._tested;
			if(test) {
				fragments.compileNullable(this).code(" ? ");
			}
			this.toOperatorFragments(fragments);
			if(test) {
				fragments.code(" : false");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(!this._tested) {
				var nf = false;
				for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._operands[__ks_0];
					if(operand.isNullable()) {
						if(nf) {
							fragments.code(" && ");
						}
						else {
							nf = true;
						}
						fragments.compileNullable(operand);
					}
				}
				this._tested = true;
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		}
	});
	PolyadicOperatorExpression.__ks_reflect = {
		inits: 1,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_operands: {
				access: 1,
				type: "Any"
			},
			_tested: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			isComputed: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			isNullable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			],
			toNullableFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorAddition = Helper.class({
		$name: "PolyadicOperatorAddition",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("+", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorAddition.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	PolyadicOperatorAddition.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorAnd = Helper.class({
		$name: "PolyadicOperatorAnd",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("&&", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrapBoolean(operand);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorAnd.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		}
	});
	PolyadicOperatorAnd.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorDivision = Helper.class({
		$name: "PolyadicOperatorDivision",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("/", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorDivision.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	PolyadicOperatorDivision.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorEquality = Helper.class({
		$name: "PolyadicOperatorEquality",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			var l = this._operands.length - 1;
			for(var i = 0; i < l; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.compile(this._operands[i]).code(" === ").compile(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorEquality.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	PolyadicOperatorEquality.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorGreaterThan = Helper.class({
		$name: "PolyadicOperatorGreaterThan",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			for(var i = 0, __ks_0 = this._operands.length - 1; i < __ks_0; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.wrap(this._operands[i]).code($space).code(">", this._data.operator).code($space).wrap(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorGreaterThan.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	PolyadicOperatorGreaterThan.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorGreaterThanOrEqual = Helper.class({
		$name: "PolyadicOperatorGreaterThanOrEqual",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			for(var i = 0, __ks_0 = this._operands.length - 1; i < __ks_0; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.wrap(this._operands[i]).code($space).code(">=", this._data.operator).code($space).wrap(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorGreaterThanOrEqual.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	PolyadicOperatorGreaterThanOrEqual.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorLessThan = Helper.class({
		$name: "PolyadicOperatorLessThan",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			for(var i = 0, __ks_0 = this._operands.length - 1; i < __ks_0; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.wrap(this._operands[i]).code($space).code("<", this._data.operator).code($space).wrap(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorLessThan.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	PolyadicOperatorLessThan.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorLessThanOrEqual = Helper.class({
		$name: "PolyadicOperatorLessThanOrEqual",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			for(var i = 0, __ks_0 = this._operands.length - 1; i < __ks_0; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.wrap(this._operands[i]).code($space).code("<=", this._data.operator).code($space).wrap(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorLessThanOrEqual.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	PolyadicOperatorLessThanOrEqual.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorMultiplication = Helper.class({
		$name: "PolyadicOperatorMultiplication",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("*", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorMultiplication.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	PolyadicOperatorMultiplication.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorModulo = Helper.class({
		$name: "PolyadicOperatorModulo",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("%", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorModulo.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	PolyadicOperatorModulo.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorNullCoalescing = Helper.class({
		$name: "PolyadicOperatorNullCoalescing",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				PolyadicOperatorNullCoalescing.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._operands = Helper.mapArray(this._data.operands, Helper.vcurry(function(operand) {
				return $compile.expression(operand, this, this.newScope());
			}, this));
		},
		analyse: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_analyse_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.analyse.apply(this, arguments);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(acquire === undefined || acquire === null) {
				throw new Error("Missing parameter 'acquire'");
			}
			for(var i = 0, __ks_0 = this._operands.length - 2; i <= __ks_0; ++i) {
				this._operands[i].acquireReusable(true);
				this._operands[i].releaseReusable();
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.acquireReusable) {
				return PolyadicOperatorExpression.prototype.acquireReusable.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.releaseReusable) {
				return PolyadicOperatorExpression.prototype.releaseReusable.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			this.module().flag("Type");
			var l = this._operands.length - 1;
			var operand;
			for(var i = 0; i < l; ++i) {
				operand = this._operands[i];
				if(operand.isNullable()) {
					fragments.code("(");
					operand.toNullableFragments(fragments);
					fragments.code(" && " + $runtime.type(this) + ".isValue(").compileReusable(operand).code("))");
				}
				else {
					fragments.code($runtime.type(this) + ".isValue(").compileReusable(operand).code(")");
				}
				fragments.code(" ? ").compile(operand).code(" : ");
			}
			fragments.compile(this._operands[l]);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		}
	});
	PolyadicOperatorNullCoalescing.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 2,
				max: 2,
				parameters: [
					{
						type: "Any",
						min: 2,
						max: 2
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			acquireReusable: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			releaseReusable: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorOr = Helper.class({
		$name: "PolyadicOperatorOr",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("||", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrapBoolean(operand);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorOr.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		}
	});
	PolyadicOperatorOr.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var PolyadicOperatorSubtraction = Helper.class({
		$name: "PolyadicOperatorSubtraction",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("-", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorSubtraction.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	PolyadicOperatorSubtraction.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toOperatorFragments: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var UnaryOperatorExpression = Helper.class({
		$name: "UnaryOperatorExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._argument = $compile.expression(this._data.argument, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_fuse_0: function() {
			this._argument.fuse();
		},
		fuse: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_fuse_0.apply(this);
			}
			else if(Expression.prototype.fuse) {
				return Expression.prototype.fuse.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	UnaryOperatorExpression.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {
			_argument: {
				access: 1,
				type: "Any"
			},
			_right: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			analyse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			fuse: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			]
		},
		classMethods: {}
	};
	var UnaryOperatorBitwiseNot = Helper.class({
		$name: "UnaryOperatorBitwiseNot",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.code("~", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorBitwiseNot.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	UnaryOperatorBitwiseNot.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var UnaryOperatorDecrementPostfix = Helper.class({
		$name: "UnaryOperatorDecrementPostfix",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.wrap(this._argument).code("--", this._data.operator);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorDecrementPostfix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	UnaryOperatorDecrementPostfix.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var UnaryOperatorDecrementPrefix = Helper.class({
		$name: "UnaryOperatorDecrementPrefix",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.code("--", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorDecrementPrefix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	UnaryOperatorDecrementPrefix.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var UnaryOperatorExistential = Helper.class({
		$name: "UnaryOperatorExistential",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			if(this._argument.isNullable()) {
				fragments.wrapNullable(this._argument).code(" && ").code($runtime.type(this) + ".isValue(", this._data.operator).compile(this._argument).code(")", this._data.operator);
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(", this._data.operator).compile(this._argument).code(")", this._data.operator);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorExistential.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	UnaryOperatorExistential.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var UnaryOperatorIncrementPostfix = Helper.class({
		$name: "UnaryOperatorIncrementPostfix",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.wrap(this._argument).code("++", this._data.operator);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorIncrementPostfix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	UnaryOperatorIncrementPostfix.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var UnaryOperatorIncrementPrefix = Helper.class({
		$name: "UnaryOperatorIncrementPrefix",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.code("++", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorIncrementPrefix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	UnaryOperatorIncrementPrefix.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var UnaryOperatorNegation = Helper.class({
		$name: "UnaryOperatorNegation",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.code("!", this._data.operator).wrapBoolean(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorNegation.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	UnaryOperatorNegation.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var UnaryOperatorNegative = Helper.class({
		$name: "UnaryOperatorNegative",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(fragments === undefined || fragments === null) {
				throw new Error("Missing parameter 'fragments'");
			}
			if(mode === undefined || mode === null) {
				throw new Error("Missing parameter 'mode'");
			}
			fragments.code("-", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorNegative.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	UnaryOperatorNegative.__ks_reflect = {
		inits: 0,
		constructors: [],
		destructors: 0,
		instanceVariables: {},
		classVariables: {},
		instanceMethods: {
			toFragments: [
				{
					access: 3,
					min: 2,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 2,
							max: 2
						}
					]
				}
			]
		},
		classMethods: {}
	};
	var $compile = {
		expression: function() {
			if(arguments.length < 2) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			var parent = arguments[++__ks_i];
			if(arguments.length > 2) {
				var reusable = arguments[++__ks_i];
			}
			else {
				var reusable = true;
			}
			if(arguments.length > 3) {
				var scope = arguments[++__ks_i];
			}
			else {
				var scope = parent.scope();
			}
			var expression;
			var clazz = $expressions[data.kind];
			if(Type.isValue(clazz)) {
				expression = Type.isConstructor(clazz) ? new clazz(data, parent, scope) : clazz(data, parent, scope);
			}
			else if(data.kind === Kind.BinaryOperator) {
				if(Type.isValue($binaryOperators[data.operator.kind]) ? (clazz = $binaryOperators[data.operator.kind], true) : false) {
					expression = Type.isConstructor(clazz) ? new clazz(data, parent, scope) : clazz(data, parent, scope);
				}
				else if(data.operator.kind === BinaryOperator.Assignment) {
					if((clazz = $assignmentOperators[data.operator.assignment])) {
						expression = Type.isConstructor(clazz) ? new clazz(data, parent, scope) : clazz(data, parent, scope);
					}
					else {
						console.error(data);
						$throw("Unknow assignment operator " + data.operator.assignment, parent);
					}
				}
				else {
					console.error(data);
					$throw("Unknow binary operator " + data.operator.kind, parent);
				}
			}
			else if(data.kind === Kind.PolyadicOperator) {
				if(Type.isValue($polyadicOperators[data.operator.kind]) ? (clazz = $polyadicOperators[data.operator.kind], true) : false) {
					expression = Type.isConstructor(clazz) ? new clazz(data, parent, scope) : clazz(data, parent, scope);
				}
				else {
					console.error(data);
					$throw("Unknow polyadic operator " + data.operator.kind, parent);
				}
			}
			else if(data.kind === Kind.UnaryExpression) {
				if(Type.isValue($unaryOperators[data.operator.kind]) ? (clazz = $unaryOperators[data.operator.kind], true) : false) {
					expression = Type.isConstructor(clazz) ? new clazz(data, parent, scope) : clazz(data, parent, scope);
				}
				else {
					console.error(data);
					$throw("Unknow unary operator " + data.operator.kind, parent);
				}
			}
			else {
				console.error(data);
				$throw("Unknow kind " + data.kind, parent);
			}
			expression.analyse();
			if(reusable) {
				expression.acquireReusable(false);
				expression.releaseReusable();
			}
			return expression;
		},
		statement: function(data, parent) {
			if(data === undefined || data === null) {
				throw new Error("Missing parameter 'data'");
			}
			if(parent === undefined || parent === null) {
				throw new Error("Missing parameter 'parent'");
			}
			var clazz = Type.isValue($statements[data.kind]) ? $statements[data.kind] : $statements.default;
			return new clazz(data, parent);
		}
	};
	var $assignmentOperators = {};
	$assignmentOperators[AssignmentOperator.Addition] = AssignmentOperatorAddition;
	$assignmentOperators[AssignmentOperator.BitwiseAnd] = AssignmentOperatorBitwiseAnd;
	$assignmentOperators[AssignmentOperator.BitwiseLeftShift] = AssignmentOperatorBitwiseLeftShift;
	$assignmentOperators[AssignmentOperator.BitwiseOr] = AssignmentOperatorBitwiseOr;
	$assignmentOperators[AssignmentOperator.BitwiseRightShift] = AssignmentOperatorBitwiseRightShift;
	$assignmentOperators[AssignmentOperator.BitwiseXor] = AssignmentOperatorBitwiseXor;
	$assignmentOperators[AssignmentOperator.Equality] = AssignmentOperatorEquality;
	$assignmentOperators[AssignmentOperator.Existential] = AssignmentOperatorExistential;
	$assignmentOperators[AssignmentOperator.Modulo] = AssignmentOperatorModulo;
	$assignmentOperators[AssignmentOperator.Multiplication] = AssignmentOperatorMultiplication;
	$assignmentOperators[AssignmentOperator.NullCoalescing] = AssignmentOperatorNullCoalescing;
	$assignmentOperators[AssignmentOperator.Subtraction] = AssignmentOperatorSubtraction;
	var $binaryOperators = {};
	$binaryOperators[BinaryOperator.Addition] = BinaryOperatorAddition;
	$binaryOperators[BinaryOperator.And] = BinaryOperatorAnd;
	$binaryOperators[BinaryOperator.BitwiseAnd] = BinaryOperatorBitwiseAnd;
	$binaryOperators[BinaryOperator.BitwiseLeftShift] = BinaryOperatorBitwiseLeftShift;
	$binaryOperators[BinaryOperator.BitwiseOr] = BinaryOperatorBitwiseOr;
	$binaryOperators[BinaryOperator.BitwiseRightShift] = BinaryOperatorBitwiseRightShift;
	$binaryOperators[BinaryOperator.BitwiseXor] = BinaryOperatorBitwiseXor;
	$binaryOperators[BinaryOperator.Division] = BinaryOperatorDivision;
	$binaryOperators[BinaryOperator.Equality] = BinaryOperatorEquality;
	$binaryOperators[BinaryOperator.GreaterThan] = BinaryOperatorGreaterThan;
	$binaryOperators[BinaryOperator.GreaterThanOrEqual] = BinaryOperatorGreaterThanOrEqual;
	$binaryOperators[BinaryOperator.Inequality] = BinaryOperatorInequality;
	$binaryOperators[BinaryOperator.LessThan] = BinaryOperatorLessThan;
	$binaryOperators[BinaryOperator.LessThanOrEqual] = BinaryOperatorLessThanOrEqual;
	$binaryOperators[BinaryOperator.Modulo] = BinaryOperatorModulo;
	$binaryOperators[BinaryOperator.Multiplication] = BinaryOperatorMultiplication;
	$binaryOperators[BinaryOperator.NullCoalescing] = BinaryOperatorNullCoalescing;
	$binaryOperators[BinaryOperator.Or] = BinaryOperatorOr;
	$binaryOperators[BinaryOperator.Subtraction] = BinaryOperatorSubtraction;
	$binaryOperators[BinaryOperator.TypeCasting] = BinaryOperatorTypeCasting;
	$binaryOperators[BinaryOperator.TypeEquality] = BinaryOperatorTypeEquality;
	$binaryOperators[BinaryOperator.TypeInequality] = BinaryOperatorTypeInequality;
	var $expressions = {};
	$expressions[Kind.ArrayBinding] = ArrayBinding;
	$expressions[Kind.ArrayComprehension] = function(data, parent, scope) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(parent === undefined || parent === null) {
			throw new Error("Missing parameter 'parent'");
		}
		if(scope === undefined || scope === null) {
			throw new Error("Missing parameter 'scope'");
		}
		if(data.loop.kind === Kind.ForFromStatement) {
			return new ArrayComprehensionForFrom(data, parent, scope);
		}
		else if(data.loop.kind === Kind.ForInStatement) {
			return new ArrayComprehensionForIn(data, parent, scope);
		}
		else if(data.loop.kind === Kind.ForOfStatement) {
			return new ArrayComprehensionForOf(data, parent, scope);
		}
		else if(data.loop.kind === Kind.ForRangeStatement) {
			return new ArrayComprehensionForRange(data, parent, scope);
		}
		else {
			$throw("Not Implemented", parent);
		}
	};
	$expressions[Kind.ArrayExpression] = ArrayExpression;
	$expressions[Kind.ArrayRange] = ArrayRange;
	$expressions[Kind.BindingElement] = BindingElement;
	$expressions[Kind.Block] = BlockExpression;
	$expressions[Kind.CallExpression] = function(data, parent, scope) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(parent === undefined || parent === null) {
			throw new Error("Missing parameter 'parent'");
		}
		if(scope === undefined || scope === null) {
			throw new Error("Missing parameter 'scope'");
		}
		var callee;
		if((data.callee.kind === Kind.MemberExpression) && !data.callee.computed && (callee = $sealed.callee(data.callee, parent))) {
			return new CallSealedExpression(data, parent, scope, callee);
		}
		else {
			return new CallExpression(data, parent, scope);
		}
	};
	$expressions[Kind.CreateExpression] = CreateExpression;
	$expressions[Kind.CurryExpression] = CurryExpression;
	$expressions[Kind.EnumExpression] = EnumExpression;
	$expressions[Kind.FunctionExpression] = FunctionExpression;
	$expressions[Kind.Identifier] = IdentifierLiteral;
	$expressions[Kind.IfExpression] = IfExpression;
	$expressions[Kind.LambdaExpression] = LambdaExpression;
	$expressions[Kind.Literal] = StringLiteral;
	$expressions[Kind.MemberExpression] = function(data, parent, scope) {
		if(data === undefined || data === null) {
			throw new Error("Missing parameter 'data'");
		}
		if(parent === undefined || parent === null) {
			throw new Error("Missing parameter 'parent'");
		}
		if(scope === undefined || scope === null) {
			throw new Error("Missing parameter 'scope'");
		}
		var callee;
		if((callee = $sealed.callee(data, parent))) {
			return new MemberSealedExpression(data, parent, scope, callee);
		}
		else {
			return new MemberExpression(data, parent, scope);
		}
	};
	$expressions[Kind.NumericExpression] = NumberLiteral;
	$expressions[Kind.ObjectBinding] = ObjectBinding;
	$expressions[Kind.ObjectExpression] = ObjectExpression;
	$expressions[Kind.ObjectMember] = ObjectMember;
	$expressions[Kind.OmittedExpression] = OmittedExpression;
	$expressions[Kind.RegularExpression] = RegularExpression;
	$expressions[Kind.TemplateExpression] = TemplateExpression;
	$expressions[Kind.TernaryConditionalExpression] = TernaryConditionalExpression;
	$expressions[Kind.UnlessExpression] = UnlessExpression;
	var $statements = {};
	$statements[Kind.BreakStatement] = BreakStatement;
	$statements[Kind.ClassDeclaration] = ClassDeclaration;
	$statements[Kind.ContinueStatement] = ContinueStatement;
	$statements[Kind.DestroyStatement] = DestroyStatement;
	$statements[Kind.DoUntilStatement] = DoUntilStatement;
	$statements[Kind.DoWhileStatement] = DoWhileStatement;
	$statements[Kind.EnumDeclaration] = EnumDeclaration;
	$statements[Kind.ExportDeclaration] = ExportDeclaration;
	$statements[Kind.ExternDeclaration] = ExternDeclaration;
	$statements[Kind.ExternOrRequireDeclaration] = ExternOrRequireDeclaration;
	$statements[Kind.ForFromStatement] = ForFromStatement;
	$statements[Kind.ForInStatement] = ForInStatement;
	$statements[Kind.ForOfStatement] = ForOfStatement;
	$statements[Kind.ForRangeStatement] = ForRangeStatement;
	$statements[Kind.FunctionDeclaration] = FunctionDeclaration;
	$statements[Kind.IfStatement] = IfStatement;
	$statements[Kind.ImplementDeclaration] = ImplementDeclaration;
	$statements[Kind.ImportDeclaration] = ImportDeclaration;
	$statements[Kind.IncludeDeclaration] = IncludeDeclaration;
	$statements[Kind.IncludeOnceDeclaration] = IncludeOnceDeclaration;
	$statements[Kind.MethodDeclaration] = MethodDeclaration;
	$statements[Kind.Module] = Module;
	$statements[Kind.RequireDeclaration] = RequireDeclaration;
	$statements[Kind.RequireOrExternDeclaration] = RequireOrExternDeclaration;
	$statements[Kind.ReturnStatement] = ReturnStatement;
	$statements[Kind.SwitchStatement] = SwitchStatement;
	$statements[Kind.ThrowStatement] = ThrowStatement;
	$statements[Kind.TryStatement] = TryStatement;
	$statements[Kind.TypeAliasDeclaration] = TypeAliasDeclaration;
	$statements[Kind.UnlessStatement] = UnlessStatement;
	$statements[Kind.UntilStatement] = UntilStatement;
	$statements[Kind.VariableDeclaration] = VariableDeclaration;
	$statements[Kind.WhileStatement] = WhileStatement;
	$statements["default"] = ExpressionStatement;
	var $polyadicOperators = {};
	$polyadicOperators[BinaryOperator.Addition] = PolyadicOperatorAddition;
	$polyadicOperators[BinaryOperator.And] = PolyadicOperatorAnd;
	$polyadicOperators[BinaryOperator.Division] = PolyadicOperatorDivision;
	$polyadicOperators[BinaryOperator.Equality] = PolyadicOperatorEquality;
	$polyadicOperators[BinaryOperator.GreaterThan] = PolyadicOperatorGreaterThan;
	$polyadicOperators[BinaryOperator.GreaterThanOrEqual] = PolyadicOperatorGreaterThanOrEqual;
	$polyadicOperators[BinaryOperator.LessThan] = PolyadicOperatorLessThan;
	$polyadicOperators[BinaryOperator.LessThanOrEqual] = PolyadicOperatorLessThanOrEqual;
	$polyadicOperators[BinaryOperator.Modulo] = PolyadicOperatorModulo;
	$polyadicOperators[BinaryOperator.Multiplication] = PolyadicOperatorMultiplication;
	$polyadicOperators[BinaryOperator.NullCoalescing] = PolyadicOperatorNullCoalescing;
	$polyadicOperators[BinaryOperator.Or] = PolyadicOperatorOr;
	$polyadicOperators[BinaryOperator.Subtraction] = PolyadicOperatorSubtraction;
	var $unaryOperators = {};
	$unaryOperators[UnaryOperator.BitwiseNot] = UnaryOperatorBitwiseNot;
	$unaryOperators[UnaryOperator.DecrementPostfix] = UnaryOperatorDecrementPostfix;
	$unaryOperators[UnaryOperator.DecrementPrefix] = UnaryOperatorDecrementPrefix;
	$unaryOperators[UnaryOperator.Existential] = UnaryOperatorExistential;
	$unaryOperators[UnaryOperator.IncrementPostfix] = UnaryOperatorIncrementPostfix;
	$unaryOperators[UnaryOperator.IncrementPrefix] = UnaryOperatorIncrementPrefix;
	$unaryOperators[UnaryOperator.Negation] = UnaryOperatorNegation;
	$unaryOperators[UnaryOperator.Negative] = UnaryOperatorNegative;
	var $targets = {
		es5: {
			format: {
				classes: "es5",
				destructuring: "es5",
				functions: "es5",
				parameters: "es5",
				spreads: "es5",
				variables: "es5"
			}
		},
		es6: {
			format: {
				classes: "es6",
				destructuring: "es6",
				functions: "es6",
				parameters: "es6",
				spreads: "es6",
				variables: "es6"
			}
		}
	};
	var Compiler = Helper.class({
		$name: "Compiler",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var file = arguments[++__ks_i];
			if(arguments.length > 1) {
				var options = arguments[++__ks_i];
			}
			else {
				var options = null;
			}
			if(arguments.length > 2) {
				var hashes = arguments[++__ks_i];
			}
			else {
				var hashes = {};
			}
			this._file = file;
			this._hashes = hashes;
			this._options = __ks_Object._cm_merge({
				target: "es6",
				register: true,
				config: {
					header: true,
					parse: {
						parameters: "kaoscript"
					},
					format: {},
					runtime: {
						Helper: "Helper",
						Type: "Type",
						package: "@kaoscript/runtime"
					}
				}
			}, options);
			this._options.config = __ks_Object._cm_defaults($targets[this._options.target], this._options.config);
		},
		__ks_cons: function(args) {
			if(args.length >= 1 && args.length <= 3) {
				Compiler.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new Error("Wrong number of arguments");
			}
		},
		__ks_func_compile_0: function(data) {
			if(data === undefined) {
				data = null;
			}
			this._module = new $statements[Kind.Module](Type.isValue(data) ? data : fs.readFile(this._file), this, this._file);
			this._module.analyse();
			this._module.fuse();
			this._fragments = this._module.toFragments();
			return this;
		},
		compile: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Compiler.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_createServant_0: function(file) {
			if(file === undefined || file === null) {
				throw new Error("Missing parameter 'file'");
			}
			return new Compiler(file, {
				register: false,
				target: this._options.target
			}, this._hashes);
		},
		createServant: function() {
			if(arguments.length === 1) {
				return Compiler.prototype.__ks_func_createServant_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_sha256_0: function() {
			if(arguments.length < 1) {
				throw new Error("Wrong number of arguments");
			}
			var __ks_i = -1;
			var file = arguments[++__ks_i];
			if(arguments.length > 1) {
				var data = arguments[++__ks_i];
			}
			else {
				var data = null;
			}
			return Type.isValue(this._hashes[file]) ? this._hashes[file] : (this._hashes[file] = fs.sha256(Type.isValue(data) ? data : fs.readFile(file)));
		},
		sha256: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Compiler.prototype.__ks_func_sha256_0.apply(this, arguments);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toHashes_0: function() {
			return this._module.toHashes();
		},
		toHashes: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toHashes_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toMetadata_0: function() {
			return this._module.toMetadata();
		},
		toMetadata: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toMetadata_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toSource_0: function() {
			var source = "";
			for(var __ks_0 = 0, __ks_1 = this._fragments.length, fragment; __ks_0 < __ks_1; ++__ks_0) {
				fragment = this._fragments[__ks_0];
				source += fragment.code;
			}
			if(source.length) {
				return source.substr(0, source.length - 1);
			}
			else {
				return source;
			}
		},
		toSource: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toSource_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_toSourceMap_0: function() {
			return this._module.toSourceMap();
		},
		toSourceMap: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toSourceMap_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_writeFiles_0: function() {
			fs.writeFile(getBinaryPath(this._file, this._options.target), this.toSource());
			if(!this._module._binary) {
				var metadata = this.toMetadata();
				fs.writeFile(getMetadataPath(this._file, this._options.target), JSON.stringify(metadata));
			}
			fs.writeFile(getHashPath(this._file, this._options.target), JSON.stringify(this._module.toHashes()));
		},
		writeFiles: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_writeFiles_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		},
		__ks_func_writeOutput_0: function() {
			if(!this._options.output) {
				throw new Error("Undefined option: output");
			}
			var filename = path.join(this._options.output, path.basename(this._file)).slice(0, -3) + ".js";
			fs.writeFile(filename, this.toSource());
			return this;
		},
		writeOutput: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_writeOutput_0.apply(this);
			}
			throw new Error("Wrong number of arguments");
		}
	});
	Compiler.__ks_reflect = {
		inits: 0,
		constructors: [
			{
				access: 3,
				min: 1,
				max: 3,
				parameters: [
					{
						type: "Any",
						min: 1,
						max: 3
					}
				]
			}
		],
		destructors: 0,
		instanceVariables: {
			_file: {
				access: 1,
				type: "String"
			},
			_fragments: {
				access: 1,
				type: "Any"
			},
			_hashes: {
				access: 1,
				type: "Any"
			},
			_module: {
				access: 1,
				type: "Any"
			},
			_options: {
				access: 1,
				type: "Any"
			}
		},
		classVariables: {},
		instanceMethods: {
			compile: [
				{
					access: 3,
					min: 0,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 0,
							max: 1
						}
					]
				}
			],
			createServant: [
				{
					access: 3,
					min: 1,
					max: 1,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 1
						}
					]
				}
			],
			sha256: [
				{
					access: 3,
					min: 1,
					max: 2,
					parameters: [
						{
							type: "Any",
							min: 1,
							max: 2
						}
					]
				}
			],
			toHashes: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toMetadata: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toSource: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			toSourceMap: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			writeFiles: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			],
			writeOutput: [
				{
					access: 3,
					min: 0,
					max: 0,
					parameters: []
				}
			]
		},
		classMethods: {}
	};
	Module.__ks_reflect.instanceVariables._compiler.type = Compiler;
	function compileFile() {
		if(arguments.length < 1) {
			throw new Error("Wrong number of arguments");
		}
		var __ks_i = -1;
		var file = arguments[++__ks_i];
		if(arguments.length > 1) {
			var options = arguments[++__ks_i];
		}
		else {
			var options = null;
		}
		var compiler = new Compiler(file, options);
		return compiler.compile().toSource();
	}
	function getBinaryPath(file, target) {
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(target === undefined || target === null) {
			throw new Error("Missing parameter 'target'");
		}
		return fs.hidden(file, target, $extensions.binary);
	}
	function getHashPath(file, target) {
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(target === undefined || target === null) {
			throw new Error("Missing parameter 'target'");
		}
		return fs.hidden(file, target, $extensions.hash);
	}
	function getMetadataPath(file, target) {
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(target === undefined || target === null) {
			throw new Error("Missing parameter 'target'");
		}
		return fs.hidden(file, target, $extensions.metadata);
	}
	function isUpToDate(file, target, source) {
		if(file === undefined || file === null) {
			throw new Error("Missing parameter 'file'");
		}
		if(target === undefined || target === null) {
			throw new Error("Missing parameter 'target'");
		}
		if(source === undefined || source === null) {
			throw new Error("Missing parameter 'source'");
		}
		var hashes;
		try {
			hashes = JSON.parse(fs.readFile(getHashPath(file, target)));
		}
		catch(__ks_0) {
			return false;
		}
		var root = path.dirname(file);
		for(var name in hashes) {
			var hash = hashes[name];
			if(name === ".") {
				if(fs.sha256(source) !== hash) {
					return null;
				}
			}
			else {
				if(fs.sha256(fs.readFile(path.join(root, name))) !== hash) {
					return null;
				}
			}
		}
		return true;
	}
	return {
		Compiler: Compiler,
		compileFile: compileFile,
		getBinaryPath: getBinaryPath,
		getHashPath: getHashPath,
		getMetadataPath: getMetadataPath,
		isUpToDate: isUpToDate,
		extensions: $extensions
	};
}