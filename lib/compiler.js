// Generated by kaoscript 0.9.0
var __ks__ = require("@kaoscript/runtime");
var Helper = __ks__.Helper, KSType = __ks__.Type;
module.exports = function() {
	var __ks__ = require("@kaoscript/ast")();
	var AssignmentOperatorKind = __ks__.AssignmentOperatorKind, BinaryOperatorKind = __ks__.BinaryOperatorKind, ModifierKind = __ks__.ModifierKind, NodeKind = __ks__.NodeKind, ScopeKind = __ks__.ScopeKind, UnaryOperatorKind = __ks__.UnaryOperatorKind;
	var fs = require("../src/fs.js");
	var metadata = require("../package.json");
	var parse = require("@kaoscript/parser").parse;
	var path = require("path");
	var __ks_Error = {};
	Error.prepareStackTrace = function(error, stack) {
		if(arguments.length < 2) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(error === void 0 || error === null) {
			throw new TypeError("'error' is not nullable");
		}
		else if(!KSType.is(error, Error)) {
			throw new TypeError("'error' is not of type 'Error'");
		}
		if(stack === void 0 || stack === null) {
			throw new TypeError("'stack' is not nullable");
		}
		else if(!KSType.isArray(stack)) {
			throw new TypeError("'stack' is not of type 'Array'");
		}
		var message = error.toString();
		for(var i = 0, __ks_0 = stack.length; i < __ks_0; ++i) {
			message += "\n    " + stack[i].toString();
		}
		return message;
	};
	var Exception = Helper.class({
		$name: "Exception",
		$extends: Error,
		$static: {
			__ks_sttc_validateReportedError_0: function(error, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(error === void 0 || error === null) {
					throw new TypeError("'error' is not nullable");
				}
				else if(!KSType.is(error, ClassType)) {
					throw new TypeError("'error' is not of type 'ClassType'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				var options = node._options.error;
				if(options.level === "fatal") {
					if(!node.parent().isConsumedError(error)) {
						if(options.ignore.length === 0) {
							SyntaxException.throwUnreportedError(error.name(), node);
						}
						else {
							var hierarchy = error.getHierarchy();
							var nf = true;
							for(var __ks_0 = 0, __ks_1 = hierarchy.length, name; nf && __ks_0 < __ks_1; ++__ks_0) {
								name = hierarchy[__ks_0];
								if(__ks_Array._im_contains(options.ignore, name)) {
									nf = false;
								}
							}
							if(nf) {
								SyntaxException.throwUnreportedError(error.name(), node);
							}
							else if(options.raise.length !== 0) {
								for(var __ks_0 = 0, __ks_1 = hierarchy.length, name; __ks_0 < __ks_1; ++__ks_0) {
									name = hierarchy[__ks_0];
									if(__ks_Array._im_contains(options.raise, name)) {
										SyntaxException.throwUnreportedError(error.name(), node);
									}
								}
							}
						}
					}
				}
			},
			validateReportedError: function() {
				if(arguments.length === 2) {
					return Exception.__ks_sttc_validateReportedError_0.apply(this, arguments);
				}
				else if(Error.validateReportedError) {
					return Error.validateReportedError.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this.fileName = null;
			this.lineNumber = 0;
		},
		__ks_init: function() {
			Exception.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(message) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(message === void 0 || message === null) {
				throw new TypeError("'message' is not nullable");
			}
			else if(!KSType.isString(message)) {
				throw new TypeError("'message' is not of type 'String'");
			}
			this.message = message;
			this.name = this.constructor.name;
			if(!KSType.isValue(this.stack)) {
				this.captureStackTrace();
			}
		},
		__ks_cons_1: function(message, fileName, lineNumber) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(message === void 0 || message === null) {
				throw new TypeError("'message' is not nullable");
			}
			else if(!KSType.isString(message)) {
				throw new TypeError("'message' is not of type 'String'");
			}
			if(fileName === void 0 || fileName === null) {
				throw new TypeError("'fileName' is not nullable");
			}
			else if(!KSType.isString(fileName)) {
				throw new TypeError("'fileName' is not of type 'String'");
			}
			if(lineNumber === void 0 || lineNumber === null) {
				throw new TypeError("'lineNumber' is not nullable");
			}
			else if(!KSType.isNumber(lineNumber)) {
				throw new TypeError("'lineNumber' is not of type 'Number'");
			}
			Exception.prototype.__ks_cons.call(this, [message]);
			this.fileName = fileName;
			this.lineNumber = lineNumber;
		},
		__ks_cons_2: function(message, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(message === void 0 || message === null) {
				throw new TypeError("'message' is not nullable");
			}
			else if(!KSType.isString(message)) {
				throw new TypeError("'message' is not of type 'String'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Exception.prototype.__ks_cons.call(this, [message, node.file(), node._data.start.line]);
		},
		__ks_cons_3: function(message, node, data) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(message === void 0 || message === null) {
				throw new TypeError("'message' is not nullable");
			}
			else if(!KSType.isString(message)) {
				throw new TypeError("'message' is not of type 'String'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			Exception.prototype.__ks_cons.call(this, [message, node.file(), data.start.line]);
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				Exception.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 2) {
				Exception.prototype.__ks_cons_2.apply(this, args);
			}
			else if(args.length === 3) {
				if(KSType.isString(args[1])) {
					Exception.prototype.__ks_cons_1.apply(this, args);
				}
				else {
					Exception.prototype.__ks_cons_3.apply(this, args);
				}
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_captureStackTrace_0: function() {
			if(KSType.isValue(Error.captureStackTrace)) {
				Error.captureStackTrace(this);
			}
			else {
				this.stack = (new Error()).stack;
			}
		},
		captureStackTrace: function() {
			if(arguments.length === 0) {
				return Exception.prototype.__ks_func_captureStackTrace_0.apply(this);
			}
			else if(Error.prototype.captureStackTrace) {
				return Error.prototype.captureStackTrace.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toString_0: function() {
			if(this.lineNumber === 0) {
				if(this.message.length === 0) {
					return this.name + ": Unexpected error";
				}
				else {
					return this.name + ": " + this.message;
				}
			}
			else {
				if(this.message.length === 0) {
					return this.name + ": line " + this.lineNumber + ", file \"" + this.fileName + "\"";
				}
				else {
					return this.name + ": " + this.message + " (line " + this.lineNumber + ", file \"" + this.fileName + "\")";
				}
			}
		},
		toString: function() {
			if(arguments.length === 0) {
				return Exception.prototype.__ks_func_toString_0.apply(this);
			}
			else if(Error.prototype.toString) {
				return Error.prototype.toString.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var IOException = Helper.class({
		$name: "IOException",
		$extends: Exception,
		$static: {
			__ks_sttc_throwNotFoundFile_0: function(path, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(path === void 0 || path === null) {
					throw new TypeError("'path' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new IOException("The file \"" + path + "\" can't be found", node);
			},
			__ks_sttc_throwNotFoundFile_1: function(path, directory, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(path === void 0 || path === null) {
					throw new TypeError("'path' is not nullable");
				}
				if(directory === void 0 || directory === null) {
					throw new TypeError("'directory' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new IOException("The file \"" + path + "\" can't be found in the directory \"" + directory + "\"", node);
			},
			throwNotFoundFile: function() {
				if(arguments.length === 2) {
					return IOException.__ks_sttc_throwNotFoundFile_0.apply(this, arguments);
				}
				else if(arguments.length === 3) {
					return IOException.__ks_sttc_throwNotFoundFile_1.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotFoundModule_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new IOException("The module \"" + name + "\" can't be found", node);
			},
			__ks_sttc_throwNotFoundModule_1: function(name, directory, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(directory === void 0 || directory === null) {
					throw new TypeError("'directory' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new IOException("The module \"" + name + "\" can't be found in the directory \"" + directory + "\"", node);
			},
			throwNotFoundModule: function() {
				if(arguments.length === 2) {
					return IOException.__ks_sttc_throwNotFoundModule_0.apply(this, arguments);
				}
				else if(arguments.length === 3) {
					return IOException.__ks_sttc_throwNotFoundModule_1.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Exception.prototype.__ks_cons.call(this, args);
		}
	});
	var NotImplementedException = Helper.class({
		$name: "NotImplementedException",
		$extends: Exception,
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(message) {
			if(message === void 0 || message === null) {
				message = "Not Implemented";
			}
			Exception.prototype.__ks_cons.call(this, [message]);
		},
		__ks_cons_1: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var __ks__;
			var message = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : "Not Implemented";
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Exception.prototype.__ks_cons.call(this, [message, node]);
		},
		__ks_cons_2: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var __ks__;
			var message = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : "Not Implemented";
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			Exception.prototype.__ks_cons.call(this, [message, node, data]);
		},
		__ks_cons_3: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var __ks__;
			var message = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : "Not Implemented";
			var fileName = arguments[++__ks_i];
			if(fileName === void 0 || fileName === null) {
				throw new TypeError("'fileName' is not nullable");
			}
			var lineNumber = arguments[++__ks_i];
			if(lineNumber === void 0 || lineNumber === null) {
				throw new TypeError("'lineNumber' is not nullable");
			}
			Exception.prototype.__ks_cons.call(this, [message, fileName, lineNumber]);
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				NotImplementedException.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 1) {
				if(KSType.is(args[0], AbstractNode)) {
					NotImplementedException.prototype.__ks_cons_1.apply(this, args);
				}
				else {
					NotImplementedException.prototype.__ks_cons_0.apply(this, args);
				}
			}
			else if(args.length === 2) {
				if(KSType.is(args[0], AbstractNode)) {
					NotImplementedException.prototype.__ks_cons_2.apply(this, args);
				}
				else {
					if(KSType.is(args[1], AbstractNode)) {
						NotImplementedException.prototype.__ks_cons_1.apply(this, args);
					}
					else {
						NotImplementedException.prototype.__ks_cons_3.apply(this, args);
					}
				}
			}
			else if(args.length === 3) {
				if(KSType.is(args[1], AbstractNode)) {
					NotImplementedException.prototype.__ks_cons_2.apply(this, args);
				}
				else {
					NotImplementedException.prototype.__ks_cons_3.apply(this, args);
				}
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		}
	});
	var NotSupportedException = Helper.class({
		$name: "NotSupportedException",
		$extends: Exception,
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(message) {
			if(message === void 0 || message === null) {
				message = "Not Supported";
			}
			Exception.prototype.__ks_cons.call(this, [message]);
		},
		__ks_cons_1: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var __ks__;
			var message = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : "Not Supported";
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Exception.prototype.__ks_cons.call(this, [message, node]);
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				NotSupportedException.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 1) {
				if(KSType.is(args[0], AbstractNode)) {
					NotSupportedException.prototype.__ks_cons_1.apply(this, args);
				}
				else {
					NotSupportedException.prototype.__ks_cons_0.apply(this, args);
				}
			}
			else if(args.length === 2) {
				NotSupportedException.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		}
	});
	var ReferenceException = Helper.class({
		$name: "ReferenceException",
		$extends: Exception,
		$static: {
			__ks_sttc_throwNotDefined_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("\"" + name + "\" is not defined", node);
			},
			throwNotDefined: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefined_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefined) {
					return Exception.throwNotDefined.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedField_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Field \"" + name + "\" is not defined", node);
			},
			throwNotDefinedField: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefinedField_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedField) {
					return Exception.throwNotDefinedField.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedInModule_0: function(name, module, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(module === void 0 || module === null) {
					throw new TypeError("'module' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("\"" + name + "\" is not defined in the module \"" + module + "\"", node);
			},
			throwNotDefinedInModule: function() {
				if(arguments.length === 3) {
					return ReferenceException.__ks_sttc_throwNotDefinedInModule_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedInModule) {
					return Exception.throwNotDefinedInModule.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedMember_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Member \"" + name + "\" is not defined", node);
			},
			throwNotDefinedMember: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefinedMember_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedMember) {
					return Exception.throwNotDefinedMember.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedMethod_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Method \"" + name + "\" is not defined", node);
			},
			throwNotDefinedMethod: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefinedMethod_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedMethod) {
					return Exception.throwNotDefinedMethod.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedProperty_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Property \"" + name + "\" is not defined", node);
			},
			throwNotDefinedProperty: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefinedProperty_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedProperty) {
					return Exception.throwNotDefinedProperty.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Exception.prototype.__ks_cons.call(this, args);
		}
	});
	var SyntaxException = Helper.class({
		$name: "SyntaxException",
		$extends: Exception,
		$static: {
			__ks_sttc_throwAfterDefaultClause_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Clause is must be before the default clause", node);
			},
			throwAfterDefaultClause: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwAfterDefaultClause_0.apply(this, arguments);
				}
				else if(Exception.throwAfterDefaultClause) {
					return Exception.throwAfterDefaultClause.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwAfterRestParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter must be before the rest parameter", node);
			},
			throwAfterRestParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwAfterRestParameter_0.apply(this, arguments);
				}
				else if(Exception.throwAfterRestParameter) {
					return Exception.throwAfterRestParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwAlreadyDeclared_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Identifier \"" + name + "\" has already been declared", node);
			},
			throwAlreadyDeclared: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwAlreadyDeclared_0.apply(this, arguments);
				}
				else if(Exception.throwAlreadyDeclared) {
					return Exception.throwAlreadyDeclared.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwDeadCode_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Dead code", node);
			},
			throwDeadCode: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwDeadCode_0.apply(this, arguments);
				}
				else if(Exception.throwDeadCode) {
					return Exception.throwDeadCode.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwExclusiveWildcardImport_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Wilcard import is only supported for kaoscript file", node);
			},
			throwExclusiveWildcardImport: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwExclusiveWildcardImport_0.apply(this, arguments);
				}
				else if(Exception.throwExclusiveWildcardImport) {
					return Exception.throwExclusiveWildcardImport.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwImmutable_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Identifier \"" + name + "\" is immutable", node);
			},
			throwImmutable: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwImmutable_0.apply(this, arguments);
				}
				else if(Exception.throwImmutable) {
					return Exception.throwImmutable.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalidMethodReturn_0: function(className, methodName, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(className === void 0 || className === null) {
					throw new TypeError("'className' is not nullable");
				}
				if(methodName === void 0 || methodName === null) {
					throw new TypeError("'methodName' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Method \"" + methodName + "\" of the class \"" + className + "\" has an invalid return type", node);
			},
			throwInvalidMethodReturn: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwInvalidMethodReturn_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidMethodReturn) {
					return Exception.throwInvalidMethodReturn.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalidSyncMethods_0: function(className, methodName, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(className === void 0 || className === null) {
					throw new TypeError("'className' is not nullable");
				}
				if(methodName === void 0 || methodName === null) {
					throw new TypeError("'methodName' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Method \"" + methodName + "\" of the class \"" + className + "\" can be neither sync nor async", node);
			},
			throwInvalidSyncMethods: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwInvalidSyncMethods_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidSyncMethods) {
					return Exception.throwInvalidSyncMethods.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwMissingAbstractMethods_0: function(name, methods, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Class \"" + name + "\" doesn't implement the following abstract methods: \"" + methods.join("\", \"") + "\"", node);
			},
			throwMissingAbstractMethods: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwMissingAbstractMethods_0.apply(this, arguments);
				}
				else if(Exception.throwMissingAbstractMethods) {
					return Exception.throwMissingAbstractMethods.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwMissingRequirement_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("import is missing the argument \"" + name + "\"", node);
			},
			throwMissingRequirement: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwMissingRequirement_0.apply(this, arguments);
				}
				else if(Exception.throwMissingRequirement) {
					return Exception.throwMissingRequirement.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNoDefaultParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter can't have a default value", node);
			},
			throwNoDefaultParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNoDefaultParameter_0.apply(this, arguments);
				}
				else if(Exception.throwNoDefaultParameter) {
					return Exception.throwNoDefaultParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNoExport_0: function(module, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(module === void 0 || module === null) {
					throw new TypeError("'module' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("No export can be found in module \"" + module + "\"", node);
			},
			throwNoExport: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwNoExport_0.apply(this, arguments);
				}
				else if(Exception.throwNoExport) {
					return Exception.throwNoExport.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNoNullParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter can't be nullable", node);
			},
			throwNoNullParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNoNullParameter_0.apply(this, arguments);
				}
				else if(Exception.throwNoNullParameter) {
					return Exception.throwNoNullParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNoRestParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter can't be a rest parameter", node);
			},
			throwNoRestParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNoRestParameter_0.apply(this, arguments);
				}
				else if(Exception.throwNoRestParameter) {
					return Exception.throwNoRestParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNoSuperCall_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Call \"super()\" is missing", node);
			},
			throwNoSuperCall: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNoSuperCall_0.apply(this, arguments);
				}
				else if(Exception.throwNoSuperCall) {
					return Exception.throwNoSuperCall.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotAbstractClass_0: function(className, methodName, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(className === void 0 || className === null) {
					throw new TypeError("'className' is not nullable");
				}
				if(methodName === void 0 || methodName === null) {
					throw new TypeError("'methodName' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Method \"" + methodName + "\" is abstract but the class \"" + className + "\" is not", node);
			},
			throwNotAbstractClass: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwNotAbstractClass_0.apply(this, arguments);
				}
				else if(Exception.throwNotAbstractClass) {
					return Exception.throwNotAbstractClass.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotBinary_0: function(tag, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(tag === void 0 || tag === null) {
					throw new TypeError("'tag' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Binary file can't use \"" + tag + "\" statement", node);
			},
			throwNotBinary: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwNotBinary_0.apply(this, arguments);
				}
				else if(Exception.throwNotBinary) {
					return Exception.throwNotBinary.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotCompatibleConstructor_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parent's constructor of class \"" + name + "\" can't be called", node);
			},
			throwNotCompatibleConstructor: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwNotCompatibleConstructor_0.apply(this, arguments);
				}
				else if(Exception.throwNotCompatibleConstructor) {
					return Exception.throwNotCompatibleConstructor.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDifferentiableMethods_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Can't differentiate methods", node);
			},
			throwNotDifferentiableMethods: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNotDifferentiableMethods_0.apply(this, arguments);
				}
				else if(Exception.throwNotDifferentiableMethods) {
					return Exception.throwNotDifferentiableMethods.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotNamedParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter must be named", node);
			},
			throwNotNamedParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNotNamedParameter_0.apply(this, arguments);
				}
				else if(Exception.throwNotNamedParameter) {
					return Exception.throwNotNamedParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwOutOfClassAlias_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Alias \"@" + name + "\" must be inside a class", node);
			},
			throwOutOfClassAlias: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwOutOfClassAlias_0.apply(this, arguments);
				}
				else if(Exception.throwOutOfClassAlias) {
					return Exception.throwOutOfClassAlias.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwReservedClassMethod_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Class method \"" + name + "\" is reserved", node);
			},
			throwReservedClassMethod: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwReservedClassMethod_0.apply(this, arguments);
				}
				else if(Exception.throwReservedClassMethod) {
					return Exception.throwReservedClassMethod.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwReservedClassVariable_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Class variable \"" + name + "\" is reserved", node);
			},
			throwReservedClassVariable: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwReservedClassVariable_0.apply(this, arguments);
				}
				else if(Exception.throwReservedClassVariable) {
					return Exception.throwReservedClassVariable.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwTooMuchAttributesForIfAttribute_0: function() {
				throw new SyntaxException("Expected 1 argument for 'if' attribute");
			},
			throwTooMuchAttributesForIfAttribute: function() {
				if(arguments.length === 0) {
					return SyntaxException.__ks_sttc_throwTooMuchAttributesForIfAttribute_0.apply(this);
				}
				else if(Exception.throwTooMuchAttributesForIfAttribute) {
					return Exception.throwTooMuchAttributesForIfAttribute.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwTooMuchRestParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Rest parameter has already been declared", node);
			},
			throwTooMuchRestParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwTooMuchRestParameter_0.apply(this, arguments);
				}
				else if(Exception.throwTooMuchRestParameter) {
					return Exception.throwTooMuchRestParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwUnreportedError_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Error \"" + name + "\" is unreported, it must be caught or declared to be thrown", node);
			},
			throwUnreportedError: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwUnreportedError_0.apply(this, arguments);
				}
				else if(Exception.throwUnreportedError) {
					return Exception.throwUnreportedError.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Exception.prototype.__ks_cons.call(this, args);
		}
	});
	var TypeException = Helper.class({
		$name: "TypeException",
		$extends: Exception,
		$static: {
			__ks_sttc_throwCannotBeInstantiated_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Class \"" + name + "\" is abstract so it can't be instantiated", node);
			},
			throwCannotBeInstantiated: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwCannotBeInstantiated_0.apply(this, arguments);
				}
				else if(Exception.throwCannotBeInstantiated) {
					return Exception.throwCannotBeInstantiated.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwConstructorWithoutNew_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Class constructor \"" + name + "\" cannot be invoked without 'new'", node);
			},
			throwConstructorWithoutNew: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwConstructorWithoutNew_0.apply(this, arguments);
				}
				else if(Exception.throwConstructorWithoutNew) {
					return Exception.throwConstructorWithoutNew.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwImplFieldToSealedType_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("impl can add field to only non-sealed type", node);
			},
			throwImplFieldToSealedType: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwImplFieldToSealedType_0.apply(this, arguments);
				}
				else if(Exception.throwImplFieldToSealedType) {
					return Exception.throwImplFieldToSealedType.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwImplInvalidType_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("impl has an invalid type", node);
			},
			throwImplInvalidType: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwImplInvalidType_0.apply(this, arguments);
				}
				else if(Exception.throwImplInvalidType) {
					return Exception.throwImplInvalidType.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalid_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Invalid type \"" + name + "\"", node);
			},
			throwInvalid: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwInvalid_0.apply(this, arguments);
				}
				else if(Exception.throwInvalid) {
					return Exception.throwInvalid.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotAsyncFunction_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The function \"" + name + "\" is not asynchronous", node);
			},
			throwNotAsyncFunction: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotAsyncFunction_0.apply(this, arguments);
				}
				else if(Exception.throwNotAsyncFunction) {
					return Exception.throwNotAsyncFunction.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotClass_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Identifier \"" + name + "\" is not a class", node);
			},
			throwNotClass: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotClass_0.apply(this, arguments);
				}
				else if(Exception.throwNotClass) {
					return Exception.throwNotClass.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotSyncFunction_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The function \"" + name + "\" is not synchronous", node);
			},
			throwNotSyncFunction: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotSyncFunction_0.apply(this, arguments);
				}
				else if(Exception.throwNotSyncFunction) {
					return Exception.throwNotSyncFunction.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Exception.prototype.__ks_cons.call(this, args);
		}
	});
	var $extensions = {
		binary: ".ksb",
		hash: ".ksh",
		metadata: ".ksm",
		source: ".ks"
	};
	var $targetRegex = /^(\w+)-v(\d+)(?:\.\d+)?(?:\.\d+)?$/;
	var $typeofs = {
		Any: true,
		Array: true,
		Boolean: true,
		Class: true,
		Function: true,
		NaN: true,
		Number: true,
		Object: true,
		RegExp: true,
		String: true
	};
	var $ast = {
		block: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(data.kind === NodeKind.Block) {
				return data;
			}
			return {
				kind: NodeKind.Block,
				statements: [data]
			};
		},
		body: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0) {
				data = null;
			}
			if(!KSType.isValue(data)) {
				return [];
			}
			else if(data.kind === NodeKind.Block) {
				return data.statements;
			}
			else {
				return [{
					kind: NodeKind.ReturnStatement,
					value: data
				}];
			}
		},
		identifier: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isString(name)) {
				return {
					kind: NodeKind.Identifier,
					name: name
				};
			}
			else {
				return name;
			}
		}
	};
	var $runtime = {
		helper: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			KSType.isFunction(node.module) ? node.module().flag("Helper") : undefined;
			return node._options.runtime.helper.alias;
		},
		isDefined: function(name, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(node._options.runtime.helper.alias === name) {
				KSType.isFunction(node.module) ? node.module().flag("Helper") : undefined;
				return true;
			}
			else if(node._options.runtime.type.alias === name) {
				KSType.isFunction(node.module) ? node.module().flag("Type") : undefined;
				return true;
			}
			else {
				return false;
			}
		},
		scope: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return (node._options.format.variables === "es5") ? "var " : "let ";
		},
		type: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			KSType.isFunction(node.module) ? node.module().flag("Type") : undefined;
			return node._options.runtime.type.alias;
		},
		typeof: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var type = arguments[++__ks_i];
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			var __ks__;
			var node = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			if(KSType.isValue(node)) {
				if(!$typeofs[type]) {
					return null;
				}
				if(type === "NaN") {
					return "isNaN";
				}
				else {
					return $runtime.type(node) + ".is" + type;
				}
			}
			else {
				return $typeofs[type];
			}
		}
	};
	var AbstractNode = Helper.class({
		$name: "AbstractNode",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._parent = null;
			this._scope = null;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
		},
		__ks_cons_1: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			var scope;
			if(arguments.length > 2 && (scope = arguments[++__ks_i]) !== void 0 && scope !== null) {
				if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
			}
			else {
				scope = parent.scope();
			}
			this._data = data;
			this._parent = parent;
			this._scope = scope;
			this._options = parent._options;
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				AbstractNode.prototype.__ks_cons_0.apply(this);
			}
			else if(args.length === 2 || args.length === 3) {
				AbstractNode.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_data_0: function() {
			return this._data;
		},
		data: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_data_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._parent.directory();
		},
		directory: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_directory_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_file_0: function() {
			return this._parent.file();
		},
		file: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_file_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_greatParent_0: function() {
			return KSType.isValue(this._parent) ? this._parent._parent : undefined;
		},
		greatParent: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_greatParent_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_greatScope_0: function() {
			return KSType.isValue(this._parent) ? this._parent._scope : undefined;
		},
		greatScope: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_greatScope_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._parent.isConsumedError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return AbstractNode.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_module_0: function() {
			return this._parent.module();
		},
		module: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_module_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newScope_0: function() {
			if(this._options.format.variables === "es6") {
				return new Scope(this._scope);
			}
			else {
				return new XScope(this._scope);
			}
		},
		__ks_func_newScope_1: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			if(this._options.format.variables === "es6") {
				return new Scope(scope);
			}
			else {
				return new XScope(scope);
			}
		},
		newScope: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_newScope_0.apply(this);
			}
			else if(arguments.length === 1) {
				return AbstractNode.prototype.__ks_func_newScope_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parent_0: function() {
			return this._parent;
		},
		parent: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_parent_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reference_0: function() {
			if(KSType.isValue(this._parent) && KSType.isValue(this._parent.reference())) {
				return this._parent.reference() + this._reference;
			}
			else {
				return this._reference;
			}
		},
		__ks_func_reference_1: function(reference) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(reference === void 0 || reference === null) {
				throw new TypeError("'reference' is not nullable");
			}
			this._reference = reference;
		},
		reference: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_reference_0.apply(this);
			}
			else if(arguments.length === 1) {
				return AbstractNode.prototype.__ks_func_reference_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_scope_0: function() {
			return this._scope;
		},
		scope: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_scope_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_statement_0: function() {
			return KSType.isValue(this._parent) ? this._parent.statement() : undefined;
		},
		statement: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_statement_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	function $clone(value) {
		if(value === void 0) {
			value = null;
		}
		if(value === null) {
			return null;
		}
		else if(KSType.isArray(value)) {
			return __ks_Array._im_clone(value);
		}
		else if(KSType.isObject(value)) {
			return __ks_Object._cm_clone(value);
		}
		else {
			return value;
		}
	}
	var $merge = {
		merge: function(source, key, value) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(source === void 0 || source === null) {
				throw new TypeError("'source' is not nullable");
			}
			if(key === void 0 || key === null) {
				throw new TypeError("'key' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(KSType.isArray(value)) {
				source[key] = __ks_Array._im_clone(value);
			}
			else if(KSType.isObject(value)) {
				if(KSType.isObject(source[key])) {
					$merge.object(source[key], value);
				}
				else {
					source[key] = $clone(value);
				}
			}
			else {
				source[key] = value;
			}
			return source;
		},
		object: function(source, current) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(source === void 0 || source === null) {
				throw new TypeError("'source' is not nullable");
			}
			if(current === void 0 || current === null) {
				throw new TypeError("'current' is not nullable");
			}
			for(var key in current) {
				if(source[key]) {
					$merge.merge(source, key, current[key]);
				}
				else {
					source[key] = current[key];
				}
			}
		}
	};
	var __ks_Array = {};
	var __ks_Object = {};
	__ks_Array.__ks_func_append_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		var l, i, j, arg;
		for(var k = 0, __ks_0 = args.length; k < __ks_0; ++k) {
			arg = __ks_Array._cm_from(args[k]);
			if((l = arg.length) > 50000) {
				i = 0;
				j = 50000;
				while(i < l) {
					this.push.apply(this, [].concat(arg.slice(i, j)));
					i = j;
					j += 50000;
				}
			}
			else {
				this.push.apply(this, [].concat(arg));
			}
		}
		return this;
	};
	__ks_Array._im_append = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		return __ks_Array.__ks_func_append_0.apply(that, args);
	};
	__ks_Array.__ks_func_appendUniq_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		if(args.length === 1) {
			__ks_Array._im_pushUniq.apply(__ks_Array, [this].concat(args[0]));
		}
		else {
			for(var i = 0, __ks_0 = args.length; i < __ks_0; ++i) {
				__ks_Array._im_pushUniq.apply(__ks_Array, [this].concat(args[i]));
			}
		}
		return this;
	};
	__ks_Array._im_appendUniq = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		return __ks_Array.__ks_func_appendUniq_0.apply(that, args);
	};
	__ks_Array.__ks_func_any_0 = function(fn) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(fn === void 0 || fn === null) {
			throw new TypeError("'fn' is not nullable");
		}
		for(var index = 0, __ks_0 = this.length, item; index < __ks_0; ++index) {
			item = this[index];
			if(fn(item, index, this)) {
				return true;
			}
		}
		return false;
	};
	__ks_Array._im_any = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length === 1) {
			return __ks_Array.__ks_func_any_0.apply(that, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Array.__ks_func_clear_0 = function() {
		this.length = 0;
		return this;
	};
	__ks_Array._im_clear = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length === 0) {
			return __ks_Array.__ks_func_clear_0.apply(that);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Array.__ks_func_clone_0 = function() {
		var i = this.length;
		var clone = new Array(i);
		while(i) {
			clone[--i] = $clone(this[i]);
		}
		return clone;
	};
	__ks_Array._im_clone = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length === 0) {
			return __ks_Array.__ks_func_clone_0.apply(that);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Array.__ks_func_contains_0 = function() {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		var __ks_i = -1;
		var item = arguments[++__ks_i];
		if(item === void 0 || item === null) {
			throw new TypeError("'item' is not nullable");
		}
		var __ks__;
		var from = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : 0;
		return this.indexOf(item, from) !== -1;
	};
	__ks_Array._im_contains = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length >= 1 && args.length <= 2) {
			return __ks_Array.__ks_func_contains_0.apply(that, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Array.__ks_sttc_from_0 = function(item) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(item === void 0 || item === null) {
			throw new TypeError("'item' is not nullable");
		}
		if(KSType.isEnumerable(item) && !KSType.isString(item)) {
			return KSType.isArray(item) ? item : Array.prototype.slice.call(item);
		}
		else {
			return [item];
		}
	};
	__ks_Array._cm_from = function() {
		var args = Array.prototype.slice.call(arguments);
		if(args.length === 1) {
			return __ks_Array.__ks_sttc_from_0.apply(null, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Array.__ks_func_last_0 = function(index) {
		if(index === void 0 || index === null) {
			index = 1;
		}
		return this.length ? this[this.length - index] : null;
	};
	__ks_Array._im_last = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length >= 0 && args.length <= 1) {
			return __ks_Array.__ks_func_last_0.apply(that, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Array.__ks_func_remove_0 = function() {
		var items = Array.prototype.slice.call(arguments, 0, arguments.length);
		if(items.length === 1) {
			var item = items[0];
			for(var i = this.length - 1; i >= 0; --i) {
				if(this[i] === item) {
					this.splice(i, 1);
				}
			}
		}
		else {
			for(var __ks_0 = 0, __ks_1 = items.length, item; __ks_0 < __ks_1; ++__ks_0) {
				item = items[__ks_0];
				for(var i = this.length - 1; i >= 0; --i) {
					if(this[i] === item) {
						this.splice(i, 1);
					}
				}
			}
		}
		return this;
	};
	__ks_Array._im_remove = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		return __ks_Array.__ks_func_remove_0.apply(that, args);
	};
	__ks_Array.__ks_sttc_merge_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		var source;
		var i = 0;
		var l = args.length;
		while((i < l) && !((KSType.isValue(args[i]) ? (source = args[i], true) : false) && KSType.isArray(source))) {
			++i;
		}
		++i;
		while(i < l) {
			if(KSType.isArray(args[i])) {
				for(var value in args[i]) {
					source.pushUniq(value);
				}
			}
			++i;
		}
		return source;
	};
	__ks_Array._cm_merge = function() {
		var args = Array.prototype.slice.call(arguments);
		return __ks_Array.__ks_sttc_merge_0.apply(null, args);
	};
	__ks_Array.__ks_func_pushUniq_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		if(args.length === 1) {
			if(!__ks_Array._im_contains(this, args[0])) {
				this.push(args[0]);
			}
		}
		else {
			for(var __ks_0 = 0, __ks_1 = args.length, item; __ks_0 < __ks_1; ++__ks_0) {
				item = args[__ks_0];
				if(!__ks_Array._im_contains(this, item)) {
					this.push(item);
				}
			}
		}
		return this;
	};
	__ks_Array._im_pushUniq = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		return __ks_Array.__ks_func_pushUniq_0.apply(that, args);
	};
	__ks_Array.__ks_sttc_same_0 = function(a, b) {
		if(arguments.length < 2) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(a === void 0 || a === null) {
			throw new TypeError("'a' is not nullable");
		}
		if(b === void 0 || b === null) {
			throw new TypeError("'b' is not nullable");
		}
		if(a.length !== b.length) {
			return false;
		}
		for(var i = 0, __ks_0 = a.length; i < __ks_0; ++i) {
			if(a[i] !== b[i]) {
				return false;
			}
		}
		return true;
	};
	__ks_Array._cm_same = function() {
		var args = Array.prototype.slice.call(arguments);
		if(args.length === 2) {
			return __ks_Array.__ks_sttc_same_0.apply(null, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Object.__ks_sttc_clone_0 = function(object) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(object === void 0 || object === null) {
			throw new TypeError("'object' is not nullable");
		}
		if(KSType.isFunction(object.constructor.clone) && (object.constructor.clone !== this)) {
			return object.constructor.clone(object);
		}
		if(KSType.isFunction(object.constructor.prototype.clone)) {
			return object.clone();
		}
		var clone = {};
		for(var key in object) {
			var value = object[key];
			clone[key] = $clone(value);
		}
		return clone;
	};
	__ks_Object._cm_clone = function() {
		var args = Array.prototype.slice.call(arguments);
		if(args.length === 1) {
			return __ks_Object.__ks_sttc_clone_0.apply(null, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Object.__ks_sttc_defaults_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		return __ks_Object._cm_merge.apply(__ks_Object, [].concat({}, args));
	};
	__ks_Object._cm_defaults = function() {
		var args = Array.prototype.slice.call(arguments);
		return __ks_Object.__ks_sttc_defaults_0.apply(null, args);
	};
	__ks_Object.__ks_sttc_isEmpty_0 = function(item) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(item === void 0 || item === null) {
			throw new TypeError("'item' is not nullable");
		}
		for(var key in item) {
			if(item.hasOwnProperty(key)) {
				return false;
			}
		}
		return true;
	};
	__ks_Object._cm_isEmpty = function() {
		var args = Array.prototype.slice.call(arguments);
		if(args.length === 1) {
			return __ks_Object.__ks_sttc_isEmpty_0.apply(null, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Object.__ks_sttc_merge_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		var source;
		var i = 0;
		var l = args.length;
		while((i < l) && !((KSType.isValue(args[i]) ? (source = args[i], true) : false) && KSType.isObject(source))) {
			++i;
		}
		++i;
		while(i < l) {
			if(KSType.isObject(args[i])) {
				for(var key in args[i]) {
					var value = args[i][key];
					$merge.merge(source, key, value);
				}
			}
			++i;
		}
		return source;
	};
	__ks_Object._cm_merge = function() {
		var args = Array.prototype.slice.call(arguments);
		return __ks_Object.__ks_sttc_merge_0.apply(null, args);
	};
	var AttributeTarget = {
		Class: 0,
		Conditional: 1,
		Constructor: 2,
		Field: 4,
		Global: 8,
		Method: 16,
		Property: 32,
		Statement: 64
	};
	var $attributes = {};
	var $semverRegex = /(\w+)(?:\-v(0|[1-9]\d*))?$/;
	var Attribute = Helper.class({
		$name: "Attribute",
		$static: {
			__ks_sttc_conditional_0: function(data, target) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(target === void 0 || target === null) {
					throw new TypeError("'target' is not nullable");
				}
				if(KSType.isValue(data.attributes) ? data.attributes.length > 0 : false) {
					var attribute;
					for(var __ks_0 = 0, __ks_1 = data.attributes.length, attr; __ks_0 < __ks_1; ++__ks_0) {
						attr = data.attributes[__ks_0];
						var __ks_2;
						if((attr.declaration.kind === NodeKind.AttributeExpression) && (KSType.isValue(__ks_2 = Attribute.get(attr.declaration, AttributeTarget.Conditional)) ? (attribute = __ks_2, true) : false)) {
							return attribute.evaluate(target);
						}
					}
				}
				return true;
			},
			conditional: function() {
				if(arguments.length === 2) {
					return Attribute.__ks_sttc_conditional_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_configure_0: function(data, options, targets) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(options === void 0 || options === null) {
					throw new TypeError("'options' is not nullable");
				}
				if(targets === void 0 || targets === null) {
					throw new TypeError("'targets' is not nullable");
				}
				var nc = true;
				if(KSType.isValue(data.attributes) ? data.attributes.length > 0 : false) {
					var attribute;
					for(var __ks_0 = 0, __ks_1 = data.attributes.length, attr; __ks_0 < __ks_1; ++__ks_0) {
						attr = data.attributes[__ks_0];
						var __ks_2;
						if((attr.declaration.kind === NodeKind.AttributeExpression) && (KSType.isValue(__ks_2 = Attribute.get(attr.declaration, targets)) ? (attribute = __ks_2, true) : false)) {
							if(nc) {
								options = __ks_Object._cm_clone(options);
								nc = false;
							}
							attribute.configure(options);
						}
					}
				}
				return options;
			},
			configure: function() {
				if(arguments.length === 3) {
					return Attribute.__ks_sttc_configure_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_get_0: function(data, targets) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(targets === void 0 || targets === null) {
					throw new TypeError("'targets' is not nullable");
				}
				var clazz;
				if((KSType.isValue($attributes[data.name.name]) ? (clazz = $attributes[data.name.name], true) : false) && ((clazz.target() & targets) > 0)) {
					return new clazz(data);
				}
				else {
					return null;
				}
			},
			get: function() {
				if(arguments.length === 2) {
					return Attribute.__ks_sttc_get_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_register_0: function(__ks_class_1) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(__ks_class_1 === void 0 || __ks_class_1 === null) {
					throw new TypeError("'class' is not nullable");
				}
				else if(!KSType.isClass(__ks_class_1)) {
					throw new TypeError("'class' is not of type 'Class'");
				}
				var name = __ks_class_1.name.toLowerCase();
				if((name.length > 9) && (name.substr(-9) === "attribute")) {
					name = name.substr(0, name.length - 9);
				}
				$attributes[name] = __ks_class_1;
			},
			register: function() {
				if(arguments.length === 1) {
					return Attribute.__ks_sttc_register_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons: function(args) {
			if(args.length !== 0) {
				throw new SyntaxError("wrong number of arguments");
			}
		}
	});
	var ErrorAttribute = Helper.class({
		$name: "ErrorAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global | AttributeTarget.Statement;
			},
			target: function() {
				if(arguments.length === 0) {
					return ErrorAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				ErrorAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Attribute.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = this._data.arguments[__ks_0];
				var __ks_2 = arg.kind;
				if(__ks_2 === NodeKind.AttributeExpression) {
					if(arg.name.name === "ignore") {
						for(var __ks_3 = 0, __ks_4 = arg.arguments.length, a; __ks_3 < __ks_4; ++__ks_3) {
							a = arg.arguments[__ks_3];
							options.error.ignore.push(a.name);
						}
					}
					else if(arg.name.name === "raise") {
						for(var __ks_3 = 0, __ks_4 = arg.arguments.length, a; __ks_3 < __ks_4; ++__ks_3) {
							a = arg.arguments[__ks_3];
							options.error.raise.push(a.name);
						}
					}
				}
				else if(__ks_2 === NodeKind.Identifier) {
					var __ks_3 = arg.name;
					if(__ks_3 === "off") {
						options.error.level = "off";
					}
				}
			}
		},
		configure: function() {
			if(arguments.length === 1) {
				return ErrorAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var FormatAttribute = Helper.class({
		$name: "FormatAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global | AttributeTarget.Statement;
			},
			target: function() {
				if(arguments.length === 0) {
					return FormatAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				FormatAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Attribute.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = this._data.arguments[__ks_0];
				if(arg.kind === NodeKind.AttributeOperation) {
					options.format[arg.name.name] = arg.value.value;
				}
			}
		},
		configure: function() {
			if(arguments.length === 1) {
				return FormatAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var IfAttribute = Helper.class({
		$name: "IfAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Conditional;
			},
			target: function() {
				if(arguments.length === 0) {
					return IfAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				IfAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Attribute.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_evaluate_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			if(this._data.arguments.length !== 1) {
				SyntaxException.throwTooMuchAttributesForIfAttribute();
			}
			return this.evaluate(this._data.arguments[0], target);
		},
		__ks_func_evaluate_1: function(data, target) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			if(data.kind === NodeKind.AttributeExpression) {
				if(data.name.name === "all") {
					for(var __ks_0 = 0, __ks_1 = data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
						arg = data.arguments[__ks_0];
						if(!this.evaluate(arg, target)) {
							return false;
						}
					}
					return true;
				}
				else if(data.name.name === "any") {
					for(var __ks_0 = 0, __ks_1 = data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
						arg = data.arguments[__ks_0];
						if(this.evaluate(arg, target)) {
							return true;
						}
					}
					return false;
				}
			}
			else if(data.kind === NodeKind.Identifier) {
				var match;
				if(KSType.isValue(__ks_0 = $semverRegex.exec(data.name)) ? (match = __ks_0, true) : false) {
					if(KSType.isValue(match[2])) {
						return (target.name === match[1]) && (target.version === match[2]);
					}
					else {
						return target.name === match[1];
					}
				}
				else {
					return false;
				}
			}
		},
		evaluate: function() {
			if(arguments.length === 1) {
				return IfAttribute.prototype.__ks_func_evaluate_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return IfAttribute.prototype.__ks_func_evaluate_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ParseAttribute = Helper.class({
		$name: "ParseAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global | AttributeTarget.Statement;
			},
			target: function() {
				if(arguments.length === 0) {
					return ParseAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				ParseAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Attribute.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = this._data.arguments[__ks_0];
				if(arg.kind === NodeKind.AttributeOperation) {
					options.parse[arg.name.name] = arg.value.value;
				}
			}
		},
		configure: function() {
			if(arguments.length === 1) {
				return ParseAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var RuntimeAttribute = Helper.class({
		$name: "RuntimeAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global;
			},
			target: function() {
				if(arguments.length === 0) {
					return RuntimeAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				RuntimeAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Attribute.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, arg; __ks_0 < __ks_1; ++__ks_0) {
				arg = this._data.arguments[__ks_0];
				if(arg.kind === NodeKind.AttributeOperation) {
					if(arg.name.name === "package") {
						options.runtime.helper.package = options.runtime.type.package = arg.value.value;
					}
				}
				else if(arg.kind === NodeKind.AttributeExpression) {
					if(arg.name.name === "helper") {
						for(var __ks_2 = 0, __ks_3 = arg.arguments.length, arg; __ks_2 < __ks_3; ++__ks_2) {
							arg = arg.arguments[__ks_2];
							if(arg.kind === NodeKind.AttributeOperation) {
								var __ks_4 = arg.name.name;
								if(__ks_4 === "alias") {
									options.runtime.helper.alias = arg.value.value;
								}
								else if(__ks_4 === "member") {
									options.runtime.helper.member = arg.value.value;
								}
								else if(__ks_4 === "package") {
									options.runtime.helper.package = arg.value.value;
								}
							}
						}
					}
					else if(arg.name.name === "type") {
						for(var __ks_4 = 0, __ks_2 = arg.arguments.length, arg; __ks_4 < __ks_2; ++__ks_4) {
							arg = arg.arguments[__ks_4];
							if(arg.kind === NodeKind.AttributeOperation) {
								var __ks_3 = arg.name.name;
								if(__ks_3 === "alias") {
									options.runtime.type.alias = arg.value.value;
								}
								else if(__ks_3 === "member") {
									options.runtime.type.member = arg.value.value;
								}
								else if(__ks_3 === "package") {
									options.runtime.type.package = arg.value.value;
								}
							}
						}
					}
				}
			}
		},
		configure: function() {
			if(arguments.length === 1) {
				return RuntimeAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	Attribute.register(ErrorAttribute);
	Attribute.register(FormatAttribute);
	Attribute.register(IfAttribute);
	Attribute.register(ParseAttribute);
	Attribute.register(RuntimeAttribute);
	var Mode = {
		None: 0,
		Async: 1
	};
	var $indentations = [];
	var CodeFragment = Helper.class({
		$name: "CodeFragment",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this.end = null;
			this.start = null;
		},
		__ks_init: function() {
			CodeFragment.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(code) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(code === void 0 || code === null) {
				throw new TypeError("'code' is not nullable");
			}
			this.code = code;
		},
		__ks_cons_1: function(code, start, end) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(code === void 0 || code === null) {
				throw new TypeError("'code' is not nullable");
			}
			if(start === void 0 || start === null) {
				throw new TypeError("'start' is not nullable");
			}
			if(end === void 0 || end === null) {
				throw new TypeError("'end' is not nullable");
			}
			this.code = code;
			this.start = start;
			this.end = end;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				CodeFragment.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 3) {
				CodeFragment.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_toString_0: function() {
			if(KSType.isValue(this._start)) {
				return "" + this._code + ": " + $locationDataToString(this._location);
			}
			else {
				return this.code;
			}
		},
		toString: function() {
			if(arguments.length === 0) {
				return CodeFragment.prototype.__ks_func_toString_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	function $code(code) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(code === void 0 || code === null) {
			throw new TypeError("'code' is not nullable");
		}
		return new CodeFragment(code);
	}
	function $codeLoc(code, start, end) {
		if(arguments.length < 3) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
		}
		if(code === void 0 || code === null) {
			throw new TypeError("'code' is not nullable");
		}
		if(start === void 0 || start === null) {
			throw new TypeError("'start' is not nullable");
		}
		if(end === void 0 || end === null) {
			throw new TypeError("'end' is not nullable");
		}
		return new CodeFragment(code, start, end);
	}
	function $fragmentsToText(fragments) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(fragments === void 0 || fragments === null) {
			throw new TypeError("'fragments' is not nullable");
		}
		return Helper.mapArray(fragments, function(fragment) {
			return fragment.code;
		}).join("");
	}
	function $indent(indent) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(indent === void 0 || indent === null) {
			throw new TypeError("'indent' is not nullable");
		}
		return KSType.isValue($indentations[indent]) ? $indentations[indent] : ($indentations[indent] = $code("\t".repeat(indent)));
	}
	function $locationDataToString(location) {
		if(location === void 0) {
			location = null;
		}
		if(KSType.isValue(location)) {
			return "" + (location.first_line + 1) + ":" + (location.first_column + 1) + "-" + (location.last_line + 1) + ":" + (location.last_column + 1);
		}
		else {
			return "No location data";
		}
	}
	function $quote(value) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(value === void 0 || value === null) {
			throw new TypeError("'value' is not nullable");
		}
		return "\"" + value.replace(/"/g, "\\\"") + "\"";
	}
	var $comma = $code(", ");
	var $dot = $code(".");
	var $equals = $code(" = ");
	var $space = $code(" ");
	var $terminator = $code(";\n");
	var FragmentBuilder = Helper.class({
		$name: "FragmentBuilder",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._arrays = {};
			this._blocks = {};
			this._expressions = {};
			this._fragments = [];
			this._lines = {};
			this._objects = {};
		},
		__ks_init: function() {
			FragmentBuilder.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(indent) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				FragmentBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var line = LineBuilder.create(this, this._indent);
			if((args.length === 1) && KSType.isObject(args[0])) {
				line.compile(args[0]);
			}
			else {
				line.code.apply(line, args);
			}
			line.done();
			return this;
		},
		line: function() {
			return FragmentBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			return new ControlBuilder(this, this._indent);
		},
		newControl: function() {
			if(arguments.length === 0) {
				return FragmentBuilder.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			return LineBuilder.create(this, this._indent);
		},
		newLine: function() {
			if(arguments.length === 0) {
				return FragmentBuilder.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toArray_0: function() {
			return this._fragments;
		},
		toArray: function() {
			if(arguments.length === 0) {
				return FragmentBuilder.prototype.__ks_func_toArray_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ControlBuilder = Helper.class({
		$name: "ControlBuilder",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._firstStep = true;
		},
		__ks_init: function() {
			ControlBuilder.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var builder = arguments[++__ks_i];
			if(builder === void 0 || builder === null) {
				throw new TypeError("'builder' is not nullable");
			}
			var indent = arguments[++__ks_i];
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			var __ks__;
			var addLastNewLine = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : true;
			this._builder = builder;
			this._indent = indent;
			this._addLastNewLine = addLastNewLine;
			this._step = ExpressionBuilder.create(this._builder, this._indent);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				ControlBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_code_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			this._step.code.apply(this._step, args);
			return this;
		},
		code: function() {
			return ControlBuilder.prototype.__ks_func_code_0.apply(this, arguments);
		},
		__ks_func_compile_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			this._step.compile(node, mode);
			return this;
		},
		compile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ControlBuilder.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compileBoolean_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._step.compileBoolean(node);
			return this;
		},
		compileBoolean: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_compileBoolean_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compileNullable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._step.compileNullable(node);
			return this;
		},
		compileNullable: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_compileNullable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_done_0: function() {
			if(this._step.done() && this._addLastNewLine) {
				this._builder._fragments.push(new CodeFragment("\n"));
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ControlBuilder.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isFirstStep_0: function() {
			return this._firstStep;
		},
		isFirstStep: function() {
			if(arguments.length === 0) {
				return ControlBuilder.prototype.__ks_func_isFirstStep_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			this._step.line.apply(this._step, args);
			return this;
		},
		line: function() {
			return ControlBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			return this._step.newControl();
		},
		newControl: function() {
			if(arguments.length === 0) {
				return ControlBuilder.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			return this._step.newLine();
		},
		newLine: function() {
			if(arguments.length === 0) {
				return ControlBuilder.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_step_0: function() {
			this._step.done();
			if(KSType.is(this._step, ExpressionBuilder)) {
				this._step = BlockBuilder.create(this._builder, this._indent);
			}
			else {
				if(this._addLastNewLine) {
					this._builder._fragments.push(new CodeFragment("\n"));
				}
				this._step = ExpressionBuilder.create(this._builder, this._indent);
			}
			if(this._firstStep) {
				this._firstStep = false;
			}
			return this;
		},
		step: function() {
			if(arguments.length === 0) {
				return ControlBuilder.prototype.__ks_func_step_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_wrap_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			this._step.wrap(node, mode);
			return this;
		},
		wrap: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ControlBuilder.prototype.__ks_func_wrap_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_wrapBoolean_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._step.wrapBoolean(node);
			return this;
		},
		wrapBoolean: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_wrapBoolean_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_wrapNullable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._step.wrapNullable(node);
			return this;
		},
		wrapNullable: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_wrapNullable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BlockBuilder = Helper.class({
		$name: "BlockBuilder",
		$static: {
			__ks_sttc_create_0: function(builder, indent) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(builder === void 0 || builder === null) {
					throw new TypeError("'builder' is not nullable");
				}
				if(indent === void 0 || indent === null) {
					throw new TypeError("'indent' is not nullable");
				}
				if(!KSType.isValue(builder._blocks[indent])) {
					builder._blocks[indent] = new BlockBuilder(builder, indent);
				}
				return builder._blocks[indent].init();
			},
			create: function() {
				if(arguments.length === 2) {
					return BlockBuilder.__ks_sttc_create_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._undone = true;
		},
		__ks_init: function() {
			BlockBuilder.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(builder, indent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(builder === void 0 || builder === null) {
				throw new TypeError("'builder' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			this._builder = builder;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				BlockBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_compile_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			if(KSType.isObject(node)) {
				node.toFragments(this, mode);
			}
			else {
				this._builder._fragments.push(new CodeFragment(node));
			}
			return this;
		},
		compile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return BlockBuilder.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_done_0: function() {
			if(this._undone) {
				this._builder._fragments.push($indent(this._indent), new CodeFragment("}"));
				this._undone = false;
				return true;
			}
			else {
				return false;
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return BlockBuilder.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._builder._fragments.push(new CodeFragment(" {\n"));
			this._undone = true;
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return BlockBuilder.prototype.__ks_func_init_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var line = LineBuilder.create(this._builder, this._indent + 1);
			if((args.length === 1) && KSType.isObject(args[0])) {
				line.compile(args[0]);
			}
			else {
				line.code.apply(line, args);
			}
			line.done();
			return this;
		},
		line: function() {
			return BlockBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return new ControlBuilder(this._builder, indent);
		},
		newControl: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return BlockBuilder.prototype.__ks_func_newControl_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newLine_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return LineBuilder.create(this._builder, indent);
		},
		newLine: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return BlockBuilder.prototype.__ks_func_newLine_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExpressionBuilder = Helper.class({
		$name: "ExpressionBuilder",
		$static: {
			__ks_sttc_create_0: function(builder, indent) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(builder === void 0 || builder === null) {
					throw new TypeError("'builder' is not nullable");
				}
				if(indent === void 0 || indent === null) {
					throw new TypeError("'indent' is not nullable");
				}
				if(!KSType.isValue(builder._expressions[indent])) {
					builder._expressions[indent] = new ExpressionBuilder(builder, indent);
				}
				return builder._expressions[indent].init();
			},
			create: function() {
				if(arguments.length === 2) {
					return ExpressionBuilder.__ks_sttc_create_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._undone = true;
		},
		__ks_init: function() {
			ExpressionBuilder.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(builder, indent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(builder === void 0 || builder === null) {
				throw new TypeError("'builder' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			this._builder = builder;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ExpressionBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_code_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var arg, data;
			for(var i = 0, __ks_0 = args.length; i < __ks_0; ++i) {
				arg = args[i];
				if(KSType.isArray(arg)) {
					this.push.apply(this, [].concat(arg));
				}
				else if(KSType.isObject(arg)) {
					this._builder._fragments.push(arg);
				}
				else {
					if(((i + 1) < args.length) && KSType.isObject(data = args[i + 1]) && KSType.isValue(data.kind)) {
						if(KSType.isValue(data.start)) {
							this._builder._fragments.push(new CodeFragment(arg, data.start, data.end));
						}
						else {
							this._builder._fragments.push(new CodeFragment(arg));
						}
						i++;
					}
					else {
						this._builder._fragments.push(new CodeFragment(arg));
					}
				}
			}
			return this;
		},
		code: function() {
			return ExpressionBuilder.prototype.__ks_func_code_0.apply(this, arguments);
		},
		__ks_func_compile_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			if(KSType.isObject(node)) {
				node.toFragments(this, mode);
			}
			else {
				this._builder._fragments.push(new CodeFragment(node));
			}
			return this;
		},
		compile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compileBoolean_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			if(KSType.isObject(node)) {
				node.toBooleanFragments(this, mode);
			}
			else {
				this._builder._fragments.push(new CodeFragment(node));
			}
			return this;
		},
		compileBoolean: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_compileBoolean_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compileNullable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(KSType.isObject(node)) {
				node.toNullableFragments(this);
			}
			else {
				this._builder._fragments.push(new CodeFragment(node));
			}
			return this;
		},
		compileNullable: function() {
			if(arguments.length === 1) {
				return ExpressionBuilder.prototype.__ks_func_compileNullable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compileReusable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(KSType.isObject(node)) {
				node.toReusableFragments(this);
			}
			else {
				this._builder._fragments.push(new CodeFragment(node));
			}
			return this;
		},
		compileReusable: function() {
			if(arguments.length === 1) {
				return ExpressionBuilder.prototype.__ks_func_compileReusable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_done_0: function(skipLastNewLine) {
			if(skipLastNewLine === void 0 || skipLastNewLine === null) {
				skipLastNewLine = false;
			}
			if(this._undone) {
				this._undone = false;
				return true;
			}
			else {
				return false;
			}
		},
		done: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionBuilder.prototype.__ks_func_done_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._builder._fragments.push($indent(this._indent));
			this._undone = true;
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ExpressionBuilder.prototype.__ks_func_init_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newArray_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			return ArrayBuilder.create(this._builder, indent);
		},
		newArray: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionBuilder.prototype.__ks_func_newArray_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newBlock_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			return BlockBuilder.create(this._builder, indent);
		},
		newBlock: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionBuilder.prototype.__ks_func_newBlock_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newControl_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return new ControlBuilder(this._builder, indent);
		},
		newControl: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionBuilder.prototype.__ks_func_newControl_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newLine_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return LineBuilder.create(this._builder, indent);
		},
		newLine: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionBuilder.prototype.__ks_func_newLine_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newObject_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			return ObjectBuilder.create(this._builder, indent);
		},
		newObject: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionBuilder.prototype.__ks_func_newObject_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_wrap_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			if(node.isComputed()) {
				this.code("(");
				node.toFragments(this, mode);
				this.code(")");
			}
			else {
				node.toFragments(this, mode);
			}
			return this;
		},
		wrap: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_wrap_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_wrapBoolean_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			if(node.isBooleanComputed()) {
				this.code("(");
				node.toBooleanFragments(this, mode);
				this.code(")");
			}
			else {
				node.toBooleanFragments(this, mode);
			}
			return this;
		},
		wrapBoolean: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_wrapBoolean_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_wrapNullable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(node.isNullableComputed()) {
				this.code("(");
				node.toNullableFragments(this);
				this.code(")");
			}
			else {
				node.toNullableFragments(this);
			}
			return this;
		},
		wrapNullable: function() {
			if(arguments.length === 1) {
				return ExpressionBuilder.prototype.__ks_func_wrapNullable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var LineBuilder = Helper.class({
		$name: "LineBuilder",
		$extends: ExpressionBuilder,
		$static: {
			__ks_sttc_create_0: function(builder, indent) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(builder === void 0 || builder === null) {
					throw new TypeError("'builder' is not nullable");
				}
				if(indent === void 0 || indent === null) {
					throw new TypeError("'indent' is not nullable");
				}
				if(!KSType.isValue(builder._lines[indent])) {
					builder._lines[indent] = new LineBuilder(builder, indent);
				}
				return builder._lines[indent].init();
			},
			create: function() {
				if(arguments.length === 2) {
					return LineBuilder.__ks_sttc_create_0.apply(this, arguments);
				}
				return ExpressionBuilder.create.apply(null, arguments);
			}
		},
		__ks_init: function() {
			ExpressionBuilder.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ExpressionBuilder.prototype.__ks_cons.call(this, args);
		},
		__ks_func_done_0: function() {
			if(this._undone) {
				this._builder._fragments.push($terminator);
				this._undone = false;
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return LineBuilder.prototype.__ks_func_done_0.apply(this);
			}
			return ExpressionBuilder.prototype.done.apply(this, arguments);
		}
	});
	var ObjectBuilder = Helper.class({
		$name: "ObjectBuilder",
		$static: {
			__ks_sttc_create_0: function(builder, indent) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(builder === void 0 || builder === null) {
					throw new TypeError("'builder' is not nullable");
				}
				if(indent === void 0 || indent === null) {
					throw new TypeError("'indent' is not nullable");
				}
				if(!KSType.isValue(builder._objects[indent])) {
					builder._objects[indent] = new ObjectBuilder(builder, indent);
				}
				return builder._objects[indent].init();
			},
			create: function() {
				if(arguments.length === 2) {
					return ObjectBuilder.__ks_sttc_create_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(builder, indent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(builder === void 0 || builder === null) {
				throw new TypeError("'builder' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			this._builder = builder;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ObjectBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_done_0: function() {
			if(KSType.isValue(this._line)) {
				this._line.done();
				this._line = null;
				this._builder._fragments.push(new CodeFragment("\n"), $indent(this._indent), new CodeFragment("}"));
			}
			else {
				this._builder._fragments.push(new CodeFragment("}"));
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ObjectBuilder.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._line = null;
			this._builder._fragments.push(new CodeFragment("{"));
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ObjectBuilder.prototype.__ks_func_init_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var line = this.newLine();
			line.code.apply(line, args);
			return this;
		},
		line: function() {
			return ObjectBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			if(KSType.isValue(this._line)) {
				this._line.done();
				this._builder._fragments.push(new CodeFragment(",\n"));
			}
			else {
				this._builder._fragments.push(new CodeFragment("\n"));
			}
			return this._line = new ControlBuilder(this._builder, this._indent + 1, false);
		},
		newControl: function() {
			if(arguments.length === 0) {
				return ObjectBuilder.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			if(KSType.isValue(this._line)) {
				this._line.done();
				this._builder._fragments.push(new CodeFragment(",\n"));
			}
			else {
				this._builder._fragments.push(new CodeFragment("\n"));
			}
			return this._line = ExpressionBuilder.create(this._builder, this._indent + 1);
		},
		newLine: function() {
			if(arguments.length === 0) {
				return ObjectBuilder.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayBuilder = Helper.class({
		$name: "ArrayBuilder",
		$static: {
			__ks_sttc_create_0: function(builder, indent) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(builder === void 0 || builder === null) {
					throw new TypeError("'builder' is not nullable");
				}
				if(indent === void 0 || indent === null) {
					throw new TypeError("'indent' is not nullable");
				}
				if(!KSType.isValue(builder._arrays[indent])) {
					builder._arrays[indent] = new ArrayBuilder(builder, indent);
				}
				return builder._arrays[indent].init();
			},
			create: function() {
				if(arguments.length === 2) {
					return ArrayBuilder.__ks_sttc_create_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(builder, indent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(builder === void 0 || builder === null) {
				throw new TypeError("'builder' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			this._builder = builder;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ArrayBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_done_0: function() {
			if(KSType.isValue(this._line)) {
				this._line.done();
				this._line = null;
				this._builder._fragments.push(new CodeFragment("\n"), $indent(this._indent), new CodeFragment("]"));
			}
			else {
				this._builder._fragments.push(new CodeFragment("]"));
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ArrayBuilder.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._line = null;
			this._builder._fragments.push(new CodeFragment("["));
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ArrayBuilder.prototype.__ks_func_init_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_0;
			(__ks_0 = this.newLine(), __ks_0.code).apply(__ks_0, args);
			return this;
		},
		line: function() {
			return ArrayBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			if(KSType.isValue(this._line)) {
				this._line.done();
				this._builder._fragments.push(new CodeFragment(",\n"));
			}
			else {
				this._builder._fragments.push(new CodeFragment("\n"));
			}
			return this._line = new ControlBuilder(this._builder, this._indent + 1, false);
		},
		newControl: function() {
			if(arguments.length === 0) {
				return ArrayBuilder.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			if(KSType.isValue(this._line)) {
				this._line.done();
				this._builder._fragments.push(new CodeFragment(",\n"));
			}
			else {
				this._builder._fragments.push(new CodeFragment("\n"));
			}
			return this._line = ExpressionBuilder.create(this._builder, this._indent + 1);
		},
		newLine: function() {
			if(arguments.length === 0) {
				return ArrayBuilder.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var $natives = {
		Array: true,
		Boolean: true,
		Class: true,
		Function: true,
		Number: true,
		Object: true,
		RegExp: true,
		String: true
	};
	var $types = {
		any: "Any",
		array: "Array",
		bool: "Boolean",
		class: "Class",
		enum: "Enum",
		func: "Function",
		number: "Number",
		object: "Object",
		string: "String"
	};
	var Accessibility = {
		Private: 1,
		Protected: 2,
		Public: 3
	};
	var EnumKind = {
		Flags: 0,
		Number: 1,
		String: 2
	};
	var Domain = Helper.class({
		$name: "Domain",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons: function(args) {
			if(args.length !== 0) {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_reference_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return new ReferenceType(name, this);
		},
		reference: function() {
			if(arguments.length === 1) {
				return Domain.prototype.__ks_func_reference_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ScopeDomain = Helper.class({
		$name: "ScopeDomain",
		$extends: Domain,
		__ks_init: function() {
			Domain.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			this._scope = scope;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				ScopeDomain.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Domain.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_getVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var variable, __ks_0;
			if(KSType.isValue(__ks_0 = this._scope.getVariable(name)) ? (variable = __ks_0, true) : false) {
				return variable.type();
			}
			else {
				return null;
			}
		},
		getVariable: function() {
			if(arguments.length === 1) {
				return ScopeDomain.prototype.__ks_func_getVariable_0.apply(this, arguments);
			}
			else if(Domain.prototype.getVariable) {
				return Domain.prototype.getVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImportDomain = Helper.class({
		$name: "ImportDomain",
		$extends: Domain,
		__ks_init_1: function() {
			this._temporaries = {};
			this._types = {};
		},
		__ks_init: function() {
			Domain.prototype.__ks_init.call(this);
			ImportDomain.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(variables, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variables === void 0 || variables === null) {
				throw new TypeError("'variables' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Domain.prototype.__ks_cons.call(this, []);
			this._scope = node.scope();
			for(var name in variables) {
				var data = variables[name];
				this._temporaries[name] = Type.import(name, data, this, node);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ImportDomain.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Domain.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_commit_0: function() {
			for(var name in this._temporaries) {
				var type = this._temporaries[name];
				this._types[name] = this._temporaries[name];
			}
			delete this._temporaries;
		},
		__ks_func_commit_1: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			this._types[name] = this._temporaries[name];
			return this._types[name];
		},
		__ks_func_commit_2: function(tempName, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(tempName === void 0 || tempName === null) {
				throw new TypeError("'tempName' is not nullable");
			}
			else if(!KSType.isString(tempName)) {
				throw new TypeError("'tempName' is not of type 'String'");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			this._types[name] = this._temporaries[tempName];
			return this._types[name];
		},
		commit: function() {
			if(arguments.length === 0) {
				return ImportDomain.prototype.__ks_func_commit_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ImportDomain.prototype.__ks_func_commit_1.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return ImportDomain.prototype.__ks_func_commit_2.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasTemporary_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.is(this._temporaries[name], Type);
		},
		hasTemporary: function() {
			if(arguments.length === 1) {
				return ImportDomain.prototype.__ks_func_hasTemporary_0.apply(this, arguments);
			}
			else if(Domain.prototype.hasTemporary) {
				return Domain.prototype.hasTemporary.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.is(this._types[name], Type)) {
				return this._types[name];
			}
			else if($natives[name] === true) {
				return this._scope.reference(name);
			}
			else {
				return null;
			}
		},
		getVariable: function() {
			if(arguments.length === 1) {
				return ImportDomain.prototype.__ks_func_getVariable_0.apply(this, arguments);
			}
			else if(Domain.prototype.getVariable) {
				return Domain.prototype.getVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Type = Helper.class({
		$name: "Type",
		$static: {
			__ks_sttc_arrayOf_0: function(parameter, scope) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(parameter === void 0 || parameter === null) {
					throw new TypeError("'parameter' is not nullable");
				}
				else if(!KSType.is(parameter, Type)) {
					throw new TypeError("'parameter' is not of type 'Type'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				return new ReferenceType("Array", false, [parameter], new ScopeDomain(scope));
			},
			arrayOf: function() {
				if(arguments.length === 2) {
					return Type.__ks_sttc_arrayOf_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0) {
					data = null;
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				return Type.fromAST(data, new ScopeDomain(node.scope()), node);
			},
			__ks_sttc_fromAST_1: function(data, domain, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(data === void 0) {
					data = null;
				}
				if(domain === void 0 || domain === null) {
					throw new TypeError("'domain' is not nullable");
				}
				else if(!KSType.is(domain, Domain)) {
					throw new TypeError("'domain' is not of type 'Domain'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				if(!KSType.isValue(data)) {
					return Type.Any;
				}
				else if(KSType.is(data, Type)) {
					return data;
				}
				var __ks_0 = data.kind;
				if(__ks_0 === NodeKind.FunctionDeclaration) {
					return new FunctionType(Helper.mapArray(data.parameters, function(parameter) {
						return Type.fromAST(parameter, domain, node);
					}), data, node);
				}
				else if(__ks_0 === NodeKind.FunctionExpression) {
					return new FunctionType(Helper.mapArray(data.parameters, function(parameter) {
						return Type.fromAST(parameter, domain, node);
					}), data, node);
				}
				else if(__ks_0 === NodeKind.Identifier) {
					var type, __ks_1;
					if(KSType.isValue(__ks_1 = domain.getVariable(data.name)) ? (type = __ks_1, false) : true) {
						ReferenceException.throwNotDefined(data.name, node);
					}
					return type;
				}
				else if(__ks_0 === NodeKind.Parameter) {
					var type = Type.fromAST(data.type, domain, node);
					var min = KSType.isValue(data.defaultValue) ? 0 : 1;
					var max = 1;
					var nf = true;
					for(var __ks_1 = 0, __ks_2 = data.modifiers.length, modifier; nf && __ks_1 < __ks_2; ++__ks_1) {
						modifier = data.modifiers[__ks_1];
						if(modifier.kind === ModifierKind.Rest) {
							if(modifier.arity) {
								min = modifier.arity.min;
								max = modifier.arity.max;
							}
							else {
								min = 0;
								max = Infinity;
							}
							nf = true;
						}
					}
					return new ParameterType(type, min, max);
				}
				else if(__ks_0 === NodeKind.TypeReference) {
					if(KSType.isValue(data.properties)) {
						var scope = node.scope();
						var name = scope.getAnomynousClassName();
						var type = new ClassType(name, domain);
						var variable = scope.define(name, true, type, node);
						type.anonymize();
						var ref;
						for(var __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
							property = data.properties[__ks_1];
							if(property.type.kind === NodeKind.FunctionExpression) {
								type.addInstanceMethod(property.name.name, new ClassMethodType(Helper.mapArray(property.type.parameters, function(parameter) {
									return Type.fromAST(parameter, domain, node);
								}), property.type, node));
							}
							else if(property.type.kind === NodeKind.TypeReference) {
								ref = Type.fromAST(property.type, domain, node);
								if(ref.isAnonymous()) {
									ref = ref.reference();
								}
								type.addInstanceVariable(property.name.name, new ClassVariableType(ref));
							}
							else {
								console.log(property);
								throw new NotImplementedException(node);
							}
						}
						return type;
					}
					else if(KSType.isValue(data.typeName)) {
						if(data.typeName.kind === NodeKind.Identifier) {
							var type = new ReferenceType(data.typeName.name, data.nullable, domain);
							if(KSType.isValue(data.typeParameters)) {
								for(var __ks_1 = 0, __ks_2 = data.typeParameters.length, parameter; __ks_1 < __ks_2; ++__ks_1) {
									parameter = data.typeParameters[__ks_1];
									type._parameters.push(Type.fromAST(parameter, domain, node));
								}
							}
							return type;
						}
						else if((data.typeName.kind === NodeKind.MemberExpression) && !data.typeName.computed) {
							var type = new ReferenceType(data.typeName.property.name, data.nullable, domain);
							type.namespace(Type.fromAST(data.typeName.object, domain, node).reference());
							if(KSType.isValue(data.typeParameters)) {
								for(var __ks_1 = 0, __ks_2 = data.typeParameters.length, parameter; __ks_1 < __ks_2; ++__ks_1) {
									parameter = data.typeParameters[__ks_1];
									type._parameters.push(Type.fromAST(parameter, domain, node));
								}
							}
							return type;
						}
					}
				}
				else if(__ks_0 === NodeKind.UnionType) {
					return new UnionType(Helper.mapArray(data.types, function(type) {
						return Type.fromAST(type, domain, node);
					}));
				}
				else if(__ks_0 === NodeKind.VariableDeclarator) {
					return Type.fromAST(data.type, domain, node);
				}
				console.log(data);
				throw new NotImplementedException(node);
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return Type.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				else if(arguments.length === 3) {
					return Type.__ks_sttc_fromAST_1.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_import_0: function() {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				var __ks_i = -1;
				var args = Array.prototype.slice.call(arguments, __ks_i + 1, Math.min(arguments.length, __ks_i + 4));
				if(KSType.is(args[1], Domain)) {
					return Type.import(null, args[0], args[1], args[2]);
				}
				else {
					return Type.import(args[0], args[1], new ScopeDomain(args[2].scope()), args[2]);
				}
			},
			__ks_sttc_import_1: function(name, data, domain, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(name === void 0) {
					name = null;
				}
				else if(name !== null && !KSType.isString(name)) {
					throw new TypeError("'name' is not of type 'String'");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(domain === void 0 || domain === null) {
					throw new TypeError("'domain' is not nullable");
				}
				else if(!KSType.is(domain, Domain)) {
					throw new TypeError("'domain' is not of type 'Domain'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				if(KSType.isString(data)) {
					return (data === "Any") ? Type.Any : new ReferenceType(data, domain);
				}
				else if(KSType.isArray(data)) {
					return new UnionType(Helper.mapArray(data, function(type) {
						return Type.import(null, type, domain, node);
					}));
				}
				else if(KSType.isValue(data.constructors)) {
					if(name === null) {
						throw new NotImplementedException(node);
					}
					else {
						var type = new ClassType(name, domain);
						type._abstract = data.abstract;
						type._alien = data.alien;
						if(data.sealed) {
							type.seal();
						}
						for(var __ks_0 = 0, __ks_1 = data.constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = data.constructors[__ks_0];
							type.addConstructor(ClassConstructorType.import(method, domain, node));
						}
						for(name in data.instanceMethods) {
							var methods = data.instanceMethods[name];
							for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
								method = methods[__ks_0];
								type.addInstanceMethod(name, ClassMethodType.import(method, domain, node));
							}
						}
						for(name in data.classMethods) {
							var methods = data.classMethods[name];
							for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
								method = methods[__ks_0];
								type.addClassMethod(name, ClassMethodType.import(method, domain, node));
							}
						}
						return type;
					}
				}
				else if(KSType.isValue(data.parameters)) {
					var type = new FunctionType();
					type._async = data.async;
					type._min = data.min;
					type._max = data.max;
					type._sealed = data.sealed;
					type._throws = Helper.mapArray(data.throws, function(__ks_throw_1) {
						return Type.import(null, __ks_throw_1, domain, node);
					});
					type._returnType = Type.import(null, data.returns, domain, node);
					type._parameters = Helper.mapArray(data.parameters, function(parameter) {
						return Type.import(null, parameter, domain, node);
					});
					type.updateArguments();
					return type;
				}
				else if(KSType.isValue(data.properties)) {
					var type = new NamespaceType(name, domain);
					if(data.sealed) {
						type.seal();
					}
					for(name in data.properties) {
						var property = data.properties[name];
						type.addPropertyFromMetadata(name, property, domain, node);
					}
					return type;
				}
				else if(KSType.isValue(data.min)) {
					return new ParameterType(Type.import(null, data.type, domain, node), data.min, data.max);
				}
				else if(KSType.isValue(data.elements)) {
					var type = new EnumType(name, data.kind, domain);
					type._elements = data.elements;
					type._index = data.index;
					return type;
				}
				else if(KSType.isValue(data.methods)) {
					var scope = node.scope();
					var __ks_name_1 = scope.getAnomynousClassName();
					var type = new ClassType(__ks_name_1, domain);
					scope.define(__ks_name_1, true, type, node);
					type.anonymize();
					for(__ks_name_1 in data.variables) {
						var variable = data.variables[__ks_name_1];
						type.addInstanceVariable(__ks_name_1, ClassVariableType.import(variable, domain, node));
					}
					for(__ks_name_1 in data.methods) {
						var methods = data.methods[__ks_name_1];
						for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
							method = methods[__ks_0];
							type.addInstanceMethod(__ks_name_1, ClassMethodType.import(method, domain, node));
						}
					}
					return type;
				}
				else if(KSType.isValue(data.type)) {
					return new AliasType(Type.import(null, data.type, domain, node));
				}
				else if(KSType.isValue(data.name)) {
					var type = new ReferenceType(data.name, data.nullable, domain);
					return type;
				}
				else {
					console.log(data);
					throw new NotImplementedException(node);
				}
			},
			import: function() {
				if(arguments.length === 3) {
					return Type.__ks_sttc_import_0.apply(this, arguments);
				}
				else if(arguments.length === 4) {
					return Type.__ks_sttc_import_1.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons: function(args) {
			if(args.length !== 0) {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_dereference_0: function() {
			return this;
		},
		dereference: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_dereference_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAny_0: function() {
			return false;
		},
		isAny: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isAny_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAnonymous_0: function() {
			return false;
		},
		isAnonymous: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isAnonymous_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isArray_0: function() {
			return false;
		},
		isArray: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isArray_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isContainedIn_0: function(types) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(types === void 0 || types === null) {
				throw new TypeError("'types' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = types[__ks_0];
				if(this.equals(type)) {
					return true;
				}
			}
			return false;
		},
		isContainedIn: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_isContainedIn_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExtendable_0: function() {
			return false;
		},
		isExtendable: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isExtendable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isFlexible_0: function() {
			return false;
		},
		isFlexible: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isFlexible_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNumber_0: function() {
			return false;
		},
		isNumber: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isNumber_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isSealed_0: function() {
			return false;
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isSealed_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isString_0: function() {
			return false;
		},
		isString: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isString_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_unalias_0: function() {
			return this;
		},
		unalias: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_unalias_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AliasType = Helper.class({
		$name: "AliasType",
		$extends: Type,
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._type = type;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				AliasType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Type.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_dereference_0: function() {
			return this._type.unalias();
		},
		dereference: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_dereference_0.apply(this);
			}
			return Type.prototype.dereference.apply(this, arguments);
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			throw new NotImplementedException();
		},
		equals: function() {
			if(arguments.length === 1) {
				return AliasType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			return {
				type: this._type.export()
			};
		},
		export: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_export_0.apply(this);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_type_0.apply(this);
			}
			else if(Type.prototype.type) {
				return Type.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AliasType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			throw new NotImplementedException();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._type.toTestFragments(fragments, node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return AliasType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_unalias_0: function() {
			return this._type.unalias();
		},
		unalias: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_unalias_0.apply(this);
			}
			return Type.prototype.unalias.apply(this, arguments);
		}
	});
	var AnyType = Helper.class({
		$name: "AnyType",
		$extends: Type,
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Type.prototype.__ks_cons.call(this, args);
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			return KSType.is(b, AnyType);
		},
		equals: function() {
			if(arguments.length === 1) {
				return AnyType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			return "Any";
		},
		export: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_export_0.apply(this);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return Type.Any;
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return AnyType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hashCode_0: function() {
			return "Any";
		},
		hashCode: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_hashCode_0.apply(this);
			}
			else if(Type.prototype.hashCode) {
				return Type.prototype.hashCode.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAny_0: function() {
			return true;
		},
		isAny: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_isAny_0.apply(this);
			}
			return Type.prototype.isAny.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Type.prototype.isNullable) {
				return Type.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_match_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			else if(!KSType.is(b, Type)) {
				throw new TypeError("'b' is not of type 'Type'");
			}
			return true;
		},
		match: function() {
			if(arguments.length === 1) {
				return AnyType.prototype.__ks_func_match_0.apply(this, arguments);
			}
			else if(Type.prototype.match) {
				return Type.prototype.match.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_merge_0: function(type, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(!type.isAny()) {
				throw new NotSupportedException(node);
			}
		},
		merge: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_merge_0.apply(this, arguments);
			}
			else if(Type.prototype.merge) {
				return Type.prototype.merge.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameter_0: function() {
			return Type.Any;
		},
		parameter: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_parameter_0.apply(this);
			}
			else if(Type.prototype.parameter) {
				return Type.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code("Any");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return "'Any'";
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassType = Helper.class({
		$name: "ClassType",
		$extends: Type,
		__ks_init_1: function() {
			this._abstract = false;
			this._abstractMethods = {};
			this._alien = false;
			this._anonymous = false;
			this._classMethods = {};
			this._classVariables = {};
			this._constructors = [];
			this._destructors = 0;
			this._extending = false;
			this._instanceMethods = {};
			this._instanceVariables = {};
			this._sealed = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			ClassType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(name, domain) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(domain === void 0 || domain === null) {
				throw new TypeError("'domain' is not nullable");
			}
			else if(!KSType.is(domain, Domain)) {
				throw new TypeError("'domain' is not of type 'Domain'");
			}
			this._name = name;
			this._domain = domain;
		},
		__ks_cons_1: function(name, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			Type.prototype.__ks_cons.call(this, []);
			this._name = name;
			this._domain = new ScopeDomain(scope);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				if(KSType.is(args[1], Domain)) {
					ClassType.prototype.__ks_cons_0.apply(this, args);
				}
				else {
					ClassType.prototype.__ks_cons_1.apply(this, args);
				}
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_abstract_0: function() {
			this._abstract = true;
		},
		abstract: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_abstract_0.apply(this);
			}
			else if(Type.prototype.abstract) {
				return Type.prototype.abstract.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addAbstractMethod_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassMethodType)) {
				throw new TypeError("'type' is not of type 'ClassMethodType'");
			}
			var index = 0;
			if(KSType.isArray(this._abstractMethods[name])) {
				index = this._abstractMethods[name].length;
				this._abstractMethods[name].push(type);
			}
			else {
				this._abstractMethods[name] = [type];
			}
			return index;
		},
		addAbstractMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addAbstractMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.addAbstractMethod) {
				return Type.prototype.addAbstractMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addClassMethod_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassMethodType)) {
				throw new TypeError("'type' is not of type 'ClassMethodType'");
			}
			var index = 0;
			if(KSType.isArray(this._classMethods[name])) {
				index = this._classMethods[name].length;
				this._classMethods[name].push(type);
			}
			else {
				this._classMethods[name] = [type];
			}
			if(type.isSealed()) {
				this._seal.classMethods[name] = true;
			}
			return index;
		},
		addClassMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addClassMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.addClassMethod) {
				return Type.prototype.addClassMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addClassVariable_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassVariableType)) {
				throw new TypeError("'type' is not of type 'ClassVariableType'");
			}
			this._classVariables[name] = type;
		},
		addClassVariable: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addClassVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.addClassVariable) {
				return Type.prototype.addClassVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addConstructor_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassConstructorType)) {
				throw new TypeError("'type' is not of type 'ClassConstructorType'");
			}
			this._constructors.push(type);
		},
		addConstructor: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_addConstructor_0.apply(this, arguments);
			}
			else if(Type.prototype.addConstructor) {
				return Type.prototype.addConstructor.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addDestructor_0: function() {
			this._destructors++;
		},
		addDestructor: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_addDestructor_0.apply(this);
			}
			else if(Type.prototype.addDestructor) {
				return Type.prototype.addDestructor.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addInstanceMethod_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassMethodType)) {
				throw new TypeError("'type' is not of type 'ClassMethodType'");
			}
			var index = 0;
			if(KSType.isArray(this._instanceMethods[name])) {
				index = this._instanceMethods[name].length;
				this._instanceMethods[name].push(type);
			}
			else {
				this._instanceMethods[name] = [type];
			}
			if(type.isSealed()) {
				this._seal.instanceMethods[name] = true;
			}
			return index;
		},
		addInstanceMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.addInstanceMethod) {
				return Type.prototype.addInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addInstanceVariable_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassVariableType)) {
				throw new TypeError("'type' is not of type 'ClassVariableType'");
			}
			this._instanceVariables[name] = type;
		},
		addInstanceVariable: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addInstanceVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.addInstanceVariable) {
				return Type.prototype.addInstanceVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addPropertyFromAST_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks_0 = data.kind;
			if(__ks_0 === NodeKind.FieldDeclaration) {
				throw new NotImplementedException(node);
			}
			else if(__ks_0 === NodeKind.MethodAliasDeclaration) {
				throw new NotImplementedException(node);
			}
			else if(__ks_0 === NodeKind.MethodDeclaration) {
				if(this.isConstructor(data.name.name)) {
					throw new NotImplementedException(node);
				}
				else if(this.isDestructor(data.name.name)) {
					throw new NotImplementedException(node);
				}
				else {
					var instance = true;
					for(var i = 0, __ks_1 = data.modifiers.length; instance && i < __ks_1; ++i) {
						if(data.modifiers[i].kind === ModifierKind.Static) {
							instance = false;
						}
					}
					var type = ClassMethodType.fromAST(data, node);
					if(instance) {
						this.addInstanceMethod(data.name.name, type);
					}
					else {
						this.addClassMethod(data.name.name, type);
					}
				}
			}
			else {
				throw new NotSupportedException("Unexpected kind " + data.kind, node);
			}
		},
		addPropertyFromAST: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addPropertyFromAST_0.apply(this, arguments);
			}
			else if(Type.prototype.addPropertyFromAST) {
				return Type.prototype.addPropertyFromAST.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_alienize_0: function() {
			this._alien = true;
		},
		alienize: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_alienize_0.apply(this);
			}
			else if(Type.prototype.alienize) {
				return Type.prototype.alienize.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_anonymize_0: function() {
			this._anonymous = true;
		},
		anonymize: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_anonymize_0.apply(this);
			}
			else if(Type.prototype.anonymize) {
				return Type.prototype.anonymize.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_destructors_0: function() {
			return this._destructors;
		},
		destructors: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_destructors_0.apply(this);
			}
			else if(Type.prototype.destructors) {
				return Type.prototype.destructors.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			if(KSType.is(b, ReferenceType) || KSType.is(b, ClassType)) {
				return b.name() === this._name;
			}
			else {
				return false;
			}
		},
		equals: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			if(this._anonymous) {
				var __ks_export_1 = {
					alien: this._alien,
					sealed: this._sealed,
					variables: {},
					methods: {}
				};
				for(var name in this._instanceVariables) {
					var variable = this._instanceVariables[name];
					__ks_export_1.variables[name] = variable.export();
				}
				for(var name in this._instanceMethods) {
					var methods = this._instanceMethods[name];
					__ks_export_1.methods[name] = Helper.mapArray(methods, function(method) {
						return method.export();
					});
				}
				return __ks_export_1;
			}
			else {
				var __ks_export_1 = {
					abstract: this._abstract,
					alien: this._alien,
					sealed: this._sealed,
					constructors: Helper.mapArray(this._constructors, function(__ks_constructor_NaN) {
						return __ks_constructor_NaN.export();
					}),
					destructors: this._destructors,
					instanceVariables: {},
					classVariables: {},
					instanceMethods: {},
					classMethods: {}
				};
				for(var name in this._instanceVariables) {
					var variable = this._instanceVariables[name];
					__ks_export_1.instanceVariables[name] = variable.export();
				}
				for(var name in this._classVariables) {
					var variable = this._classVariables[name];
					__ks_export_1.classVariables[name] = variable.export();
				}
				for(var name in this._instanceMethods) {
					var methods = this._instanceMethods[name];
					__ks_export_1.instanceMethods[name] = Helper.mapArray(methods, function(method) {
						return method.export();
					});
				}
				for(var name in this._classMethods) {
					var methods = this._classMethods[name];
					__ks_export_1.classMethods[name] = Helper.mapArray(methods, function(method) {
						return method.export();
					});
				}
				if(this._extending) {
					__ks_export_1.extends = this._extends.reference().export();
				}
				return __ks_export_1;
			}
		},
		export: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_export_0.apply(this);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_extends_0: function() {
			return this._extends;
		},
		__ks_func_extends_1: function(__ks_extends_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_extends_1 === void 0 || __ks_extends_1 === null) {
				throw new TypeError("'extends' is not nullable");
			}
			else if(!KSType.is(__ks_extends_1, ClassType)) {
				throw new TypeError("'extends' is not of type 'ClassType'");
			}
			this._extends = __ks_extends_1;
			this._extending = true;
		},
		extends: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_extends_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_extends_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_filterAbstractMethods_0: function(abstractMethods) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(abstractMethods === void 0 || abstractMethods === null) {
				throw new TypeError("'abstractMethods' is not nullable");
			}
			if(this._extending) {
				this._extends.filterAbstractMethods(abstractMethods);
			}
			if(this._abstract) {
				for(var name in this._abstractMethods) {
					var methods = this._abstractMethods[name];
					if(!KSType.isValue(abstractMethods[name])) {
						abstractMethods[name] = [];
					}
					__ks_Array._im_append(abstractMethods[name], methods);
				}
			}
			var method, index;
			for(var name in abstractMethods) {
				var methods = abstractMethods[name];
				if(KSType.isArray(this._instanceMethods[name])) {
					index = methods.length - 1;
					for(; index >= 0; --index) {
						method = methods[index];
						if(method.isMatched(this._instanceMethods[name])) {
							methods.splice(index, 1);
						}
					}
					if(methods.length === 0) {
						delete abstractMethods[name];
					}
				}
			}
		},
		filterAbstractMethods: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_filterAbstractMethods_0.apply(this, arguments);
			}
			else if(Type.prototype.filterAbstractMethods) {
				return Type.prototype.filterAbstractMethods.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getClassMethods_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._classMethods[name])) {
				return this._classMethods[name];
			}
			return null;
		},
		getClassMethods: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getClassMethods_0.apply(this, arguments);
			}
			else if(Type.prototype.getClassMethods) {
				return Type.prototype.getClassMethods.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getClassProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._classMethods[name])) {
				return this._domain.reference("Function");
			}
			else {
				return KSType.isValue(this._classVariables[name]) ? this._classVariables[name] : Type.Any;
			}
		},
		getClassProperty: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getClassProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getClassProperty) {
				return Type.prototype.getClassProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getHierarchy_0: function() {
			var hierarchy = [this._name];
			var __ks_class_1 = this;
			while(__ks_class_1.isExtending()) {
				hierarchy.push((__ks_class_1 = __ks_class_1.extends()).name());
			}
			return hierarchy;
		},
		getHierarchy: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_getHierarchy_0.apply(this);
			}
			else if(Type.prototype.getHierarchy) {
				return Type.prototype.getHierarchy.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getInstanceMethod_0: function(name, __ks_arguments_1) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._instanceMethods[name][__ks_0];
					if(method.matchArguments(__ks_arguments_1)) {
						return method;
					}
				}
			}
			if(this._extending) {
				return this._extends.getInstanceMethod(name, __ks_arguments_1);
			}
			else {
				return null;
			}
		},
		getInstanceMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_getInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.getInstanceMethod) {
				return Type.prototype.getInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getInstanceMethods_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				return this._instanceMethods[name];
			}
			return null;
		},
		getInstanceMethods: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getInstanceMethods_0.apply(this, arguments);
			}
			else if(Type.prototype.getInstanceMethods) {
				return Type.prototype.getInstanceMethods.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getInstanceProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				throw new NotImplementedException();
			}
			else if(KSType.is(this._instanceVariables[name], ClassVariableType)) {
				return this._instanceVariables[name];
			}
			else {
				return Type.Any;
			}
		},
		getInstanceProperty: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getInstanceProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getInstanceProperty) {
				return Type.prototype.getInstanceProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getInstanceVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isValue(this._instanceVariables[name])) {
				return this._instanceVariables[name];
			}
			else if(this._extending) {
				return this._extends.getInstanceVariable(name);
			}
			return null;
		},
		getInstanceVariable: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getInstanceVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.getInstanceVariable) {
				return Type.prototype.getInstanceVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getMissingAbstractMethods_0: function() {
			var abstractMethods = {};
			if(this._extending) {
				this._extends.filterAbstractMethods(abstractMethods);
			}
			var method, index;
			for(var name in abstractMethods) {
				var methods = abstractMethods[name];
				if(KSType.isArray(this._instanceMethods[name])) {
					index = methods.length - 1;
					for(; index >= 0; --index) {
						method = methods[index];
						if(method.isMatched(this._instanceMethods[name])) {
							methods.splice(index, 1);
						}
					}
					if(methods.length === 0) {
						delete abstractMethods[name];
					}
				}
			}
			return Object.keys(abstractMethods);
		},
		getMissingAbstractMethods: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_getMissingAbstractMethods_0.apply(this);
			}
			else if(Type.prototype.getMissingAbstractMethods) {
				return Type.prototype.getMissingAbstractMethods.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this.getClassProperty(name);
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getPropertyGetter_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._instanceMethods[name][__ks_0];
					if((method.min() === 0) && (method.max() === 0)) {
						return method.returnType();
					}
				}
			}
			else if(this._extending) {
				return this._extends.getPropertyGetter(name);
			}
			return null;
		},
		getPropertyGetter: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getPropertyGetter_0.apply(this, arguments);
			}
			else if(Type.prototype.getPropertyGetter) {
				return Type.prototype.getPropertyGetter.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getPropertySetter_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				for(var __ks_0 = 0, __ks_1 = this._instanceMethods[name].length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = this._instanceMethods[name][__ks_0];
					if((method.min() === 1) && (method.max() === 1)) {
						return method.parameter(0).type();
					}
				}
			}
			else if(this._extending) {
				return this._extends.getPropertySetter(name);
			}
			return null;
		},
		getPropertySetter: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getPropertySetter_0.apply(this, arguments);
			}
			else if(Type.prototype.getPropertySetter) {
				return Type.prototype.getPropertySetter.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getSealedPath_0: function() {
			if(KSType.isValue(this._namespace)) {
				return this._namespace.path() + "." + this._seal.name;
			}
			else {
				return this._seal.name;
			}
		},
		getSealedPath: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_getSealedPath_0.apply(this);
			}
			else if(Type.prototype.getSealedPath) {
				return Type.prototype.getSealedPath.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasClassMethod_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isArray(this._classMethods[name])) {
				return true;
			}
			if(this._extending) {
				return this._extends.hasClassMethod(name);
			}
			else {
				return false;
			}
		},
		hasClassMethod: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_hasClassMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.hasClassMethod) {
				return Type.prototype.hasClassMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasConstructors_0: function() {
			return this._constructors.length !== 0;
		},
		hasConstructors: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_hasConstructors_0.apply(this);
			}
			else if(Type.prototype.hasConstructors) {
				return Type.prototype.hasConstructors.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasDestructors_0: function() {
			return this._destructors !== 0;
		},
		hasDestructors: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_hasDestructors_0.apply(this);
			}
			else if(Type.prototype.hasDestructors) {
				return Type.prototype.hasDestructors.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasInstanceMethod_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				return true;
			}
			if(this._extending) {
				return this._extends.hasInstanceMethod(name);
			}
			else {
				return false;
			}
		},
		hasInstanceMethod: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_hasInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.hasInstanceMethod) {
				return Type.prototype.hasInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasInstanceVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.is(this._instanceVariables[name], ClassVariableType)) {
				return true;
			}
			if(this._extending) {
				return this._extends.hasInstanceVariable(name);
			}
			else {
				return false;
			}
		},
		hasInstanceVariable: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_hasInstanceVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.hasInstanceVariable) {
				return Type.prototype.hasInstanceVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAbstract_0: function() {
			return this._abstract;
		},
		isAbstract: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isAbstract_0.apply(this);
			}
			else if(Type.prototype.isAbstract) {
				return Type.prototype.isAbstract.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAlien_0: function() {
			return this._alien;
		},
		isAlien: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isAlien_0.apply(this);
			}
			else if(Type.prototype.isAlien) {
				return Type.prototype.isAlien.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAnonymous_0: function() {
			return this._anonymous;
		},
		isAnonymous: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isAnonymous_0.apply(this);
			}
			return Type.prototype.isAnonymous.apply(this, arguments);
		},
		__ks_func_isConstructor_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return name === "constructor";
		},
		isConstructor: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isConstructor_0.apply(this, arguments);
			}
			else if(Type.prototype.isConstructor) {
				return Type.prototype.isConstructor.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isDestructor_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return name === "destructor";
		},
		isDestructor: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isDestructor_0.apply(this, arguments);
			}
			else if(Type.prototype.isDestructor) {
				return Type.prototype.isDestructor.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExtendable_0: function() {
			return !this._anonymous;
		},
		isExtendable: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isExtendable_0.apply(this);
			}
			return Type.prototype.isExtendable.apply(this, arguments);
		},
		__ks_func_isExtending_0: function() {
			return this._extending;
		},
		isExtending: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isExtending_0.apply(this);
			}
			else if(Type.prototype.isExtending) {
				return Type.prototype.isExtending.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isFlexible_0: function() {
			return true;
		},
		isFlexible: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isFlexible_0.apply(this);
			}
			return Type.prototype.isFlexible.apply(this, arguments);
		},
		__ks_func_isSealed_0: function() {
			return this._sealed;
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isSealed_0.apply(this);
			}
			return Type.prototype.isSealed.apply(this, arguments);
		},
		__ks_func_isSealedAlien_0: function() {
			return this._alien && this._sealed;
		},
		isSealedAlien: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isSealedAlien_0.apply(this);
			}
			else if(Type.prototype.isSealedAlien) {
				return Type.prototype.isSealedAlien.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_match_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			if(this._name === b.name()) {
				return true;
			}
			else if(b.isExtending()) {
				return this.match(b.extends());
			}
			else {
				return false;
			}
		},
		match: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_match_0.apply(this, arguments);
			}
			else if(Type.prototype.match) {
				return Type.prototype.match.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_merge_0: function(type, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(!KSType.is(type, ClassType)) {
				throw new NotSupportedException(node);
			}
			for(var __ks_0 = 0, __ks_1 = type._constructors.length, __ks_constructor_NaN; __ks_0 < __ks_1; ++__ks_0) {
				__ks_constructor_NaN = type._constructors[__ks_0];
				this.addConstructor(__ks_constructor_NaN);
			}
			for(var name in type._instanceMethods) {
				var methods = type._instanceMethods[name];
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					this.addInstanceMethod(name, method);
				}
			}
			for(var name in type._classMethods) {
				var methods = type._classMethods[name];
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					this.addClassMethod(name, method);
				}
			}
		},
		merge: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_merge_0.apply(this, arguments);
			}
			else if(Type.prototype.merge) {
				return Type.prototype.merge.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_name_0.apply(this);
			}
			else if(Type.prototype.name) {
				return Type.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_namespace_0: function() {
			return this._namespace;
		},
		__ks_func_namespace_1: function(namespace) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(namespace === void 0 || namespace === null) {
				throw new TypeError("'namespace' is not nullable");
			}
			else if(!KSType.is(namespace, ReferenceType)) {
				throw new TypeError("'namespace' is not of type 'ReferenceType'");
			}
			this._namespace = namespace;
			return this;
		},
		namespace: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_namespace_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_namespace_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reference_0: function() {
			return new ReferenceType(this, this._domain);
		},
		reference: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_reference_0.apply(this);
			}
			else if(Type.prototype.reference) {
				return Type.prototype.reference.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_seal_0: function() {
			this._sealed = true;
			this._seal = {
				name: "__ks_" + this._name,
				constructors: false,
				instanceMethods: {},
				classMethods: {}
			};
		},
		seal: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_seal_0.apply(this);
			}
			else if(Type.prototype.seal) {
				return Type.prototype.seal.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_sealName_0: function() {
			return this._seal.name;
		},
		sealName: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_sealName_0.apply(this);
			}
			else if(Type.prototype.sealName) {
				return Type.prototype.sealName.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			throw new NotImplementedException();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var EnumType = Helper.class({
		$name: "EnumType",
		$extends: Type,
		__ks_init_1: function() {
			this._elements = [];
			this._index = -1;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			EnumType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var kind;
			if(arguments.length > 2 && (kind = arguments[++__ks_i]) !== void 0 && kind !== null) {
				if(!KSType.is(kind, EnumKind)) {
					throw new TypeError("'kind' is not of type 'EnumKind'");
				}
			}
			else {
				kind = EnumKind.Number;
			}
			var domain = arguments[++__ks_i];
			if(domain === void 0 || domain === null) {
				throw new TypeError("'domain' is not nullable");
			}
			else if(!KSType.is(domain, Domain)) {
				throw new TypeError("'domain' is not of type 'Domain'");
			}
			Type.prototype.__ks_cons.call(this, []);
			this._name = name;
			this._kind = kind;
			if(this._kind === EnumKind.String) {
				this._type = domain.reference("String");
			}
			else {
				this._type = domain.reference("Number");
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				EnumType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_addElement_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			this._elements.push(name);
		},
		addElement: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_addElement_0.apply(this, arguments);
			}
			else if(Type.prototype.addElement) {
				return Type.prototype.addElement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			throw new NotImplementedException();
		},
		equals: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			return {
				elements: this._elements,
				index: this._index,
				kind: this._kind
			};
		},
		export: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_export_0.apply(this);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_index_0: function() {
			return this._index;
		},
		__ks_func_index_1: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			this._index = index;
		},
		index: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_index_0.apply(this);
			}
			else if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_index_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_kind_0: function() {
			return this._kind;
		},
		kind: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_kind_0.apply(this);
			}
			else if(Type.prototype.kind) {
				return Type.prototype.kind.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_step_0: function() {
			this._index++;
			return this;
		},
		step: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_step_0.apply(this);
			}
			else if(Type.prototype.step) {
				return Type.prototype.step.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			throw new NotImplementedException();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return EnumType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return EnumType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_type_0.apply(this);
			}
			else if(Type.prototype.type) {
				return Type.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var FunctionType = Helper.class({
		$name: "FunctionType",
		$extends: Type,
		__ks_init_1: function() {
			this._async = false;
			this._hasRest = false;
			this._max = 0;
			this._maxBefore = 0;
			this._maxAfter = 0;
			this._min = 0;
			this._minBefore = 0;
			this._minAfter = 0;
			this._parameters = [];
			this._restIndex = -1;
			this._throws = [];
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			FunctionType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
		},
		__ks_cons_1: function(parameters, data, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			else if(!KSType.isArray(parameters, ParameterType)) {
				throw new TypeError("'parameters' is not of type 'Array'");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Type.prototype.__ks_cons.call(this, []);
			this._returnType = Type.fromAST(data.type, node);
			var last = null;
			for(var __ks_0 = 0, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				if((last === null) || !parameter._type.equals(last._type)) {
					if(last !== null) {
						if(last._max === Infinity) {
							if(this._max === Infinity) {
								SyntaxException.throwTooMuchRestParameter(node);
							}
							else {
								this._max = Infinity;
							}
						}
						else {
							this._max += last._max;
						}
						this._min += last._min;
					}
					this._parameters.push(last = parameter.clone());
				}
				else {
					if(parameter._max === Infinity) {
						last._max = Infinity;
					}
					else {
						last._max += parameter._max;
					}
					last._min += parameter._min;
				}
			}
			if(last !== null) {
				if(last._max === Infinity) {
					if(this._max === Infinity) {
						SyntaxException.throwTooMuchRestParameter(node);
					}
					else {
						this._max = Infinity;
					}
				}
				else {
					this._max += last._max;
				}
				this._min += last._min;
			}
			this.processModifiers(data.modifiers);
			if(KSType.isValue(data.throws)) {
				var type;
				for(var __ks_0 = 0, __ks_1 = data.throws.length, __ks_throw_1; __ks_0 < __ks_1; ++__ks_0) {
					__ks_throw_1 = data.throws[__ks_0];
					if(KSType.is(type = Type.fromAST(__ks_throw_1, node), ClassType)) {
						this._throws.push(type);
					}
					else {
						TypeException.throwNotClass(__ks_throw_1.name, node);
					}
				}
			}
			this.updateArguments();
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				FunctionType.prototype.__ks_cons_0.apply(this);
			}
			else if(args.length === 3) {
				FunctionType.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_absoluteMax_0: function() {
			return this._async ? this._max + 1 : this._max;
		},
		absoluteMax: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_absoluteMax_0.apply(this);
			}
			else if(Type.prototype.absoluteMax) {
				return Type.prototype.absoluteMax.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_absoluteMin_0: function() {
			return this._async ? this._min + 1 : this._min;
		},
		absoluteMin: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_absoluteMin_0.apply(this);
			}
			else if(Type.prototype.absoluteMin) {
				return Type.prototype.absoluteMin.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_async_0: function() {
			this._async = true;
		},
		async: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_async_0.apply(this);
			}
			else if(Type.prototype.async) {
				return Type.prototype.async.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			if(KSType.is(b, ReferenceType)) {
				return b.name() === "Function";
			}
			throw new NotImplementedException();
		},
		equals: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			return {
				async: this._async,
				min: this._min,
				max: this._max,
				parameters: Helper.mapArray(this._parameters, function(parameter) {
					return parameter.export();
				}),
				returns: this._returnType.export(),
				throws: Helper.mapArray(this._throws, function(__ks_throw_1) {
					return __ks_throw_1.export();
				})
			};
		},
		export: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_export_0.apply(this);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return Type.Any;
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_index_0: function() {
			return this._index;
		},
		__ks_func_index_1: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			this._index = index;
			return this;
		},
		index: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_index_0.apply(this);
			}
			else if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_index_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAsync_0: function() {
			return this._async;
		},
		isAsync: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_isAsync_0.apply(this);
			}
			else if(Type.prototype.isAsync) {
				return Type.prototype.isAsync.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isCatchingError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._throws.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._throws[__ks_0];
				if(type.match(error)) {
					return true;
				}
			}
			return false;
		},
		isCatchingError: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_isCatchingError_0.apply(this, arguments);
			}
			else if(Type.prototype.isCatchingError) {
				return Type.prototype.isCatchingError.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchArguments_0: function(__ks_arguments_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1, Type)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if((this._min > __ks_arguments_1.length) || (__ks_arguments_1.length > this._max)) {
				return false;
			}
			if(__ks_arguments_1.length === 0) {
				return true;
			}
			else if(this._parameters.length === 1) {
				var parameter = this._parameters[0];
				for(var __ks_0 = 0, __ks_1 = __ks_arguments_1.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = __ks_arguments_1[__ks_0];
					if(!parameter.matchArgument(argument)) {
						return false;
					}
				}
				return true;
			}
			else if(this._hasRest) {
				var a = 0;
				var b = __ks_arguments_1.length - 1;
				for(var i = this._parameters.length - 1, __ks_0 = this._restIndex; i > __ks_0; --i) {
					var parameter = this._parameters[i];
					for(var j = 0, __ks_1 = parameter.min(); j < __ks_1; ++j) {
						if(!parameter.matchArgument(__ks_arguments_1[b])) {
							return false;
						}
						--b;
					}
				}
				var optional = this._maxBefore - this._minBefore;
				for(var i = 0, __ks_0 = this._restIndex; i < __ks_0; ++i) {
					var parameter = this._parameters[i];
					for(var j = 0, __ks_1 = parameter.min(); j < __ks_1; ++j) {
						if(!parameter.matchArgument(__ks_arguments_1[a])) {
							return false;
						}
						++a;
					}
					for(var j = parameter.min(), __ks_1 = parameter.max(); optional !== 0 && j < __ks_1; ++j) {
						if(parameter.matchArgument(__ks_arguments_1[a])) {
							++a;
							--optional;
						}
					}
				}
				var parameter = this._parameters[this._restIndex];
				for(var j = 0, __ks_0 = parameter.min(); j < __ks_0; ++j) {
					if(!parameter.matchArgument(__ks_arguments_1[a])) {
						return false;
					}
					++a;
				}
				return true;
			}
			else if(__ks_arguments_1.length === this._parameters.length) {
				for(var i = 0, __ks_0 = this._parameters.length, parameter; i < __ks_0; ++i) {
					parameter = this._parameters[i];
					if(!parameter.matchArgument(__ks_arguments_1[i])) {
						return false;
					}
				}
				return true;
			}
			else if(__ks_arguments_1.length === this._max) {
				var a = -1;
				var p;
				for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					var __ks_2;
					for(p = 0, __ks_2 = parameter.max(); p < __ks_2; ++p) {
						if(!parameter.matchArgument(__ks_arguments_1[++a])) {
							return false;
						}
					}
				}
				return true;
			}
			else {
				var a = 0;
				var optional = __ks_arguments_1.length - this._min;
				for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					for(var i = 0, __ks_2 = parameter.min(); i < __ks_2; ++i) {
						if(!parameter.matchArgument(__ks_arguments_1[a])) {
							return false;
						}
						++a;
					}
					for(var i = parameter.min(), __ks_2 = parameter.max(); optional > 0 && i < __ks_2; ++i) {
						if(parameter.matchArgument(__ks_arguments_1[a])) {
							++a;
							--optional;
						}
					}
				}
				return optional === 0;
			}
		},
		matchArguments: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_matchArguments_0.apply(this, arguments);
			}
			else if(Type.prototype.matchArguments) {
				return Type.prototype.matchArguments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_max_0: function() {
			return this._max;
		},
		max: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_max_0.apply(this);
			}
			else if(Type.prototype.max) {
				return Type.prototype.max.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_min_0: function() {
			return this._min;
		},
		min: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_min_0.apply(this);
			}
			else if(Type.prototype.min) {
				return Type.prototype.min.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameter_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			return this._parameters[index];
		},
		parameter: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_parameter_0.apply(this, arguments);
			}
			else if(Type.prototype.parameter) {
				return Type.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Type.prototype.parameters) {
				return Type.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_processModifiers_0: function(modifiers) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(modifier.kind === ModifierKind.Async) {
					this._async = true;
				}
			}
		},
		processModifiers: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_processModifiers_0.apply(this, arguments);
			}
			else if(Type.prototype.processModifiers) {
				return Type.prototype.processModifiers.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_returnType_0: function() {
			return this._returnType;
		},
		returnType: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_returnType_0.apply(this);
			}
			else if(Type.prototype.returnType) {
				return Type.prototype.returnType.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_throws_0: function() {
			return this._throws;
		},
		throws: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_throws_0.apply(this);
			}
			else if(Type.prototype.throws) {
				return Type.prototype.throws.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FunctionType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			throw new NotImplementedException();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return FunctionType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_updateArguments_0: function() {
			for(var i = 0, __ks_0 = this._parameters.length, parameter; i < __ks_0; ++i) {
				parameter = this._parameters[i];
				if(this._hasRest) {
					this._minAfter += parameter.min();
					this._maxAfter += parameter.max();
				}
				else if(parameter.max() === Infinity) {
					this._restIndex = i;
					this._hasRest = true;
				}
				else {
					this._minBefore += parameter.min();
					this._maxBefore += parameter.max();
				}
			}
		},
		updateArguments: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_updateArguments_0.apply(this);
			}
			else if(Type.prototype.updateArguments) {
				return Type.prototype.updateArguments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var NamespaceType = Helper.class({
		$name: "NamespaceType",
		$extends: Type,
		__ks_init_1: function() {
			this._properties = {};
			this._sealed = false;
			this._sealProperties = {};
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			NamespaceType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(name, domain) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(domain === void 0 || domain === null) {
				throw new TypeError("'domain' is not nullable");
			}
			else if(!KSType.is(domain, Domain)) {
				throw new TypeError("'domain' is not of type 'Domain'");
			}
			this._name = name;
			this._domain = domain;
		},
		__ks_cons_1: function(name, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			Type.prototype.__ks_cons.call(this, []);
			this._name = name;
			this._domain = new ScopeDomain(scope);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				if(KSType.is(args[1], Domain)) {
					NamespaceType.prototype.__ks_cons_0.apply(this, args);
				}
				else {
					NamespaceType.prototype.__ks_cons_1.apply(this, args);
				}
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_addProperty_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._properties[name] = type;
			if(this._sealed) {
				this._sealProperties[name] = true;
				type.seal();
			}
		},
		addProperty: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_addProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.addProperty) {
				return Type.prototype.addProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addPropertyFromAST_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var type;
			if(data.kind === NodeKind.VariableDeclarator) {
				type = NamespaceVariableType.fromAST(data, node);
			}
			else if(data.kind === NodeKind.FunctionDeclaration) {
				type = NamespaceFunctionType.fromAST(data, node);
			}
			else {
				throw new NotSupportedException(node);
			}
			this._properties[data.name.name] = type;
			if(type.isSealed()) {
				this._sealProperties[data.name.name] = true;
			}
		},
		addPropertyFromAST: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_addPropertyFromAST_0.apply(this, arguments);
			}
			else if(Type.prototype.addPropertyFromAST) {
				return Type.prototype.addPropertyFromAST.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addPropertyFromMetadata_0: function(name, data, domain, node) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(domain === void 0 || domain === null) {
				throw new TypeError("'domain' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var type;
			if(KSType.isString(data)) {
				type = NamespaceVariableType.import(data, domain, node);
			}
			else if(KSType.isValue(data.parameters)) {
				type = NamespaceFunctionType.import(data, domain, node);
			}
			else {
				type = NamespaceVariableType.import(data, domain, node);
			}
			this._properties[name] = type;
			if(type.isSealed()) {
				this._sealProperties[name] = true;
			}
		},
		addPropertyFromMetadata: function() {
			if(arguments.length === 4) {
				return NamespaceType.prototype.__ks_func_addPropertyFromMetadata_0.apply(this, arguments);
			}
			else if(Type.prototype.addPropertyFromMetadata) {
				return Type.prototype.addPropertyFromMetadata.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			throw new NotImplementedException();
		},
		equals: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			var __ks_export_1 = {
				sealed: this._sealed,
				properties: {}
			};
			for(var name in this._properties) {
				var value = this._properties[name];
				__ks_export_1.properties[name] = value.export();
			}
			return __ks_export_1;
		},
		export: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_export_0.apply(this);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isValue(this._properties[name]) ? this._properties[name] : null;
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExtendable_0: function() {
			return true;
		},
		isExtendable: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_isExtendable_0.apply(this);
			}
			return Type.prototype.isExtendable.apply(this, arguments);
		},
		__ks_func_isFlexible_0: function() {
			return this._sealed;
		},
		isFlexible: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_isFlexible_0.apply(this);
			}
			return Type.prototype.isFlexible.apply(this, arguments);
		},
		__ks_func_isSealed_0: function() {
			return this._sealed;
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_isSealed_0.apply(this);
			}
			return Type.prototype.isSealed.apply(this, arguments);
		},
		__ks_func_isSealedProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._sealed && (this._sealProperties[name] === true);
		},
		isSealedProperty: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_isSealedProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.isSealedProperty) {
				return Type.prototype.isSealedProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_name_0.apply(this);
			}
			else if(Type.prototype.name) {
				return Type.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_namespace_0: function() {
			return this._namespace;
		},
		__ks_func_namespace_1: function(namespace) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(namespace === void 0 || namespace === null) {
				throw new TypeError("'namespace' is not nullable");
			}
			else if(!KSType.is(namespace, ReferenceType)) {
				throw new TypeError("'namespace' is not of type 'ReferenceType'");
			}
			this._namespace = namespace;
			return this;
		},
		namespace: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_namespace_0.apply(this);
			}
			else if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_namespace_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reference_0: function() {
			return new ReferenceType(this, this._domain);
		},
		reference: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_reference_0.apply(this);
			}
			else if(Type.prototype.reference) {
				return Type.prototype.reference.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_seal_0: function() {
			this._sealed = true;
			this._sealName = "__ks_" + this._name;
		},
		seal: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_seal_0.apply(this);
			}
			else if(Type.prototype.seal) {
				return Type.prototype.seal.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_sealName_0: function() {
			return this._sealName;
		},
		sealName: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_sealName_0.apply(this);
			}
			else if(Type.prototype.sealName) {
				return Type.prototype.sealName.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			throw new NotImplementedException();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ParameterType = Helper.class({
		$name: "ParameterType",
		$extends: Type,
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var type = arguments[++__ks_i];
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			var min;
			if(arguments.length > 1 && (min = arguments[++__ks_i]) !== void 0 && min !== null) {
				if(!KSType.isNumber(min)) {
					throw new TypeError("'min' is not of type 'Number'");
				}
			}
			else {
				min = 1;
			}
			var max;
			if(arguments.length > 2 && (max = arguments[++__ks_i]) !== void 0 && max !== null) {
				if(!KSType.isNumber(max)) {
					throw new TypeError("'max' is not of type 'Number'");
				}
			}
			else {
				max = 1;
			}
			this._type = type;
			this._min = min;
			this._max = max;
		},
		__ks_cons: function(args) {
			if(args.length >= 1 && args.length <= 3) {
				ParameterType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			return new ParameterType(this._type, this._min, this._max);
		},
		clone: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			throw new NotImplementedException();
		},
		equals: function() {
			if(arguments.length === 1) {
				return ParameterType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			return {
				type: this._type.export(),
				min: this._min,
				max: this._max
			};
		},
		export: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_export_0.apply(this);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAny_0: function() {
			return this._type.isAny();
		},
		isAny: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_isAny_0.apply(this);
			}
			return Type.prototype.isAny.apply(this, arguments);
		},
		__ks_func_match_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			else if(!KSType.is(b, ParameterType)) {
				throw new TypeError("'b' is not of type 'ParameterType'");
			}
			if((this._min !== b._min) || (this._max !== b._max)) {
				return false;
			}
			return this._type.match(b._type);
		},
		match: function() {
			if(arguments.length === 1) {
				return ParameterType.prototype.__ks_func_match_0.apply(this, arguments);
			}
			else if(Type.prototype.match) {
				return Type.prototype.match.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchArgument_0: function(argument) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(argument === void 0 || argument === null) {
				throw new TypeError("'argument' is not nullable");
			}
			else if(!KSType.is(argument, Type)) {
				throw new TypeError("'argument' is not of type 'Type'");
			}
			if(this._type.isAny() || this._type.equals(argument)) {
				return true;
			}
			return false;
		},
		matchArgument: function() {
			if(arguments.length === 1) {
				return ParameterType.prototype.__ks_func_matchArgument_0.apply(this, arguments);
			}
			else if(Type.prototype.matchArgument) {
				return Type.prototype.matchArgument.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_max_0: function() {
			return this._max;
		},
		max: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_max_0.apply(this);
			}
			else if(Type.prototype.max) {
				return Type.prototype.max.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_min_0: function() {
			return this._min;
		},
		min: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_min_0.apply(this);
			}
			else if(Type.prototype.min) {
				return Type.prototype.min.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ParameterType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return this._type.toQuote();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._type.toTestFragments(fragments, node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ParameterType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_type_0.apply(this);
			}
			else if(Type.prototype.type) {
				return Type.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ReferenceType = Helper.class({
		$name: "ReferenceType",
		$extends: Type,
		__ks_init_1: function() {
			this._nullable = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			ReferenceType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			Type.prototype.__ks_cons.call(this, []);
			this._name = "Any";
			this._parameters = [];
		},
		__ks_cons_1: function(type, domain) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(domain === void 0 || domain === null) {
				throw new TypeError("'domain' is not nullable");
			}
			else if(!KSType.is(domain, Domain)) {
				throw new TypeError("'domain' is not of type 'Domain'");
			}
			Type.prototype.__ks_cons.call(this, []);
			this._domain = domain;
			this._namespace = type.namespace();
			this._name = type.name();
			this._parameters = [];
		},
		__ks_cons_2: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var nullable;
			if(arguments.length > 2 && (nullable = arguments[++__ks_i]) !== void 0 && nullable !== null) {
				if(!KSType.isBoolean(nullable)) {
					throw new TypeError("'nullable' is not of type 'Boolean'");
				}
			}
			else {
				nullable = false;
			}
			var parameters;
			if(arguments.length > 3 && (parameters = arguments[++__ks_i]) !== void 0 && parameters !== null) {
				if(!KSType.isArray(parameters)) {
					throw new TypeError("'parameters' is not of type 'Array'");
				}
			}
			else {
				parameters = [];
			}
			var domain = arguments[++__ks_i];
			if(domain === void 0 || domain === null) {
				throw new TypeError("'domain' is not nullable");
			}
			else if(!KSType.is(domain, Domain)) {
				throw new TypeError("'domain' is not of type 'Domain'");
			}
			Type.prototype.__ks_cons.call(this, []);
			this._nullable = nullable;
			this._parameters = parameters;
			this._domain = domain;
			this._name = KSType.isValue($types[name]) ? $types[name] : name;
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				ReferenceType.prototype.__ks_cons_0.apply(this);
			}
			else if(args.length === 2) {
				if(KSType.is(args[0], Type)) {
					ReferenceType.prototype.__ks_cons_1.apply(this, args);
				}
				else {
					ReferenceType.prototype.__ks_cons_2.apply(this, args);
				}
			}
			else if(args.length === 3 || args.length === 4) {
				ReferenceType.prototype.__ks_cons_2.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_dereference_0: function() {
			var variable, __ks_0;
			if(this._name === "Any") {
				return null;
			}
			else if(KSType.isValue(this._namespace)) {
				return this._namespace.getProperty(this._name);
			}
			else if(KSType.isValue(__ks_0 = this._domain.getVariable(this._name)) ? (variable = __ks_0, true) : false) {
				return variable.dereference();
			}
			return null;
		},
		dereference: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_dereference_0.apply(this);
			}
			return Type.prototype.dereference.apply(this, arguments);
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			if(!KSType.is(b, ReferenceType)) {
				return b.equals(this);
			}
			if((this._name !== b._name) || (this._nullable !== b._nullable) || (this._parameters.length !== b._parameters.length)) {
				return false;
			}
			return true;
		},
		equals: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			var type, __ks_0;
			if((KSType.isValue(__ks_0 = this.dereference()) ? (type = __ks_0, true) : false) && KSType.is(type, ClassType) && type.isAnonymous()) {
				return type.export();
			}
			else if(this._nullable) {
				return {
					nullable: this._nullable,
					name: this._name
				};
			}
			else {
				return this._name;
			}
		},
		export: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_export_0.apply(this);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var type, __ks_0;
			if(KSType.isValue(__ks_0 = this.dereference()) ? (type = __ks_0, true) : false) {
				if(KSType.is(type, ClassType)) {
					return type.getInstanceProperty(name);
				}
				else {
					return type.getProperty(name);
				}
			}
			else {
				return Type.Any;
			}
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hashCode_0: function() {
			var hash = this._name;
			if(this._parameters.length !== 0) {
				hash += "<";
				for(var i = 0, __ks_0 = this._parameters.length, parameter; i < __ks_0; ++i) {
					parameter = this._parameters[i];
					if(i) {
						hash += ",";
					}
					hash += parameter.hashCode();
				}
				hash += ">";
			}
			if(this._nullable) {
				hash += "?";
			}
			return hash;
		},
		hashCode: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_hashCode_0.apply(this);
			}
			else if(Type.prototype.hashCode) {
				return Type.prototype.hashCode.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAny_0: function() {
			return this._name === "Any";
		},
		isAny: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isAny_0.apply(this);
			}
			return Type.prototype.isAny.apply(this, arguments);
		},
		__ks_func_isArray_0: function() {
			return this._name === "Array";
		},
		isArray: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isArray_0.apply(this);
			}
			return Type.prototype.isArray.apply(this, arguments);
		},
		__ks_func_isInstanceOf_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.is(target, AnyType)) {
				throw new TypeError("'target' is not of type 'AnyType'");
			}
			return true;
		},
		__ks_func_isInstanceOf_1: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.is(target, ReferenceType)) {
				throw new TypeError("'target' is not of type 'ReferenceType'");
			}
			if((this._name === target._name) || target.isAny()) {
				return true;
			}
			var __ks_class_1 = this.unalias();
			if(KSType.is(__ks_class_1, ClassType)) {
				return __ks_class_1.isInstanceOf(target);
			}
			return false;
		},
		isInstanceOf: function() {
			if(arguments.length === 1) {
				if(KSType.is(arguments[0], AnyType)) {
					return ReferenceType.prototype.__ks_func_isInstanceOf_0.apply(this, arguments);
				}
				else {
					return ReferenceType.prototype.__ks_func_isInstanceOf_1.apply(this, arguments);
				}
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Type.prototype.isNullable) {
				return Type.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNumber_0: function() {
			return this._name === "Number";
		},
		isNumber: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isNumber_0.apply(this);
			}
			return Type.prototype.isNumber.apply(this, arguments);
		},
		__ks_func_isString_0: function() {
			return this._name === "String";
		},
		isString: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isString_0.apply(this);
			}
			return Type.prototype.isString.apply(this, arguments);
		},
		__ks_func_match_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			else if(!KSType.is(b, Type)) {
				throw new TypeError("'b' is not of type 'Type'");
			}
			if(b.isAny()) {
				return this.isAny();
			}
			else if(this._nullable === b._nullable) {
				var a = this.unalias();
				b = b.unalias();
				if(KSType.is(a, ReferenceType)) {
					if(KSType.is(b, ReferenceType)) {
						return a._name === b._name;
					}
					else {
						return false;
					}
				}
				else {
					return a === b;
				}
			}
			else {
				return false;
			}
		},
		match: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_match_0.apply(this, arguments);
			}
			else if(Type.prototype.match) {
				return Type.prototype.match.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_name_0.apply(this);
			}
			else if(Type.prototype.name) {
				return Type.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_namespace_0: function() {
			return this._namespace;
		},
		__ks_func_namespace_1: function(namespace) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(namespace === void 0 || namespace === null) {
				throw new TypeError("'namespace' is not nullable");
			}
			else if(!KSType.is(namespace, ReferenceType)) {
				throw new TypeError("'namespace' is not of type 'ReferenceType'");
			}
			this._namespace = namespace;
			return this;
		},
		namespace: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_namespace_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_namespace_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameter_0: function(index) {
			if(index === void 0 || index === null) {
				index = 0;
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			if(index >= this._parameters.length) {
				return Type.Any;
			}
			else {
				return this._parameters[index];
			}
		},
		parameter: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ReferenceType.prototype.__ks_func_parameter_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Type.prototype.parameters) {
				return Type.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_path_0: function() {
			if(KSType.isValue(this._namespace)) {
				return this._namespace.path() + "." + this._name;
			}
			else {
				return this._name;
			}
		},
		path: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_path_0.apply(this);
			}
			else if(Type.prototype.path) {
				return Type.prototype.path.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reference_0: function() {
			return this;
		},
		reference: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_reference_0.apply(this);
			}
			else if(Type.prototype.reference) {
				return Type.prototype.reference.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code(this._name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return "'" + this._name + "'";
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var variable, __ks_0;
			if((KSType.isValue(__ks_0 = node.scope().getVariable(this._name)) ? (variable = __ks_0, true) : false) && KSType.is(variable.type(), AliasType)) {
				variable.type().toTestFragments(fragments, node);
			}
			else {
				var tof;
				if(KSType.isValue(__ks_0 = $runtime.typeof(this._name, node)) ? (tof = __ks_0, true) : false) {
					fragments.code("" + tof + "(").compile(node);
				}
				else {
					fragments.code("" + $runtime.type(node) + ".is(").compile(node).code(", " + this._name);
				}
				for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					fragments.code($comma);
					parameter.toFragments(fragments, node);
				}
				fragments.code(")");
			}
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_unalias_0: function() {
			var __ks_0;
			return KSType.isValue(__ks_0 = this.dereference()) ? __ks_0 : this;
		},
		unalias: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_unalias_0.apply(this);
			}
			return Type.prototype.unalias.apply(this, arguments);
		}
	});
	var UnionType = Helper.class({
		$name: "UnionType",
		$extends: Type,
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(types) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(types === void 0 || types === null) {
				throw new TypeError("'types' is not nullable");
			}
			else if(!KSType.isArray(types)) {
				throw new TypeError("'types' is not of type 'Array'");
			}
			this._types = types;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				UnionType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Type.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_addType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			throw new NotImplementedException();
		},
		addType: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_addType_0.apply(this, arguments);
			}
			else if(Type.prototype.addType) {
				return Type.prototype.addType.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			if(!KSType.isValue(b) || !KSType.is(b, UnionType) || (this._types.length !== b._types.length)) {
				return false;
			}
			var match = 0;
			for(var __ks_0 = 0, __ks_1 = this._types.length, aType; __ks_0 < __ks_1; ++__ks_0) {
				aType = this._types[__ks_0];
				for(var __ks_2 = 0, __ks_3 = b._types.length, bType; __ks_2 < __ks_3; ++__ks_2) {
					bType = b._types[__ks_2];
					if(aType.equals(bType)) {
						match++;
						break;
					}
				}
			}
			return match === this._types.length;
		},
		equals: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			return Helper.mapArray(this._types, function(type) {
				return type.export();
			});
		},
		export: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_export_0.apply(this);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._types.length, type; __ks_0 < __ks_1; ++__ks_0) {
				type = this._types[__ks_0];
				if(type.isNullable()) {
					return true;
				}
			}
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Type.prototype.isNullable) {
				return Type.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnionType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			var elements = Helper.mapArray(this._types, function(type) {
				return type.toQuote();
			});
			var last = elements.pop();
			return "" + elements.join(", ") + " or " + last;
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code("(");
			for(var i = 0, __ks_0 = this._types.length, type; i < __ks_0; ++i) {
				type = this._types[i];
				if(i) {
					fragments.code(" || ");
				}
				type.toTestFragments(fragments, node);
			}
			fragments.code(")");
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return UnionType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_types_0: function() {
			return this._types;
		},
		types: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_types_0.apply(this);
			}
			else if(Type.prototype.types) {
				return Type.prototype.types.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var VoidType = Helper.class({
		$name: "VoidType",
		$extends: Type,
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Type.prototype.__ks_cons.call(this, args);
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			return KSType.is(b, VoidType);
		},
		equals: function() {
			if(arguments.length === 1) {
				return VoidType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			return "Void";
		},
		export: function() {
			if(arguments.length === 0) {
				return VoidType.prototype.__ks_func_export_0.apply(this);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code("Void");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return VoidType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return "'Void'";
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return VoidType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotSupportedException(node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return VoidType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassVariableType = Helper.class({
		$name: "ClassVariableType",
		$extends: ReferenceType,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var domain = new ScopeDomain(node.scope());
				var type;
				if(KSType.isValue(data.type)) {
					if(KSType.isValue(data.type.typeName)) {
						if(KSType.isValue(data.type.properties)) {
							throw new NotImplementedException(node);
						}
						else {
							type = new ClassVariableType(data.type.typeName.name, data.type.nullable, domain);
						}
					}
					else {
						throw new NotImplementedException(node);
					}
				}
				else {
					type = new ClassVariableType("Any", domain);
				}
				if(KSType.isValue(data.modifiers)) {
					for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
						modifier = data.modifiers[__ks_0];
						if(modifier.kind === ModifierKind.Private) {
							type.access(Accessibility.Private);
						}
						else if(modifier.kind === ModifierKind.Protected) {
							type.access(Accessibility.Protected);
						}
					}
				}
				return type;
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return ClassVariableType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return ReferenceType.fromAST.apply(null, arguments);
			},
			__ks_sttc_import_0: function(data, domain, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(domain === void 0 || domain === null) {
					throw new TypeError("'domain' is not nullable");
				}
				else if(!KSType.is(domain, Domain)) {
					throw new TypeError("'domain' is not of type 'Domain'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ClassVariableType(Type.import(data.type, domain, node));
				type._access = data.access;
				return type;
			},
			import: function() {
				if(arguments.length === 3) {
					return ClassVariableType.__ks_sttc_import_0.apply(this, arguments);
				}
				return ReferenceType.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._access = Accessibility.Public;
		},
		__ks_init: function() {
			ReferenceType.prototype.__ks_init.call(this);
			ClassVariableType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(ref) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(ref === void 0 || ref === null) {
				throw new TypeError("'ref' is not nullable");
			}
			else if(!KSType.is(ref, ReferenceType)) {
				throw new TypeError("'ref' is not of type 'ReferenceType'");
			}
			ReferenceType.prototype.__ks_cons.call(this, [ref._name, ref._nullable, ref._parameters, ref._domain]);
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				ClassVariableType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				ReferenceType.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_access_0: function(access) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(access === void 0 || access === null) {
				throw new TypeError("'access' is not nullable");
			}
			else if(!KSType.is(access, Accessibility)) {
				throw new TypeError("'access' is not of type 'Accessibility'");
			}
			this._access = access;
			return this;
		},
		access: function() {
			if(arguments.length === 1) {
				return ClassVariableType.prototype.__ks_func_access_0.apply(this, arguments);
			}
			else if(ReferenceType.prototype.access) {
				return ReferenceType.prototype.access.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			return {
				access: this._access,
				type: ReferenceType.prototype.export.apply(this, [])
			};
		},
		export: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_export_0.apply(this);
			}
			return ReferenceType.prototype.export.apply(this, arguments);
		},
		__ks_func_reference_0: function() {
			return new ReferenceType(this._name, this._nullable, this._parameters, this._domain);
		},
		reference: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_reference_0.apply(this);
			}
			return ReferenceType.prototype.reference.apply(this, arguments);
		}
	});
	var ClassMethodType = Helper.class({
		$name: "ClassMethodType",
		$extends: FunctionType,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var domain = new ScopeDomain(node.scope());
				return new ClassMethodType(Helper.mapArray(data.parameters, function(parameter) {
					return Type.fromAST(parameter, domain, node);
				}), data, node);
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return ClassMethodType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return FunctionType.fromAST.apply(null, arguments);
			},
			__ks_sttc_import_0: function(data, domain, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(domain === void 0 || domain === null) {
					throw new TypeError("'domain' is not nullable");
				}
				else if(!KSType.is(domain, Domain)) {
					throw new TypeError("'domain' is not of type 'Domain'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ClassMethodType();
				type._access = data.access;
				type._async = data.async;
				type._min = data.min;
				type._max = data.max;
				type._sealed = data.sealed;
				type._throws = Helper.mapArray(data.throws, function(__ks_throw_1) {
					return Type.import(__ks_throw_1, domain, node);
				});
				type._returnType = Type.import(data.returns, domain, node);
				type._parameters = Helper.mapArray(data.parameters, function(parameter) {
					return Type.import(parameter, domain, node);
				});
				type.updateArguments();
				return type;
			},
			import: function() {
				if(arguments.length === 3) {
					return ClassMethodType.__ks_sttc_import_0.apply(this, arguments);
				}
				return FunctionType.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._access = Accessibility.Public;
			this._sealed = false;
		},
		__ks_init: function() {
			FunctionType.prototype.__ks_init.call(this);
			ClassMethodType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			FunctionType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_access_0: function(access) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(access === void 0 || access === null) {
				throw new TypeError("'access' is not nullable");
			}
			else if(!KSType.is(access, Accessibility)) {
				throw new TypeError("'access' is not of type 'Accessibility'");
			}
			this._access = access;
			return this;
		},
		access: function() {
			if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_access_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.access) {
				return FunctionType.prototype.access.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			return {
				access: this._access,
				async: this._async,
				min: this._min,
				max: this._max,
				parameters: Helper.mapArray(this._parameters, function(parameter) {
					return parameter.export();
				}),
				returns: this._returnType.export(),
				sealed: this._sealed,
				throws: Helper.mapArray(this._throws, function(__ks_throw_1) {
					return __ks_throw_1.export();
				})
			};
		},
		export: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_export_0.apply(this);
			}
			return FunctionType.prototype.export.apply(this, arguments);
		},
		__ks_func_isMatched_0: function(methods) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			else if(!KSType.isArray(methods, ClassMethodType)) {
				throw new TypeError("'methods' is not of type 'Array'");
			}
			for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				if(method.match(this)) {
					return true;
				}
			}
			return false;
		},
		isMatched: function() {
			if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_isMatched_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.isMatched) {
				return FunctionType.prototype.isMatched.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isSealed_0: function() {
			return this._sealed;
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_isSealed_0.apply(this);
			}
			return FunctionType.prototype.isSealed.apply(this, arguments);
		},
		__ks_func_match_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			else if(!KSType.is(b, ClassMethodType)) {
				throw new TypeError("'b' is not of type 'ClassMethodType'");
			}
			if((this._min !== b._min) || (this._max !== b._max) || (this._async !== b._async) || (this._parameters.length !== b._parameters.length)) {
				return false;
			}
			for(var i = 0, __ks_0 = this._parameters.length, parameter; i < __ks_0; ++i) {
				parameter = this._parameters[i];
				if(!parameter.match(b._parameters[i])) {
					return false;
				}
			}
			return true;
		},
		match: function() {
			if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_match_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.match) {
				return FunctionType.prototype.match.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_processModifiers_0: function(modifiers) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(modifier.kind === ModifierKind.Async) {
					this.async();
				}
				else if(modifier.kind === ModifierKind.Private) {
					this._access = Accessibility.Private;
				}
				else if(modifier.kind === ModifierKind.Protected) {
					this._access = Accessibility.Protected;
				}
				else if(modifier.kind === ModifierKind.Sealed) {
					this._sealed = true;
				}
			}
		},
		processModifiers: function() {
			if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_processModifiers_0.apply(this, arguments);
			}
			return FunctionType.prototype.processModifiers.apply(this, arguments);
		},
		__ks_func_returnType_0: function(returnType) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(returnType === void 0 || returnType === null) {
				throw new TypeError("'returnType' is not nullable");
			}
			else if(!KSType.is(returnType, Type)) {
				throw new TypeError("'returnType' is not of type 'Type'");
			}
			this._returnType = returnType;
		},
		returnType: function() {
			if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_returnType_0.apply(this, arguments);
			}
			return FunctionType.prototype.returnType.apply(this, arguments);
		},
		__ks_func_seal_0: function() {
			this._sealed = true;
		},
		seal: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_seal_0.apply(this);
			}
			else if(FunctionType.prototype.seal) {
				return FunctionType.prototype.seal.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassConstructorType = Helper.class({
		$name: "ClassConstructorType",
		$extends: FunctionType,
		$static: {
			__ks_sttc_import_0: function(data, domain, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(domain === void 0 || domain === null) {
					throw new TypeError("'domain' is not nullable");
				}
				else if(!KSType.is(domain, Domain)) {
					throw new TypeError("'domain' is not of type 'Domain'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ClassConstructorType();
				type._access = data.access;
				type._min = data.min;
				type._max = data.max;
				type._throws = Helper.mapArray(data.throws, function(__ks_throw_1) {
					return Type.import(__ks_throw_1, domain, node);
				});
				type._parameters = Helper.mapArray(data.parameters, function(parameter) {
					return Type.import(parameter, domain, node);
				});
				type.updateArguments();
				return type;
			},
			import: function() {
				if(arguments.length === 3) {
					return ClassConstructorType.__ks_sttc_import_0.apply(this, arguments);
				}
				return FunctionType.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._access = Accessibility.Public;
		},
		__ks_init: function() {
			FunctionType.prototype.__ks_init.call(this);
			ClassConstructorType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			FunctionType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_access_0: function(access) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(access === void 0 || access === null) {
				throw new TypeError("'access' is not nullable");
			}
			else if(!KSType.is(access, Accessibility)) {
				throw new TypeError("'access' is not of type 'Accessibility'");
			}
			this._access = access;
			return this;
		},
		access: function() {
			if(arguments.length === 1) {
				return ClassConstructorType.prototype.__ks_func_access_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.access) {
				return FunctionType.prototype.access.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			return {
				access: this._access,
				min: this._min,
				max: this._max,
				parameters: Helper.mapArray(this._parameters, function(parameter) {
					return parameter.export();
				}),
				throws: Helper.mapArray(this._throws, function(__ks_throw_1) {
					return __ks_throw_1.export();
				})
			};
		},
		export: function() {
			if(arguments.length === 0) {
				return ClassConstructorType.prototype.__ks_func_export_0.apply(this);
			}
			return FunctionType.prototype.export.apply(this, arguments);
		},
		__ks_func_processModifiers_0: function(modifiers) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(modifier.kind === ModifierKind.Async) {
					throw new NotImplementedException();
				}
				else if(modifier.kind === ModifierKind.Private) {
					this._access = Accessibility.Private;
				}
				else if(modifier.kind === ModifierKind.Protected) {
					this._access = Accessibility.Protected;
				}
			}
		},
		processModifiers: function() {
			if(arguments.length === 1) {
				return ClassConstructorType.prototype.__ks_func_processModifiers_0.apply(this, arguments);
			}
			return FunctionType.prototype.processModifiers.apply(this, arguments);
		}
	});
	var ClassDestructorType = Helper.class({
		$name: "ClassDestructorType",
		$extends: FunctionType,
		__ks_init_1: function() {
			this._access = Accessibility.Public;
		},
		__ks_init: function() {
			FunctionType.prototype.__ks_init.call(this);
			ClassDestructorType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			FunctionType.prototype.__ks_cons.call(this, [[], data, node]);
			this._min = 1;
			this._max = 1;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassDestructorType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				FunctionType.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_access_0: function(access) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(access === void 0 || access === null) {
				throw new TypeError("'access' is not nullable");
			}
			else if(!KSType.is(access, Accessibility)) {
				throw new TypeError("'access' is not of type 'Accessibility'");
			}
			this._access = access;
			return this;
		},
		access: function() {
			if(arguments.length === 1) {
				return ClassDestructorType.prototype.__ks_func_access_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.access) {
				return FunctionType.prototype.access.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			return {
				access: this._access,
				throws: Helper.mapArray(this._throws, function(__ks_throw_1) {
					return __ks_throw_1.export();
				})
			};
		},
		export: function() {
			if(arguments.length === 0) {
				return ClassDestructorType.prototype.__ks_func_export_0.apply(this);
			}
			return FunctionType.prototype.export.apply(this, arguments);
		},
		__ks_func_processModifiers_0: function(modifiers) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(modifier.kind === ModifierKind.Async) {
					throw new NotImplementedException();
				}
				else if(modifier.kind === ModifierKind.Private) {
					this._access = Accessibility.Private;
				}
				else if(modifier.kind === ModifierKind.Protected) {
					this._access = Accessibility.Protected;
				}
			}
		},
		processModifiers: function() {
			if(arguments.length === 1) {
				return ClassDestructorType.prototype.__ks_func_processModifiers_0.apply(this, arguments);
			}
			return FunctionType.prototype.processModifiers.apply(this, arguments);
		}
	});
	var NamespaceVariableType = Helper.class({
		$name: "NamespaceVariableType",
		$extends: ReferenceType,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new NamespaceVariableType(Type.fromAST(data.type, node));
				if(KSType.isValue(data.modifiers)) {
					for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
						modifier = data.modifiers[__ks_0];
						if(modifier.kind === ModifierKind.Sealed) {
							type._sealed = true;
						}
					}
				}
				return type;
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return NamespaceVariableType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return ReferenceType.fromAST.apply(null, arguments);
			},
			__ks_sttc_import_0: function(data, domain, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(domain === void 0 || domain === null) {
					throw new TypeError("'domain' is not nullable");
				}
				else if(!KSType.is(domain, Domain)) {
					throw new TypeError("'domain' is not of type 'Domain'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new NamespaceVariableType(Type.import(data.type, domain, node));
				if(data.sealed === true) {
					type._sealed = true;
				}
				return type;
			},
			import: function() {
				if(arguments.length === 3) {
					return NamespaceVariableType.__ks_sttc_import_0.apply(this, arguments);
				}
				return ReferenceType.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._sealed = false;
		},
		__ks_init: function() {
			ReferenceType.prototype.__ks_init.call(this);
			NamespaceVariableType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(ref) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(ref === void 0 || ref === null) {
				throw new TypeError("'ref' is not nullable");
			}
			else if(!KSType.is(ref, ReferenceType)) {
				throw new TypeError("'ref' is not of type 'ReferenceType'");
			}
			ReferenceType.prototype.__ks_cons.call(this, [ref._name, ref._nullable, ref._parameters, ref._domain]);
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				NamespaceVariableType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				ReferenceType.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_export_0: function() {
			return {
				sealed: this._sealed,
				type: ReferenceType.prototype.export.apply(this, [])
			};
		},
		export: function() {
			if(arguments.length === 0) {
				return NamespaceVariableType.prototype.__ks_func_export_0.apply(this);
			}
			return ReferenceType.prototype.export.apply(this, arguments);
		},
		__ks_func_isSealed_0: function() {
			return this._sealed;
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return NamespaceVariableType.prototype.__ks_func_isSealed_0.apply(this);
			}
			return ReferenceType.prototype.isSealed.apply(this, arguments);
		},
		__ks_func_reference_0: function() {
			return new ReferenceType(this._name, this._nullable, this._parameters, this._domain);
		},
		reference: function() {
			if(arguments.length === 0) {
				return NamespaceVariableType.prototype.__ks_func_reference_0.apply(this);
			}
			return ReferenceType.prototype.reference.apply(this, arguments);
		},
		__ks_func_seal_0: function() {
			this._sealed = true;
		},
		seal: function() {
			if(arguments.length === 0) {
				return NamespaceVariableType.prototype.__ks_func_seal_0.apply(this);
			}
			else if(ReferenceType.prototype.seal) {
				return ReferenceType.prototype.seal.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var NamespaceFunctionType = Helper.class({
		$name: "NamespaceFunctionType",
		$extends: FunctionType,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var domain = new ScopeDomain(node.scope());
				var type;
				return type = new NamespaceFunctionType(Helper.mapArray(data.parameters, function(parameter) {
					return Type.fromAST(parameter, domain, node);
				}), data, node);
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return NamespaceFunctionType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return FunctionType.fromAST.apply(null, arguments);
			},
			__ks_sttc_import_0: function(data, domain, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(domain === void 0 || domain === null) {
					throw new TypeError("'domain' is not nullable");
				}
				else if(!KSType.is(domain, Domain)) {
					throw new TypeError("'domain' is not of type 'Domain'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new NamespaceFunctionType();
				type._async = data.async;
				type._min = data.min;
				type._max = data.max;
				type._sealed = data.sealed;
				type._throws = Helper.mapArray(data.throws, function(__ks_throw_1) {
					return Type.import(__ks_throw_1, domain, node);
				});
				type._returnType = Type.import(data.returns, domain, node);
				type._parameters = Helper.mapArray(data.parameters, function(parameter) {
					return Type.import(parameter, domain, node);
				});
				type.updateArguments();
				return type;
			},
			import: function() {
				if(arguments.length === 3) {
					return NamespaceFunctionType.__ks_sttc_import_0.apply(this, arguments);
				}
				return FunctionType.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._sealed = false;
		},
		__ks_init: function() {
			FunctionType.prototype.__ks_init.call(this);
			NamespaceFunctionType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			FunctionType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_export_0: function() {
			return {
				async: this._async,
				min: this._min,
				max: this._max,
				parameters: Helper.mapArray(this._parameters, function(parameter) {
					return parameter.export();
				}),
				returns: this._returnType.export(),
				sealed: this._sealed,
				throws: Helper.mapArray(this._throws, function(__ks_throw_1) {
					return __ks_throw_1.export();
				})
			};
		},
		export: function() {
			if(arguments.length === 0) {
				return NamespaceFunctionType.prototype.__ks_func_export_0.apply(this);
			}
			return FunctionType.prototype.export.apply(this, arguments);
		},
		__ks_func_isSealed_0: function() {
			return this._sealed;
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return NamespaceFunctionType.prototype.__ks_func_isSealed_0.apply(this);
			}
			return FunctionType.prototype.isSealed.apply(this, arguments);
		},
		__ks_func_processModifiers_0: function(modifiers) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = modifiers[__ks_0];
				if(modifier.kind === ModifierKind.Async) {
					this.async();
				}
				else if(modifier.kind === ModifierKind.Sealed) {
					this._sealed = true;
				}
			}
		},
		processModifiers: function() {
			if(arguments.length === 1) {
				return NamespaceFunctionType.prototype.__ks_func_processModifiers_0.apply(this, arguments);
			}
			return FunctionType.prototype.processModifiers.apply(this, arguments);
		},
		__ks_func_seal_0: function() {
			this._sealed = true;
		},
		seal: function() {
			if(arguments.length === 0) {
				return NamespaceFunctionType.prototype.__ks_func_seal_0.apply(this);
			}
			else if(FunctionType.prototype.seal) {
				return FunctionType.prototype.seal.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SealedReferenceType = Helper.class({
		$name: "SealedReferenceType",
		$extends: ReferenceType,
		__ks_init: function() {
			ReferenceType.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(ref) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(ref === void 0 || ref === null) {
				throw new TypeError("'ref' is not nullable");
			}
			else if(!KSType.is(ref, ReferenceType)) {
				throw new TypeError("'ref' is not of type 'ReferenceType'");
			}
			ReferenceType.prototype.__ks_cons.call(this, [ref._name, ref._nullable, ref._parameters, ref._domain]);
		},
		__ks_cons_1: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			ReferenceType.prototype.__ks_cons.call(this, ["Any", new ScopeDomain(node.scope())]);
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				if(KSType.is(args[0], ReferenceType)) {
					SealedReferenceType.prototype.__ks_cons_0.apply(this, args);
				}
				else {
					SealedReferenceType.prototype.__ks_cons_1.apply(this, args);
				}
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_export_0: function() {
			return {
				sealed: true,
				type: ReferenceType.prototype.export.apply(this, [])
			};
		},
		export: function() {
			if(arguments.length === 0) {
				return SealedReferenceType.prototype.__ks_func_export_0.apply(this);
			}
			return ReferenceType.prototype.export.apply(this, arguments);
		},
		__ks_func_isSealed_0: function() {
			return true;
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return SealedReferenceType.prototype.__ks_func_isSealed_0.apply(this);
			}
			return ReferenceType.prototype.isSealed.apply(this, arguments);
		}
	});
	Type.Any = new AnyType();
	Type.Void = new VoidType();
	ParameterType.Any = new ParameterType(Type.Any);
	var VariableKind = {};
	var Variable = Helper.class({
		$name: "Variable",
		$static: {
			__ks_sttc_import_0: function(name, data, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				else if(!KSType.isString(name)) {
					throw new TypeError("'name' is not of type 'String'");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				return new Variable(name, true, Type.import(name, data, node));
			},
			import: function() {
				if(arguments.length === 3) {
					return Variable.__ks_sttc_import_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._immutable = true;
			this._new = true;
			this._required = false;
			this._type = Type.Any;
		},
		__ks_init: function() {
			Variable.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
		},
		__ks_cons_1: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var immutable = arguments[++__ks_i];
			if(immutable === void 0 || immutable === null) {
				throw new TypeError("'immutable' is not nullable");
			}
			else if(!KSType.isBoolean(immutable)) {
				throw new TypeError("'immutable' is not of type 'Boolean'");
			}
			var type;
			if(arguments.length > 2 && (type = arguments[++__ks_i]) !== void 0 && type !== null) {
				if(!KSType.is(type, Type)) {
					throw new TypeError("'type' is not of type 'Type'");
				}
			}
			else {
				type = Type.Any;
			}
			this._name = name;
			this._immutable = immutable;
			this._type = type;
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				Variable.prototype.__ks_cons_0.apply(this);
			}
			else if(args.length === 2 || args.length === 3) {
				Variable.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_export_0: function() {
			return this._type.export();
		},
		export: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_export_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isImmutable_0: function() {
			return this._immutable;
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_isImmutable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_name_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_require_0: function() {
			this._required = true;
		},
		require: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_require_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		__ks_func_type_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._type = type;
			return this;
		},
		type: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_type_0.apply(this);
			}
			else if(arguments.length === 1) {
				return Variable.prototype.__ks_func_type_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var $keywords = {
		abstract: true,
		arguments: true,
		boolean: true,
		break: true,
		byte: true,
		case: true,
		catch: true,
		char: true,
		class: true,
		const: true,
		constructor: true,
		continue: true,
		debugger: true,
		default: true,
		delete: true,
		destructor: true,
		do: true,
		double: true,
		else: true,
		enum: true,
		export: true,
		extends: true,
		finally: true,
		float: true,
		for: true,
		function: true,
		goto: true,
		if: true,
		implements: true,
		import: true,
		in: true,
		instanceof: true,
		int: true,
		interface: true,
		long: true,
		native: true,
		new: true,
		package: true,
		private: true,
		protected: true,
		public: true,
		return: true,
		sealed: true,
		short: true,
		static: true,
		switch: true,
		synchronized: true,
		throw: true,
		throws: true,
		transient: true,
		try: true,
		typeof: true,
		var: true,
		void: true,
		volatile: true,
		while: true,
		with: true
	};
	var AbstractScope = Helper.class({
		$name: "AbstractScope",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._body = [];
			this._prepared = false;
			this._renamedIndexes = {};
			this._renamedVariables = {};
			this._scopeParent = null;
			this._variables = {};
		},
		__ks_init: function() {
			AbstractScope.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(parent) {
			if(parent === void 0) {
				parent = null;
			}
			this._parent = parent;
			if(KSType.isValue(parent)) {
				while(KSType.isValue(parent) && !KSType.is(parent, Scope)) {
					parent = parent._parent;
				}
				if(KSType.isValue(parent)) {
					this._scopeParent = parent;
				}
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 0 && args.length <= 1) {
				AbstractScope.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_addVariable_0: function(name, variable, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(KSType.is(this._variables[name], Variable)) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			if($keywords[name] === true) {
				var index = this._renamedIndexes[name] ? this._renamedIndexes[name] : 0;
				var newName = "__ks_" + name + "_" + ++index;
				while(this._variables[newName]) {
					newName = "__ks_" + name + "_" + ++index;
				}
				this._renamedIndexes[name] = index;
				this._renamedVariables[name] = newName;
			}
			this._variables[name] = variable;
			return this;
		},
		addVariable: function() {
			if(arguments.length === 3) {
				return AbstractScope.prototype.__ks_func_addVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_define_0: function() {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var immutable = arguments[++__ks_i];
			if(immutable === void 0 || immutable === null) {
				throw new TypeError("'immutable' is not nullable");
			}
			else if(!KSType.isBoolean(immutable)) {
				throw new TypeError("'immutable' is not of type 'Boolean'");
			}
			var type;
			if(arguments.length > 3 && (type = arguments[++__ks_i]) !== void 0) {
				if(type !== null && !KSType.is(type, Type)) {
					throw new TypeError("'type' is not of type 'Type'");
				}
			}
			else {
				type = null;
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			if(KSType.is(this._variables[name], Variable)) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			var variable = new Variable(name, immutable, type);
			this.addVariable(name, variable, node);
			return variable;
		},
		define: function() {
			if(arguments.length >= 3 && arguments.length <= 4) {
				return AbstractScope.prototype.__ks_func_define_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getLocalVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isObject(this._variables[name])) {
				return this._variables[name];
			}
			else {
				return null;
			}
		},
		getLocalVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_getLocalVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isObject(this._variables[name])) {
				return this._variables[name];
			}
			else if(KSType.isValue(this._parent)) {
				return this._parent.getVariable(name);
			}
			else {
				return null;
			}
		},
		getVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_getVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasDeclaredLocalVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return KSType.isValue(this._variables[name]);
		},
		hasDeclaredLocalVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_hasDeclaredLocalVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasLocalVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return KSType.is(this._variables[name], Variable);
		},
		hasLocalVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_hasLocalVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return KSType.is(this._variables[name], Variable) || (KSType.isValue(this._parent) ? this._parent.hasVariable(name) : false);
		},
		hasVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_hasVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parent_0: function() {
			return this._parent;
		},
		parent: function() {
			if(arguments.length === 0) {
				return AbstractScope.prototype.__ks_func_parent_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reference_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return (new ScopeDomain(this)).reference(name);
		},
		reference: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_reference_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_removeVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.is(this._variables[name], Variable)) {
				this._variables[name] = false;
			}
			else {
				KSType.isValue(this._parent) ? this._parent.removeVariable(name) : undefined;
			}
			return this;
		},
		removeVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_removeVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_rename_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var __ks__;
			var newName = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this.newRenamedVariable(name);
			if(newName !== name) {
				this._renamedVariables[name] = newName;
			}
			return this;
		},
		rename: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return AbstractScope.prototype.__ks_func_rename_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Scope = Helper.class({
		$name: "Scope",
		$extends: AbstractScope,
		__ks_init_1: function() {
			this._anonymousClassIndex = 0;
			this._tempNextIndex = 0;
			this._tempNames = {};
			this._tempParentNames = {};
		},
		__ks_init: function() {
			AbstractScope.prototype.__ks_init.call(this);
			Scope.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractScope.prototype.__ks_cons.call(this, args);
		},
		__ks_func_acquireTempName_0: function(statement) {
			if(statement === void 0) {
				statement = null;
			}
			else if(statement !== null && !KSType.is(statement, Statement)) {
				throw new TypeError("'statement' is not of type 'Statement'");
			}
			this.updateTempNames();
			var name, __ks_0;
			if(KSType.isValue(this._scopeParent) && KSType.isValue(__ks_0 = this._scopeParent.acquireTempNameFromKid()) ? (name = __ks_0, true) : false) {
				this._tempParentNames[name] = true;
				return name;
			}
			for(name in this._tempNames) {
				if(this._tempNames[name]) {
					this._tempNames[name] = false;
					return name;
				}
			}
			while(this._tempParentNames[name = "__ks_" + this._tempNextIndex]) {
				++this._tempNextIndex;
			}
			++this._tempNextIndex;
			if(KSType.isValue(statement)) {
				__ks_Array._im_pushUniq(statement._variables, name);
			}
			return name;
		},
		acquireTempName: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Scope.prototype.__ks_func_acquireTempName_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_acquireTempNameFromKid_0: function() {
			var name, __ks_0;
			if(KSType.isValue(this._parent) && KSType.isValue(__ks_0 = this._parent.acquireTempNameFromKid()) ? (name = __ks_0, true) : false) {
				return name;
			}
			for(name in this._tempNames) {
				if(this._tempNames[name]) {
					this._tempNames[name] = false;
					return name;
				}
			}
			return null;
		},
		acquireTempNameFromKid: function() {
			if(arguments.length === 0) {
				return Scope.prototype.__ks_func_acquireTempNameFromKid_0.apply(this);
			}
			else if(AbstractScope.prototype.acquireTempNameFromKid) {
				return AbstractScope.prototype.acquireTempNameFromKid.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getAnomynousClassName_0: function() {
			return "__ks_cls_" + this._anonymousClassIndex++;
		},
		getAnomynousClassName: function() {
			if(arguments.length === 0) {
				return Scope.prototype.__ks_func_getAnomynousClassName_0.apply(this);
			}
			else if(AbstractScope.prototype.getAnomynousClassName) {
				return AbstractScope.prototype.getAnomynousClassName.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getRenamedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isString(this._renamedVariables[name])) {
				return this._renamedVariables[name];
			}
			else if(KSType.isValue(this._scopeParent)) {
				return this._scopeParent.getRenamedVariable(name);
			}
			else {
				return name;
			}
		},
		getRenamedVariable: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_getRenamedVariable_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.getRenamedVariable) {
				return AbstractScope.prototype.getRenamedVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newRenamedVariable_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var __ks__;
			var variables = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this._variables;
			if(KSType.isValue(variables[name])) {
				var index = this._renamedIndexes[name] ? this._renamedIndexes[name] : 0;
				var newName = "__ks_" + name + "_" + ++index;
				while(variables[newName]) {
					newName = "__ks_" + name + "_" + ++index;
				}
				this._renamedIndexes[name] = index;
				return newName;
			}
			else {
				return name;
			}
		},
		newRenamedVariable: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Scope.prototype.__ks_func_newRenamedVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseTempName_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if((name.length > 5) && (name.substr(0, 5) === "__ks_")) {
				if(this._scopeParent && this._tempParentNames[name]) {
					this._scopeParent.releaseTempNameFromKid(name);
					this._tempParentNames[name] = false;
				}
				else {
					this._tempNames[name] = true;
				}
			}
			return this;
		},
		releaseTempName: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_releaseTempName_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.releaseTempName) {
				return AbstractScope.prototype.releaseTempName.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseTempNameFromKid_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._parent && this._tempParentNames[name]) {
				this._parent.releaseTempNameFromKid(name);
				this._tempParentNames[name] = false;
			}
			else {
				this._tempNames[name] = true;
			}
		},
		releaseTempNameFromKid: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_releaseTempNameFromKid_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.releaseTempNameFromKid) {
				return AbstractScope.prototype.releaseTempNameFromKid.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_updateTempNames_0: function() {
			if(KSType.isValue(this._parent)) {
				this._parent.updateTempNames();
				if(this._parent._tempNextIndex > this._tempNextIndex) {
					this._tempNextIndex = this._parent._tempNextIndex;
				}
			}
		},
		updateTempNames: function() {
			if(arguments.length === 0) {
				return Scope.prototype.__ks_func_updateTempNames_0.apply(this);
			}
			else if(AbstractScope.prototype.updateTempNames) {
				return AbstractScope.prototype.updateTempNames.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var XScope = Helper.class({
		$name: "XScope",
		$extends: AbstractScope,
		__ks_init: function() {
			AbstractScope.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractScope.prototype.__ks_cons.call(this, args);
		},
		__ks_func_acquireTempName_0: function(statement) {
			if(statement === void 0) {
				statement = null;
			}
			else if(statement !== null && !KSType.is(statement, Statement)) {
				throw new TypeError("'statement' is not of type 'Statement'");
			}
			return this._parent.acquireTempName(statement);
		},
		acquireTempName: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return XScope.prototype.__ks_func_acquireTempName_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getRenamedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isString(this._renamedVariables[name])) {
				return this._renamedVariables[name];
			}
			else if(KSType.isValue(this._variables[name])) {
				return name;
			}
			else {
				return this._parent.getRenamedVariable(name);
			}
		},
		getRenamedVariable: function() {
			if(arguments.length === 1) {
				return XScope.prototype.__ks_func_getRenamedVariable_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.getRenamedVariable) {
				return AbstractScope.prototype.getRenamedVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newRenamedVariable_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var __ks__;
			var variables = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this._variables;
			if(KSType.isValue(variables[name])) {
				return this._scopeParent.newRenamedVariable(name, variables);
			}
			else {
				return this._parent.newRenamedVariable(name);
			}
		},
		newRenamedVariable: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return XScope.prototype.__ks_func_newRenamedVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseTempName_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this._parent.releaseTempName(name);
			return this;
		},
		releaseTempName: function() {
			if(arguments.length === 1) {
				return XScope.prototype.__ks_func_releaseTempName_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.releaseTempName) {
				return AbstractScope.prototype.releaseTempName.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_updateTempNames_0: function() {
		},
		updateTempNames: function() {
			if(arguments.length === 0) {
				return XScope.prototype.__ks_func_updateTempNames_0.apply(this);
			}
			else if(AbstractScope.prototype.updateTempNames) {
				return AbstractScope.prototype.updateTempNames.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Module = Helper.class({
		$name: "Module",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._binary = false;
			this._dynamicRequirements = [];
			this._exportSource = [];
			this._exportMeta = {};
			this._flags = {};
			this._hashes = {};
			this._imports = {};
			this._includes = {};
			this._references = {};
			this._register = false;
			this._requirements = {};
		},
		__ks_init: function() {
			Module.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, compiler, file) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(compiler === void 0 || compiler === null) {
				throw new TypeError("'compiler' is not nullable");
			}
			else if(!KSType.is(compiler, Compiler)) {
				throw new TypeError("'compiler' is not of type 'Compiler'");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			this._compiler = compiler;
			this._file = file;
			try {
				this._data = this.parse(data, file);
			}
			catch(error) {
				error.filename = file;
				throw error;
			}
			this._directory = path.dirname(file);
			this._options = Attribute.configure(this._data, this._compiler._options.config, AttributeTarget.Global);
			for(var __ks_0 = 0, __ks_1 = this._data.attributes.length, attr; __ks_0 < __ks_1; ++__ks_0) {
				attr = this._data.attributes[__ks_0];
				if((attr.declaration.kind === NodeKind.Identifier) && (attr.declaration.name === "bin")) {
					this._binary = true;
				}
			}
			if(this._compiler._options.output) {
				this._output = this._compiler._options.output;
				if(KSType.isArray(this._compiler._options.rewire)) {
					this._rewire = this._compiler._options.rewire;
				}
				else {
					this._rewire = [];
				}
			}
			else {
				this._output = null;
			}
			this._hashes["."] = this._compiler.sha256(file, data);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				Module.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_addHash_0: function(file, hash) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			if(hash === void 0 || hash === null) {
				throw new TypeError("'hash' is not nullable");
			}
			this._hashes[path.relative(this._directory, file)] = hash;
		},
		addHash: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addHash_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addHashes_0: function(file, hashes) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			if(hashes === void 0 || hashes === null) {
				throw new TypeError("'hashes' is not nullable");
			}
			var root = path.dirname(file);
			for(var name in hashes) {
				var hash = hashes[name];
				if(name === ".") {
					this._hashes[path.relative(this._directory, file)] = hash;
				}
				else {
					this._hashes[path.relative(this._directory, path.join(root, name))] = hash;
				}
			}
		},
		addHashes: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addHashes_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addInclude_0: function(path) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			this._includes[path] = true;
		},
		addInclude: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_addInclude_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addReference_0: function(key, code) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(key === void 0 || key === null) {
				throw new TypeError("'key' is not nullable");
			}
			if(code === void 0 || code === null) {
				throw new TypeError("'code' is not nullable");
			}
			if(this._references[key]) {
				this._references[key].push(code);
			}
			else {
				this._references[key] = [code];
			}
			return this;
		},
		addReference: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addReference_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compile_0: function() {
			this._body = new ModuleBlock(this._data, this);
			this._body.analyse();
			this._body.prepare();
			this._body.translate();
		},
		compile: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_compile_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compiler_0: function() {
			return this._compiler;
		},
		compiler: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_compiler_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._directory;
		},
		directory: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_directory_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(name, alias, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(alias === void 0) {
				alias = null;
			}
			else if(alias !== null && !KSType.isString(alias)) {
				throw new TypeError("'alias' is not of type 'String'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(this._binary) {
				SyntaxException.throwNotBinary("export", this);
			}
			var variable;
			var __ks_0;
			if(KSType.isValue(__ks_0 = this._body.scope().getVariable(name)) ? (variable = __ks_0, false) : true) {
				ReferenceException.throwNotDefined(name, node);
			}
			if(!KSType.is(variable.type(), AliasType)) {
				this._exportSource.push("" + (KSType.isValue(alias) ? alias : name) + ": " + name);
				var type = variable.type().unalias();
				if(type.isSealed() && type.isExtendable()) {
					this._exportSource.push("__ks_" + (KSType.isValue(alias) ? alias : name) + ": " + type.sealName());
				}
			}
			this._exportMeta[KSType.isValue(alias) ? alias : name] = variable;
		},
		export: function() {
			if(arguments.length === 3) {
				return Module.prototype.__ks_func_export_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_file_0: function() {
			return this._file;
		},
		file: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_file_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flag_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this._flags[name] = true;
		},
		flag: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_flag_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasInclude_0: function(path) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			return KSType.isValue(this._includes) ? this._includes[path] : undefined;
		},
		hasInclude: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_hasInclude_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_import_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var __ks__;
			var file = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			this._imports[name] = true;
			if(KSType.isValue(file) && (file.slice(-$extensions.source.length).toLowerCase() === $extensions.source)) {
				this._register = true;
			}
		},
		import: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Module.prototype.__ks_func_import_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isUpToDate_0: function(file, target, data) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var hashes;
			try {
				hashes = JSON.parse(fs.readFile(getHashPath(file, target)));
			}
			catch(__ks_0) {
				return null;
			}
			var root = path.dirname(file);
			for(var name in hashes) {
				var hash = hashes[name];
				if(name === ".") {
					if(this._compiler.sha256(file, data) !== hash) {
						return null;
					}
				}
				else {
					if(this._compiler.sha256(path.join(root, name)) !== hash) {
						return null;
					}
				}
			}
			return hashes;
		},
		isUpToDate: function() {
			if(arguments.length === 3) {
				return Module.prototype.__ks_func_isUpToDate_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_listReferences_0: function(key) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(key === void 0 || key === null) {
				throw new TypeError("'key' is not nullable");
			}
			if(this._references[key]) {
				var references = this._references[key];
				this._references[key] = null;
				return references;
			}
			else {
				return null;
			}
		},
		listReferences: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_listReferences_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parse_0: function(data, file) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			return parse(data);
		},
		parse: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_parse_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_path_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var __ks__;
			var x = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(!KSType.isValue(x) || !KSType.isValue(this._output)) {
				return name;
			}
			var output = null;
			for(var __ks_0 = 0, __ks_1 = this._rewire.length, rewire; __ks_0 < __ks_1; ++__ks_0) {
				rewire = this._rewire[__ks_0];
				if(rewire.input === x) {
					output = path.relative(this._output, rewire.output);
					break;
				}
			}
			if(!KSType.isValue(output)) {
				output = path.relative(this._output, x);
			}
			if(output[0] !== ".") {
				output = "./" + output;
			}
			return output;
		},
		path: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Module.prototype.__ks_func_path_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_require_0: function(variable, kind) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(kind === void 0 || kind === null) {
				throw new TypeError("'kind' is not nullable");
			}
			else if(!KSType.is(kind, DependencyKind)) {
				throw new TypeError("'kind' is not of type 'DependencyKind'");
			}
			if(this._binary) {
				SyntaxException.throwNotBinary("require", this);
			}
			if(kind === DependencyKind.Require) {
				this._requirements[variable.name()] = {
					kind: kind,
					name: variable.name(),
					flexible: variable.type().isFlexible()
				};
			}
			else {
				var requirement = {
					kind: kind,
					name: variable.name(),
					flexible: variable.type().isFlexible(),
					parameter: this._body.scope().acquireTempName()
				};
				this._requirements[requirement.parameter] = requirement;
				this._dynamicRequirements.push(requirement);
				return requirement;
			}
		},
		require: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_require_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toHashes_0: function() {
			return this._hashes;
		},
		toHashes: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_toHashes_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function() {
			var builder = new FragmentBuilder(this._binary ? 0 : 1);
			this._body.toFragments(builder);
			var fragments = [];
			if(this._options.header) {
				fragments.push($code("// Generated by kaoscript " + metadata.version + "\n"));
			}
			if(this._register && this._compiler._options.register) {
				fragments.push($code("require(\"kaoscript/register\");\n"));
			}
			var helper = $runtime.helper(this);
			var type = $runtime.type(this);
			var hasHelper = !this._flags.Helper || this._requirements[helper] || this._imports[helper];
			var hasType = !this._flags.Type || this._requirements[type] || this._imports[type];
			if(!hasHelper || !hasType) {
				if(hasHelper) {
					fragments.push($code("var " + type + " = require(\"" + this._options.runtime.type.package + "\")." + this._options.runtime.type.member + ";\n"));
				}
				else if(hasType) {
					fragments.push($code("var " + helper + " = require(\"" + this._options.runtime.helper.package + "\")." + this._options.runtime.helper.member + ";\n"));
				}
				else if(this._options.runtime.helper.package === this._options.runtime.type.package) {
					if(this._options.format.destructuring === "es5") {
						fragments.push($code("var __ks__ = require(\"" + this._options.runtime.helper.package + "\");\n"));
						fragments.push($code("var " + helper + " = __ks__." + this._options.runtime.helper.member + ", " + type + " = __ks__." + this._options.runtime.type.member + ";\n"));
					}
					else {
						if(!(helper === this._options.runtime.helper.member)) {
							helper = "" + this._options.runtime.helper.member + ": " + helper;
						}
						if(!(type === this._options.runtime.type.member)) {
							type = "" + this._options.runtime.type.member + ": " + type;
						}
						fragments.push($code("var {" + helper + ", " + type + "} = require(\"" + this._options.runtime.helper.package + "\");\n"));
					}
				}
				else {
					fragments.push($code("var " + helper + " = require(\"" + this._options.runtime.helper.package + "\")." + this._options.runtime.helper.member + ";\n"));
					fragments.push($code("var " + type + " = require(\"" + this._options.runtime.type.package + "\")." + this._options.runtime.type.member + ";\n"));
				}
			}
			if(this._binary) {
				__ks_Array._im_append(fragments, builder.toArray());
			}
			else {
				if(this._dynamicRequirements.length) {
					fragments.push($code("function __ks_require("));
					for(var i = 0, __ks_0 = this._dynamicRequirements.length, requirement; i < __ks_0; ++i) {
						requirement = this._dynamicRequirements[i];
						if(i) {
							fragments.push($comma);
						}
						fragments.push($code(requirement.parameter));
						if(requirement.flexible) {
							fragments.push($code(", __ks_" + requirement.parameter));
						}
					}
					fragments.push($code(") {\n"));
					if(this._dynamicRequirements.length === 1) {
						var requirement = this._dynamicRequirements[0];
						var __ks_0 = requirement.kind;
						if(__ks_0 === DependencyKind.ExternOrRequire) {
							fragments.push($code("\tif(Type.isValue(" + requirement.name + ")) {\n"));
							if(requirement.flexible) {
								fragments.push($code("\t\treturn [" + requirement.name + ", typeof __ks_" + requirement.name + " === \"undefined\" ? {} : __ks_" + requirement.name + "];\n"));
								fragments.push($code("\t}\n"));
								fragments.push($code("\telse {\n"));
								fragments.push($code("\t\treturn [" + requirement.parameter + ", __ks_" + requirement.parameter + "];\n"));
								fragments.push($code("\t}\n"));
							}
							else {
								fragments.push($code("\t\treturn [" + requirement.name + "];\n"));
								fragments.push($code("\t}\n"));
								fragments.push($code("\telse {\n"));
								fragments.push($code("\t\treturn [" + requirement.parameter + "];\n"));
								fragments.push($code("\t}\n"));
							}
						}
						else if(__ks_0 === DependencyKind.RequireOrExtern) {
							fragments.push($code("\tif(Type.isValue(" + requirement.parameter + ")) {\n"));
							if(requirement.flexible) {
								fragments.push($code("\t\treturn [" + requirement.parameter + ", __ks_" + requirement.parameter + "];\n"));
								fragments.push($code("\t}\n"));
								fragments.push($code("\telse {\n"));
								fragments.push($code("\t\treturn [" + requirement.name + ", typeof __ks_" + requirement.name + " === \"undefined\" ? {} : __ks_" + requirement.name + "];\n"));
								fragments.push($code("\t}\n"));
							}
							else {
								fragments.push($code("\t\treturn [" + requirement.parameter + "];\n"));
								fragments.push($code("\t}\n"));
								fragments.push($code("\telse {\n"));
								fragments.push($code("\t\treturn [" + requirement.name + "];\n"));
								fragments.push($code("\t}\n"));
							}
						}
						else if(__ks_0 === DependencyKind.RequireOrImport) {
							fragments.push($code("\tif(Type.isValue(" + requirement.parameter + ")) {\n"));
							if(requirement.flexible) {
								fragments.push($code("\t\treturn [" + requirement.parameter + ", __ks_" + requirement.parameter + "];\n"));
								fragments.push($code("\t}\n"));
								fragments.push($code("\telse {\n"));
								var __ks_builder_1 = new FragmentBuilder(2);
								if(requirement.metadata.kind === ImportKind.KSFile) {
									$import.toKSFileFragments(__ks_builder_1, requirement.metadata, requirement.data, requirement.node);
								}
								else {
									$import.toNodeFileFragments(__ks_builder_1, requirement.metadata, requirement.data, requirement.node);
								}
								__ks_Array._im_append(fragments, __ks_builder_1.toArray());
								fragments.push($code("\t\treturn [" + requirement.name + ", __ks_" + requirement.name + "];\n"));
								fragments.push($code("\t}\n"));
							}
							else {
								fragments.push($code("\t\treturn [" + requirement.parameter + "];\n"));
								fragments.push($code("\t}\n"));
								fragments.push($code("\telse {\n"));
								var __ks_builder_2 = new FragmentBuilder(2);
								if(requirement.metadata.kind === ImportKind.KSFile) {
									$import.toKSFileFragments(__ks_builder_2, requirement.metadata, requirement.data, requirement.node);
								}
								else {
									$import.toNodeFileFragments(__ks_builder_2, requirement.metadata, requirement.data, requirement.node);
								}
								fragments.push($code("\t\treturn [" + requirement.name + "];\n"));
								fragments.push($code("\t}\n"));
							}
						}
					}
					else {
						fragments.push($code("\tvar req = [];\n"));
						for(var __ks_0 = 0, __ks_1 = this._dynamicRequirements.length, requirement; __ks_0 < __ks_1; ++__ks_0) {
							requirement = this._dynamicRequirements[__ks_0];
							var __ks_2 = requirement.kind;
							if(__ks_2 === DependencyKind.ExternOrRequire) {
								fragments.push($code("\tif(Type.isValue(" + requirement.name + ")) {\n"));
								if(requirement.flexible) {
									fragments.push($code("\t\treq.push(" + requirement.name + ", typeof __ks_" + requirement.name + " === \"undefined\" ? {} : __ks_" + requirement.name + ");\n"));
									fragments.push($code("\t}\n"));
									fragments.push($code("\telse {\n"));
									fragments.push($code("\t\treq.push(" + requirement.parameter + ", __ks_" + requirement.parameter + ");\n"));
									fragments.push($code("\t}\n"));
								}
								else {
									fragments.push($code("\t\treq.push(" + requirement.name + ");\n"));
									fragments.push($code("\t}\n"));
									fragments.push($code("\telse {\n"));
									fragments.push($code("\t\treq.push(" + requirement.parameter + ");\n"));
									fragments.push($code("\t}\n"));
								}
							}
							else if(__ks_2 === DependencyKind.RequireOrExtern) {
								fragments.push($code("\tif(Type.isValue(" + requirement.parameter + ")) {\n"));
								if(requirement.flexible) {
									fragments.push($code("\t\treq.push(" + requirement.parameter + ", __ks_" + requirement.parameter + ");\n"));
									fragments.push($code("\t}\n"));
									fragments.push($code("\telse {\n"));
									fragments.push($code("\t\treq.push(" + requirement.name + ", typeof __ks_" + requirement.name + " === \"undefined\" ? {} : __ks_" + requirement.name + ");\n"));
									fragments.push($code("\t}\n"));
								}
								else {
									fragments.push($code("\t\treq.push(" + requirement.parameter + ");\n"));
									fragments.push($code("\t}\n"));
									fragments.push($code("\telse {\n"));
									fragments.push($code("\t\treq.push(" + requirement.name + ");\n"));
									fragments.push($code("\t}\n"));
								}
							}
							else if(__ks_2 === DependencyKind.RequireOrImport) {
								fragments.push($code("\tif(Type.isValue(" + requirement.parameter + ")) {\n"));
								if(requirement.flexible) {
									fragments.push($code("\t\treq.push(" + requirement.parameter + ", __ks_" + requirement.parameter + ");\n"));
									fragments.push($code("\t}\n"));
									fragments.push($code("\telse {\n"));
									var __ks_builder_3 = new FragmentBuilder(2);
									if(requirement.metadata.kind === ImportKind.KSFile) {
										$import.toKSFileFragments(__ks_builder_3, requirement.metadata, requirement.data, requirement.node);
									}
									else {
										$import.toNodeFileFragments(__ks_builder_3, requirement.metadata, requirement.data, requirement.node);
									}
									__ks_Array._im_append(fragments, __ks_builder_3.toArray());
									fragments.push($code("\t\treq.push(" + requirement.name + ", __ks_" + requirement.name + ");\n"));
									fragments.push($code("\t}\n"));
								}
								else {
									fragments.push($code("\t\treq.push(" + requirement.parameter + ");\n"));
									fragments.push($code("\t}\n"));
									fragments.push($code("\telse {\n"));
									var __ks_builder_4 = new FragmentBuilder(2);
									if(requirement.metadata.kind === ImportKind.KSFile) {
										$import.toKSFileFragments(__ks_builder_4, requirement.metadata, requirement.data, requirement.node);
									}
									else {
										$import.toNodeFileFragments(__ks_builder_4, requirement.metadata, requirement.data, requirement.node);
									}
									fragments.push($code("\t\treq.push(" + requirement.name + ");\n"));
									fragments.push($code("\t}\n"));
								}
							}
						}
						fragments.push($code("\treturn req;\n"));
					}
					fragments.push($code("}\n"));
				}
				fragments.push($code("module.exports = function("));
				var nf = false;
				for(var name in this._requirements) {
					if(nf) {
						fragments.push($comma);
					}
					else {
						nf = true;
					}
					fragments.push($code(name));
					if(this._requirements[name].flexible) {
						fragments.push($code(", __ks_" + name));
					}
				}
				fragments.push($code(") {\n"));
				if(this._dynamicRequirements.length) {
					if(this._options.format.destructuring === "es5") {
						fragments.push($code("\tvar __ks__ = __ks_require("));
						for(var i = 0, __ks_0 = this._dynamicRequirements.length, requirement; i < __ks_0; ++i) {
							requirement = this._dynamicRequirements[i];
							if(i) {
								fragments.push($comma);
							}
							fragments.push($code(requirement.parameter));
							if(requirement.flexible) {
								fragments.push($code(", __ks_" + requirement.parameter));
							}
						}
						fragments.push($code(");\n"));
						fragments.push($code("\tvar "));
						var i = -1;
						for(var __ks_0 = 0, __ks_2 = this._dynamicRequirements.length, requirement; __ks_0 < __ks_2; ++__ks_0) {
							requirement = this._dynamicRequirements[__ks_0];
							if(i !== -1) {
								fragments.push($comma);
							}
							fragments.push($code("" + requirement.name + " = __ks__[" + ++i + "]"));
							if(requirement.flexible) {
								fragments.push($code(", __ks_" + requirement.name + " = __ks__[" + ++i + "]"));
							}
						}
						fragments.push($code(";\n"));
					}
					else {
						fragments.push($code("\tvar ["));
						for(var i = 0, __ks_0 = this._dynamicRequirements.length, requirement; i < __ks_0; ++i) {
							requirement = this._dynamicRequirements[i];
							if(i !== 0) {
								fragments.push($comma);
							}
							fragments.push($code(requirement.name));
							if(requirement.flexible) {
								fragments.push($code(", __ks_" + requirement.name));
							}
						}
						fragments.push($code("] = __ks_require("));
						for(var i = 0, __ks_0 = this._dynamicRequirements.length, requirement; i < __ks_0; ++i) {
							requirement = this._dynamicRequirements[i];
							if(i) {
								fragments.push($comma);
							}
							fragments.push($code(requirement.parameter));
							if(requirement.flexible) {
								fragments.push($code(", __ks_" + requirement.parameter));
							}
						}
						fragments.push($code(");\n"));
					}
				}
				__ks_Array._im_append(fragments, builder.toArray());
				if(this._exportSource.length) {
					fragments.push($code("\treturn {"));
					nf = false;
					for(var __ks_0 = 0, __ks_2 = this._exportSource.length, src; __ks_0 < __ks_2; ++__ks_0) {
						src = this._exportSource[__ks_0];
						if(nf) {
							fragments.push($code(","));
						}
						else {
							nf = true;
						}
						fragments.push($code("\n\t\t" + src));
					}
					fragments.push($code("\n\t};\n"));
				}
				fragments.push($code("}\n"));
			}
			return fragments;
		},
		toFragments: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_toFragments_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toMetadata_0: function() {
			var data = {
				requirements: {},
				exports: {}
			};
			for(var name in this._requirements) {
				var variable = this._requirements[name];
				if(variable.parameter) {
					if(variable.flexible) {
						data.requirements[variable.name] = {
							class: true,
							nullable: true
						};
					}
					else {
						data.requirements[variable.name] = {
							nullable: true
						};
					}
				}
				else {
					if(variable.flexible) {
						data.requirements[name] = {
							class: true
						};
					}
					else {
						data.requirements[name] = {};
					}
				}
			}
			for(var name in this._exportMeta) {
				var variable = this._exportMeta[name];
				data.exports[name] = variable.export();
			}
			return data;
		},
		toMetadata: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_toMetadata_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ModuleBlock = Helper.class({
		$name: "ModuleBlock",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._body = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			ModuleBlock.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, module) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(module === void 0 || module === null) {
				throw new TypeError("'module' is not nullable");
			}
			AbstractNode.prototype.__ks_cons.call(this, []);
			this._data = data;
			this._module = module;
			this._options = module._options;
			this._scope = new Scope();
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ModuleBlock.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				AbstractNode.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._data.body[__ks_0];
				var __ks_2;
				if(KSType.isValue(__ks_2 = $compile.statement(statement, this)) ? (statement = __ks_2, true) : false) {
					this._body.push(statement);
					statement.analyse();
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._body[__ks_0];
				statement.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._body[__ks_0];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._module.directory();
		},
		directory: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_directory_0.apply(this);
			}
			return AbstractNode.prototype.directory.apply(this, arguments);
		},
		__ks_func_file_0: function() {
			return this._module.file();
		},
		file: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_file_0.apply(this);
			}
			return AbstractNode.prototype.file.apply(this, arguments);
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return false;
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return ModuleBlock.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return AbstractNode.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_module_0: function() {
			return this._module;
		},
		module: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_module_0.apply(this);
			}
			return AbstractNode.prototype.module.apply(this, arguments);
		},
		__ks_func_recipient_0: function() {
			return this._module;
		},
		recipient: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_recipient_0.apply(this);
			}
			else if(AbstractNode.prototype.recipient) {
				return AbstractNode.prototype.recipient.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._body[__ks_0];
				statement.toFragments(fragments, Mode.None);
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return ModuleBlock.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Statement = Helper.class({
		$name: "Statement",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._afterwards = [];
			this._variables = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			Statement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			var scope;
			if(arguments.length > 2 && (scope = arguments[++__ks_i]) !== void 0 && scope !== null) {
				if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
			}
			else {
				scope = parent.scope();
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent, scope]);
			this._options = Attribute.configure(data, parent._options, AttributeTarget.Statement);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				Statement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_afterward_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._afterwards.push(node);
		},
		afterward: function() {
			if(arguments.length === 1) {
				return Statement.prototype.__ks_func_afterward_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.afterward) {
				return AbstractNode.prototype.afterward.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_assignment_0: function(data, expression) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(expression === void 0 || expression === null) {
				throw new TypeError("'expression' is not nullable");
			}
			if(data.left.kind === NodeKind.Identifier) {
				var variable;
				var __ks_0;
				if(KSType.isValue(__ks_0 = this._scope.getVariable(data.left.name)) ? (variable = __ks_0, true) : false) {
					if(variable.isImmutable()) {
						SyntaxException.throwImmutable(data.left.name, this);
					}
				}
				else {
					this._variables.push(data.left.name);
					this._scope.define(data.left.name, false, this);
				}
			}
		},
		assignment: function() {
			if(arguments.length === 2) {
				return Statement.prototype.__ks_func_assignment_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.assignment) {
				return AbstractNode.prototype.assignment.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return false;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_isAwait_0.apply(this);
			}
			else if(AbstractNode.prototype.isAwait) {
				return AbstractNode.prototype.isAwait.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExit_0: function() {
			return false;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_isExit_0.apply(this);
			}
			else if(AbstractNode.prototype.isExit) {
				return AbstractNode.prototype.isExit.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_statement_0: function() {
			return this;
		},
		statement: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_statement_0.apply(this);
			}
			return AbstractNode.prototype.statement.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var variables = this.variables();
			if(variables.length) {
				fragments.newLine().code($runtime.scope(this) + variables.join(", ")).done();
			}
			var r, __ks_0;
			if(KSType.isValue(__ks_0 = this.toStatementFragments(fragments, mode)) ? (r = __ks_0, true) : false) {
				r.afterwards = this._afterwards;
				return r;
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._afterwards.length, afterward; __ks_0 < __ks_1; ++__ks_0) {
					afterward = this._afterwards[__ks_0];
					afterward.toAfterwardFragments(fragments);
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Statement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_variables_0: function() {
			return this._variables;
		},
		variables: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_variables_0.apply(this);
			}
			else if(AbstractNode.prototype.variables) {
				return AbstractNode.prototype.variables.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BreakStatement = Helper.class({
		$name: "BreakStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BreakStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BreakStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return BreakStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.line("break", this._data);
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return BreakStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var HelperTypeKind = {
		Native: 0,
		Referenced: 1,
		Unreferenced: 2
	};
	var TypeStatus = {
		Native: 0,
		Referenced: 1,
		Unreferenced: 2
	};
	var ClassDeclaration = Helper.class({
		$name: "ClassDeclaration",
		$extends: Statement,
		$static: {
			__ks_sttc_callMethod_0: function(node, variable, fnName, argName, retCode, fragments, method, index) {
				if(arguments.length < 8) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(fnName === void 0 || fnName === null) {
					throw new TypeError("'fnName' is not nullable");
				}
				if(argName === void 0 || argName === null) {
					throw new TypeError("'argName' is not nullable");
				}
				if(retCode === void 0 || retCode === null) {
					throw new TypeError("'retCode' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(method === void 0 || method === null) {
					throw new TypeError("'method' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if((method.max() === 0) && !method.isAsync()) {
					fragments.line(retCode, variable.name(), ".", fnName, index, ".apply(this)");
				}
				else {
					fragments.line(retCode, variable.name(), ".", fnName, index, ".apply(this, ", argName, ")");
				}
			},
			callMethod: function() {
				if(arguments.length === 8) {
					return ClassDeclaration.__ks_sttc_callMethod_0.apply(this, arguments);
				}
				else if(Statement.callMethod) {
					return Statement.callMethod.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_checkMethods_0: function(methods, parameters, index, node, fragments, call, argName, returns) {
				if(arguments.length < 8) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(call === void 0 || call === null) {
					throw new TypeError("'call' is not nullable");
				}
				if(argName === void 0 || argName === null) {
					throw new TypeError("'argName' is not nullable");
				}
				if(returns === void 0 || returns === null) {
					throw new TypeError("'returns' is not nullable");
				}
				if(!KSType.isValue(parameters[index + 1])) {
					SyntaxException.throwNotDifferentiableMethods(node);
				}
				var tree = [];
				var usages = [];
				var type, nf, item, usage;
				for(var __ks_0 in parameters[index + 1].types) {
					type = parameters[index + 1].types[__ks_0];
					tree.push(item = {
						type: type.type,
						methods: Helper.mapArray(type.methods, function(i) {
							return methods[i];
						}),
						usage: type.methods.length
					});
					if(type.type.isAny()) {
						item.weight = 0;
					}
					else {
						item.weight = 1000;
					}
					for(var __ks_1 = 0, __ks_2 = type.methods.length, i; __ks_1 < __ks_2; ++__ks_1) {
						i = type.methods[__ks_1];
						var method = methods[i];
						nf = true;
						for(var __ks_3 = 0, __ks_4 = usages.length; nf && __ks_3 < __ks_4; ++__ks_3) {
							usage = usages[__ks_3];
							if(usage.method === method) {
								nf = false;
							}
						}
						if(nf) {
							usages.push(usage = {
								method: method,
								types: [item]
							});
						}
						else {
							usage.types.push(item);
						}
					}
				}
				if(tree.length === 1) {
					item = tree[0];
					if(item.methods.length === 1) {
						call(fragments, item.methods[0], item.methods[0].index());
						return false;
					}
					else {
						return ClassDeclaration.checkMethods(methods, parameters, index + 1, node, fragments, call, argName, returns);
					}
				}
				else {
					for(var __ks_3 = 0, __ks_4 = usages.length; __ks_3 < __ks_4; ++__ks_3) {
						usage = usages[__ks_3];
						var count = usage.types.length;
						for(var __ks_1 = 0, __ks_2 = usage.types.length; count >= 0 && __ks_1 < __ks_2; ++__ks_1) {
							type = usage.types[__ks_1];
							count -= type.usage;
						}
						if(count === 0) {
							var __ks_item_1 = {
								type: [],
								path: [],
								methods: [usage.method],
								usage: 0,
								weight: 0
							};
							for(var __ks_1 = 0, __ks_2 = usage.types.length; __ks_1 < __ks_2; ++__ks_1) {
								type = usage.types[__ks_1];
								__ks_item_1.type.push.apply(__ks_item_1.type, [].concat(type.type));
								__ks_item_1.usage += type.usage;
								__ks_item_1.weight += type.weight;
								__ks_Array._im_remove(tree, type);
							}
							tree.push(__ks_item_1);
						}
					}
					tree.sort(function(a, b) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(a === void 0 || a === null) {
							throw new TypeError("'a' is not nullable");
						}
						if(b === void 0 || b === null) {
							throw new TypeError("'b' is not nullable");
						}
						if((a.weight === 0) && (b.weight !== 0)) {
							return 1;
						}
						else if(b.weight === 0) {
							return -1;
						}
						else if(a.type.length === b.type.length) {
							if(a.usage === b.usage) {
								return b.weight - a.weight;
							}
							else {
								return b.usage - a.usage;
							}
						}
						else {
							return a.type.length - b.type.length;
						}
					});
					var ctrl = fragments.newControl();
					var ne = true;
					for(var i = 0, __ks_3 = tree.length; i < __ks_3; ++i) {
						item = tree[i];
						if((i + 1) === tree.length) {
							if(!ctrl.isFirstStep()) {
								ctrl.step().code("else");
								ne = false;
							}
						}
						else {
							if(!ctrl.isFirstStep()) {
								ctrl.step().code("else");
							}
							ctrl.code("if(");
							item.type[0].toTestFragments(ctrl, new Literal(false, node, node.scope(), "" + argName + "[" + index + "]"));
							ctrl.code(")");
						}
						ctrl.step();
						if(item.methods.length === 1) {
							call(ctrl, item.methods[0], item.methods[0].index());
						}
						else {
							ClassDeclaration.checkMethods(methods, parameters, index + 1, node, ctrl, call, argName, returns);
						}
					}
					ctrl.done();
					return ne;
				}
			},
			checkMethods: function() {
				if(arguments.length === 8) {
					return ClassDeclaration.__ks_sttc_checkMethods_0.apply(this, arguments);
				}
				else if(Statement.checkMethods) {
					return Statement.checkMethods.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_isAssigningAlias_0: function(data, name, __ks_constructor_NaN, extending) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(__ks_constructor_NaN === void 0 || __ks_constructor_NaN === null) {
					throw new TypeError("'constructor' is not nullable");
				}
				if(extending === void 0 || extending === null) {
					throw new TypeError("'extending' is not nullable");
				}
				if(KSType.isArray(data)) {
					for(var __ks_0 = 0, __ks_1 = data.length, d; __ks_0 < __ks_1; ++__ks_0) {
						d = data[__ks_0];
						if(ClassDeclaration.isAssigningAlias(d, name, constructor, extending)) {
							return true;
						}
					}
				}
				else {
					var __ks_0 = data.kind;
					if(__ks_0 === NodeKind.BinaryExpression) {
						if(data.operator.kind === BinaryOperatorKind.Assignment) {
							if((data.left.kind === NodeKind.ThisExpression) && (data.left.name.name === name)) {
								return true;
							}
							else if((data.left.kind === NodeKind.MemberExpression) && (data.left.object.kind === NodeKind.Identifier) && (data.left.object.name === "this") && (data.left.property.kind === NodeKind.Identifier) && ((data.left.property.name === name) || (data.left.property.name === ("_" + name)))) {
								return true;
							}
						}
					}
					else if(__ks_0 === NodeKind.CallExpression) {
						if(constructor && (data.callee.kind === NodeKind.Identifier)) {
							if((data.callee.name === "this") || (extending && (data.callee.name === "super"))) {
								for(var __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
									arg = data.arguments[__ks_1];
									if((arg.kind === NodeKind.Identifier) && (arg.name === name)) {
										return true;
									}
								}
							}
						}
					}
					else if(__ks_0 === NodeKind.ReturnStatement) {
						return ClassDeclaration.isAssigningAlias(data.value, name, constructor, extending);
					}
				}
				return false;
			},
			isAssigningAlias: function() {
				if(arguments.length === 4) {
					return ClassDeclaration.__ks_sttc_isAssigningAlias_0.apply(this, arguments);
				}
				else if(Statement.isAssigningAlias) {
					return Statement.isAssigningAlias.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_mapMethod_0: function(method, target, map) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(method === void 0 || method === null) {
					throw new TypeError("'method' is not nullable");
				}
				if(target === void 0 || target === null) {
					throw new TypeError("'target' is not nullable");
				}
				if(map === void 0 || map === null) {
					throw new TypeError("'map' is not nullable");
				}
				var index = 1;
				var count = method.min();
				var item;
				var __ks_0 = method.parameters();
				for(var p = 0, __ks_1 = __ks_0.length, parameter; p < __ks_1; ++p) {
					parameter = __ks_0[p];
					for(var i = 1, __ks_2 = parameter.min(); i <= __ks_2; ++i) {
						if(KSType.isValue(map[index]) ? (item = map[index], false) : true) {
							item = map[index] = {
								index: index,
								types: {}
							};
						}
						ClassDeclaration.mapParameter(parameter.type(), method.index(), item);
						++index;
					}
					for(var i = parameter.min() + 1, __ks_2 = parameter.max(); count < target && i <= __ks_2; ++i) {
						if(KSType.isValue(map[index]) ? (item = map[index], false) : true) {
							item = map[index] = {
								index: index,
								types: {}
							};
						}
						ClassDeclaration.mapParameter(parameter.type(), method.index(), item);
						++index;
						++count;
					}
				}
			},
			mapMethod: function() {
				if(arguments.length === 3) {
					return ClassDeclaration.__ks_sttc_mapMethod_0.apply(this, arguments);
				}
				else if(Statement.mapMethod) {
					return Statement.mapMethod.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_mapParameter_0: function(type, index, map) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(map === void 0 || map === null) {
					throw new TypeError("'map' is not nullable");
				}
				if(KSType.is(type, UnionType)) {
					var __ks_0 = type.types();
					for(var __ks_1 = 0, __ks_2 = __ks_0.length, value; __ks_1 < __ks_2; ++__ks_1) {
						value = __ks_0[__ks_1];
						ClassDeclaration.mapParameter(value, index, map);
					}
				}
				else {
					if(KSType.isObject(map.types[type.hashCode()])) {
						map.types[type.hashCode()].methods.push(index);
					}
					else {
						map.types[type.hashCode()] = {
							type: type,
							methods: [index]
						};
					}
				}
			},
			mapParameter: function() {
				if(arguments.length === 3) {
					return ClassDeclaration.__ks_sttc_mapParameter_0.apply(this, arguments);
				}
				else if(Statement.mapParameter) {
					return Statement.mapParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_toSwitchFragments_0: function(node, fragments, variable, methods, name, extend, header, footer, call, argName, returns) {
				if(arguments.length < 11) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 11)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				else if(!KSType.isString(name)) {
					throw new TypeError("'name' is not of type 'String'");
				}
				if(extend === void 0) {
					extend = null;
				}
				if(header === void 0 || header === null) {
					throw new TypeError("'header' is not nullable");
				}
				if(footer === void 0 || footer === null) {
					throw new TypeError("'footer' is not nullable");
				}
				if(call === void 0 || call === null) {
					throw new TypeError("'call' is not nullable");
				}
				if(argName === void 0 || argName === null) {
					throw new TypeError("'argName' is not nullable");
				}
				if(returns === void 0 || returns === null) {
					throw new TypeError("'returns' is not nullable");
				}
				var block = header(node, fragments);
				var method;
				if(methods.length === 0) {
					if(KSType.isValue(extend)) {
						extend(node, block, null, variable);
					}
					else {
						block.newControl().code("if(" + argName + ".length !== 0)").step().line("throw new SyntaxError(\"wrong number of arguments\")").done();
					}
				}
				else if(methods.length === 1) {
					method = methods[0];
					var async = method.isAsync();
					var min = method.absoluteMin();
					var max = method.absoluteMax();
					if((min === 0) && (max >= Infinity)) {
						call(block, method, 0);
					}
					else if(min === max) {
						var ctrl = block.newControl();
						ctrl.code("if(" + argName + ".length === " + min + ")").step();
						call(ctrl, method, 0);
						if(extend) {
							extend(node, block, ctrl, variable);
						}
						else if(async) {
							ctrl.step().code("else").step();
							ctrl.line("let __ks_cb, __ks_error = new SyntaxError(\"wrong number of arguments\")");
							ctrl.newControl().code("if(arguments.length > 0 && Type.isFunction((__ks_cb = arguments[arguments.length - 1])))").step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
							ctrl.done();
						}
						else if(returns) {
							ctrl.done();
							block.line("throw new SyntaxError(\"wrong number of arguments\")");
						}
						else {
							ctrl.step().code("else").step().line("throw new SyntaxError(\"wrong number of arguments\")").done();
						}
					}
					else if(max < Infinity) {
						var ctrl = block.newControl();
						ctrl.code("if(" + argName + ".length >= " + min + " && " + argName + ".length <= " + max + ")").step();
						call(ctrl, method, 0);
						if(async) {
							ctrl.step().code("else").step();
							ctrl.line("let __ks_cb, __ks_error = new SyntaxError(\"wrong number of arguments\")");
							ctrl.newControl().code("if(arguments.length > 0 && Type.isFunction((__ks_cb = arguments[arguments.length - 1])))").step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
							ctrl.done();
						}
						else if(returns) {
							ctrl.done();
							block.line("throw new SyntaxError(\"wrong number of arguments\")");
						}
						else {
							ctrl.step().code("else").step().line("throw new SyntaxError(\"wrong number of arguments\")").done();
						}
					}
					else {
						call(block, method, 0);
					}
				}
				else {
					var async = methods[0].isAsync();
					var groups = {};
					var infinities = [];
					var min = Infinity;
					var max = 0;
					var asyncCount = 0;
					var syncCount = 0;
					for(var index = 0, __ks_0 = methods.length; index < __ks_0; ++index) {
						method = methods[index];
						method.index(index);
						if(method.isAsync()) {
							++asyncCount;
						}
						else {
							++syncCount;
						}
						if(method.absoluteMax() === Infinity) {
							infinities.push(method);
						}
						else {
							for(var n = method.absoluteMin(), __ks_1 = method.absoluteMax(); n <= __ks_1; ++n) {
								if(KSType.isValue(groups[n])) {
									groups[n].methods.push(method);
								}
								else {
									groups[n] = {
										n: n,
										methods: [method]
									};
								}
							}
							min = Math.min(min, method.absoluteMin());
							max = Math.max(max, method.absoluteMax());
						}
					}
					if((asyncCount !== 0) && (syncCount !== 0)) {
						SyntaxException.throwInvalidSyncMethods(node.name(), name, node);
					}
					if(infinities.length) {
						for(var __ks_1 = 0, __ks_0 = infinities.length; __ks_1 < __ks_0; ++__ks_1) {
							method = infinities[__ks_1];
							for(var group in groups) {
								if(method.absoluteMin() >= group.n) {
									group.methods.push(method);
								}
							}
						}
					}
					if(min === Infinity) {
						throw new NotImplementedException(node);
					}
					else {
						for(var i = min; i <= max; ++i) {
							var group;
							if(KSType.isValue(groups[i]) ? (group = groups[i], true) : false) {
								var gg;
								for(var j = i + 1; (KSType.isValue(groups[j]) ? (gg = groups[j], true) : false) && __ks_Array._cm_same(gg.methods, group.methods) && j <= max; ++j) {
									if(KSType.isArray(group.n)) {
										group.n.push(j);
									}
									else {
										group.n = [i, j];
									}
									delete groups[j];
								}
							}
						}
						var ctrl = block.newControl();
						for(var k in groups) {
							var group = groups[k];
							if(!ctrl.isFirstStep()) {
								ctrl.step().code("else ");
							}
							if(KSType.isArray(group.n)) {
								if(group.n.length === 2) {
									ctrl.code("if(" + argName + ".length === " + group.n[0] + " || " + argName + ".length === " + group.n[1] + ")").step();
								}
								else {
									ctrl.code("if(" + argName + ".length >= " + group.n[0] + " && " + argName + ".length <= " + group.n[group.n.length - 1] + ")").step();
								}
							}
							else {
								ctrl.code("if(" + argName + ".length === " + group.n + ")").step();
							}
							if(group.methods.length === 1) {
								call(ctrl, group.methods[0], group.methods[0].index());
							}
							else {
								var parameters = {};
								for(var __ks_1 = 0, __ks_0 = group.methods.length; __ks_1 < __ks_0; ++__ks_1) {
									method = group.methods[__ks_1];
									ClassDeclaration.mapMethod(method, group.n, parameters);
								}
								var indexes = [];
								for(var __ks_1 in parameters) {
									var parameter = parameters[__ks_1];
									for(var hash in parameter.types) {
										var type = parameter.types[hash];
										__ks_Array._im_remove.apply(__ks_Array, [type.methods].concat(indexes));
										if(type.methods.length === 0) {
											delete parameter.types[hash];
										}
									}
									for(var __ks_0 in parameter.types) {
										var type = parameter.types[__ks_0];
										if(type.methods.length === 1) {
											__ks_Array._im_pushUniq(indexes, type.methods[0]);
										}
									}
								}
								if(ClassDeclaration.checkMethods(methods, parameters, 0, node, ctrl, call, argName, returns)) {
									if(returns) {
										fragments.line("throw new Error(\"Wrong type of arguments\")");
									}
									else {
										fragments.step().code("else").step().code("throw new Error(\"Wrong type of arguments\")");
									}
								}
							}
						}
						if(infinities.length === 0) {
							if(async) {
								ctrl.step().code("else").step();
								ctrl.line("let __ks_cb, __ks_error = new SyntaxError(\"wrong number of arguments\")");
								ctrl.newControl().code("if(arguments.length > 0 && Type.isFunction((__ks_cb = arguments[arguments.length - 1])))").step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
								ctrl.done();
							}
							else if(returns) {
								ctrl.done();
								block.line("throw new SyntaxError(\"wrong number of arguments\")");
							}
							else {
								ctrl.step().code("else").step().line("throw new SyntaxError(\"wrong number of arguments\")").done();
							}
						}
						else if(infinities.length === 1) {
							ctrl.step().code("else").step();
							call(ctrl, infinities[0], infinities[0].index());
							ctrl.done();
						}
						else {
							throw new NotImplementedException(node);
						}
					}
				}
				footer(block);
				return fragments;
			},
			toSwitchFragments: function() {
				if(arguments.length === 11) {
					return ClassDeclaration.__ks_sttc_toSwitchFragments_0.apply(this, arguments);
				}
				else if(Statement.toSwitchFragments) {
					return Statement.toSwitchFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._abstract = false;
			this._abstractMethods = {};
			this._classMethods = {};
			this._classVariables = {};
			this._constructors = [];
			this._destructor = null;
			this._es5 = false;
			this._extends = false;
			this._instanceMethods = {};
			this._instanceVariables = {};
			this._references = {};
			this._sealed = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ClassDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			this._constructorScope = new Scope(parent.scope());
			this._destructorScope = new Scope(parent.scope());
			this._instanceVariableScope = new Scope(parent.scope());
			this._es5 = this._options.format.classes === "es5";
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			this._type = new ClassType(this._name, this._scope);
			this._scope.define(this._name, true, this._type, this);
			var variable = this._constructorScope.define("this", true, this._type.reference(), this);
			variable.replaceCall = Helper.vcurry(function(data, __ks_arguments_1) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				return new CallThisConstructorSubstitude(data, __ks_arguments_1, this._type);
			}, this);
			this._destructorScope.define("this", true, this._type.reference(), this);
			this._destructorScope.rename("this", "that");
			this._instanceVariableScope.define("this", true, this._type.reference(), this);
			if(KSType.isValue(this._data.extends)) {
				this._extends = true;
				this._extendsName = this._data.extends.name;
				var __ks_0;
				if(KSType.isValue(__ks_0 = this._scope.getVariable(this._extendsName)) ? (variable = __ks_0, false) : true) {
					ReferenceException.throwNotDefined(this._extendsName, this);
				}
				else if(!KSType.is(this._extendsType = variable.type(), ClassType)) {
					TypeException.throwNotClass(this._extendsName, this);
				}
				this._type.extends(this._extendsType);
				var superVariable = this._constructorScope.define("super", true, this._extendsType.reference(), this);
				if(this._extendsType.isSealedAlien()) {
					superVariable.replaceCall = Helper.vcurry(function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						SyntaxException.throwNotCompatibleConstructor(this._name, this);
					}, this);
				}
				else {
					superVariable.replaceCall = Helper.vcurry(function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new CallSuperConstructorSubstitude(data, __ks_arguments_1, this._type);
					}, this);
				}
				this._instanceVariableScope.define("super", true, this._extendsType.reference(), this);
			}
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(modifier.kind === ModifierKind.Abstract) {
					this._abstract = true;
					this._type.abstract();
				}
				else if(modifier.kind === ModifierKind.Sealed) {
					this._sealed = true;
					this._type.seal();
				}
			}
			var declaration;
			for(var __ks_0 = 0, __ks_1 = this._data.members.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.members[__ks_0];
				var __ks_2 = data.kind;
				if(__ks_2 === NodeKind.CommentBlock) {
				}
				else if(__ks_2 === NodeKind.CommentLine) {
				}
				else if(__ks_2 === NodeKind.FieldDeclaration) {
					declaration = new ClassVariableDeclaration(data, this);
					declaration.analyse();
				}
				else if(__ks_2 === NodeKind.MethodDeclaration) {
					if(this._type.isConstructor(data.name.name)) {
						declaration = new ClassConstructorDeclaration(data, this);
					}
					else if(this._type.isDestructor(data.name.name)) {
						declaration = new ClassDestructorDeclaration(data, this);
					}
					else {
						declaration = new ClassMethodDeclaration(data, this);
					}
					declaration.analyse();
				}
				else {
					throw new NotSupportedException("Unknow kind " + data.kind, this);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var name in this._classVariables) {
				var variable = this._classVariables[name];
				variable.prepare();
				this._type.addClassVariable(name, variable.type());
			}
			for(var name in this._classMethods) {
				var methods = this._classMethods[name];
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.prepare();
					this._type.addClassMethod(name, method.type());
				}
			}
			for(var name in this._instanceVariables) {
				var variable = this._instanceVariables[name];
				variable.prepare();
				this._type.addInstanceVariable(name, variable.type());
			}
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.prepare();
					this._type.addInstanceMethod(name, method.type());
				}
			}
			for(var name in this._abstractMethods) {
				var methods = this._abstractMethods[name];
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.prepare();
					this._type.addAbstractMethod(name, method.type());
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.prepare();
				this._type.addConstructor(method.type());
			}
			if(KSType.isValue(this._destructor)) {
				this._destructor.prepare();
				this._type.addDestructor();
			}
			var notImplemented;
			if(this._extends && !this._abstract && ((notImplemented = this._type.getMissingAbstractMethods()).length !== 0)) {
				SyntaxException.throwMissingAbstractMethods(this._name, notImplemented, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 in this._classVariables) {
				var variable = this._classVariables[__ks_0];
				variable.translate();
			}
			for(var __ks_0 in this._instanceVariables) {
				var variable = this._instanceVariables[__ks_0];
				variable.translate();
			}
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.translate();
			}
			if(KSType.isValue(this._destructor)) {
				this._destructor.translate();
			}
			for(var __ks_0 in this._instanceMethods) {
				var methods = this._instanceMethods[__ks_0];
				for(var __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.translate();
				}
			}
			for(var __ks_0 in this._abstractMethods) {
				var methods = this._abstractMethods[__ks_0];
				for(var __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.translate();
				}
			}
			for(var __ks_0 in this._classMethods) {
				var methods = this._classMethods[__ks_0];
				for(var __ks_1 = 0, __ks_2 = methods.length, method; __ks_1 < __ks_2; ++__ks_1) {
					method = methods[__ks_1];
					method.translate();
				}
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addReference_0: function(type, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(!type.isAny()) {
				if(KSType.is(type, ReferenceType)) {
					var name = type.name();
					if(!KSType.isValue(this._references[name])) {
						var variable, __ks_0;
						if($typeofs[name] === true) {
							this._references[name] = {
								status: TypeStatus.Native,
								type: type
							};
						}
						else if(KSType.isValue(__ks_0 = this._scope.getVariable(name)) ? (variable = __ks_0, true) : false) {
							this._references[name] = {
								status: TypeStatus.Referenced,
								type: type,
								variable: variable
							};
						}
						else {
							this._references[name] = {
								status: TypeStatus.Unreferenced,
								type: type
							};
						}
					}
				}
				else if(KSType.is(type, UnionType)) {
					var __ks_0 = type.types();
					for(var __ks_1 = 0, __ks_2 = __ks_0.length, type; __ks_1 < __ks_2; ++__ks_1) {
						type = __ks_0[__ks_1];
						this.addReference(type, node);
					}
				}
				else {
					throw new NotImplementedException(this);
				}
			}
		},
		addReference: function() {
			if(arguments.length === 2) {
				return ClassDeclaration.prototype.__ks_func_addReference_0.apply(this, arguments);
			}
			else if(Statement.prototype.addReference) {
				return Statement.prototype.addReference.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_extends_0: function() {
			return this._extendsType;
		},
		extends: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_extends_0.apply(this);
			}
			else if(Statement.prototype.extends) {
				return Statement.prototype.extends.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasInits_0: function() {
			for(var __ks_0 in this._instanceVariables) {
				var field = this._instanceVariables[__ks_0];
				if(field.hasDefaultValue()) {
					return true;
				}
			}
			return false;
		},
		hasInits: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_hasInits_0.apply(this);
			}
			else if(Statement.prototype.hasInits) {
				return Statement.prototype.hasInits.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExtending_0: function() {
			return this._extends;
		},
		isExtending: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_isExtending_0.apply(this);
			}
			else if(Statement.prototype.isExtending) {
				return Statement.prototype.isExtending.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newInstanceMethodScope_0: function(method) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			else if(!KSType.is(method, ClassMethodDeclaration)) {
				throw new TypeError("'method' is not of type 'ClassMethodDeclaration'");
			}
			var scope = new Scope(this._scope);
			scope.define("this", true, this._type.reference(), this);
			if(this._extends) {
				var variable = scope.define("super", true, this._extendsType.reference(), this);
				if(this._es5) {
					variable.replaceCall = Helper.vcurry(function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new CallSuperMethodES5Substitude(data, __ks_arguments_1, method, this._type);
					}, this);
					variable.replaceMemberCall = Helper.vcurry(function(property, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(property === void 0 || property === null) {
							throw new TypeError("'property' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new MemberSuperMethodES5Substitude(property, __ks_arguments_1, this._type);
					}, this);
				}
				else {
					variable.replaceCall = Helper.vcurry(function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new CallSuperMethodES6Substitude(data, __ks_arguments_1, method, this._type);
					}, this);
				}
			}
			return scope;
		},
		newInstanceMethodScope: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_newInstanceMethodScope_0.apply(this, arguments);
			}
			else if(Statement.prototype.newInstanceMethodScope) {
				return Statement.prototype.newInstanceMethodScope.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toContinousES5Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			this.module().flag("Helper");
			var line = fragments.newLine().code($runtime.scope(this), this._name, " = ", $runtime.helper(this), ".class(");
			var clazz = line.newObject();
			clazz.line("$name: " + $quote(this._name));
			if(KSType.isValue(this._data.version)) {
				clazz.line("$version: [" + this._data.version.major + ", " + this._data.version.minor + ", " + this._data.version.patch + "]");
			}
			if(this._extends) {
				clazz.line("$extends: ", this._extendsName);
			}
			var m = [];
			var ctrl;
			if(KSType.isValue(this._destructor) || !__ks_Object._cm_isEmpty(this._classMethods)) {
				ctrl = clazz.newLine().code("$static: ").newObject();
				if(KSType.isValue(this._destructor)) {
					this._destructor.toFragments(ctrl, Mode.None);
					ClassDestructorDeclaration.toSwitchFragments(this, ctrl, this._type);
				}
				for(var name in this._classMethods) {
					var methods = this._classMethods[name];
					__ks_Array._im_clear(m);
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						method.toFragments(ctrl, Mode.None);
						m.push(method.type());
					}
					ClassMethodDeclaration.toClassSwitchFragments(this, ctrl.newControl(), this._type, m, name, function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.code(name + ": function()").step();
					}, function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
					});
				}
				ctrl.done();
			}
			if(!this._extends || this._extendsType.isSealedAlien()) {
				clazz.newControl().code("$create: function()").step().line("this.__ks_init()").line("this.__ks_cons(arguments)");
			}
			if(this.hasInits()) {
				ctrl = clazz.newControl().code("__ks_init_1: function()").step();
				for(var __ks_0 in this._instanceVariables) {
					var field = this._instanceVariables[__ks_0];
					field.toFragments(ctrl);
				}
				ctrl = clazz.newControl().code("__ks_init: function()").step();
				if(this._extends && !this._extendsType.isSealedAlien()) {
					ctrl.line(this._extendsName + ".prototype.__ks_init.call(this)");
				}
				ctrl.line(this._name + ".prototype.__ks_init_1.call(this)");
			}
			else {
				if(this._extends) {
					if(this._extendsType.isSealedAlien()) {
						clazz.newControl().code("__ks_init: function()").step();
					}
					else {
						clazz.newControl().code("__ks_init: function()").step().line(this._extendsName + ".prototype.__ks_init.call(this)");
					}
				}
				else {
					clazz.newControl().code("__ks_init: function()").step();
				}
			}
			__ks_Array._im_clear(m);
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toSwitchFragments(this, clazz.newControl(), this._type, m, function(node, fragments) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code("__ks_cons: function(args)").step();
			}, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
			});
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + ": function()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
				});
			}
			clazz.done();
			line.code(")").done();
		},
		toContinousES5Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toContinousES5Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toContinousES5Fragments) {
				return Statement.prototype.toContinousES5Fragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toContinousES6Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var clazz = fragments.newControl().code("class ", this._name);
			if(this._extends) {
				clazz.code(" extends ", this._extendsName);
			}
			clazz.step();
			var ctrl;
			if(!this._extends) {
				clazz.newControl().code("constructor()").step().line("this.__ks_init()").line("this.__ks_cons(arguments)").done();
			}
			else if(this._extendsType.isSealedAlien()) {
				clazz.newControl().code("constructor()").step().line("super()").line("this.__ks_init()").line("this.__ks_cons(arguments)").done();
			}
			if(this.hasInits()) {
				ctrl = clazz.newControl().code("__ks_init_1()").step();
				for(var __ks_0 in this._instanceVariables) {
					var field = this._instanceVariables[__ks_0];
					field.toFragments(ctrl);
				}
				ctrl.done();
				ctrl = clazz.newControl().code("__ks_init()").step();
				if(this._extends && !this._extendsType.isSealedAlien()) {
					ctrl.line(this._extendsName + ".prototype.__ks_init.call(this)");
				}
				ctrl.line(this._name + ".prototype.__ks_init_1.call(this)");
				ctrl.done();
			}
			else {
				if(this._extends) {
					if(this._extendsType.isSealedAlien()) {
						clazz.newControl().code("__ks_init()").step().done();
					}
					else {
						clazz.newControl().code("__ks_init()").step().line(this._extendsName + ".prototype.__ks_init.call(this)").done();
					}
				}
				else {
					clazz.newControl().code("__ks_init()").step().done();
				}
			}
			var m = [];
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toSwitchFragments(this, clazz.newControl(), this._type, m, function(node, fragments) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code("__ks_cons(args)").step();
			}, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				fragments.done();
			});
			if(KSType.isValue(this._destructor)) {
				this._destructor.toFragments(clazz, Mode.None);
				ClassDestructorDeclaration.toSwitchFragments(this, clazz, this._type);
			}
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			for(var name in this._classMethods) {
				var methods = this._classMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toClassSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code("static " + name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			clazz.done();
		},
		toContinousES6Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toContinousES6Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toContinousES6Fragments) {
				return Statement.prototype.toContinousES6Fragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toSealedES5Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			this.module().flag("Helper");
			var line = fragments.newLine().code($runtime.scope(this), this._name, " = ", $runtime.helper(this), ".class(");
			var clazz = line.newObject();
			clazz.line("$name: " + $quote(this._name));
			if(KSType.isValue(this._data.version)) {
				clazz.line("$version: [" + this._data.version.major + ", " + this._data.version.minor + ", " + this._data.version.patch + "]");
			}
			if(this._extends) {
				clazz.line("$extends: ", this._extendsName);
			}
			var m = [];
			var ctrl;
			if(this._extends && !this._extendsType.isSealedAlien()) {
				ctrl = clazz.newControl().code("__ks_init: function()").step();
				ctrl.line(this._extendsName, ".prototype.__ks_init.call(this)");
				if(this.hasInits()) {
					for(var __ks_0 in this._instanceVariables) {
						var field = this._instanceVariables[__ks_0];
						field.toFragments(ctrl);
					}
				}
			}
			else {
				ctrl = clazz.newControl().code("$create: function()").step();
				if(this.hasInits()) {
					for(var __ks_0 in this._instanceVariables) {
						var field = this._instanceVariables[__ks_0];
						field.toFragments(ctrl);
					}
				}
				ctrl.line("this.__ks_cons(arguments)");
			}
			__ks_Array._im_clear(m);
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toSwitchFragments(this, clazz.newControl(), this._type, m, function(node, fragments) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code("__ks_cons: function(args)").step();
			}, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
			});
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + ": function()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
				});
			}
			clazz.done();
			line.code(")").done();
		},
		toSealedES5Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toSealedES5Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toSealedES5Fragments) {
				return Statement.prototype.toSealedES5Fragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toSealedES6Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var clazz = fragments.newControl().code("class ", this._name);
			if(this._extends) {
				clazz.code(" extends ", this._extendsName);
			}
			clazz.step();
			var ctrl;
			if(this._extends && !this._extendsType.isSealedAlien()) {
				ctrl = clazz.newControl().code("__ks_init()").step();
				ctrl.line(this._extendsName, ".prototype.__ks_init.call(this)");
				if(this.hasInits()) {
					for(var __ks_0 in this._instanceVariables) {
						var field = this._instanceVariables[__ks_0];
						field.toFragments(ctrl);
					}
				}
				ctrl.done();
			}
			else {
				ctrl = clazz.newControl().code("constructor()").step();
				if(this.hasInits()) {
					for(var __ks_0 in this._instanceVariables) {
						var field = this._instanceVariables[__ks_0];
						field.toFragments(ctrl);
					}
				}
				ctrl.line("this.__ks_cons(arguments)");
				ctrl.done();
			}
			var m = [];
			for(var __ks_0 = 0, __ks_1 = this._constructors.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = this._constructors[__ks_0];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toSwitchFragments(this, clazz.newControl(), this._type, m, function(node, fragments) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code("__ks_cons(args)").step();
			}, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				fragments.done();
			});
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			for(var name in this._classMethods) {
				var methods = this._classMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
					method = methods[__ks_0];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toClassSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code("static " + name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			clazz.done();
		},
		toSealedES6Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toSealedES6Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toSealedES6Fragments) {
				return Statement.prototype.toSealedES6Fragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._sealed) {
				if(this._es5) {
					this.toSealedES5Fragments(fragments);
				}
				else {
					this.toSealedES6Fragments(fragments);
				}
			}
			else {
				if(this._es5) {
					this.toContinousES5Fragments(fragments);
				}
				else {
					this.toContinousES6Fragments(fragments);
				}
			}
			for(var __ks_0 in this._classVariables) {
				var variable = this._classVariables[__ks_0];
				variable.toFragments(fragments);
			}
			if(!this._es5 && KSType.isValue(this._data.version)) {
				var line = fragments.newLine();
				line.code("Object.defineProperty(" + this._name + ", 'version', ").newObject().line("value: [" + this._data.version.major + ", " + this._data.version.minor + ", " + this._data.version.patch + "]").done();
				line.code(")").done();
			}
			var references;
			if(KSType.isValue(__ks_0 = this.module().listReferences(this._name)) ? (references = __ks_0, true) : false) {
				for(var __ks_0 = 0, __ks_1 = references.length, ref; __ks_0 < __ks_1; ++__ks_0) {
					ref = references[__ks_0];
					fragments.line(ref);
				}
			}
			if(this._sealed) {
				fragments.line("var " + this._type.sealName() + " = {}");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ClassDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			fn(this._name, this._type);
		},
		walk: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Statement.prototype.walk) {
				return Statement.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CallThisConstructorSubstitude = Helper.class({
		$name: "CallThisConstructorSubstitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, __ks_class_1) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.is(__ks_class_1, Type)) {
				throw new TypeError("'class' is not of type 'Type'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				CallThisConstructorSubstitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallThisConstructorSubstitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("" + this._class.name() + ".prototype.__ks_cons.call(this, [");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallThisConstructorSubstitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return Type.Void;
		},
		type: function() {
			if(arguments.length === 0) {
				return CallThisConstructorSubstitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CallSuperConstructorSubstitude = Helper.class({
		$name: "CallSuperConstructorSubstitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, __ks_class_1) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.is(__ks_class_1, Type)) {
				throw new TypeError("'class' is not of type 'Type'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				CallSuperConstructorSubstitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallSuperConstructorSubstitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("" + this._class.extends().name() + ".prototype.__ks_cons.call(this, [");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallSuperConstructorSubstitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return Type.Void;
		},
		type: function() {
			if(arguments.length === 0) {
				return CallSuperConstructorSubstitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CallSuperMethodES5Substitude = Helper.class({
		$name: "CallSuperMethodES5Substitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, method, __ks_class_1) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			else if(!KSType.is(method, ClassMethodDeclaration)) {
				throw new TypeError("'method' is not of type 'ClassMethodDeclaration'");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.is(__ks_class_1, Type)) {
				throw new TypeError("'class' is not of type 'Type'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._method = method;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				CallSuperMethodES5Substitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallSuperMethodES5Substitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("" + this._class.extends().name() + ".prototype." + this._method.name() + ".call(this, [");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallSuperMethodES5Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._method.type().returnType();
		},
		type: function() {
			if(arguments.length === 0) {
				return CallSuperMethodES5Substitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CallSuperMethodES6Substitude = Helper.class({
		$name: "CallSuperMethodES6Substitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, method, __ks_class_1) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			else if(!KSType.is(method, ClassMethodDeclaration)) {
				throw new TypeError("'method' is not of type 'ClassMethodDeclaration'");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.is(__ks_class_1, Type)) {
				throw new TypeError("'class' is not of type 'Type'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._method = method;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				CallSuperMethodES6Substitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallSuperMethodES6Substitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("super." + this._method.name() + "(");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallSuperMethodES6Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._method.type().returnType();
		},
		type: function() {
			if(arguments.length === 0) {
				return CallSuperMethodES6Substitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var MemberSuperMethodES5Substitude = Helper.class({
		$name: "MemberSuperMethodES5Substitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(property, __ks_arguments_1, __ks_class_1) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			else if(!KSType.isString(property)) {
				throw new TypeError("'property' is not of type 'String'");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.is(__ks_class_1, Type)) {
				throw new TypeError("'class' is not of type 'Type'");
			}
			this._property = property;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				MemberSuperMethodES5Substitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return MemberSuperMethodES5Substitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("" + this._class.extends().name() + ".prototype." + this._property + ".apply(this, [");
			for(var index = 0, __ks_0 = this._arguments.length, argument; index < __ks_0; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return MemberSuperMethodES5Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassMethodDeclaration = Helper.class({
		$name: "ClassMethodDeclaration",
		$extends: Statement,
		$static: {
			__ks_sttc_toClassSwitchFragments_0: function(node, fragments, variable, methods, name, header, footer) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(header === void 0 || header === null) {
					throw new TypeError("'header' is not nullable");
				}
				if(footer === void 0 || footer === null) {
					throw new TypeError("'footer' is not nullable");
				}
				var extend = null;
				if(variable.isExtending()) {
					extend = function(node, fragments, ctrl, variable) {
						if(arguments.length < 4) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(ctrl === void 0) {
							ctrl = null;
						}
						if(variable === void 0 || variable === null) {
							throw new TypeError("'variable' is not nullable");
						}
						var __ks_extends_1 = variable.extends().name();
						if(node.scope().getVariable(__ks_extends_1).type().hasClassMethod(name)) {
							ctrl.done();
							fragments.line("return " + __ks_extends_1 + "." + name + ".apply(null, arguments)");
						}
						else {
							ctrl.step().code("else if(" + __ks_extends_1 + "." + name + ")").step().line("return " + __ks_extends_1 + "." + name + ".apply(null, arguments)").done();
							fragments.line("throw new SyntaxError(\"wrong number of arguments\")");
						}
					};
				}
				return ClassDeclaration.toSwitchFragments(node, fragments, variable, methods, name, extend, header, footer, Helper.vcurry(ClassDeclaration.callMethod, null, node, variable, "__ks_sttc_" + name + "_", "arguments", "return "), "arguments", true);
			},
			toClassSwitchFragments: function() {
				if(arguments.length === 7) {
					return ClassMethodDeclaration.__ks_sttc_toClassSwitchFragments_0.apply(this, arguments);
				}
				else if(Statement.toClassSwitchFragments) {
					return Statement.toClassSwitchFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_toInstanceSwitchFragments_0: function(node, fragments, variable, methods, name, header, footer) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(header === void 0 || header === null) {
					throw new TypeError("'header' is not nullable");
				}
				if(footer === void 0 || footer === null) {
					throw new TypeError("'footer' is not nullable");
				}
				var extend = null;
				if(variable.isExtending()) {
					extend = function(node, fragments, ctrl, variable) {
						if(arguments.length < 4) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(ctrl === void 0) {
							ctrl = null;
						}
						if(variable === void 0 || variable === null) {
							throw new TypeError("'variable' is not nullable");
						}
						var __ks_extends_1 = variable.extends().name();
						if(node.scope().getVariable(__ks_extends_1).type().hasInstanceMethod(name)) {
							ctrl.done();
							fragments.line("return " + __ks_extends_1 + ".prototype." + name + ".apply(this, arguments)");
						}
						else {
							ctrl.step().code("else if(" + __ks_extends_1 + ".prototype." + name + ")").step().line("return " + __ks_extends_1 + ".prototype." + name + ".apply(this, arguments)").done();
							fragments.line("throw new SyntaxError(\"wrong number of arguments\")");
						}
					};
				}
				return ClassDeclaration.toSwitchFragments(node, fragments, variable, methods, name, extend, header, footer, Helper.vcurry(ClassDeclaration.callMethod, null, node, variable, "prototype.__ks_func_" + name + "_", "arguments", "return "), "arguments", true);
			},
			toInstanceSwitchFragments: function() {
				if(arguments.length === 7) {
					return ClassMethodDeclaration.__ks_sttc_toInstanceSwitchFragments_0.apply(this, arguments);
				}
				else if(Statement.toInstanceSwitchFragments) {
					return Statement.toInstanceSwitchFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._abstract = false;
			this._aliases = [];
			this._analysed = false;
			this._awaiting = false;
			this._exit = false;
			this._instance = true;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ClassMethodDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newInstanceMethodScope(this)]);
			this._name = data.name.name;
			for(var __ks_0 = 0, __ks_1 = data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = data.modifiers[__ks_0];
				if(modifier.kind === ModifierKind.Abstract) {
					this._abstract = true;
				}
				else if(modifier.kind === ModifierKind.Static) {
					this._instance = false;
				}
			}
			if(this._instance) {
				if(this._abstract) {
					if(parent._abstract) {
						if(KSType.isArray(parent._abstractMethods[this._name])) {
							parent._abstractMethods[this._name].push(this);
						}
						else {
							parent._abstractMethods[this._name] = [this];
						}
					}
					else {
						SyntaxException.throwNotAbstractClass(parent._name, this._name, parent);
					}
				}
				else {
					if(KSType.isArray(parent._instanceMethods[this._name])) {
						this._internalName = "__ks_func_" + this._name + "_" + parent._instanceMethods[this._name].length;
						parent._instanceMethods[this._name].push(this);
					}
					else {
						this._internalName = "__ks_func_" + this._name + "_0";
						parent._instanceMethods[this._name] = [this];
					}
				}
			}
			else if((this._name === "name") || (this._name === "version")) {
				SyntaxException.throwReservedClassMethod(this._name, parent);
			}
			else {
				if(KSType.isArray(parent._classMethods[this._name])) {
					this._internalName = "__ks_sttc_" + this._name + "_" + parent._classMethods[this._name].length;
					parent._classMethods[this._name].push(this);
				}
				else {
					this._internalName = "__ks_sttc_" + this._name + "_0";
					parent._classMethods[this._name] = [this];
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parent.addReference(Type.fromAST(parameter.type, this), this);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassMethodDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._body = $ast.body(this._data.body);
			this._parameters = [];
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(!this._analysed) {
				for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
					parameter = this._parameters[__ks_0];
					parameter.prepare();
				}
				var __ks_arguments_1 = Helper.mapArray(this._parameters, function(parameter) {
					return parameter.type();
				});
				this._type = new ClassMethodType(__ks_arguments_1, this._data, this);
				if(this._parent._extends) {
					var method;
					if(KSType.isValue(__ks_0 = this._parent._extendsType.getInstanceMethod(this._name, __ks_arguments_1)) ? (method = __ks_0, true) : false) {
						if(KSType.isValue(this._data.type)) {
							if(!this._type.returnType().isInstanceOf(method.returnType())) {
								SyntaxException.throwInvalidMethodReturn(this._parent.name(), this._name, this);
							}
						}
						else {
							this._type.returnType(method.returnType());
						}
					}
				}
				this._analysed = true;
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			this._statements = [];
			for(var __ks_0 = 0, __ks_1 = this._aliases.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._aliases[__ks_0];
				this._statements.push(statement);
				statement.analyse();
				if(statement.isAwait()) {
					this._awaiting = true;
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._body[__ks_0];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
				if(this._exit) {
					SyntaxException.throwDeadCode(statement);
				}
				else {
					this._exit = statement.isExit();
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addAliasStatement_0: function(statement) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(statement === void 0 || statement === null) {
				throw new TypeError("'statement' is not nullable");
			}
			else if(!KSType.is(statement, AliasStatement)) {
				throw new TypeError("'statement' is not of type 'AliasStatement'");
			}
			if(!ClassDeclaration.isAssigningAlias(this._body, statement.name(), false, false)) {
				this._aliases.push(statement);
			}
		},
		addAliasStatement: function() {
			if(arguments.length === 1) {
				return ClassMethodDeclaration.prototype.__ks_func_addAliasStatement_0.apply(this, arguments);
			}
			else if(Statement.prototype.addAliasStatement) {
				return Statement.prototype.addAliasStatement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAbstract_0: function() {
			return this._abstract;
		},
		isAbstract: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_isAbstract_0.apply(this);
			}
			else if(Statement.prototype.isAbstract) {
				return Statement.prototype.isAbstract.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return ClassMethodDeclaration.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Statement.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isInstance_0: function() {
			return this._instance;
		},
		isInstance: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_isInstance_0.apply(this);
			}
			else if(Statement.prototype.isInstance) {
				return Statement.prototype.isInstance.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isMethod_0: function() {
			return true;
		},
		isMethod: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_isMethod_0.apply(this);
			}
			else if(Statement.prototype.isMethod) {
				return Statement.prototype.isMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_length_0: function() {
			return this._parameters.length;
		},
		length: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_length_0.apply(this);
			}
			else if(Statement.prototype.length) {
				return Statement.prototype.length.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			if(this._parent._es5) {
				ctrl.code(this._internalName + ": function(");
			}
			else {
				if(!this._instance) {
					ctrl.code("static ");
				}
				ctrl.code(this._internalName + "(");
			}
			Parameter.toFragments(this, ctrl, false, function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				return node.code(")").step();
			});
			if(this._awaiting) {
				throw new NotImplementedException(this);
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._statements[__ks_0];
					ctrl.compile(statement);
				}
				if(!this._exit && this._type.isAsync()) {
					ctrl.line("__ks_cb()");
				}
			}
			if(!this._parent._es5) {
				ctrl.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ClassMethodDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			if(this._analysed) {
				return this._type;
			}
			else {
				this.prepare();
				return this._type;
			}
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassConstructorDeclaration = Helper.class({
		$name: "ClassConstructorDeclaration",
		$extends: Statement,
		$static: {
			__ks_sttc_toSwitchFragments_0: function(node, fragments, variable, methods, header, footer) {
				if(arguments.length < 6) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(header === void 0 || header === null) {
					throw new TypeError("'header' is not nullable");
				}
				if(footer === void 0 || footer === null) {
					throw new TypeError("'footer' is not nullable");
				}
				var extend = null;
				if(node.isExtending()) {
					extend = function(node, fragments, ctrl, variable) {
						if(arguments.length < 4) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(ctrl === void 0) {
							ctrl = null;
						}
						if(variable === void 0 || variable === null) {
							throw new TypeError("'variable' is not nullable");
						}
						var name = variable.extends().name();
						var __ks_extends_1 = node.scope().getVariable(name).type();
						var constructorName = __ks_extends_1.isSealedAlien() ? "constructor" : "__ks_cons";
						if(KSType.isValue(ctrl)) {
							ctrl.step().code("else").step().line("" + name + ".prototype." + constructorName + ".call(this, args)").done();
						}
						else {
							fragments.line("" + name + ".prototype." + constructorName + ".call(this, args)");
						}
					};
				}
				return ClassDeclaration.toSwitchFragments(node, fragments, variable, methods, "constructor", extend, header, footer, Helper.vcurry(ClassDeclaration.callMethod, null, node, variable, "prototype.__ks_cons_", "args", ""), "args", false);
			},
			toSwitchFragments: function() {
				if(arguments.length === 6) {
					return ClassConstructorDeclaration.__ks_sttc_toSwitchFragments_0.apply(this, arguments);
				}
				else if(Statement.toSwitchFragments) {
					return Statement.toSwitchFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._aliases = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ClassConstructorDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent._constructorScope)]);
			this._internalName = "__ks_cons_" + parent._constructors.length;
			parent._constructors.push(this);
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parent.addReference(Type.fromAST(parameter.type, this), this);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassConstructorDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._body = $ast.body(this._data.body);
			this._parameters = [];
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			this._type = new ClassConstructorType(Helper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			var index = -1;
			if(this._body.length === 0) {
				if(this._parent._extends) {
					this.callParentConstructor(this._body);
					index = 0;
				}
			}
			else if(((index = this.getConstructorIndex(this._body)) === -1) && this._parent._extends && (!this._parent._extendsType.isSealed() || !this._parent._extendsType.isSealedAlien())) {
				SyntaxException.throwNoSuperCall(this);
			}
			this._statements = [];
			if(this._aliases.length === 0) {
				for(var __ks_0 = 0, __ks_1 = this._body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._body[__ks_0];
					this._statements.push(statement = $compile.statement(statement, this));
					statement.analyse();
				}
			}
			else {
				for(var i = 0, __ks_0 = this._body.length, statement; i <= index && i < __ks_0; ++i) {
					statement = this._body[i];
					this._statements.push(statement = $compile.statement(statement, this));
					statement.analyse();
				}
				for(var __ks_0 = 0, __ks_1 = this._aliases.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._aliases[__ks_0];
					this._statements.push(statement);
					statement.analyse();
				}
				for(var i = 0, __ks_0 = this._body.length, statement; i < __ks_0; ++i) {
					statement = this._body[i];
					if(i > index) {
						this._statements.push(statement = $compile.statement(statement, this));
						statement.analyse();
					}
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addAliasStatement_0: function(statement) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(statement === void 0 || statement === null) {
				throw new TypeError("'statement' is not nullable");
			}
			else if(!KSType.is(statement, AliasStatement)) {
				throw new TypeError("'statement' is not of type 'AliasStatement'");
			}
			if(!ClassDeclaration.isAssigningAlias(this._body, statement.name(), true, this._parent._extends)) {
				this._aliases.push(statement);
			}
		},
		addAliasStatement: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_addAliasStatement_0.apply(this, arguments);
			}
			else if(Statement.prototype.addAliasStatement) {
				return Statement.prototype.addAliasStatement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_callParentConstructor_0: function(body) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(body === void 0 || body === null) {
				throw new TypeError("'body' is not nullable");
			}
			var type = this._parent.type();
			var parameters = Helper.mapArray(this._parameters, function(parameter) {
				return parameter;
			}, function(parameter) {
				return !parameter.isAnonymous() && !parameter.isThisAlias();
			});
			if(parameters.length === 0) {
				if(this._parent._extendsType.hasConstructors()) {
					SyntaxException.throwNoSuperCall(this);
				}
			}
			else {
				SyntaxException.throwNoSuperCall(this);
			}
		},
		callParentConstructor: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_callParentConstructor_0.apply(this, arguments);
			}
			else if(Statement.prototype.callParentConstructor) {
				return Statement.prototype.callParentConstructor.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getConstructorIndex_0: function(body) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(body === void 0 || body === null) {
				throw new TypeError("'body' is not nullable");
			}
			else if(!KSType.isArray(body)) {
				throw new TypeError("'body' is not of type 'Array'");
			}
			for(var index = 0, __ks_0 = body.length, statement; index < __ks_0; ++index) {
				statement = body[index];
				if(statement.kind === NodeKind.CallExpression) {
					if((statement.callee.kind === NodeKind.Identifier) && ((statement.callee.name === "this") || (statement.callee.name === "super"))) {
						return index;
					}
				}
				else if(statement.kind === NodeKind.IfStatement) {
					if(KSType.isValue(statement.whenFalse) && (this.getConstructorIndex(statement.whenTrue.statements) !== -1) && (this.getConstructorIndex(statement.whenFalse.statements) !== -1)) {
						return index;
					}
				}
			}
			return -1;
		},
		getConstructorIndex: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_getConstructorIndex_0.apply(this, arguments);
			}
			else if(Statement.prototype.getConstructorIndex) {
				return Statement.prototype.getConstructorIndex.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAbstract_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(modifier.kind === ModifierKind.Abstract) {
					return true;
				}
			}
			return false;
		},
		isAbstract: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_isAbstract_0.apply(this);
			}
			else if(Statement.prototype.isAbstract) {
				return Statement.prototype.isAbstract.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Statement.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isMethod_0: function() {
			return true;
		},
		isMethod: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_isMethod_0.apply(this);
			}
			else if(Statement.prototype.isMethod) {
				return Statement.prototype.isMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			if(this._parent._es5) {
				ctrl.code(this._internalName + ": function(");
			}
			else {
				ctrl.code(this._internalName + "(");
			}
			Parameter.toFragments(this, ctrl, false, function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				return node.code(")").step();
			});
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				ctrl.compile(statement);
			}
			if(!this._parent._es5) {
				ctrl.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ClassConstructorDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassDestructorDeclaration = Helper.class({
		$name: "ClassDestructorDeclaration",
		$extends: Statement,
		$static: {
			__ks_sttc_toSwitchFragments_0: function(node, fragments, variable) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				var ctrl = fragments.newControl();
				if(node._es5) {
					ctrl.code("__ks_destroy: function(that)");
				}
				else {
					ctrl.code("static __ks_destroy(that)");
				}
				ctrl.step();
				if(node._extends) {
					ctrl.line("" + node._extendsName + ".__ks_destroy(that)");
				}
				for(var i = 0, __ks_0 = variable.destructors(); i < __ks_0; ++i) {
					ctrl.line("" + node._name + ".__ks_destroy_" + i + "(that)");
				}
				if(!node._es5) {
					ctrl.done();
				}
			},
			toSwitchFragments: function() {
				if(arguments.length === 3) {
					return ClassDestructorDeclaration.__ks_sttc_toSwitchFragments_0.apply(this, arguments);
				}
				else if(Statement.toSwitchFragments) {
					return Statement.toSwitchFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent._destructorScope)]);
			this._internalName = "__ks_destroy_0";
			parent._destructor = this;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassDestructorDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var parameter = new Parameter({
				kind: NodeKind.Parameter,
				modifiers: [],
				name: $ast.identifier("that")
			}, this);
			parameter.analyse();
			this._parameters = [parameter];
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._parameters[0].prepare();
			this._type = new ClassDestructorType(this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._statements = [];
			var __ks_0 = $ast.body(this._data.body);
			for(var __ks_1 = 0, __ks_2 = __ks_0.length, statement; __ks_1 < __ks_2; ++__ks_1) {
				statement = __ks_0[__ks_1];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAbstract_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(modifier.kind === ModifierKind.Abstract) {
					return true;
				}
			}
			return false;
		},
		isAbstract: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_isAbstract_0.apply(this);
			}
			else if(Statement.prototype.isAbstract) {
				return Statement.prototype.isAbstract.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isInstance_0: function() {
			return false;
		},
		isInstance: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_isInstance_0.apply(this);
			}
			else if(Statement.prototype.isInstance) {
				return Statement.prototype.isInstance.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isMethod_0: function() {
			return true;
		},
		isMethod: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_isMethod_0.apply(this);
			}
			else if(Statement.prototype.isMethod) {
				return Statement.prototype.isMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			if(this._parent._es5) {
				ctrl.code(this._internalName + ": function(");
			}
			else {
				ctrl.code("static " + this._internalName + "(");
			}
			Parameter.toFragments(this, ctrl, false, function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				return node.code(")").step();
			});
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				ctrl.compile(statement);
			}
			if(!this._parent._es5) {
				ctrl.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ClassDestructorDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassVariableDeclaration = Helper.class({
		$name: "ClassVariableDeclaration",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._defaultValue = null;
			this._hasDefaultValue = false;
			this._instance = true;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			ClassVariableDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent]);
			this._name = data.name.name;
			for(var i = 0, __ks_0 = data.modifiers.length; this._instance && i < __ks_0; ++i) {
				if(data.modifiers[i].kind === ModifierKind.Static) {
					this._instance = false;
				}
			}
			if(this._instance) {
				parent._instanceVariables[this._name] = this;
			}
			else if((this._name === "name") || (this._name === "version")) {
				SyntaxException.throwReservedClassVariable(this._name, parent);
			}
			else {
				parent._classVariables[this._name] = this;
			}
			this._parent.addReference(this._type = ClassVariableType.fromAST(this._data, this), this);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassVariableDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				AbstractNode.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			if(KSType.isValue(this._data.defaultValue)) {
				this._hasDefaultValue = true;
				if(this._instance) {
					var scope = this._scope;
					this._scope = this._parent._instanceVariableScope;
					this._defaultValue = $compile.expression(this._data.defaultValue, this);
					this._defaultValue.analyse();
					this._scope = scope;
				}
				else {
					this._defaultValue = $compile.expression(this._data.defaultValue, this);
					this._defaultValue.analyse();
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._hasDefaultValue) {
				this._defaultValue.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._hasDefaultValue) {
				this._defaultValue.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasDefaultValue_0: function() {
			return this._hasDefaultValue;
		},
		hasDefaultValue: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_hasDefaultValue_0.apply(this);
			}
			else if(AbstractNode.prototype.hasDefaultValue) {
				return AbstractNode.prototype.hasDefaultValue.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isInstance_0: function() {
			return this._instance;
		},
		isInstance: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_isInstance_0.apply(this);
			}
			else if(AbstractNode.prototype.isInstance) {
				return AbstractNode.prototype.isInstance.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(AbstractNode.prototype.name) {
				return AbstractNode.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._hasDefaultValue) {
				if(this._instance) {
					fragments.newLine().code("this." + this._name + " = ").compile(this._defaultValue).done();
				}
				else {
					fragments.newLine().code("" + this._parent.name() + "." + this._name + " = ").compile(this._defaultValue).done();
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return ClassVariableDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ContinueStatement = Helper.class({
		$name: "ContinueStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ContinueStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ContinueStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ContinueStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.line("continue", this._data);
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ContinueStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var DependencyKind = {
		Extern: 0,
		ExternOrRequire: 1,
		Require: 2,
		RequireOrExtern: 3,
		RequireOrImport: 4
	};
	var $dependency = {
		define: function(declaration, node, kind) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(declaration === void 0 || declaration === null) {
				throw new TypeError("'declaration' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(kind === void 0 || kind === null) {
				throw new TypeError("'kind' is not nullable");
			}
			var scope = node.greatScope();
			var __ks_0 = declaration.kind;
			if(__ks_0 === NodeKind.ClassDeclaration) {
				var type = new ClassType(declaration.name.name, scope);
				var variable = scope.define(declaration.name.name, true, type, node);
				if(KSType.isValue(declaration.extends)) {
					var superVar, __ks_1;
					if(KSType.isValue(__ks_1 = node.scope().getVariable(declaration.extends.name)) ? (superVar = __ks_1, false) : true) {
						ReferenceException.throwNotDefined(declaration.extends.name, node);
					}
					else if(!KSType.is(superVar.type(), ClassType)) {
						TypeException.throwNotClass(declaration.extends.name, node);
					}
					type.extends(superVar.type());
				}
				if(kind !== DependencyKind.Extern) {
					variable.require();
				}
				if((kind === DependencyKind.Extern) || (kind === DependencyKind.ExternOrRequire) || (kind === DependencyKind.RequireOrExtern)) {
					type.alienize();
				}
				for(var __ks_1 = 0, __ks_2 = declaration.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = declaration.modifiers[__ks_1];
					if(modifier.kind === ModifierKind.Abstract) {
						type.abstract();
					}
					else if(modifier.kind === ModifierKind.Sealed) {
						type.seal();
					}
				}
				for(var __ks_1 = 0, __ks_2 = declaration.members.length, member; __ks_1 < __ks_2; ++__ks_1) {
					member = declaration.members[__ks_1];
					type.addPropertyFromAST(member, node);
				}
				return variable;
			}
			else if(__ks_0 === NodeKind.NamespaceDeclaration) {
				var type = new NamespaceType(declaration.name.name, scope);
				var variable = scope.define(declaration.name.name, true, type, node);
				for(var __ks_1 = 0, __ks_2 = declaration.modifiers.length, modifier; __ks_1 < __ks_2; ++__ks_1) {
					modifier = declaration.modifiers[__ks_1];
					if(modifier.kind === ModifierKind.Sealed) {
						type.seal();
					}
				}
				for(var __ks_1 = 0, __ks_2 = declaration.statements.length, statement; __ks_1 < __ks_2; ++__ks_1) {
					statement = declaration.statements[__ks_1];
					type.addPropertyFromAST(statement, node);
				}
				return variable;
			}
			else if(__ks_0 === NodeKind.VariableDeclarator) {
				var type = Type.fromAST(declaration.type, node);
				var referenced = false;
				if(KSType.is(type, ReferenceType)) {
					if(type.name() === "Class") {
						type = new ClassType(declaration.name.name, scope);
					}
				}
				else if(KSType.is(type, ClassType)) {
					referenced = true;
				}
				if(declaration.sealed) {
					if(type === Type.Any) {
						type = new SealedReferenceType(node);
					}
					else if(KSType.is(type, ReferenceType)) {
						type = new SealedReferenceType(type);
					}
					else {
						type.seal();
					}
				}
				if(KSType.is(type, ClassType) && ((kind === DependencyKind.Extern) || (kind === DependencyKind.ExternOrRequire) || (kind === DependencyKind.RequireOrExtern))) {
					type.alienize();
				}
				if(referenced) {
					type = type.reference();
				}
				var variable = scope.define(declaration.name.name, true, type, node);
				return variable;
			}
			else {
				throw new NotSupportedException("Unexpected kind " + declaration.kind, node);
			}
		}
	};
	var ExternDeclaration = Helper.class({
		$name: "ExternDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._lines = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ExternDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var module = this.module();
			var variable;
			for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._data.declarations[__ks_0];
				variable = $dependency.define(declaration, this, DependencyKind.Extern);
				if(variable.type().isSealed() && variable.type().isExtendable()) {
					this._lines.push("var " + variable.type().sealName() + " = {}");
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExternDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExternDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExternDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._lines.length, line; __ks_0 < __ks_1; ++__ks_0) {
				line = this._lines[__ks_0];
				fragments.line(line);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ExternDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var RequireDeclaration = Helper.class({
		$name: "RequireDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var module = this.module();
			for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._data.declarations[__ks_0];
				module.require($dependency.define(declaration, this, DependencyKind.Require), DependencyKind.Require);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RequireDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RequireDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return RequireDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return RequireDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExternOrRequireDeclaration = Helper.class({
		$name: "ExternOrRequireDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var module = this.module();
			module.flag("Type");
			for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._data.declarations[__ks_0];
				module.require($dependency.define(declaration, this, DependencyKind.ExternOrRequire), DependencyKind.ExternOrRequire);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExternOrRequireDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExternOrRequireDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExternOrRequireDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ExternOrRequireDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var RequireOrExternDeclaration = Helper.class({
		$name: "RequireOrExternDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var module = this.module();
			module.flag("Type");
			for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._data.declarations[__ks_0];
				module.require($dependency.define(declaration, this, DependencyKind.RequireOrExtern), DependencyKind.RequireOrExtern);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RequireOrExternDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RequireOrExternDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return RequireOrExternDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return RequireOrExternDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var RequireOrImportDeclaration = Helper.class({
		$name: "RequireOrImportDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarators = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			RequireOrImportDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var directory = this.directory();
			var module = this.module();
			var metadata, requirement;
			for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._data.declarations[__ks_0];
				metadata = $import.resolve(declarator, directory, module, this);
				if(metadata.importVarCount > 0) {
					for(var name in metadata.importVariables) {
						var alias = metadata.importVariables[name];
						requirement = module.require(Variable.import(alias, metadata.exports[name], this), DependencyKind.RequireOrImport);
						requirement.data = this._data;
						requirement.metadata = metadata;
						requirement.node = this;
					}
				}
				else if(metadata.importAll) {
					for(var name in metadata.exports) {
						var data = metadata.exports[name];
						requirement = module.require(Variable.import(name, data, this), DependencyKind.RequireOrImport);
						requirement.data = this._data;
						requirement.metadata = metadata;
						requirement.node = this;
					}
				}
				if(metadata.importAlias.length !== 0) {
					throw new NotImplementedException(this);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return RequireOrImportDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var DestroyStatement = Helper.class({
		$name: "DestroyStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._hasVariable = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			DestroyStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._expression = $compile.expression(this._data.variable, this);
			this._expression.analyse();
			if(this._data.variable.kind === NodeKind.Identifier) {
				this._variable = this._scope.getVariable(this._data.variable.name);
				this._hasVariable = true;
				this._scope.removeVariable(this._data.variable.name);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DestroyStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DestroyStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DestroyStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var type;
			if(this._hasVariable && KSType.is(type = this._variable.type().unalias(), ClassType) && type.hasDestructors()) {
				fragments.newLine().code(type.name(), ".__ks_destroy(").compile(this._expression).code(")").done();
			}
			if(KSType.is(this._expression, IdentifierLiteral)) {
				fragments.newLine().compile(this._expression).code(" = undefined").done();
			}
			else {
				fragments.newLine().code("delete ").compile(this._expression).done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return DestroyStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var DoUntilStatement = Helper.class({
		$name: "DoUntilStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._body = $compile.expression(this._data.body, this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DoUntilStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._body.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DoUntilStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DoUntilStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("do").step().compile(this._body).step().code("while(!(").compileBoolean(this._condition).code("))").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return DoUntilStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var DoWhileStatement = Helper.class({
		$name: "DoWhileStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._body = $compile.expression(this._data.body, this);
			this._body.analyse();
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DoWhileStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._body.prepare();
			this._condition.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DoWhileStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._body.translate();
			this._condition.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DoWhileStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("do").step().compile(this._body).step().code("while(").compileBoolean(this._condition).code(")").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return DoWhileStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var EnumDeclaration = Helper.class({
		$name: "EnumDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._composites = [];
			this._new = true;
			this._values = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			EnumDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			var variable, __ks_0;
			if(KSType.isValue(__ks_0 = this._scope.getVariable(this._name)) ? (variable = __ks_0, true) : false) {
				this._type = variable.type();
				this._new = false;
			}
			else {
				var domain = new ScopeDomain(this._scope);
				var type = Type.fromAST(this._data.type, this);
				if(type.isString()) {
					this._type = new EnumType(this._name, EnumKind.String, domain);
				}
				else if(KSType.isValue(this._data.attributes)) {
					var nf = true;
					for(var __ks_0 = 0, __ks_1 = this._data.attributes.length, attr; nf && __ks_0 < __ks_1; ++__ks_0) {
						attr = this._data.attributes[__ks_0];
						if((attr.kind === NodeKind.AttributeDeclaration) && (attr.declaration.kind === NodeKind.Identifier) && (attr.declaration.name === "flags")) {
							nf = false;
							this._type = new EnumType(this._name, EnumKind.Flags, domain);
						}
					}
					if(nf) {
						this._type = new EnumType(this._name, domain);
					}
				}
				else {
					this._type = new EnumType(this._name, domain);
				}
				this._scope.define(this._name, true, this._type, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var __ks_0 = this._type.kind();
			if(__ks_0 === EnumKind.Flags) {
				for(var __ks_1 = 0, __ks_2 = this._data.members.length, data; __ks_1 < __ks_2; ++__ks_1) {
					data = this._data.members[__ks_1];
					if(KSType.isValue(data.value)) {
						if((data.value.kind === NodeKind.PolyadicExpression) && (data.value.operator.kind === BinaryOperatorKind.BitwiseOr)) {
							this._composites.push({
								name: data.name.name,
								components: data.value.operands
							});
							this._type.addElement(data.name.name);
						}
						else {
							if(data.value.kind === NodeKind.NumericExpression) {
								this._type.index(data.value.value);
							}
							else {
								throw new NotSupportedException(this);
							}
							this._values.push({
								name: data.name.name,
								value: (this._type.index() <= 0) ? 0 : 1 << (this._type.index() - 1)
							});
							this._type.addElement(data.name.name);
						}
					}
					else {
						this._values.push({
							name: data.name.name,
							value: (this._type.step().index() <= 0) ? 0 : 1 << (this._type.index() - 1)
						});
						this._type.addElement(data.name.name);
					}
				}
			}
			else if(__ks_0 === EnumKind.String) {
				for(var __ks_1 = 0, __ks_2 = this._data.members.length, data; __ks_1 < __ks_2; ++__ks_1) {
					data = this._data.members[__ks_1];
					this._values.push({
						name: data.name.name,
						value: $quote(data.name.name.toLowerCase())
					});
					this._type.addElement(data.name.name);
				}
			}
			else if(__ks_0 === EnumKind.Number) {
				var value;
				for(var __ks_1 = 0, __ks_2 = this._data.members.length, data; __ks_1 < __ks_2; ++__ks_1) {
					data = this._data.members[__ks_1];
					if(KSType.isValue(data.value)) {
						if(data.value.kind === NodeKind.NumericExpression) {
							this._type.index(data.value.value);
						}
						else {
							throw new NotSupportedException(this);
						}
					}
					else {
						this._type.step();
					}
					this._values.push({
						name: data.name.name,
						value: this._type.index()
					});
					this._type.addElement(data.name.name);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._new) {
				var line = fragments.newLine().code($runtime.scope(this), this._name, $equals);
				var object = line.newObject();
				for(var __ks_0 = 0, __ks_1 = this._values.length, member; __ks_0 < __ks_1; ++__ks_0) {
					member = this._values[__ks_0];
					object.line(member.name, ": ", member.value);
				}
				object.done();
				line.done();
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._values.length, member; __ks_0 < __ks_1; ++__ks_0) {
					member = this._values[__ks_0];
					fragments.line(this._name, ".", member.name, " = ", member.value);
				}
			}
			if(this._composites.length > 0) {
				var line;
				for(var __ks_0 = 0, __ks_1 = this._composites.length, member; __ks_0 < __ks_1; ++__ks_0) {
					member = this._composites[__ks_0];
					line = fragments.newLine().code(this._name, ".", member.name, " = ");
					for(var i = 0, __ks_2 = member.components.length, value; i < __ks_2; ++i) {
						value = member.components[i];
						if(i > 0) {
							line.code(" | ");
						}
						line.code(this._name, ".", value.name);
					}
					line.done();
				}
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return EnumDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExportDeclaration = Helper.class({
		$name: "ExportDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarations = [];
			this._statements = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ExportDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var recipient = this._parent.recipient();
			var statement;
			for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._data.declarations[__ks_0];
				var __ks_2 = declaration.kind;
				if(__ks_2 === NodeKind.ClassDeclaration) {
					this._statements.push(statement = $compile.statement(declaration, this));
					statement.analyse();
					recipient.export(statement.name(), null, this);
				}
				else if(__ks_2 === NodeKind.ExportAlias) {
					statement = new AliasDeclarator(declaration, this);
					statement.analyse();
					recipient.export(declaration.name.name, declaration.alias.name, this);
				}
				else if(__ks_2 === NodeKind.EnumDeclaration) {
					this._statements.push(statement = $compile.statement(declaration, this));
					statement.analyse();
					recipient.export(statement.name(), null, this);
				}
				else if(__ks_2 === NodeKind.FunctionDeclaration) {
					this._statements.push(statement = $compile.statement(declaration, this));
					statement.analyse();
					recipient.export(statement.name(), null, this);
				}
				else if(__ks_2 === NodeKind.Identifier) {
					statement = new IdentifierLiteral(declaration, this);
					statement.analyse();
					recipient.export(statement.name(), null, this);
				}
				else if(__ks_2 === NodeKind.NamespaceDeclaration) {
					this._statements.push(statement = $compile.statement(declaration, this));
					statement.analyse();
					recipient.export(statement.name(), null, this);
				}
				else if(__ks_2 === NodeKind.TypeAliasDeclaration) {
					this._statements.push(statement = $compile.statement(declaration, this));
					statement.analyse();
					recipient.export(statement.name(), null, this);
				}
				else if(__ks_2 === NodeKind.VariableDeclaration) {
					this._statements.push(statement = $compile.statement(declaration, this));
					statement.analyse();
					statement.walk(Helper.vcurry(function(name, __ks_0) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(name === void 0 || name === null) {
							throw new TypeError("'name' is not nullable");
						}
						return recipient.export(name, null, this);
					}, this));
				}
				else {
					throw new NotImplementedException(this);
				}
				this._declarations.push(statement);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExportDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._declarations[__ks_0];
				declaration.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExportDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._declarations[__ks_0];
				declaration.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExportDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._statements[__ks_0];
				declaration.toFragments(fragments, Mode.None);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ExportDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarations.length, declaration; __ks_0 < __ks_1; ++__ks_0) {
				declaration = this._declarations[__ks_0];
				declaration.walk(fn);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ExportDeclaration.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Statement.prototype.walk) {
				return Statement.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AliasDeclarator = Helper.class({
		$name: "AliasDeclarator",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.alias.name;
			var __ks_0;
			if(KSType.isValue(__ks_0 = this._scope.getVariable(this._data.name.name)) ? (this._variable = __ks_0, false) : true) {
				ReferenceException.throwNotDefined(this._data.name.name, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AliasDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._type = this._variable.type();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AliasDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return AliasDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return AliasDeclarator.prototype.__ks_func_name_0.apply(this);
			}
			else if(AbstractNode.prototype.name) {
				return AbstractNode.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			fn(this._name, this._type);
		},
		walk: function() {
			if(arguments.length === 1) {
				return AliasDeclarator.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.walk) {
				return AbstractNode.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return AliasDeclarator.prototype.__ks_func_type_0.apply(this);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExpressionStatement = Helper.class({
		$name: "ExpressionStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._variable = "";
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ExpressionStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._expression = $compile.expression(this._data, this);
			this._expression.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.prepare();
			this._expression.acquireReusable(false);
			this._expression.releaseReusable();
			this._expression.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_assignment_0: function(data, expression) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(expression === void 0 || expression === null) {
				throw new TypeError("'expression' is not nullable");
			}
			if(data.left.kind === NodeKind.Identifier) {
				var variable;
				var __ks_0;
				if(KSType.isValue(__ks_0 = this._scope.getVariable(data.left.name)) ? (variable = __ks_0, true) : false) {
					if(variable.isImmutable()) {
						SyntaxException.throwImmutable(data.left.name, this);
					}
				}
				else {
					if(!expression.isAssignable() || this._variable.length) {
						this._variables.push(data.left.name);
					}
					else {
						this._variable = data.left.name;
					}
					this._scope.define(data.left.name, false, this);
				}
			}
		},
		assignment: function() {
			if(arguments.length === 2) {
				return ExpressionStatement.prototype.__ks_func_assignment_0.apply(this, arguments);
			}
			return Statement.prototype.assignment.apply(this, arguments);
		},
		__ks_func_hasExceptions_0: function() {
			return this._expression.hasExceptions();
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			else if(Statement.prototype.hasExceptions) {
				return Statement.prototype.hasExceptions.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._expression.isAwait();
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_toAwaitStatementFragments_0: function(fragments, statements) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			var line = fragments.newLine();
			var item = this._expression.toFragments(line, Mode.None);
			statements.unshift(this);
			item(statements);
			line.done();
		},
		toAwaitStatementFragments: function() {
			if(arguments.length === 2) {
				return ExpressionStatement.prototype.__ks_func_toAwaitStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitStatementFragments) {
				return Statement.prototype.toAwaitStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._expression.isAwaiting()) {
				return Helper.vcurry(this.toAwaitStatementFragments, this, fragments);
			}
			else if(this._expression.isAssignable()) {
				if(this._variables.length) {
					fragments.newLine().code($runtime.scope(this) + this._variables.join(", ")).done();
				}
				var line = fragments.newLine();
				if(this._variable.length) {
					line.code($runtime.scope(this));
				}
				if(KSType.isValue(this._expression.toAssignmentFragments)) {
					this._expression.toAssignmentFragments(line);
				}
				else {
					this._expression.toFragments(line, Mode.None);
				}
				line.done();
			}
			else if(KSType.isValue(this._expression.toStatementFragments)) {
				if(this._variable.length) {
					this._variables.unshift(this._variable);
				}
				if(this._variables.length) {
					fragments.newLine().code($runtime.scope(this) + this._variables.join(", ")).done();
				}
				this._expression.toStatementFragments(fragments, Mode.None);
			}
			else {
				if(this._variables.length) {
					fragments.newLine().code($runtime.scope(this) + this._variables.join(", ")).done();
				}
				var line = fragments.newLine();
				if(this._variable.length) {
					line.code($runtime.scope(this));
				}
				line.compile(this._expression, Mode.None).done();
			}
			for(var __ks_0 = 0, __ks_1 = this._afterwards.length, afterward; __ks_0 < __ks_1; ++__ks_0) {
				afterward = this._afterwards[__ks_0];
				afterward.toAfterwardFragments(fragments);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExpressionStatement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	var ForFromStatement = Helper.class({
		$name: "ForFromStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._defineVariable = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForFromStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ForFromStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			if(this._data.declaration || !this._scope.hasVariable(this._data.variable.name)) {
				this._variableVariable = this._scope.define(this._data.variable.name, false, this._scope.reference("Number"), this);
				this._defineVariable = true;
			}
			this._variable = $compile.expression(this._data.variable, this);
			this._variable.analyse();
			this._from = $compile.expression(this._data.from, this);
			this._from.analyse();
			if(this._data.til) {
				this._til = $compile.expression(this._data.til, this);
				this._til.analyse();
			}
			else {
				this._to = $compile.expression(this._data.to, this);
				this._to.analyse();
			}
			if(this._data.by) {
				this._by = $compile.expression(this._data.by, this);
				this._by.analyse();
			}
			if(this._data.until) {
				this._until = $compile.expression(this._data.until, this);
				this._until.analyse();
			}
			else if(this._data.while) {
				this._while = $compile.expression(this._data.while, this);
				this._while.analyse();
			}
			if(this._data.when) {
				this._when = $compile.expression(this._data.when, this);
				this._when.analyse();
			}
			this._body = $compile.expression($ast.block(this._data.body), this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForFromStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._variable.prepare();
			this._from.prepare();
			var context = this._defineVariable ? null : this;
			if(KSType.isValue(this._til)) {
				this._til.prepare();
				if(this._til.isComposite()) {
					this._boundName = this._scope.acquireTempName(context);
				}
			}
			else {
				this._to.prepare();
				if(this._to.isComposite()) {
					this._boundName = this._scope.acquireTempName(context);
				}
			}
			if(KSType.isValue(this._by)) {
				this._by.prepare();
				if(this._by.isComposite()) {
					this._byName = this._scope.acquireTempName(context);
				}
			}
			if(KSType.isValue(this._until)) {
				this._until.prepare();
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._boundName)) {
				this._scope.releaseTempName(this._boundName);
			}
			if(KSType.isValue(this._byName)) {
				this._scope.releaseTempName(this._byName);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ForFromStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._variable.translate();
			this._from.translate();
			if(KSType.isValue(this._til)) {
				this._til.translate();
			}
			else {
				this._to.translate();
			}
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ForFromStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl().code("for(");
			if(this._defineVariable) {
				ctrl.code($runtime.scope(this));
			}
			ctrl.compile(this._variable).code($equals).compile(this._from);
			if(KSType.isValue(this._boundName)) {
				ctrl.code($comma, this._boundName, $equals).compile(KSType.isValue(this._til) ? this._til : this._to);
			}
			if(KSType.isValue(this._byName)) {
				ctrl.code($comma, this._byName, $equals).compile(this._by);
			}
			ctrl.code("; ");
			if(this._data.until) {
				ctrl.code("!(").compileBoolean(this._until).code(") && ");
			}
			else if(this._data.while) {
				ctrl.compileBoolean(this._while).code(" && ");
			}
			ctrl.compile(this._variable);
			var desc = (this._data.by && (this._data.by.kind === NodeKind.NumericExpression) && (this._data.by.value < 0)) || ((this._data.from.kind === NodeKind.NumericExpression) && ((this._data.to && (this._data.to.kind === NodeKind.NumericExpression) && (this._data.from.value > this._data.to.value)) || (this._data.til && (this._data.til.kind === NodeKind.NumericExpression) && (this._data.from.value > this._data.til.value))));
			if(this._data.til) {
				if(desc) {
					ctrl.code(" > ");
				}
				else {
					ctrl.code(" < ");
				}
				ctrl.compile(KSType.isValue(this._boundName) ? this._boundName : this._til);
			}
			else {
				if(desc) {
					ctrl.code(" >= ");
				}
				else {
					ctrl.code(" <= ");
				}
				ctrl.compile(KSType.isValue(this._boundName) ? this._boundName : this._to);
			}
			ctrl.code("; ");
			if(this._data.by) {
				if(this._data.by.kind === NodeKind.NumericExpression) {
					if(this._data.by.value === 1) {
						ctrl.code("++").compile(this._variable);
					}
					else if(this._data.by.value === -1) {
						ctrl.code("--").compile(this._variable);
					}
					else if(this._data.by.value >= 0) {
						ctrl.compile(this._variable).code(" += ").compile(this._by);
					}
					else {
						ctrl.compile(this._variable).code(" -= ", -this._data.by.value);
					}
				}
				else {
					ctrl.compile(this._variable).code(" += ").compile(KSType.isValue(this._byName) ? this._byName : this._by);
				}
			}
			else if(desc) {
				ctrl.code("--").compile(this._variable);
			}
			else {
				ctrl.code("++").compile(this._variable);
			}
			ctrl.code(")").step();
			if(this._data.when) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForFromStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ForInStatement = Helper.class({
		$name: "ForInStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._defineIndex = false;
			this._defineValue = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForInStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ForInStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._expression = $compile.expression(this._data.expression, this);
			this._expression.analyse();
			if(KSType.isValue(this._data.value)) {
				if(this._data.declaration || !this._scope.hasVariable(this._data.value.name)) {
					this._valueVariable = this._scope.define(this._data.value.name, false, this);
					this._defineValue = true;
				}
				this._value = $compile.expression(this._data.value, this);
				this._value.analyse();
			}
			if(KSType.isValue(this._data.index)) {
				if(this._data.declaration || !this._scope.hasVariable(this._data.index.name)) {
					this._indexVariable = this._scope.define(this._data.index.name, false, this._scope.reference("Number"), this);
					this._defineIndex = true;
				}
				this._index = $compile.expression(this._data.index, this);
				this._index.analyse();
			}
			if(this._data.until) {
				this._until = $compile.expression(this._data.until, this);
				this._until.analyse();
			}
			else if(this._data.while) {
				this._while = $compile.expression(this._data.while, this);
				this._while.analyse();
			}
			if(this._data.when) {
				this._when = $compile.expression(this._data.when, this);
				this._when.analyse();
			}
			this._body = $compile.expression($ast.block(this._data.body), this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForInStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
			if(this._expression.isEntangled()) {
				this._expressionName = this.greatScope().acquireTempName();
				this._scope.updateTempNames();
			}
			if(this._defineValue) {
				this._valueVariable.type(this._expression.type().parameter());
			}
			if(!KSType.isValue(this._index) && !(KSType.isValue(this._data.index) && !this._data.declaration && this.greatScope().hasVariable(this._data.index.name))) {
				this._indexName = this._scope.acquireTempName();
			}
			if(!this._data.desc) {
				this._boundName = this._scope.acquireTempName();
			}
			if(KSType.isValue(this._until)) {
				this._until.prepare();
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
				this._when.acquireReusable(false);
				this._when.releaseReusable();
			}
			this._body.prepare();
			if(KSType.isValue(this._expressionName)) {
				this.greatScope().releaseTempName(this._expressionName);
			}
			if(KSType.isValue(this._indexName)) {
				this._scope.releaseTempName(this._indexName);
			}
			if(KSType.isValue(this._boundName)) {
				this._scope.releaseTempName(this._boundName);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ForInStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ForInStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isValue(this._expressionName)) {
				var line = fragments.newLine();
				if(!this.greatScope().hasVariable(this._expressionName)) {
					line.code($runtime.scope(this));
					this.greatScope().define(this._expressionName, false, this);
				}
				line.code(this._expressionName, $equals).compile(this._expression).done();
			}
			var ctrl;
			if(this._data.desc) {
				if(KSType.isValue(this._index) && !this._data.declaration && !this._defineIndex) {
					fragments.newLine().compile(this._index).code($equals).compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - 1").done();
					ctrl = fragments.newControl().code("for(");
				}
				else {
					ctrl = fragments.newControl().code("for(", $runtime.scope(this)).compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code($equals).compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - 1");
				}
			}
			else {
				if(this._index && !this._data.declaration && !this._defineIndex) {
					fragments.newLine().compile(this._index).code(" = 0").done();
					ctrl = fragments.newControl().code("for(", $runtime.scope(this));
				}
				else {
					ctrl = fragments.newControl().code("for(", $runtime.scope(this)).compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" = 0, ");
				}
				ctrl.code(this._boundName, $equals).compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length");
			}
			if(this._data.declaration || this._defineValue) {
				ctrl.code($comma).compile(this._value);
			}
			ctrl.code("; ");
			if(KSType.isValue(this._until)) {
				ctrl.code("!(").compile(this._until).code(") && ");
			}
			else if(KSType.isValue(this._while)) {
				ctrl.compile(this._while).code(" && ");
			}
			if(this._data.desc) {
				ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" >= 0; --").compile(KSType.isValue(this._indexName) ? this._indexName : this._index);
			}
			else {
				ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" < " + this._boundName + "; ++").compile(KSType.isValue(this._indexName) ? this._indexName : this._index);
			}
			ctrl.code(")").step();
			if(KSType.isValue(this._value)) {
				ctrl.newLine().compile(this._value).code($equals).compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code("[").compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code("]").done();
			}
			if(KSType.isValue(this._when)) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForInStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ForOfStatement = Helper.class({
		$name: "ForOfStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._defineKey = false;
			this._defineValue = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForOfStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ForOfStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._expression = $compile.expression(this._data.expression, this);
			this._expression.analyse();
			if(KSType.isValue(this._data.key)) {
				if(this._data.declaration || !this._scope.hasVariable(this._data.key.name)) {
					this._keyVariable = this._scope.define(this._data.key.name, false, this._scope.reference("String"), this);
					this._defineKey = true;
				}
				this._key = $compile.expression(this._data.key, this);
				this._key.analyse();
			}
			if(KSType.isValue(this._data.value)) {
				if(this._data.declaration || !this._scope.hasVariable(this._data.value.name)) {
					this._valueVariable = this._scope.define(this._data.value.name, false, this);
					this._defineValue = true;
				}
				this._value = $compile.expression(this._data.value, this);
				this._value.analyse();
			}
			if(this._data.until) {
				this._until = $compile.expression(this._data.until, this);
				this._until.analyse();
			}
			else if(this._data.while) {
				this._while = $compile.expression(this._data.while, this);
				this._while.analyse();
			}
			if(this._data.when) {
				this._when = $compile.expression(this._data.when, this);
				this._when.analyse();
			}
			this._body = $compile.expression($ast.block(this._data.body), this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForOfStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
			if(this._expression.isEntangled()) {
				this._expressionName = this.greatScope().acquireTempName();
				this._scope.updateTempNames();
			}
			if(this._defineValue) {
				this._valueVariable.type(this._expression.type().parameter());
			}
			if(KSType.isValue(this._key)) {
				this._key.prepare();
			}
			else {
				this._keyName = this._scope.acquireTempName();
			}
			if(KSType.isValue(this._until)) {
				this._until.prepare();
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._expressionName)) {
				this.greatScope().releaseTempName(this._expressionName);
			}
			if(KSType.isValue(this._keyName)) {
				this._scope.releaseTempName(this._keyName);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ForOfStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
			if(KSType.isValue(this._key)) {
				this._key.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ForOfStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isValue(this._expressionName)) {
				var line = fragments.newLine();
				if(!this.greatScope().hasVariable(this._expressionName)) {
					line.code($runtime.scope(this));
					this.greatScope().define(this._expressionName, false, this);
				}
				line.code(this._expressionName, $equals).compile(this._expression).done();
			}
			var ctrl = fragments.newControl().code("for(");
			if(KSType.isValue(this._key)) {
				if(this._data.declaration || this._defineKey) {
					ctrl.code($runtime.scope(this));
				}
				ctrl.compile(this._key);
			}
			else {
				ctrl.code($runtime.scope(this), this._keyName);
			}
			ctrl.code(" in ").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(")").step();
			if(KSType.isValue(this._value)) {
				var line = ctrl.newLine();
				if(this._data.declaration || this._defineValue) {
					line.code($runtime.scope(this));
				}
				line.compile(this._value).code($equals).compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code("[").compile(KSType.isValue(this._key) ? this._key : this._keyName).code("]").done();
			}
			if(KSType.isValue(this._until)) {
				ctrl.newControl().code("if(").compile(this._until).code(")").step().line("break").done();
			}
			else if(KSType.isValue(this._while)) {
				ctrl.newControl().code("if(!(").compile(this._while).code("))").step().line("break").done();
			}
			if(KSType.isValue(this._when)) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForOfStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ForRangeStatement = Helper.class({
		$name: "ForRangeStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._defineValue = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForRangeStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(!this._scope.hasVariable(this._data.value.name)) {
				this._valueVariable = this._scope.define(this._data.value.name, false, this._scope.reference("Number"), this);
				this._defineValue = true;
			}
			this._value = $compile.expression(this._data.value, this);
			this._value.analyse();
			this._from = $compile.expression(this._data.from, this);
			this._from.analyse();
			this._to = $compile.expression(this._data.to, this);
			this._to.analyse();
			if(this._data.by) {
				this._by = $compile.expression(this._data.by, this);
				this._by.analyse();
			}
			if(this._data.until) {
				this._until = $compile.expression(this._data.until, this);
				this._until.analyse();
			}
			else if(this._data.while) {
				this._while = $compile.expression(this._data.while, this);
				this._while.analyse();
			}
			if(this._data.when) {
				this._when = $compile.expression(this._data.when, this);
				this._when.analyse();
			}
			this._body = $compile.expression($ast.block(this._data.body), this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForRangeStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
			this._from.prepare();
			this._to.prepare();
			if(this._to.isComposite()) {
				this._boundName = this._scope.acquireTempName();
			}
			if(KSType.isValue(this._by)) {
				this._by.prepare();
				if(this._by.isComposite()) {
					this._byName = this._scope.acquireTempName();
				}
			}
			if(KSType.isValue(this._until)) {
				this._until.prepare();
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._boundName)) {
				this._scope.releaseTempName(this._boundName);
			}
			if(KSType.isValue(this._byName)) {
				this._scope.releaseTempName(this._byName);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ForRangeStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
			this._from.translate();
			this._to.translate();
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ForRangeStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl().code("for(");
			if(this._data.declaration || this._defineValue) {
				ctrl.code($runtime.scope(this));
			}
			ctrl.compile(this._value).code($equals).compile(this._from);
			if(KSType.isValue(this._boundName)) {
				ctrl.code(this._boundName, $equals).compile(this._to);
			}
			if(KSType.isValue(this._byName)) {
				ctrl.code($comma, this._byName, $equals).compile(this._by);
			}
			ctrl.code("; ");
			if(this._data.until) {
				ctrl.code("!(").compile(this._until).code(") && ");
			}
			else if(this._data.while) {
				ctrl.compile(this._while).code(" && ");
			}
			ctrl.compile(this._value).code(" <= ").compile(KSType.isValue(this._boundName) ? this._boundName : this._to).code("; ");
			if(this._data.by) {
				if(this._data.by.kind === NodeKind.NumericExpression) {
					if(this._data.by.value === 1) {
						ctrl.code("++").compile(this._value);
					}
					else {
						ctrl.compile(this._value).code(" += ").compile(this._by);
					}
				}
				else {
					ctrl.compile(this._value).code(" += ").compile(KSType.isValue(this._byName) ? this._byName : this._by);
				}
			}
			else {
				ctrl.code("++").compile(this._value);
			}
			ctrl.code(")").step();
			if(this._data.when) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForRangeStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var $function = {
		surround: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var parent = node._parent;
			while(KSType.isValue(parent) && !(KSType.is(parent, ClassMethodDeclaration) || KSType.is(parent, ImplementClassMethodDeclaration))) {
				parent = parent.parent();
			}
			if(KSType.isValue(parent) ? parent._instance : false) {
				if($function.useThisVariable(node._data.body, node)) {
					if(node._options.format.functions === "es5") {
						return {
							arrow: false,
							beforeParameters: "Helper.vcurry(function(",
							afterParameters: ")",
							footer: ", this)"
						};
					}
					else {
						return {
							arrow: true,
							beforeParameters: "(",
							afterParameters: ") =>",
							footer: ""
						};
					}
				}
				else {
					return {
						arrow: false,
						beforeParameters: "function(",
						afterParameters: ")",
						footer: ""
					};
				}
			}
			else {
				return {
					arrow: false,
					beforeParameters: "function(",
					afterParameters: ")",
					footer: ""
				};
			}
		},
		useThisVariable: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks_0 = data.kind;
			if(__ks_0 === NodeKind.ArrayExpression) {
				for(var __ks_1 = 0, __ks_2 = data.values.length, value; __ks_1 < __ks_2; ++__ks_1) {
					value = data.values[__ks_1];
					if($function.useThisVariable(value, node)) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.BinaryExpression) {
				if($function.useThisVariable(data.left, node) || $function.useThisVariable(data.right, node)) {
					return true;
				}
			}
			else if(__ks_0 === NodeKind.Block) {
				for(var __ks_1 = 0, __ks_2 = data.statements.length, statement; __ks_1 < __ks_2; ++__ks_1) {
					statement = data.statements[__ks_1];
					if($function.useThisVariable(statement, node)) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.CallExpression) {
				if($function.useThisVariable(data.callee, node)) {
					return true;
				}
				for(var __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
					arg = data.arguments[__ks_1];
					if($function.useThisVariable(arg, node)) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.CreateExpression) {
				if($function.useThisVariable(data.class, node)) {
					return true;
				}
				for(var __ks_1 = 0, __ks_2 = data.arguments.length, arg; __ks_1 < __ks_2; ++__ks_1) {
					arg = data.arguments[__ks_1];
					if($function.useThisVariable(arg, node)) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.EnumExpression) {
				return false;
			}
			else if(__ks_0 === NodeKind.Identifier) {
				return data.name === "this";
			}
			else if(__ks_0 === NodeKind.IfStatement) {
				if($function.useThisVariable(data.condition, node) || $function.useThisVariable(data.whenTrue, node)) {
					return true;
				}
				if(KSType.isValue(data.whenFalse) && data.$function.useThisVariable(data.whenFalse, node)) {
					return true;
				}
			}
			else if(__ks_0 === NodeKind.Literal) {
				return false;
			}
			else if(__ks_0 === NodeKind.MemberExpression) {
				return $function.useThisVariable(data.object, node);
			}
			else if(__ks_0 === NodeKind.NumericExpression) {
				return false;
			}
			else if(__ks_0 === NodeKind.ObjectExpression) {
				for(var __ks_1 = 0, __ks_2 = data.properties.length, property; __ks_1 < __ks_2; ++__ks_1) {
					property = data.properties[__ks_1];
					if($function.useThisVariable(property.value, node)) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.PolyadicExpression) {
				for(var __ks_1 = 0, __ks_2 = data.operands.length, operand; __ks_1 < __ks_2; ++__ks_1) {
					operand = data.operands[__ks_1];
					if($function.useThisVariable(operand, node)) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.ReturnStatement) {
				return $function.useThisVariable(data.value, node);
			}
			else if(__ks_0 === NodeKind.TemplateExpression) {
				for(var __ks_1 = 0, __ks_2 = data.elements.length, element; __ks_1 < __ks_2; ++__ks_1) {
					element = data.elements[__ks_1];
					if($function.useThisVariable(element, node)) {
						return true;
					}
				}
			}
			else if(__ks_0 === NodeKind.ThisExpression) {
				return true;
			}
			else if(__ks_0 === NodeKind.ThrowStatement) {
				return $function.useThisVariable(data.value, node);
			}
			else if(__ks_0 === NodeKind.UnaryExpression) {
				return $function.useThisVariable(data.argument, node);
			}
			else if(__ks_0 === NodeKind.VariableDeclaration) {
				return KSType.isValue(data.init) && $function.useThisVariable(data.init, node);
			}
			else {
				throw new NotImplementedException("Unknow kind " + data.kind, node);
			}
			return false;
		}
	};
	var FunctionDeclaration = Helper.class({
		$name: "FunctionDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._await = false;
			this._exit = false;
			this._statements = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			FunctionDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				FunctionDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._scope.define("this", true, this);
			this._name = this._data.name.name;
			this._variable = this.greatScope().define(this._data.name.name, true, this);
			this._parameters = [];
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			this._type = new FunctionType(Helper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
			this._variable.type(this._type);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			var __ks_0 = $ast.body(this._data.body);
			for(var __ks_1 = 0, __ks_2 = __ks_0.length, statement; __ks_1 < __ks_2; ++__ks_1) {
				statement = __ks_0[__ks_1];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
				if(statement.isAwait()) {
					this._await = true;
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
				if(this._exit) {
					SyntaxException.throwDeadCode(statement);
				}
				else {
					this._exit = statement.isExit();
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return FunctionDeclaration.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Statement.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isMethod_0: function() {
			return false;
		},
		isMethod: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_isMethod_0.apply(this);
			}
			else if(Statement.prototype.isMethod) {
				return Statement.prototype.isMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAwaitExpressionFragments_0: function(fragments, parameters, statements) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			fragments.code("(__ks_e");
			for(var __ks_0 = 0, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				fragments.code($comma).compile(parameter);
			}
			fragments.code(") =>");
			var block = fragments.newBlock();
			var ctrl = block.newControl().code("if(__ks_e)").step().line("__ks_cb(__ks_e)").step().code("else").step();
			var index = -1;
			var item;
			for(var i = 0, __ks_0 = statements.length, statement; index === -1 && i < __ks_0; ++i) {
				statement = statements[i];
				if(KSType.isValue(__ks_1 = statement.toFragments(ctrl, Mode.None)) ? (item = __ks_1, true) : false) {
					index = i;
				}
			}
			if(index !== -1) {
				item(statements.slice(index + 1));
			}
			ctrl.done();
			block.done();
			fragments.code(")").done();
		},
		toAwaitExpressionFragments: function() {
			if(arguments.length === 3) {
				return FunctionDeclaration.prototype.__ks_func_toAwaitExpressionFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitExpressionFragments) {
				return Statement.prototype.toAwaitExpressionFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl().code("function " + this._name + "(");
			Parameter.toFragments(this, ctrl, false, function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				return node.code(")").step();
			});
			if(this._await) {
				var index = -1;
				var item;
				for(var i = 0, __ks_0 = this._statements.length, statement; index === -1 && i < __ks_0; ++i) {
					statement = this._statements[i];
					var __ks_1;
					if(KSType.isValue(__ks_1 = statement.toFragments(ctrl, Mode.None)) ? (item = __ks_1, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(this._statements.slice(index + 1));
				}
			}
			else {
				for(var __ks_1 = 0, __ks_0 = this._statements.length, statement; __ks_1 < __ks_0; ++__ks_1) {
					statement = this._statements[__ks_1];
					ctrl.compile(statement, Mode.None);
				}
				if(!this._exit && this._type.isAsync()) {
					ctrl.line("__ks_cb()");
				}
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return FunctionDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			fn(this._name, this._type);
		},
		walk: function() {
			if(arguments.length === 1) {
				return FunctionDeclaration.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Statement.prototype.walk) {
				return Statement.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var IfStatement = Helper.class({
		$name: "IfStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var scope = this._scope;
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._scope = this.newScope(scope);
			this._whenTrue = $compile.expression($ast.block(this._data.whenTrue), this);
			this._whenTrue.analyse();
			if(KSType.isValue(this._data.whenFalse)) {
				if(this._data.whenFalse.kind === NodeKind.IfStatement) {
					this._scope = scope;
					this._whenFalse = $compile.statement(this._data.whenFalse, this);
					this._whenFalse.analyse();
				}
				else {
					this._scope = this.newScope(scope);
					this._whenFalse = $compile.expression($ast.block(this._data.whenFalse), this);
					this._whenFalse.analyse();
				}
			}
			this._scope = scope;
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._condition.acquireReusable(false);
			this._condition.releaseReusable();
			this._whenTrue.prepare();
			if(KSType.isValue(this._whenFalse)) {
				this._whenFalse.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenTrue.translate();
			if(KSType.isValue(this._whenFalse)) {
				this._whenFalse.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExit_0: function() {
			return KSType.isValue(this._whenFalse) && this._whenTrue.isExit() && this._whenFalse.isExit();
		},
		isExit: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			this.toIfFragments(ctrl, mode);
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return IfStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toIfFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("if(");
			if(this._condition.isAssignable()) {
				fragments.code("(").compileBoolean(this._condition).code(")");
			}
			else {
				fragments.compileBoolean(this._condition);
			}
			fragments.code(")").step().compile(this._whenTrue, mode);
			if(KSType.isValue(this._whenFalse)) {
				if(KSType.is(this._whenFalse, IfStatement)) {
					fragments.step().code("else ");
					this._whenFalse.toIfFragments(fragments, mode);
				}
				else {
					fragments.step().code("else").step().compile(this._whenFalse, mode);
				}
			}
		},
		toIfFragments: function() {
			if(arguments.length === 2) {
				return IfStatement.prototype.__ks_func_toIfFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toIfFragments) {
				return Statement.prototype.toIfFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_variables_0: function() {
			if(KSType.is(this._whenFalse, IfStatement)) {
				return [].concat(this._variables, this._whenFalse.variables());
			}
			else {
				return this._variables;
			}
		},
		variables: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_variables_0.apply(this);
			}
			return Statement.prototype.variables.apply(this, arguments);
		}
	});
	var ImplementDeclaration = Helper.class({
		$name: "ImplementDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._properties = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_0;
			if(KSType.isValue(__ks_0 = this._scope.getVariable(this._data.variable.name)) ? (this._variable = __ks_0, false) : true) {
				ReferenceException.throwNotDefined(this._data.variable.name, this);
			}
			this._type = this._variable.type().unalias();
			if(KSType.is(this._type, ClassType)) {
				for(var __ks_0 = 0, __ks_1 = this._data.properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
					property = this._data.properties[__ks_0];
					var __ks_2 = property.kind;
					if(__ks_2 === NodeKind.FieldDeclaration) {
						property = new ImplementClassFieldDeclaration(property, this, this._type);
					}
					else if(__ks_2 === NodeKind.MethodDeclaration) {
						property = new ImplementClassMethodDeclaration(property, this, this._type);
					}
					else {
						throw new NotSupportedException("Unexpected kind " + property.kind, this);
					}
					property.analyse();
					this._properties.push(property);
				}
			}
			else if(KSType.is(this._type, NamespaceType)) {
				for(var __ks_0 = 0, __ks_2 = this._data.properties.length, property; __ks_0 < __ks_2; ++__ks_0) {
					property = this._data.properties[__ks_0];
					var __ks_1 = property.kind;
					if(__ks_1 === NodeKind.FieldDeclaration) {
						property = new ImplementNamespaceVariableDeclaration(property, this, this._type);
					}
					else if(__ks_1 === NodeKind.MethodDeclaration) {
						property = new ImplementNamespaceFunctionDeclaration(property, this, this._type);
					}
					else {
						throw new NotSupportedException("Unexpected kind " + property.kind, this);
					}
					property.analyse();
					this._properties.push(property);
				}
			}
			else {
				TypeException.throwImplInvalidType(this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.toFragments(fragments, Mode.None);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImplementDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImplementClassFieldDeclaration = Helper.class({
		$name: "ImplementClassFieldDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._defaultValue = null;
			this._hasDefaultValue = false;
			this._instance = true;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementClassFieldDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, __ks_class_1) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.is(__ks_class_1, ClassType)) {
				throw new TypeError("'class' is not of type 'ClassType'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			this._class = __ks_class_1;
			if(__ks_class_1.isSealed()) {
				TypeException.throwImplFieldToSealedType(this);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementClassFieldDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			for(var i = 0, __ks_0 = this._data.modifiers.length; this._instance && i < __ks_0; ++i) {
				if(this._data.modifiers[i].kind === ModifierKind.Static) {
					this._instance = false;
				}
			}
			this._name = this._data.name.name;
			if(KSType.isValue(this._data.defaultValue)) {
				this._hasDefaultValue = true;
				if(this._instance) {
					var scope = this._scope;
					this._scope = this._parent._instanceVariableScope;
					this._defaultValue = $compile.expression(this._data.defaultValue, this);
					this._defaultValue.analyse();
					this._scope = scope;
				}
				else {
					this._defaultValue = $compile.expression(this._data.defaultValue, this);
					this._defaultValue.analyse();
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._type = ClassVariableType.fromAST(this._data, this);
			if(this._instance) {
				this._class.addInstanceVariable(this._name, this._type);
			}
			else {
				this._class.addClassVariable(this._name, this._type);
			}
			if(this._hasDefaultValue) {
				this._defaultValue.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._hasDefaultValue) {
				this._defaultValue.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._hasDefaultValue) {
				if(this._instance) {
					throw new NotImplementedException(this);
				}
				else {
					throw new NotImplementedException(this);
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImplementClassMethodDeclaration = Helper.class({
		$name: "ImplementClassMethodDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._aliases = [];
			this._isContructor = false;
			this._isDestructor = false;
			this._instance = true;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementClassMethodDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, __ks_class_1) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.is(__ks_class_1, ClassType)) {
				throw new TypeError("'class' is not of type 'ClassType'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementClassMethodDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			this._body = $ast.body(this._data.body);
			if((this._isContructor = ((this._data.name.kind === NodeKind.Identifier) && this._class.isConstructor(this._name)))) {
				throw new NotImplementedException(this);
			}
			else if((this._isDestructor = ((this._data.name.kind === NodeKind.Identifier) && this._class.isDestructor(this._name)))) {
				throw new NotImplementedException(this);
			}
			else {
				for(var i = 0, __ks_0 = this._data.modifiers.length; this._instance && i < __ks_0; ++i) {
					if(this._data.modifiers[i].kind === ModifierKind.Static) {
						this._instance = false;
					}
				}
			}
			this._this = this._scope.define("this", true, this._class.reference(), this);
			this._parameters = [];
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			this._type = new ClassMethodType(Helper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
			if(this._class.isSealed()) {
				this._type.seal();
			}
			if(this._instance) {
				this._internalName = "__ks_func_" + this._name + "_" + this._class.addInstanceMethod(this._name, this._type);
			}
			else {
				this._internalName = "__ks_sttc_" + this._name + "_" + this._class.addClassMethod(this._name, this._type);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			this._statements = [];
			for(var __ks_0 = 0, __ks_1 = this._aliases.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._aliases[__ks_0];
				this._statements.push(statement);
				statement.analyse();
			}
			for(var __ks_0 = 0, __ks_1 = this._body.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._body[__ks_0];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addAliasStatement_0: function(statement) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(statement === void 0 || statement === null) {
				throw new TypeError("'statement' is not nullable");
			}
			else if(!KSType.is(statement, AliasStatement)) {
				throw new TypeError("'statement' is not of type 'AliasStatement'");
			}
			if(!ClassDeclaration.isAssigningAlias(this._body, statement.name(), false, false)) {
				this._aliases.push(statement);
			}
		},
		addAliasStatement: function() {
			if(arguments.length === 1) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_addAliasStatement_0.apply(this, arguments);
			}
			else if(Statement.prototype.addAliasStatement) {
				return Statement.prototype.addAliasStatement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_class_0: function() {
			return this._class;
		},
		class: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_class_0.apply(this);
			}
			else if(Statement.prototype.class) {
				return Statement.prototype.class.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isMethod_0: function() {
			return true;
		},
		isMethod: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_isMethod_0.apply(this);
			}
			else if(Statement.prototype.isMethod) {
				return Statement.prototype.isMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._isContructor) {
				throw new NotImplementedException(this);
			}
			else if(this._isDestructor) {
				throw new NotImplementedException(this);
			}
			else {
				var line = fragments.newLine();
				if(this._class.isSealed()) {
					line.code("" + this._class.sealName() + "." + this._internalName + " = function(");
				}
				else {
					if(this._instance) {
						line.code("" + this._class.name() + ".prototype." + this._internalName + " = function(");
					}
					else {
						line.code("" + this._class.name() + "." + this._internalName + " = function(");
					}
				}
				var block = Parameter.toFragments(this, line, false, function(node) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					line.code(")");
					return line.newBlock();
				});
				for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._statements[__ks_0];
					block.compile(statement);
				}
				block.done();
				line.done();
				if(this._instance) {
					if(this._class.isSealed()) {
						ClassDeclaration.toSwitchFragments(this, fragments.newLine(), this._class, this._class.getInstanceMethods(this._name), this._name, null, Helper.vcurry(function(node, fragments) {
							if(arguments.length < 2) {
								throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
							}
							if(node === void 0 || node === null) {
								throw new TypeError("'node' is not nullable");
							}
							if(fragments === void 0 || fragments === null) {
								throw new TypeError("'fragments' is not nullable");
							}
							var block = fragments.code("" + this._class.sealName() + "._im_" + this._name + " = function(that)").newBlock();
							block.line("var args = Array.prototype.slice.call(arguments, 1, arguments.length)");
							return block;
						}, this), function(fragments) {
							if(arguments.length < 1) {
								throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
							}
							if(fragments === void 0 || fragments === null) {
								throw new TypeError("'fragments' is not nullable");
							}
							return fragments.done();
						}, Helper.vcurry(function(fragments, method, index) {
							if(arguments.length < 3) {
								throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
							}
							if(fragments === void 0 || fragments === null) {
								throw new TypeError("'fragments' is not nullable");
							}
							if(method === void 0 || method === null) {
								throw new TypeError("'method' is not nullable");
							}
							if(index === void 0 || index === null) {
								throw new TypeError("'index' is not nullable");
							}
							if(method.max() === 0) {
								if(method.isSealed()) {
									fragments.line("return " + this._class.sealName() + ".__ks_func_" + this._name + "_" + index + ".apply(that)");
								}
								else {
									fragments.line("return " + this._class.name() + ".prototype.__ks_func_" + this._name + "_" + index + ".apply(that)");
								}
							}
							else {
								if(method.isSealed()) {
									fragments.line("return " + this._class.sealName() + ".__ks_func_" + this._name + "_" + index + ".apply(that, args)");
								}
								else {
									fragments.line("return " + this._class.name() + ".prototype.__ks_func_" + this._name + "_" + index + ".apply(that, args)");
								}
							}
						}, this), "args", true).done();
					}
					else {
						ClassMethodDeclaration.toInstanceSwitchFragments(this, fragments.newLine(), this._class, this._class.getInstanceMethods(this._name), this._name, Helper.vcurry(function(node, fragments) {
							if(arguments.length < 2) {
								throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
							}
							if(node === void 0 || node === null) {
								throw new TypeError("'node' is not nullable");
							}
							if(fragments === void 0 || fragments === null) {
								throw new TypeError("'fragments' is not nullable");
							}
							return fragments.code("" + this._class.name() + ".prototype." + this._name + " = function()").newBlock();
						}, this), function(fragments) {
							if(arguments.length < 1) {
								throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
							}
							if(fragments === void 0 || fragments === null) {
								throw new TypeError("'fragments' is not nullable");
							}
							return fragments.done();
						}).done();
					}
				}
				else {
					if(this._class.isSealed()) {
						ClassDeclaration.toSwitchFragments(this, fragments.newLine(), this._class, this._class.getClassMethods(this._name), this._name, null, Helper.vcurry(function(node, fragments) {
							if(arguments.length < 2) {
								throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
							}
							if(node === void 0 || node === null) {
								throw new TypeError("'node' is not nullable");
							}
							if(fragments === void 0 || fragments === null) {
								throw new TypeError("'fragments' is not nullable");
							}
							var block = fragments.code("" + this._class.sealName() + "._cm_" + this._name + " = function()").newBlock();
							block.line("var args = Array.prototype.slice.call(arguments)");
							return block;
						}, this), function(fragments) {
							if(arguments.length < 1) {
								throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
							}
							if(fragments === void 0 || fragments === null) {
								throw new TypeError("'fragments' is not nullable");
							}
							return fragments.done();
						}, Helper.vcurry(function(fragments, method, index) {
							if(arguments.length < 3) {
								throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
							}
							if(fragments === void 0 || fragments === null) {
								throw new TypeError("'fragments' is not nullable");
							}
							if(method === void 0 || method === null) {
								throw new TypeError("'method' is not nullable");
							}
							if(index === void 0 || index === null) {
								throw new TypeError("'index' is not nullable");
							}
							if(method.max() === 0) {
								if(method.isSealed()) {
									fragments.line("return " + this._class.sealName() + ".__ks_sttc_" + this._name + "_" + index + "()");
								}
								else {
									fragments.line("return " + this._class.name() + ".__ks_sttc_" + this._name + "_" + index + "()");
								}
							}
							else {
								if(method.isSealed()) {
									fragments.line("return " + this._class.sealName() + ".__ks_sttc_" + this._name + "_" + index + ".apply(null, args)");
								}
								else {
									fragments.line("return " + this._class.name() + ".__ks_sttc_" + this._name + "_" + index + ".apply(null, args)");
								}
							}
						}, this), "args", true).done();
					}
					else {
						ClassMethodDeclaration.toClassSwitchFragments(this, fragments.newLine(), this._class, this._class.getClassMethods(this._name), this._name, Helper.vcurry(function(node, fragments) {
							if(arguments.length < 2) {
								throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
							}
							if(node === void 0 || node === null) {
								throw new TypeError("'node' is not nullable");
							}
							if(fragments === void 0 || fragments === null) {
								throw new TypeError("'fragments' is not nullable");
							}
							return fragments.code("" + this._class.name() + "." + this._name + " = function()").newBlock();
						}, this), function(fragments) {
							if(arguments.length < 1) {
								throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
							}
							if(fragments === void 0 || fragments === null) {
								throw new TypeError("'fragments' is not nullable");
							}
							return fragments.done();
						}).done();
					}
				}
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImplementNamespaceVariableDeclaration = Helper.class({
		$name: "ImplementNamespaceVariableDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, namespace) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(namespace === void 0 || namespace === null) {
				throw new TypeError("'namespace' is not nullable");
			}
			else if(!KSType.is(namespace, NamespaceType)) {
				throw new TypeError("'namespace' is not of type 'NamespaceType'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			this._namespace = namespace;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementNamespaceVariableDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._value = $compile.expression(this._data.defaultValue, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
			this._type = NamespaceVariableType.fromAST(this._data, this);
			this._namespace.addProperty(this._data.name.name, this._type);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._namespace.isSealed()) {
				fragments.newLine().code(this._namespace.sealName(), ".", this._data.name.name, " = ").compile(this._value).done();
			}
			else {
				fragments.newLine().code(this._namespace.name(), ".", this._data.name.name, " = ").compile(this._value).done();
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImplementNamespaceFunctionDeclaration = Helper.class({
		$name: "ImplementNamespaceFunctionDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, namespace) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(namespace === void 0 || namespace === null) {
				throw new TypeError("'namespace' is not nullable");
			}
			else if(!KSType.is(namespace, NamespaceType)) {
				throw new TypeError("'namespace' is not of type 'NamespaceType'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
			this._namespace = namespace;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementNamespaceFunctionDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._parameters = [];
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			this._type = NamespaceFunctionType.fromAST(this._data, this);
			this._namespace.addProperty(this._data.name.name, this._type);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(KSType.isValue(this._data.body)) {
				this._statements = [];
				var __ks_0 = $ast.body(this._data.body);
				for(var __ks_1 = 0, __ks_2 = __ks_0.length, statement; __ks_1 < __ks_2; ++__ks_1) {
					statement = __ks_0[__ks_1];
					this._statements.push(statement = $compile.statement(statement, this));
					statement.analyse();
				}
				for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._statements[__ks_0];
					statement.prepare();
				}
				for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._statements[__ks_0];
					statement.translate();
				}
			}
			else {
				this._statements = [];
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isMethod_0: function() {
			return false;
		},
		isMethod: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_isMethod_0.apply(this);
			}
			else if(Statement.prototype.isMethod) {
				return Statement.prototype.isMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var line = fragments.newLine();
			if(this._namespace.isSealed()) {
				line.code(this._namespace.sealName());
			}
			else {
				line.code(this._namespace.name());
			}
			line.code(".", this._data.name.name, " = function(");
			var block = Parameter.toFragments(this, line, false, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code(")").newBlock();
			});
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				block.compile(statement);
			}
			block.done();
			line.done();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImportKind = {
		KSFile: 0,
		NodeFile: 1
	};
	var $nodeModules = {
		assert: true,
		buffer: true,
		child_process: true,
		cluster: true,
		constants: true,
		crypto: true,
		dgram: true,
		dns: true,
		domain: true,
		events: true,
		fs: true,
		http: true,
		https: true,
		module: true,
		net: true,
		os: true,
		path: true,
		punycode: true,
		querystring: true,
		readline: true,
		repl: true,
		stream: true,
		string_decoder: true,
		tls: true,
		tty: true,
		url: true,
		util: true,
		v8: true,
		vm: true,
		zlib: true
	};
	var $import = {
		addVariable: function() {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var type = arguments[++__ks_i];
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			var module = arguments[++__ks_i];
			if(module === void 0 || module === null) {
				throw new TypeError("'module' is not nullable");
			}
			var file;
			if(arguments.length > 4 && (file = arguments[++__ks_i]) !== void 0) {
				if(file !== null && !KSType.isString(file)) {
					throw new TypeError("'file' is not of type 'String'");
				}
			}
			else {
				file = null;
			}
			var variable, __ks_0;
			if(KSType.isValue(__ks_0 = node.scope().getLocalVariable(name)) ? (variable = __ks_0, true) : false) {
				variable.type().merge(type, node);
			}
			else {
				node.scope().define(name, true, type, node);
			}
			module.import(name, file);
		},
		define: function() {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var type = arguments[++__ks_i];
			if(type === void 0) {
				type = null;
			}
			else if(type !== null && !KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			var module = arguments[++__ks_i];
			if(module === void 0 || module === null) {
				throw new TypeError("'module' is not nullable");
			}
			var file;
			if(arguments.length > 4 && (file = arguments[++__ks_i]) !== void 0) {
				if(file !== null && !KSType.isString(file)) {
					throw new TypeError("'file' is not of type 'String'");
				}
			}
			else {
				file = null;
			}
			node.scope().define(name, true, type, node);
			module.import(name, file);
		},
		loadCoreModule: function(x, module, data, node) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(x === void 0 || x === null) {
				throw new TypeError("'x' is not nullable");
			}
			if(module === void 0 || module === null) {
				throw new TypeError("'module' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if($nodeModules[x]) {
				return $import.loadNodeFile(null, x, module, data, node);
			}
			return null;
		},
		loadDirectory: function() {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			var __ks_i = -1;
			var x = arguments[++__ks_i];
			if(x === void 0 || x === null) {
				throw new TypeError("'x' is not nullable");
			}
			var __ks__;
			var moduleName = arguments.length > 4 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var module = arguments[++__ks_i];
			if(module === void 0 || module === null) {
				throw new TypeError("'module' is not nullable");
			}
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var pkgfile = path.join(x, "package.json");
			if(fs.isFile(pkgfile)) {
				var pkg;
				try {
					pkg = JSON.parse(fs.readFile(pkgfile));
				}
				catch(__ks_0) {
				}
				if(KSType.isValue(pkg)) {
					var metadata;
					var __ks_0, __ks_1;
					if(pkg.kaoscript && (KSType.isValue(__ks_0 = $import.loadKSFile(path.join(x, pkg.kaoscript.main), moduleName, module, data, node)) ? (metadata = __ks_0, true) : false)) {
						return metadata;
					}
					else if(pkg.main && ((KSType.isValue(__ks_0 = $import.loadFile(path.join(x, pkg.main), moduleName, module, data, node)) ? (metadata = __ks_0, true) : false) || (KSType.isValue(__ks_1 = $import.loadDirectory(path.join(x, pkg.main), moduleName, module, data, node)) ? (metadata = __ks_1, true) : false))) {
						return metadata;
					}
				}
			}
			return $import.loadFile(path.join(x, "index"), moduleName, module, data, node);
		},
		loadFile: function() {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			var __ks_i = -1;
			var x = arguments[++__ks_i];
			if(x === void 0 || x === null) {
				throw new TypeError("'x' is not nullable");
			}
			var __ks__;
			var moduleName = arguments.length > 4 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var module = arguments[++__ks_i];
			if(module === void 0 || module === null) {
				throw new TypeError("'module' is not nullable");
			}
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(fs.isFile(x)) {
				if(x.endsWith($extensions.source)) {
					return $import.loadKSFile(x, moduleName, module, data, node);
				}
				else {
					return $import.loadNodeFile(x, moduleName, module, data, node);
				}
			}
			if(fs.isFile(x + $extensions.source)) {
				return $import.loadKSFile(x + $extensions.source, (moduleName !== null) ? moduleName + $extensions.source : moduleName, module, data, node);
			}
			else {
				for(var ext in require.extensions) {
					if(fs.isFile(x + ext)) {
						return $import.loadNodeFile(x, moduleName, module, data, node);
					}
				}
			}
			return null;
		},
		loadKSFile: function() {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			var __ks_i = -1;
			var x = arguments[++__ks_i];
			if(x === void 0 || x === null) {
				throw new TypeError("'x' is not nullable");
			}
			var __ks__;
			var moduleName = arguments.length > 4 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var module = arguments[++__ks_i];
			if(module === void 0 || module === null) {
				throw new TypeError("'module' is not nullable");
			}
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(!KSType.isValue(moduleName)) {
				moduleName = module.path(x, data.module);
			}
			var metadata, name, alias, variable, hashes;
			var source = fs.readFile(x);
			var target = module.compiler()._options.target;
			if(fs.isFile(getMetadataPath(x, target)) && fs.isFile(getHashPath(x, target)) && (KSType.isValue(__ks_0 = module.isUpToDate(x, target, source)) ? (hashes = __ks_0, true) : false) && (KSType.isValue(__ks_0 = $import.readMetadata(getMetadataPath(x, target))) ? (metadata = __ks_0, true) : false)) {
			}
			else {
				var compiler = module.compiler().createServant(x);
				compiler.compile(source);
				compiler.writeFiles();
				metadata = compiler.toMetadata();
				hashes = compiler.toHashes();
			}
			module.addHashes(x, hashes);
			var __ks_0;
			var exports = metadata.exports, requirements = metadata.requirements;
			var importVariables = {};
			var importVarCount = 0;
			var importAll = false;
			var importAlias = "";
			for(var __ks_0 = 0, __ks_1 = data.specifiers.length, specifier; __ks_0 < __ks_1; ++__ks_0) {
				specifier = data.specifiers[__ks_0];
				if(specifier.kind === NodeKind.ImportWildcardSpecifier) {
					if(specifier.local) {
						importAlias = specifier.local.name;
					}
					else {
						importAll = true;
					}
				}
				else {
					importVariables[specifier.alias.name] = specifier.local ? specifier.local.name : specifier.alias.name;
					++importVarCount;
				}
			}
			if((importVarCount !== 0) || importAll || (importAlias.length !== 0)) {
				var nf;
				for(name in requirements) {
					var requirement = requirements[name];
					if(!requirement.nullable && (!KSType.isValue(data.references) || (data.references.length === 0))) {
						SyntaxException.throwMissingRequirement(name, node);
					}
					nf = true;
					if(data.references) {
						for(var __ks_0 = 0, __ks_1 = data.references.length, reference; nf && __ks_0 < __ks_1; ++__ks_0) {
							reference = data.references[__ks_0];
							if(KSType.isValue(reference.foreign)) {
								if(reference.foreign.name === name) {
									$import.use(reference.alias, node);
									nf = false;
								}
							}
							else {
								if(reference.alias.name === name) {
									$import.use(reference.alias, node);
									nf = false;
								}
							}
						}
					}
					if(nf) {
						if(!requirement.nullable) {
							SyntaxException.throwMissingRequirement(name, node);
						}
					}
				}
			}
			var domain = new ImportDomain(exports, node);
			for(name in importVariables) {
				alias = importVariables[name];
				if(!domain.hasTemporary(name)) {
					ReferenceException.throwNotDefinedInModule(name, data.module, node);
				}
				$import.addVariable(alias, domain.commit(name, alias), node, module, moduleName);
			}
			if(importAll) {
				for(name in exports) {
					$import.addVariable(name, domain.commit(name), node, module, moduleName);
				}
			}
			if(importAlias.length !== 0) {
				var type = new NamespaceType(importAlias, node.scope());
				var ref = type.reference();
				for(name in exports) {
					type.addProperty(name, domain.commit(name).namespace(ref));
				}
				$import.define(importAlias, type, node, module, moduleName);
			}
			domain.commit();
			return {
				kind: ImportKind.KSFile,
				moduleName: moduleName,
				exports: exports,
				requirements: requirements,
				importVariables: importVariables,
				importVarCount: importVarCount,
				importAll: importAll,
				importAlias: importAlias
			};
		},
		loadNodeFile: function() {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			var __ks_i = -1;
			var __ks__;
			var x = arguments.length > 3 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var moduleName = arguments.length > 4 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var module = arguments[++__ks_i];
			if(module === void 0 || module === null) {
				throw new TypeError("'module' is not nullable");
			}
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var file = null;
			if(!moduleName) {
				file = moduleName = module.path(x, data.module);
			}
			var metadata = {
				kind: ImportKind.NodeFile,
				moduleName: moduleName
			};
			var variables = metadata.variables = {};
			var count = 0;
			for(var __ks_0 = 0, __ks_1 = data.specifiers.length, specifier; __ks_0 < __ks_1; ++__ks_0) {
				specifier = data.specifiers[__ks_0];
				if(specifier.kind === NodeKind.ImportWildcardSpecifier) {
					if(specifier.local) {
						metadata.wilcard = specifier.local.name;
						$import.define(specifier.local.name, null, node, module, file);
					}
					else {
						SyntaxException.throwExclusiveWildcardImport(node);
					}
				}
				else {
					variables[specifier.alias.name] = specifier.local ? specifier.local.name : specifier.alias.name;
					++count;
				}
			}
			metadata.count = count;
			for(var alias in variables) {
				$import.define(variables[alias], null, node, module, file);
			}
			return metadata;
		},
		loadNodeModule: function(x, start, module, data, node) {
			if(arguments.length < 5) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(x === void 0 || x === null) {
				throw new TypeError("'x' is not nullable");
			}
			if(start === void 0 || start === null) {
				throw new TypeError("'start' is not nullable");
			}
			if(module === void 0 || module === null) {
				throw new TypeError("'module' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var dirs = $import.nodeModulesPaths(start);
			var file, metadata;
			for(var __ks_0 = 0, __ks_1 = dirs.length, dir; __ks_0 < __ks_1; ++__ks_0) {
				dir = dirs[__ks_0];
				file = path.join(dir, x);
				var __ks_2, __ks_3;
				if((KSType.isValue(__ks_2 = $import.loadFile(file, x, module, data, node)) ? (metadata = __ks_2, true) : false) || (KSType.isValue(__ks_3 = $import.loadDirectory(file, x, module, data, node)) ? (metadata = __ks_3, true) : false)) {
					return metadata;
				}
			}
			return null;
		},
		nodeModulesPaths: function(start) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(start === void 0 || start === null) {
				throw new TypeError("'start' is not nullable");
			}
			start = fs.resolve(start);
			var prefix = "/";
			if(/^([A-Za-z]:)/.test(start)) {
				prefix = "";
			}
			else if(/^\\\\/.test(start)) {
				prefix = "\\\\";
			}
			var splitRe = (process.platform === "win32") ? /[\/\\]/ : /\/+/;
			var parts = start.split(splitRe);
			var dirs = [];
			for(var i = parts.length - 1; i >= 0; --i) {
				if(parts[i] === "node_modules") {
					continue;
				}
				dirs.push(prefix + path.join(path.join.apply(path, [].concat(parts.slice(0, i + 1))), "node_modules"));
			}
			if(process.platform === "win32") {
				dirs[dirs.length - 1] = dirs[dirs.length - 1].replace(":", ":\\");
			}
			return dirs;
		},
		readMetadata: function(file) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			try {
				return JSON.parse(fs.readFile(file));
			}
			catch(__ks_0) {
				return null;
			}
		},
		resolve: function(data, y, module, node) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(y === void 0 || y === null) {
				throw new TypeError("'y' is not nullable");
			}
			if(module === void 0 || module === null) {
				throw new TypeError("'module' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var x = data.module;
			var metadata;
			if(/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[\\\/])/.test(x)) {
				x = fs.resolve(y, x);
				var __ks_0, __ks_1;
				if((KSType.isValue(__ks_0 = $import.loadFile(x, null, module, data, node)) ? (metadata = __ks_0, true) : false) || (KSType.isValue(__ks_1 = $import.loadDirectory(x, null, module, data, node)) ? (metadata = __ks_1, true) : false)) {
					return metadata;
				}
			}
			else {
				if((KSType.isValue(__ks_0 = $import.loadNodeModule(x, y, module, data, node)) ? (metadata = __ks_0, true) : false) || (KSType.isValue(__ks_1 = $import.loadCoreModule(x, module, data, node)) ? (metadata = __ks_1, true) : false)) {
					return metadata;
				}
			}
			IOException.throwNotFoundModule(x, y, node);
		},
		use: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(KSType.isArray(data)) {
				for(var __ks_0 = 0, __ks_1 = data.length, item; __ks_0 < __ks_1; ++__ks_0) {
					item = data[__ks_0];
					if((item.kind === NodeKind.Identifier) && !node.scope().hasVariable(item.name)) {
						ReferenceException.throwNotDefined(item.name, node);
					}
				}
			}
			else if(data.kind === NodeKind.Identifier) {
				if(!node.scope().hasVariable(data.name)) {
					ReferenceException.throwNotDefined(data.name, node);
				}
			}
		},
		toKSFileFragments: function(fragments, metadata, data, node) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(metadata === void 0 || metadata === null) {
				throw new TypeError("'metadata' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks_0;
			var moduleName = metadata.moduleName, exports = metadata.exports, requirements = metadata.requirements, importVariables = metadata.importVariables, importVarCount = metadata.importVarCount, importAll = metadata.importAll, importAlias = metadata.importAlias;
			var name, alias, variable, importCode;
			var importCodeVariable = false;
			if(((importVarCount !== 0) && importAll) || ((importVarCount !== 0) && (importAlias.length !== 0)) || (importAll && (importAlias.length !== 0))) {
				importCode = node._scope.acquireTempName();
				importCodeVariable = true;
				var line = fragments.newLine().code("var ", importCode, " = require(", $quote(moduleName), ")(");
				var nf;
				var first = true;
				var nc = 0;
				for(name in requirements) {
					var requirement = requirements[name];
					nf = true;
					if(data.references) {
						for(var __ks_0 = 0, __ks_1 = data.references.length, reference; nf && __ks_0 < __ks_1; ++__ks_0) {
							reference = data.references[__ks_0];
							if(KSType.isValue(reference.foreign)) {
								if(reference.foreign.name === name) {
									if(first) {
										first = false;
									}
									else {
										line.code(", ");
									}
									for(var i = 0; i < nc; ++i) {
										if(i) {
											line.code(", ");
										}
										line.code("null");
									}
									line.code(reference.alias.name);
									if(requirement.class) {
										line.code(", __ks_" + reference.alias.name);
									}
									nf = false;
								}
							}
							else {
								if(reference.alias.name === name) {
									if(first) {
										first = false;
									}
									else {
										line.code(", ");
									}
									for(var i = 0; i < nc; ++i) {
										if(i) {
											line.code(", ");
										}
										line.code("null");
									}
									line.code(reference.alias.name);
									if(requirement.class) {
										line.code(", __ks_" + reference.alias.name);
									}
									nf = false;
								}
							}
						}
					}
					if(nf) {
						if(requirement.nullable) {
							++nc;
							if(requirement.class) {
								++nc;
							}
						}
						else {
							SyntaxException.throwMissingRequirement(name, node);
						}
					}
				}
				line.code(")").done();
			}
			else if((importVarCount !== 0) || importAll || (importAlias.length !== 0)) {
				importCode = "require(" + $quote(moduleName) + ")(";
				var nf;
				var first = true;
				var nc = 0;
				for(name in requirements) {
					var requirement = requirements[name];
					if(!requirement.nullable && (!KSType.isValue(data.references) || (data.references.length === 0))) {
						SyntaxException.throwMissingRequirement(name, node);
					}
					nf = true;
					if(data.references) {
						for(var __ks_0 = 0, __ks_1 = data.references.length, reference; nf && __ks_0 < __ks_1; ++__ks_0) {
							reference = data.references[__ks_0];
							if(KSType.isValue(reference.foreign)) {
								if(reference.foreign.name === name) {
									if(first) {
										first = false;
									}
									else {
										importCode += ", ";
									}
									for(var i = 0; i < nc; ++i) {
										if(i) {
											importCode += ", ";
										}
										importCode += "null";
									}
									importCode += reference.alias.name;
									if(requirement.class) {
										importCode += ", __ks_" + reference.alias.name;
									}
									nf = false;
								}
							}
							else {
								if(reference.alias.name === name) {
									if(first) {
										first = false;
									}
									else {
										importCode += ", ";
									}
									for(var i = 0; i < nc; ++i) {
										if(i) {
											importCode += ", ";
										}
										importCode += "null";
									}
									importCode += reference.alias.name;
									if(requirement.class) {
										importCode += ", __ks_" + reference.alias.name;
									}
									nf = false;
								}
							}
						}
					}
					if(nf) {
						if(requirement.nullable) {
							++nc;
							if(requirement.class) {
								++nc;
							}
						}
						else {
							SyntaxException.throwMissingRequirement(name, node);
						}
					}
				}
				importCode += ")";
			}
			if(importVarCount === 1) {
				for(name in importVariables) {
					alias = importVariables[name];
				}
				variable = exports[name];
				if(!KSType.is(node.scope().getVariable(alias).type(), AliasType)) {
					if(variable.sealed) {
						fragments.newLine().code("var {" + alias + ", __ks_" + alias + "} = " + importCode).done();
					}
					else {
						fragments.newLine().code("var " + alias + " = " + importCode + "." + name).done();
					}
				}
			}
			else if(importVarCount > 0) {
				if(node._options.format.destructuring === "es5") {
					if(importCodeVariable) {
						var line = fragments.newLine().code("var ");
						var nf = false;
						for(name in importVariables) {
							alias = importVariables[name];
							variable = exports[alias];
							if(!KSType.is(node.scope().getVariable(alias).type(), AliasType)) {
								if(nf) {
									line.code(", ");
								}
								else {
									nf = true;
								}
								line.code("" + alias + " = " + importCode + "." + name);
							}
						}
						line.done();
					}
					else {
						fragments.line("var __ks__ = " + importCode);
						var line = fragments.newLine().code("var ");
						var nf = false;
						for(name in importVariables) {
							alias = importVariables[name];
							variable = exports[alias];
							if(!KSType.is(node.scope().getVariable(alias).type(), AliasType)) {
								if(nf) {
									line.code(", ");
								}
								else {
									nf = true;
								}
								line.code("" + alias + " = __ks__." + name);
							}
						}
						line.done();
					}
				}
				else {
					var line = fragments.newLine().code("var {");
					var nf = false;
					for(name in importVariables) {
						alias = importVariables[name];
						variable = exports[name];
						if(!KSType.is(node.scope().getVariable(alias).type(), AliasType)) {
							if(nf) {
								line.code(", ");
							}
							else {
								nf = true;
							}
							if(alias === name) {
								line.code(name);
								if(variable.sealed) {
									line.code(", __ks_" + name);
								}
							}
							else {
								line.code(name, ": ", alias);
								if(variable.sealed) {
									line.code(", __ks_" + alias);
								}
							}
						}
					}
					line.code("} = ", importCode).done();
				}
			}
			if(importAll) {
				var variables = [];
				for(name in exports) {
					variable = exports[name];
					if(!KSType.is(node.scope().getVariable(name).type(), AliasType)) {
						variables.push(name);
						if(variable.sealed) {
							variables.push("__ks_" + name);
						}
					}
				}
				if(variables.length === 1) {
					fragments.newLine().code("var ", variables[0], " = ", importCode, "." + variables[0]).done();
				}
				else if(variables.length > 0) {
					if(node._options.format.destructuring === "es5") {
						if(importCodeVariable) {
							var line = fragments.newLine().code("var ");
							for(var i = 0, __ks_0 = variables.length; i < __ks_0; ++i) {
								name = variables[i];
								if(i > 0) {
									line.code(", ");
								}
								line.code("" + name + " = " + importCode + "." + name);
							}
							line.done();
						}
						else {
							fragments.line("var __ks__ = " + importCode);
							var line = fragments.newLine().code("var ");
							for(var i = 0, __ks_0 = variables.length; i < __ks_0; ++i) {
								name = variables[i];
								if(i > 0) {
									line.code(", ");
								}
								line.code("" + name + " = __ks__." + name);
							}
							line.done();
						}
					}
					else {
						var line = fragments.newLine().code("var {");
						for(var i = 0, __ks_0 = variables.length; i < __ks_0; ++i) {
							name = variables[i];
							if(i > 0) {
								line.code(", ");
							}
							line.code(name);
						}
						line.code("} = ", importCode).done();
					}
				}
			}
			if(importAlias.length) {
				fragments.newLine().code("var ", importAlias, " = ", importCode).done();
			}
			node._scope.releaseTempName(importCode);
		},
		toNodeFileFragments: function(fragments, metadata, data, node) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(metadata === void 0 || metadata === null) {
				throw new TypeError("'metadata' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var moduleName = metadata.moduleName;
			if(KSType.isValue(metadata.wilcard)) {
				fragments.line("var ", metadata.wilcard, " = require(", $quote(moduleName), ")");
			}
			var variables = metadata.variables;
			var count = metadata.count;
			if(count === 1) {
				var alias;
				for(alias in variables) {
				}
				fragments.line("var ", variables[alias], " = require(", $quote(moduleName), ").", alias);
			}
			else if(count > 0) {
				if(node._options.format.destructuring === "es5") {
					fragments.line("var __ks__ = require(", $quote(moduleName), ")");
					var line = fragments.newLine().code("var ");
					var nf = false;
					for(var name in variables) {
						var alias = variables[name];
						if(nf) {
							line.code(", ");
						}
						else {
							nf = true;
						}
						line.code("" + alias + " = __ks__." + name);
					}
					line.done();
				}
				else {
					var line = fragments.newLine().code("var {");
					var nf = false;
					for(var alias in variables) {
						if(nf) {
							line.code(", ");
						}
						else {
							nf = true;
						}
						if(variables[alias] === alias) {
							line.code(alias);
						}
						else {
							line.code(alias, ": ", variables[alias]);
						}
					}
					line.code("} = require(", $quote(moduleName), ")");
					line.done();
				}
			}
		}
	};
	var ImportDeclaration = Helper.class({
		$name: "ImportDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarators = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImportDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.declarations.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._data.declarations[__ks_0];
				this._declarators.push(declarator = new ImportDeclarator(declarator, this));
				declarator.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImportDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImportDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImportDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.toFragments(fragments, mode);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImportDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImportDeclarator = Helper.class({
		$name: "ImportDeclarator",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._metadata = $import.resolve(this._data, this.directory(), this.module(), this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImportDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImportDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImportDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._metadata.kind === ImportKind.KSFile) {
				$import.toKSFileFragments(fragments, this._metadata, this._data, this);
			}
			else {
				$import.toNodeFileFragments(fragments, this._metadata, this._data, this);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImportDeclarator.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var IncludeDeclaration = Helper.class({
		$name: "IncludeDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._statements = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			IncludeDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var directory = this.directory();
			var module = this.module();
			var compiler = module.compiler();
			var path, data, declarator;
			for(var __ks_0 = 0, __ks_1 = this._data.files.length, file; __ks_0 < __ks_1; ++__ks_0) {
				file = this._data.files[__ks_0];
				if(/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[\\\/])/.test(file)) {
					path = fs.resolve(directory, file);
					if(fs.isFile(path) || fs.isFile(path += $extensions.source)) {
						declarator = new IncludeDeclarator(path, this);
						data = fs.readFile(path);
						module.addHash(path, compiler.sha256(path, data));
						module.addInclude(path);
						try {
							data = module.parse(data, path);
						}
						catch(error) {
							error.filename = path;
							throw error;
						}
						var __ks_4;
						for(var __ks_2 = 0, __ks_3 = data.body.length, statement; __ks_2 < __ks_3; ++__ks_2) {
							statement = data.body[__ks_2];
							if(KSType.isValue(__ks_4 = $compile.statement(statement, declarator)) ? (statement = __ks_4, true) : false) {
								this._statements.push(statement);
								statement.analyse();
							}
						}
					}
					else {
						IOException.throwNotFoundFile(file, directory, this);
					}
				}
				else {
					var nf = true;
					var __ks_4 = $import.nodeModulesPaths(directory);
					for(var __ks_2 = 0, __ks_3 = __ks_4.length, dir; nf && __ks_2 < __ks_3; ++__ks_2) {
						dir = __ks_4[__ks_2];
						path = fs.resolve(dir, file);
						if(fs.isFile(path) || fs.isFile(path += $extensions.source)) {
							nf = false;
						}
					}
					if(nf) {
						IOException.throwNotFoundModule(file, directory, this);
					}
					declarator = new IncludeDeclarator(path, this);
					data = fs.readFile(path);
					module.addHash(path, compiler.sha256(path, data));
					module.addInclude(path);
					try {
						data = module.parse(data, path);
					}
					catch(error) {
						error.filename = path;
						throw error;
					}
					for(var __ks_4 = 0, __ks_2 = data.body.length, statement; __ks_4 < __ks_2; ++__ks_4) {
						statement = data.body[__ks_4];
						if(KSType.isValue(__ks_3 = $compile.statement(statement, declarator)) ? (statement = __ks_3, true) : false) {
							this._statements.push(statement);
							statement.analyse();
						}
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IncludeDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IncludeDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return IncludeDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.toFragments(fragments, mode);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IncludeDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	var IncludeOnceDeclaration = Helper.class({
		$name: "IncludeOnceDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._statements = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			IncludeOnceDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var directory = this.directory();
			var module = this.module();
			var compiler = module.compiler();
			var path, data, declarator;
			for(var __ks_0 = 0, __ks_1 = this._data.files.length, file; __ks_0 < __ks_1; ++__ks_0) {
				file = this._data.files[__ks_0];
				if(/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[\\\/])/.test(file)) {
					path = fs.resolve(directory, file);
					if(fs.isFile(path) || fs.isFile(path += $extensions.source)) {
						if(!module.hasInclude(path)) {
							declarator = new IncludeDeclarator(path, this);
							data = fs.readFile(path);
							module.addHash(path, compiler.sha256(path, data));
							module.addInclude(path);
							try {
								data = module.parse(data, path);
							}
							catch(error) {
								error.filename = path;
								throw error;
							}
							var __ks_4;
							for(var __ks_2 = 0, __ks_3 = data.body.length, statement; __ks_2 < __ks_3; ++__ks_2) {
								statement = data.body[__ks_2];
								if(KSType.isValue(__ks_4 = $compile.statement(statement, declarator)) ? (statement = __ks_4, true) : false) {
									this._statements.push(statement);
									statement.analyse();
								}
							}
						}
					}
					else {
						IOException.throwNotFoundFile(file, directory, this);
					}
				}
				else {
					var nf = true;
					var __ks_4 = $import.nodeModulesPaths(directory);
					for(var __ks_2 = 0, __ks_3 = __ks_4.length, dir; nf && __ks_2 < __ks_3; ++__ks_2) {
						dir = __ks_4[__ks_2];
						path = fs.resolve(dir, file);
						if(fs.isFile(path) || fs.isFile(path += $extensions.source)) {
							nf = false;
						}
					}
					if(nf) {
						IOException.throwNotFoundModule(file, directory, this);
					}
					if(!module.hasInclude(path)) {
						declarator = new IncludeDeclarator(path, this);
						data = fs.readFile(path);
						module.addHash(path, compiler.sha256(path, data));
						module.addInclude(path);
						try {
							data = module.parse(data, path);
						}
						catch(error) {
							error.filename = path;
							throw error;
						}
						for(var __ks_4 = 0, __ks_2 = data.body.length, statement; __ks_4 < __ks_2; ++__ks_4) {
							statement = data.body[__ks_4];
							if(KSType.isValue(__ks_3 = $compile.statement(statement, declarator)) ? (statement = __ks_3, true) : false) {
								this._statements.push(statement);
								statement.analyse();
							}
						}
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IncludeOnceDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IncludeOnceDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return IncludeOnceDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.toFragments(fragments, mode);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IncludeOnceDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	var IncludeDeclarator = Helper.class({
		$name: "IncludeDeclarator",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(file, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [{}, parent]);
			this._file = file;
			this._directory = path.dirname(file);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				IncludeDeclarator.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._directory;
		},
		directory: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_directory_0.apply(this);
			}
			return Statement.prototype.directory.apply(this, arguments);
		},
		__ks_func_file_0: function() {
			return this._file;
		},
		file: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_file_0.apply(this);
			}
			return Statement.prototype.file.apply(this, arguments);
		},
		__ks_func_recipient_0: function() {
			return this.module();
		},
		recipient: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_recipient_0.apply(this);
			}
			else if(Statement.prototype.recipient) {
				return Statement.prototype.recipient.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var NamespaceDeclaration = Helper.class({
		$name: "NamespaceDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._exports = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			NamespaceDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			this._type = new NamespaceType(this._name, this._scope);
			this._scope.define(this._name, true, this._type, this);
			this._statements = [];
			for(var __ks_0 = 0, __ks_1 = this._data.statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._data.statements[__ks_0];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
				if(KSType.is(statement, ExportDeclaration)) {
					statement.walk(Helper.vcurry(function(name, type) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(name === void 0 || name === null) {
							throw new TypeError("'name' is not nullable");
						}
						if(type === void 0 || type === null) {
							throw new TypeError("'type' is not nullable");
						}
						return this._type.addProperty(name, type);
					}, this));
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(name, alias, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(alias === void 0) {
				alias = null;
			}
			else if(alias !== null && !KSType.isString(alias)) {
				throw new TypeError("'alias' is not of type 'String'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var variable;
			var __ks_0;
			if(KSType.isValue(__ks_0 = this._scope.getVariable(name)) ? (variable = __ks_0, false) : true) {
				ReferenceException.throwNotDefined(name, node);
			}
			if(!KSType.is(variable.type(), AliasType)) {
				this._exports.push("" + (KSType.isValue(alias) ? alias : name) + ": " + name);
				var type = variable.type().unalias();
				if(type.isSealed()) {
					this._exports.push("__ks_" + (KSType.isValue(alias) ? alias : name) + ": " + type.sealName());
				}
			}
		},
		export: function() {
			if(arguments.length === 3) {
				return NamespaceDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Statement.prototype.export) {
				return Statement.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_recipient_0: function() {
			return this;
		},
		recipient: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_recipient_0.apply(this);
			}
			else if(Statement.prototype.recipient) {
				return Statement.prototype.recipient.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toExportFragements_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var line = fragments.newLine().code("return ");
			var object = line.newObject();
			for(var __ks_0 = 0, __ks_1 = this._exports.length, __ks_export_1; __ks_0 < __ks_1; ++__ks_0) {
				__ks_export_1 = this._exports[__ks_0];
				object.line(__ks_export_1);
			}
			object.done();
			line.done();
		},
		toExportFragements: function() {
			if(arguments.length === 1) {
				return NamespaceDeclaration.prototype.__ks_func_toExportFragements_0.apply(this, arguments);
			}
			else if(Statement.prototype.toExportFragements) {
				return Statement.prototype.toExportFragements.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var line = fragments.newLine().code($runtime.scope(this), this._name, " = (function()");
			var block = line.newBlock();
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				block.compile(statement);
			}
			this.toExportFragements(block);
			block.done();
			line.code(")()").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return NamespaceDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ReturnStatement = Helper.class({
		$name: "ReturnStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._await = false;
			this._function = null;
			this._exceptions = false;
			this._value = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ReturnStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			while(KSType.isValue(parent) && !(KSType.is(parent, FunctionExpression) || KSType.is(parent, LambdaExpression) || KSType.is(parent, FunctionDeclaration) || KSType.is(parent, ClassMethodDeclaration) || KSType.is(parent, ImplementClassMethodDeclaration) || KSType.is(parent, ImplementNamespaceFunctionDeclaration))) {
				parent = parent.parent();
			}
			if(KSType.isValue(parent)) {
				this._function = parent;
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ReturnStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			if(KSType.isValue(this._data.value)) {
				this._value = $compile.expression(this._data.value, this);
				this._value.analyse();
				this._await = this._value.isAwait();
				this._exceptions = this._value.hasExceptions();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._value !== null) {
				this._value.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._value !== null) {
				this._value.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return this._exceptions;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			else if(Statement.prototype.hasExceptions) {
				return Statement.prototype.hasExceptions.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			return true;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_toAwaitStatementFragments_0: function(fragments, statements) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			var line = fragments.newLine();
			var item = this._value.toFragments(line, Mode.None);
			item([this]);
			line.done();
		},
		toAwaitStatementFragments: function() {
			if(arguments.length === 2) {
				return ReturnStatement.prototype.__ks_func_toAwaitStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitStatementFragments) {
				return Statement.prototype.toAwaitStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._value.isAwaiting()) {
				return Helper.vcurry(this.toAwaitStatementFragments, this, fragments);
			}
			else if(KSType.isValue(this._function) ? this._function.type().isAsync() : false) {
				if(this._value !== null) {
					fragments.newLine().code("return __ks_cb(null, ").compile(this._value).code(")").done();
				}
				else {
					fragments.line("return __ks_cb()");
				}
			}
			else {
				if(this._value !== null) {
					fragments.newLine().code("return ").compile(this._value).done();
				}
				else {
					fragments.line("return", this._data);
				}
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ReturnStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._value.type();
		},
		type: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var $switch = {
		length: function(elements) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(elements === void 0 || elements === null) {
				throw new TypeError("'elements' is not nullable");
			}
			var min = 0;
			var max = 0;
			for(var __ks_0 = 0, __ks_1 = elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = elements[__ks_0];
				if(element.spread) {
					max = Infinity;
				}
				else {
					++min;
					++max;
				}
			}
			return {
				min: min,
				max: max
			};
		}
	};
	var SwitchStatement = Helper.class({
		$name: "SwitchStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._clauses = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			SwitchStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var scope = this._scope;
			if(this._data.expression.kind === NodeKind.Identifier) {
				this._name = this._data.expression.name;
			}
			else {
				this._value = $compile.expression(this._data.expression, this);
				this._value.analyse();
			}
			var clause, condition, name, exp, value;
			for(var __ks_0 = 0, __ks_1 = this._data.clauses.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.clauses[__ks_0];
				clause = {
					hasTest: false,
					bindings: [],
					conditions: [],
					scope: this.newScope()
				};
				this._scope = clause.scope;
				for(var conditionIdx = 0, __ks_2 = data.conditions.length; conditionIdx < __ks_2; ++conditionIdx) {
					condition = data.conditions[conditionIdx];
					if(condition.kind === NodeKind.SwitchConditionArray) {
						condition = new SwitchConditionArray(condition, this);
					}
					else if(condition.kind === NodeKind.SwitchConditionEnum) {
						throw new NotImplementedException(this);
					}
					else if(condition.kind === NodeKind.SwitchConditionObject) {
						throw new NotImplementedException(this);
					}
					else if(condition.kind === NodeKind.SwitchConditionRange) {
						condition = new SwitchConditionRange(condition, this);
					}
					else if(condition.kind === NodeKind.SwitchConditionType) {
						condition = new SwitchConditionType(condition, this);
					}
					else {
						condition = new SwitchConditionValue(condition, this);
					}
					condition.analyse();
					clause.conditions.push(condition);
				}
				for(var __ks_2 = 0, __ks_3 = data.bindings.length, binding; __ks_2 < __ks_3; ++__ks_2) {
					binding = data.bindings[__ks_2];
					if(binding.kind === NodeKind.ArrayBinding) {
						binding = new SwitchBindingArray(binding, this);
						clause.hasTest = true;
					}
					else if(binding.kind === NodeKind.ObjectBinding) {
						throw new NotImplementedException(this);
					}
					else if(binding.kind === NodeKind.SwitchTypeCasting) {
						binding = new SwitchBindingType(binding, this);
					}
					else {
						binding = new SwitchBindingValue(binding, this);
					}
					binding.analyse();
					clause.bindings.push(binding);
				}
				clause.filter = new SwitchFilter(data, this);
				clause.filter.analyse();
				if(KSType.isValue(data.filter)) {
					clause.hasTest = true;
				}
				clause.body = $compile.expression($ast.block(data.body), this);
				clause.body.analyse();
				this._clauses.push(clause);
				this._scope = scope;
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._data.expression.kind === NodeKind.Identifier) {
				this._name = this._data.expression.name;
			}
			else {
				this._name = this._scope.acquireTempName();
			}
			if(KSType.isValue(this._value)) {
				this._value.prepare();
			}
			for(var __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._clauses[__ks_0];
				for(var __ks_2 = 0, __ks_3 = clause.conditions.length, condition; __ks_2 < __ks_3; ++__ks_2) {
					condition = clause.conditions[__ks_2];
					condition.prepare();
				}
				for(var __ks_2 = 0, __ks_3 = clause.bindings.length, binding; __ks_2 < __ks_3; ++__ks_2) {
					binding = clause.bindings[__ks_2];
					binding.prepare();
				}
				clause.filter.prepare();
				clause.body.prepare();
			}
			if(this._data.expression.kind !== NodeKind.Identifier) {
				this._scope.releaseTempName(this._name);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			for(var __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._clauses[__ks_0];
				for(var __ks_2 = 0, __ks_3 = clause.conditions.length, condition; __ks_2 < __ks_3; ++__ks_2) {
					condition = clause.conditions[__ks_2];
					condition.translate();
				}
				for(var __ks_2 = 0, __ks_3 = clause.bindings.length, binding; __ks_2 < __ks_3; ++__ks_2) {
					binding = clause.bindings[__ks_2];
					binding.translate();
				}
				clause.filter.translate();
				clause.body.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isValue(this._value)) {
				fragments.newLine().code($runtime.scope(this), this._name, " = ").compile(this._value).done();
			}
			var condition;
			for(var __ks_0 = 0, __ks_1 = this._clauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._clauses[__ks_0];
				for(var __ks_2 = 0, __ks_3 = clause.conditions.length; __ks_2 < __ks_3; ++__ks_2) {
					condition = clause.conditions[__ks_2];
					condition.toStatementFragments(fragments);
				}
				clause.filter.toStatementFragments(fragments);
			}
			var ctrl = fragments.newControl();
			var we = false;
			var i, binding;
			for(var clauseIdx = 0, __ks_2 = this._clauses.length, clause; clauseIdx < __ks_2; ++clauseIdx) {
				clause = this._clauses[clauseIdx];
				if(clause.conditions.length) {
					if(we) {
						SyntaxException.throwAfterDefaultClause(this);
					}
					if(clauseIdx) {
						ctrl.step().code("else if(");
					}
					else {
						ctrl.code("if(");
					}
					i = 0;
					for(var __ks_3 = clause.conditions.length; i < __ks_3; ++i) {
						condition = clause.conditions[i];
						if(i) {
							ctrl.code(" || ");
						}
						condition.toBooleanFragments(ctrl, this._name);
					}
					clause.filter.toBooleanFragments(ctrl, true);
					ctrl.code(")").step();
					for(var __ks_3 = 0, __ks_0 = clause.bindings.length; __ks_3 < __ks_0; ++__ks_3) {
						binding = clause.bindings[__ks_3];
						binding.toFragments(ctrl);
					}
					clause.body.toFragments(ctrl, mode);
				}
				else if(clause.hasTest) {
					if(clauseIdx) {
						ctrl.step().code("else if(");
					}
					else {
						ctrl.code("if(");
					}
					clause.filter.toBooleanFragments(ctrl, false);
					ctrl.code(")").step();
					for(var __ks_3 = 0, __ks_0 = clause.bindings.length; __ks_3 < __ks_0; ++__ks_3) {
						binding = clause.bindings[__ks_3];
						binding.toFragments(ctrl);
					}
					clause.body.toFragments(ctrl, mode);
				}
				else {
					if(clauseIdx) {
						ctrl.step().code("else");
					}
					else {
						ctrl.code("if(true)");
					}
					we = true;
					ctrl.step();
					for(var __ks_3 = 0, __ks_0 = clause.bindings.length; __ks_3 < __ks_0; ++__ks_3) {
						binding = clause.bindings[__ks_3];
						binding.toFragments(ctrl);
					}
					clause.body.toFragments(ctrl, mode);
				}
			}
			ctrl.done();
			if(KSType.isValue(this._value)) {
				this._scope.releaseTempName(this._name);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return SwitchStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchBindingArray = Helper.class({
		$name: "SwitchBindingArray",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._array = $compile.expression(this._data, this);
			this._array.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchBindingArray.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._array.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchBindingArray.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._array.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchBindingArray.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var line = fragments.newLine();
			this._array.toAssignmentFragments(line, this._parent._name);
			line.done();
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return SwitchBindingArray.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchBindingType = Helper.class({
		$name: "SwitchBindingType",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._scope.define(this._data.name.name, false, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchBindingType.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchBindingType.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchBindingType.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.line($runtime.scope(this), this._data.name.name, " = ", this._parent._name);
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return SwitchBindingType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchBindingValue = Helper.class({
		$name: "SwitchBindingValue",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._scope.define(this._data.name, false, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchBindingValue.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchBindingValue.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchBindingValue.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.line($runtime.scope(this), this._data.name, " = ", this._parent._name);
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return SwitchBindingValue.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchConditionArray = Helper.class({
		$name: "SwitchConditionArray",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._values = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			SwitchConditionArray.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var nv = true;
			for(var i = 0, __ks_0 = this._data.values.length; nv && i < __ks_0; ++i) {
				if(this._data.values[i].kind !== NodeKind.OmittedExpression) {
					nv = false;
				}
			}
			if(!nv) {
				this._name = this._scope.parent().acquireTempName();
				for(var __ks_0 = 0, __ks_1 = this._data.values.length, value; __ks_0 < __ks_1; ++__ks_0) {
					value = this._data.values[__ks_0];
					if(value.kind !== NodeKind.OmittedExpression) {
						if(value.kind === NodeKind.SwitchConditionRange) {
							value = new SwitchConditionRange(value, this);
						}
						else {
							value = new SwitchConditionValue(value, this);
						}
						value.analyse();
						this._values.push(value);
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionArray.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				value.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchConditionArray.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				value.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchConditionArray.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this.module().flag("Type");
			fragments.code("(", $runtime.typeof("Array", this), "(", name, ")");
			var mm = $switch.length(this._data.values);
			if(mm.min === mm.max) {
				if(mm.min !== Infinity) {
					fragments.code(" && ", name, ".length === ", mm.min);
				}
			}
			else {
				fragments.code(" && ", name, ".length >= ", mm.min);
				if(mm.max !== Infinity) {
					fragments.code(" && ", name, ".length <= ", mm.max);
				}
			}
			if(KSType.isValue(this._name)) {
				fragments.code(" && ", this._name, "(", name, ")");
			}
			fragments.code(")");
			if(KSType.isValue(this._name)) {
				this._scope.parent().releaseTempName(this._name);
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionArray.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._values.length > 0) {
				var line = fragments.newLine();
				line.code($runtime.scope(this), this._name, " = ([");
				for(var i = 0, __ks_0 = this._data.values.length, value; i < __ks_0; ++i) {
					value = this._data.values[i];
					if(i) {
						line.code(", ");
					}
					if(value.kind === NodeKind.OmittedExpression) {
						if(value.spread) {
							line.code("...");
						}
					}
					else {
						line.code("__ks_", i);
					}
				}
				line.code("]) => ");
				var index = 0;
				for(var i = 0, __ks_0 = this._data.values.length, value; i < __ks_0; ++i) {
					value = this._data.values[i];
					if(value.kind !== NodeKind.OmittedExpression) {
						if(index) {
							line.code(" && ");
						}
						this._values[index].toBooleanFragments(line, "__ks_" + i);
						index++;
					}
				}
				line.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionArray.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchConditionRange = Helper.class({
		$name: "SwitchConditionRange",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._from = true;
			this._to = true;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			SwitchConditionRange.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(KSType.isValue(this._data.from)) {
				this._left = $compile.expression(this._data.from, this);
			}
			else {
				this._left = $compile.expression(this._data.then, this);
				this._from = false;
			}
			if(KSType.isValue(this._data.to)) {
				this._right = $compile.expression(this._data.to, this);
			}
			else {
				this._right = $compile.expression(this._data.til, this);
				this._to = false;
			}
			this._left.analyse();
			this._right.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionRange.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			this._right.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchConditionRange.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
			this._right.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchConditionRange.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			fragments.code(name, this._from ? " >= " : ">").compile(this._left).code(" && ").code(name, this._to ? " <= " : "<").compile(this._right);
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionRange.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionRange.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchConditionType = Helper.class({
		$name: "SwitchConditionType",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionType.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._type = Type.fromAST(this._data.type, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchConditionType.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchConditionType.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this._type.toTestFragments(fragments, new Literal(false, this, this._scope, name));
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionType.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionType.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchConditionValue = Helper.class({
		$name: "SwitchConditionValue",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._value = $compile.expression(this._data, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionValue.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchConditionValue.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchConditionValue.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			fragments.code(name, " === ").compile(this._value);
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionValue.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionValue.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchFilter = Helper.class({
		$name: "SwitchFilter",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._bindings = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			SwitchFilter.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(KSType.isValue(this._data.filter)) {
				if(this._data.bindings.length > 0) {
					this._name = this._scope.parent().acquireTempName();
					for(var __ks_0 = 0, __ks_1 = this._data.bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
						binding = this._data.bindings[__ks_0];
						this._bindings.push(binding = $compile.expression(binding, this));
						binding.analyse();
					}
				}
				this._filter = $compile.expression(this._data.filter, this);
				this._filter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchFilter.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(KSType.isValue(this._filter)) {
				for(var __ks_0 = 0, __ks_1 = this._bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
					binding = this._bindings[__ks_0];
					binding.prepare();
				}
				this._filter.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchFilter.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(KSType.isValue(this._filter)) {
				for(var __ks_0 = 0, __ks_1 = this._bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
					binding = this._bindings[__ks_0];
					binding.translate();
				}
				this._filter.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchFilter.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, nf) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(nf === void 0 || nf === null) {
				throw new TypeError("'nf' is not nullable");
			}
			var mm;
			for(var __ks_0 = 0, __ks_1 = this._data.bindings.length, binding; __ks_0 < __ks_1; ++__ks_0) {
				binding = this._data.bindings[__ks_0];
				if(binding.kind === NodeKind.ArrayBinding) {
					this.module().flag("Type");
					if(nf) {
						fragments.code(" && ");
					}
					else {
						nf = true;
					}
					fragments.code($runtime.typeof("Array", this), "(", this._parent._name, ")");
					mm = $switch.length(binding.elements);
					if(mm.min === mm.max) {
						if(mm.min !== Infinity) {
							fragments.code(" && ", this._parent._name, ".length === ", mm.min);
						}
					}
					else {
						fragments.code(" && ", this._parent._name, ".length >= ", mm.min);
						if(mm.max !== Infinity) {
							fragments.code(" && ", this._parent._name, ".length <= ", mm.max);
						}
					}
				}
			}
			if(KSType.isValue(this._name)) {
				if(nf) {
					fragments.code(" && ");
				}
				fragments.code(this._name, "(", this._parent._name, ")");
				this._scope.parent().releaseTempName(this._name);
			}
			else if(KSType.isValue(this._filter)) {
				if(nf) {
					fragments.code(" && ");
				}
				fragments.compile(this._filter);
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchFilter.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(KSType.isValue(this._name)) {
				var line = fragments.newLine();
				line.code($runtime.scope(this), this._name, " = (");
				for(var i = 0, __ks_0 = this._bindings.length, binding; i < __ks_0; ++i) {
					binding = this._bindings[i];
					if(i) {
						line.code(", ");
					}
					line.compile(binding);
				}
				line.code(") => ").compile(this._filter);
				line.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchFilter.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ThrowStatement = Helper.class({
		$name: "ThrowStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._function = null;
			this._value = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ThrowStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			while(KSType.isValue(parent) && !(KSType.is(parent, FunctionExpression) || KSType.is(parent, LambdaExpression) || KSType.is(parent, FunctionDeclaration) || KSType.is(parent, ClassMethodDeclaration) || KSType.is(parent, ImplementClassMethodDeclaration) || KSType.is(parent, ImplementNamespaceFunctionDeclaration))) {
				parent = parent.parent();
			}
			if(KSType.isValue(parent)) {
				this._function = parent;
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ThrowStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._value = $compile.expression(this._data.value, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
			var type, __ks_0;
			if((KSType.isValue(__ks_0 = this._value.type().unalias()) ? (type = __ks_0, true) : false) && KSType.is(type, ClassType)) {
				Exception.validateReportedError(type, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExit_0: function() {
			return true;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isValue(this._function) ? this._function.type().isAsync() : false) {
				fragments.newLine().code("return __ks_cb(").compile(this._value).code(")").done();
			}
			else {
				fragments.newLine().code("throw ").compile(this._value).done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ThrowStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var TryState = {
		Body: 0,
		Catch: 1,
		Finally: 2
	};
	var TryStatement = Helper.class({
		$name: "TryStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._await = false;
			this._catchClauses = [];
			this._exit = false;
			this._statements = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			TryStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var scope = this._scope;
			if(KSType.isValue(this._data.catchClauses)) {
				var variable, body, type;
				for(var __ks_0 = 0, __ks_1 = this._data.catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
					clause = this._data.catchClauses[__ks_0];
					var __ks_2;
					if(KSType.isValue(__ks_2 = scope.getVariable(clause.type.name)) ? (variable = __ks_2, false) : true) {
						ReferenceException.throwNotDefined(clause.type.name, this);
					}
					else if(!KSType.is(variable.type(), ClassType)) {
						TypeException.throwNotClass(clause.type.name, this);
					}
					if(KSType.isValue(clause.binding)) {
						this._scope = new Scope(scope);
						this._scope.define(clause.binding.name, false, this);
					}
					body = $compile.expression(clause.body, this);
					body.analyse();
					type = $compile.expression(clause.type, this);
					type.analyse();
					this._catchClauses.push({
						body: body,
						type: type
					});
				}
			}
			if(KSType.isValue(this._data.catchClause)) {
				if(KSType.isValue(this._data.catchClause.binding)) {
					this._scope = new Scope(scope);
					this._scope.define(this._data.catchClause.binding.name, false, this);
				}
				this._catchClause = $compile.expression(this._data.catchClause.body, this);
				this._catchClause.analyse();
			}
			this._scope = scope;
			var __ks_2 = $ast.body(this._data.body);
			for(var __ks_0 = 0, __ks_1 = __ks_2.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = __ks_2[__ks_0];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
				if(statement.isAwait()) {
					this._await = true;
				}
			}
			if(KSType.isValue(this._data.finalizer)) {
				this._finalizer = $compile.expression(this._data.finalizer, this);
				this._finalizer.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var exit = false;
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
				if(exit) {
					SyntaxException.throwDeadCode(statement);
				}
				else {
					exit = statement.isExit();
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._catchClauses[__ks_0];
				clause.body.prepare();
				clause.type.prepare();
			}
			if(KSType.isValue(this._catchClause)) {
				this._catchClause.prepare();
				this._exit = exit && this._catchClause.isExit();
			}
			if(KSType.isValue(this._finalizer)) {
				this._finalizer.prepare();
				if(exit || this._exit) {
					SyntaxException.throwDeadCode(this._finalizer);
				}
				else {
					this._exit = this._finalizer.isExit();
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
			for(var __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
				clause = this._catchClauses[__ks_0];
				clause.body.translate();
				clause.type.translate();
			}
			if(KSType.isValue(this._catchClause)) {
				this._catchClause.translate();
			}
			if(KSType.isValue(this._finalizer)) {
				this._finalizer.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getErrorVarname_0: function() {
			if((this._catchClauses.length === 0) && (KSType.isValue(this._data.catchClause) && KSType.isValue(this._data.catchClause.binding))) {
				return this._data.catchClause.binding.name;
			}
			else {
				return this._scope.acquireTempName();
			}
		},
		getErrorVarname: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_getErrorVarname_0.apply(this);
			}
			else if(Statement.prototype.getErrorVarname) {
				return Statement.prototype.getErrorVarname.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			if(this._catchClauses.length > 0) {
				for(var __ks_0 = 0, __ks_1 = this._catchClauses.length, clause; __ks_0 < __ks_1; ++__ks_0) {
					clause = this._catchClauses[__ks_0];
					if(clause.type.type().match(error)) {
						return true;
					}
				}
				return false;
			}
			else {
				return true;
			}
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return TryStatement.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Statement.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			return this._exit;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_toAwaitStatementFragments_0: function(fragments, statements) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			if(statements.length !== 0) {
				this._continueVarname = this._scope.acquireTempName();
				var line = fragments.newLine().code($runtime.scope(this), this._continueVarname, " = () =>");
				var block = line.newBlock();
				var index = -1;
				var item;
				for(var i = 0, __ks_0 = statements.length, statement; index === -1 && i < __ks_0; ++i) {
					statement = statements[i];
					var __ks_1;
					if(KSType.isValue(__ks_1 = statement.toFragments(block, Mode.None)) ? (item = __ks_1, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(statements.slice(index + 1));
				}
				block.done();
				line.done();
			}
			if(KSType.isValue(this._finalizer)) {
				this._state = TryState.Finally;
				this._finallyVarname = this._scope.acquireTempName();
				var line = fragments.newLine().code($runtime.scope(this), this._finallyVarname, " = () =>");
				line.newBlock().compile(this._finalizer).done();
				line.done();
			}
			if((this._catchClauses.length !== 0) || KSType.isValue(this._catchClause)) {
				this._state = TryState.Catch;
				this._catchVarname = this._scope.acquireTempName();
				var error = this.getErrorVarname();
				var line = fragments.newLine().code($runtime.scope(this), this._catchVarname, " = (" + error + ") =>");
				var block = line.newBlock();
				this.toCatchFragments(block, error);
				this._scope.releaseTempName(error);
				block.done();
				line.done();
			}
			this._state = TryState.Body;
			var ctrl = fragments.newControl().code("try").step();
			var index = -1;
			var item;
			for(var i = 0, __ks_1 = this._statements.length, statement; index === -1 && i < __ks_1; ++i) {
				statement = this._statements[i];
				if(KSType.isValue(__ks_0 = statement.toFragments(ctrl, Mode.None)) ? (item = __ks_0, true) : false) {
					index = i;
				}
			}
			if(index !== -1) {
				item(this._statements.slice(index + 1));
			}
			ctrl.step().code("catch(__ks_e)").step();
			if(KSType.isValue(this._catchVarname)) {
				ctrl.line(this._catchVarname + "(__ks_e)");
			}
			else if(KSType.isValue(this._finallyVarname)) {
				ctrl.line(this._finallyVarname + "()");
			}
			else if(KSType.isValue(this._continueVarname)) {
				ctrl.line(this._continueVarname + "()");
			}
			ctrl.done();
		},
		toAwaitStatementFragments: function() {
			if(arguments.length === 2) {
				return TryStatement.prototype.__ks_func_toAwaitStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitStatementFragments) {
				return Statement.prototype.toAwaitStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAwaitExpressionFragments_0: function(fragments, parameters, statements) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			fragments.code("(__ks_e");
			for(var __ks_0 = 0, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				fragments.code($comma).compile(parameter);
			}
			fragments.code(") =>");
			var block = fragments.newBlock();
			var ctrl = block.newControl().code("if(__ks_e)").step();
			if(this._state === TryState.Body) {
				if(KSType.isValue(this._catchVarname)) {
					ctrl.line(this._catchVarname + "(__ks_e)");
				}
				else if(KSType.isValue(this._finallyVarname)) {
					ctrl.line(this._finallyVarname + "()");
				}
				else if(KSType.isValue(this._continueVarname)) {
					ctrl.line(this._continueVarname + "()");
				}
			}
			else if(this._state === TryState.Catch) {
				if(KSType.isValue(this._finallyVarname)) {
					ctrl.line(this._finallyVarname + "()");
				}
				else if(KSType.isValue(this._continueVarname)) {
					ctrl.line(this._continueVarname + "()");
				}
			}
			else if(this._state === TryState.Finally) {
				if(KSType.isValue(this._continueVarname)) {
					ctrl.line(this._continueVarname + "()");
				}
			}
			ctrl.step().code("else").step();
			var statement = statements[statements.length - 1];
			if(this._state === TryState.Body) {
				if((statements.length === 1) && !statement.hasExceptions()) {
					ctrl.compile(statement);
					if(!KSType.is(statement, ReturnStatement)) {
						if(KSType.isValue(this._finallyVarname)) {
							ctrl.line(this._finallyVarname + "()");
						}
						else if(KSType.isValue(this._continueVarname)) {
							ctrl.line(this._continueVarname + "()");
						}
					}
				}
				else {
					var returnOutside = KSType.is(statement, ReturnStatement) && statement.hasExceptions();
					if(returnOutside) {
						statement.toDeclareReusableFragments(ctrl);
					}
					var ctrl2 = ctrl.newControl().code("try").step();
					var index = -1;
					var item;
					for(var i = 0, __ks_0 = statements.length - 1; index === -1 && i < __ks_0; ++i) {
						if(KSType.isValue(__ks_1 = statements[i].toFragments(ctrl2, Mode.None)) ? (item = __ks_1, true) : false) {
							index = i;
						}
					}
					if(index !== -1) {
						item(statements.slice(index + 1));
					}
					else {
						if(returnOutside) {
							statement.toReusableFragments(ctrl2);
						}
						else {
							if(KSType.isValue(__ks_0 = statement.toFragments(ctrl2, Mode.None)) ? (item = __ks_0, true) : false) {
								item([]);
							}
						}
					}
					ctrl2.step().code("catch(__ks_e)").step();
					if(KSType.isValue(this._catchVarname)) {
						ctrl2.line("return " + this._catchVarname + "(__ks_e)");
					}
					ctrl2.done();
					if(!KSType.isValue(item)) {
						if(returnOutside) {
							ctrl.compile(statement);
						}
						else if(!KSType.is(statement, ReturnStatement)) {
							if(KSType.isValue(this._finallyVarname)) {
								ctrl.line(this._finallyVarname + "()");
							}
							else if(KSType.isValue(this._continueVarname)) {
								ctrl.line(this._continueVarname + "()");
							}
						}
					}
				}
			}
			else {
				var index = -1;
				var item;
				for(var i = 0, __ks_0 = statements.length; index === -1 && i < __ks_0; ++i) {
					if(KSType.isValue(__ks_1 = statements[i].toFragments(ctrl, Mode.None)) ? (item = __ks_1, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(statements.slice(index + 1));
				}
				if(this._state === TryState.Catch) {
					if(KSType.isValue(this._finallyVarname)) {
						ctrl.line(this._finallyVarname + "()");
					}
					else if(KSType.isValue(this._continueVarname)) {
						ctrl.line(this._continueVarname + "()");
					}
				}
				else if(this._state === TryState.Finally) {
					if(KSType.isValue(this._continueVarname)) {
						ctrl.line(this._continueVarname + "()");
					}
				}
			}
			ctrl.done();
			block.done();
			fragments.code(")").done();
		},
		toAwaitExpressionFragments: function() {
			if(arguments.length === 3) {
				return TryStatement.prototype.__ks_func_toAwaitExpressionFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitExpressionFragments) {
				return Statement.prototype.toAwaitExpressionFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toCatchFragments_0: function(fragments, error) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			var async = false;
			if(this._catchClauses.length !== 0) {
				this.module().flag("Type");
				var ifs = fragments.newControl();
				for(var i = 0, __ks_0 = this._data.catchClauses.length, clause; i < __ks_0; ++i) {
					clause = this._data.catchClauses[i];
					if(i) {
						ifs.step().code("else ");
					}
					ifs.code("if(", $runtime.type(this), ".is(", error, ", ").compile(this._catchClauses[i].type).code(")").step();
					if(KSType.isValue(clause.binding)) {
						ifs.line($runtime.scope(this), clause.binding.name, " = ", error);
					}
					ifs.compile(this._catchClauses[i].body);
					if(!this._catchClauses[i].body.isAwait() && KSType.isValue(this._continueVarname)) {
						ifs.line(this._continueVarname + "()");
					}
				}
				if(KSType.isValue(this._catchClause)) {
					ifs.step().code("else").step();
					if(KSType.isValue(this._data.catchClause.binding)) {
						ifs.line($runtime.scope(this), this._data.catchClause.binding.name, " = ", error);
					}
					ifs.compile(this._catchClause);
					if(!this._catchClause.isAwait() && KSType.isValue(this._continueVarname)) {
						ifs.line(this._continueVarname + "()");
					}
				}
				else if(KSType.isValue(this._continueVarname)) {
					ifs.step().code("else").step();
					ifs.line(this._continueVarname + "()");
				}
				ifs.done();
			}
			else if(KSType.isValue(this._catchClause)) {
				fragments.compile(this._catchClause);
				if(!this._catchClause.isAwait()) {
					if(KSType.isValue(this._finallyVarname)) {
						fragments.line(this._finallyVarname + "()");
					}
					else if(KSType.isValue(this._continueVarname)) {
						fragments.line(this._continueVarname + "()");
					}
				}
			}
			else if(KSType.isValue(this._finallyVarname)) {
				fragments.line(this._finallyVarname + "()");
			}
			else if(KSType.isValue(this._continueVarname)) {
				fragments.line(this._continueVarname + "()");
			}
		},
		toCatchFragments: function() {
			if(arguments.length === 2) {
				return TryStatement.prototype.__ks_func_toCatchFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toCatchFragments) {
				return Statement.prototype.toCatchFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._await) {
				return Helper.vcurry(this.toAwaitStatementFragments, this, fragments);
			}
			else {
				var finalizer = null;
				if(KSType.isValue(this._finalizer)) {
					this._finallyVarname = this._scope.acquireTempName();
					var line = fragments.newLine().code($runtime.scope(this), this._finallyVarname, " = () =>");
					line.newBlock().compile(this._finalizer).done();
					line.done();
				}
				var ctrl = fragments.newControl().code("try").step();
				for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._statements[__ks_0];
					ctrl.compile(statement, Mode.None);
				}
				if(KSType.isValue(this._finallyVarname)) {
					ctrl.line(this._finallyVarname + "()");
				}
				ctrl.step();
				var error = this.getErrorVarname();
				ctrl.code("catch(" + error + ")").step();
				this.toCatchFragments(ctrl, error);
				this._scope.releaseTempName(error);
				ctrl.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return TryStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var TypeAliasDeclaration = Helper.class({
		$name: "TypeAliasDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			this._scope.define(this._name, true, new AliasType(Type.fromAST(this._data.type, this)), this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return TypeAliasDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnlessStatement = Helper.class({
		$name: "UnlessStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenFalse = $compile.expression($ast.block(this._data.whenFalse), this);
			this._whenFalse.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UnlessStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._whenFalse.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnlessStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenFalse.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return UnlessStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("if(!").wrapBoolean(this._condition).code(")").step().compile(this._whenFalse).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return UnlessStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UntilStatement = Helper.class({
		$name: "UntilStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._body = $compile.expression(this._data.body, this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UntilStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._body.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UntilStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return UntilStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("while(!(").compileBoolean(this._condition).code("))").step().compile(this._body).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return UntilStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var VariableDeclaration = Helper.class({
		$name: "VariableDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarators = [];
			this._function = null;
			this._hasInit = false;
			this._toDeclareAll = true;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			VariableDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			while(KSType.isValue(parent) && !(KSType.is(parent, FunctionExpression) || KSType.is(parent, LambdaExpression) || KSType.is(parent, FunctionDeclaration) || KSType.is(parent, ClassMethodDeclaration) || KSType.is(parent, ImplementClassMethodDeclaration) || KSType.is(parent, ImplementNamespaceFunctionDeclaration))) {
				if(KSType.is(parent, TryStatement)) {
					this._try = parent;
				}
				parent = parent.parent();
			}
			if(KSType.isValue(parent)) {
				this._function = parent;
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				VariableDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._immutable = !this._data.rebindable;
			this._autotype = this._immutable || this._data.autotype;
			this._await = this._data.await;
			var declarator;
			for(var __ks_0 = 0, __ks_1 = this._data.variables.length, data; __ks_0 < __ks_1; ++__ks_0) {
				data = this._data.variables[__ks_0];
				var __ks_2 = data.name.kind;
				if(__ks_2 === NodeKind.ArrayBinding) {
					declarator = new VariableBindingDeclarator(data, this);
				}
				else if(__ks_2 === NodeKind.Identifier) {
					declarator = new VariableIdentifierDeclarator(data, this);
				}
				else if(__ks_2 === NodeKind.ObjectBinding) {
					declarator = new VariableBindingDeclarator(data, this);
				}
				else {
					throw new NotImplementedException(this);
				}
				declarator.analyse();
				if(this._toDeclareAll && declarator.isAlreadyDeclared()) {
					this._toDeclareAll = false;
				}
				this._declarators.push(declarator);
			}
			if(KSType.isValue(this._data.init)) {
				this._hasInit = true;
				if((this._declarators.length === 1) && KSType.is(this._declarators[0], VariableIdentifierDeclarator)) {
					this.reference(this._declarators[0].name());
				}
				this._init = $compile.expression(this._data.init, this);
				this._init.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._hasInit) {
				this._init.prepare();
				this._init.acquireReusable(false);
				this._init.releaseReusable();
				if(this._autotype) {
					this._declarators[0].type(this._init.type());
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._hasInit) {
				this._init.translate();
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasInit_0: function() {
			return this._hasInit;
		},
		hasInit: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_hasInit_0.apply(this);
			}
			else if(Statement.prototype.hasInit) {
				return Statement.prototype.hasInit.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_init_0: function() {
			return this._init;
		},
		init: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_init_0.apply(this);
			}
			else if(Statement.prototype.init) {
				return Statement.prototype.init.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isImmutable_0: function() {
			return this._immutable;
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_isImmutable_0.apply(this);
			}
			else if(Statement.prototype.isImmutable) {
				return Statement.prototype.isImmutable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAwaitExpressionFragments_0: function(fragments, parameters, statements) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			fragments.code("(__ks_e");
			for(var __ks_0 = 0, __ks_1 = parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = parameters[__ks_0];
				fragments.code($comma).compile(parameter);
			}
			fragments.code(") =>");
			var block = fragments.newBlock();
			for(var __ks_0 = 0, __ks_1 = statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = statements[__ks_0];
				block.compile(statement, Mode.None);
			}
			block.done();
			fragments.code(")").done();
		},
		toAwaitExpressionFragments: function() {
			if(arguments.length === 3) {
				return VariableDeclaration.prototype.__ks_func_toAwaitExpressionFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitExpressionFragments) {
				return Statement.prototype.toAwaitExpressionFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._await) {
				var line = fragments.newLine();
				this._init.toFragments(line, Mode.Async);
				if(KSType.isValue(this._try)) {
					return Helper.vcurry(this._try.toAwaitExpressionFragments, this._try, line, this._declarators);
				}
				else if(KSType.isValue(this._function) ? this._function.type().isAsync() : false) {
					return Helper.vcurry(this._function.toAwaitExpressionFragments, this._function, line, this._declarators);
				}
				else {
					return Helper.vcurry(this.toAwaitExpressionFragments, this, line, this._declarators);
				}
			}
			else {
				if(this._hasInit) {
					var declarator = this._declarators[0];
					var binding = KSType.is(declarator, VariableBindingDeclarator);
					var line = fragments.newLine();
					if(this._toDeclareAll) {
						if(binding || (this._options.format.variables === "es5")) {
							line.code("var ");
						}
						else if(this._data.rebindable) {
							line.code("let ");
						}
						else {
							line.code("const ");
						}
					}
					if(binding && (this._options.format.destructuring === "es5")) {
						declarator.toFlatFragments(line, this._init);
					}
					else {
						line.compile(declarator).code($equals).compile(this._init);
					}
					line.done();
				}
				else if(this._toDeclareAll) {
					var line = fragments.newLine();
					if(this._options.format.variables === "es5") {
						line.code("var ");
					}
					else if(this._data.rebindable) {
						line.code("let ");
					}
					else {
						line.code("const ");
					}
					for(var index = 0, __ks_0 = this._declarators.length, declarator; index < __ks_0; ++index) {
						declarator = this._declarators[index];
						if(index !== 0) {
							line.code($comma);
						}
						line.compile(declarator);
					}
					line.done();
				}
				else {
					var toDeclare = Helper.mapArray(this._declarators, function(declarator) {
						return declarator;
					}, function(declarator) {
						return !declarator.isAlreadyDeclared();
					});
					if(toDeclare.length !== 0) {
						var line = fragments.newLine();
						if(this._options.format.variables === "es5") {
							line.code("var ");
						}
						else {
							line.code("let ");
						}
						for(var index = 0, __ks_0 = toDeclare.length, declarator; index < __ks_0; ++index) {
							declarator = toDeclare[index];
							if(index !== 0) {
								line.code($comma);
							}
							line.compile(declarator);
						}
						line.done();
					}
				}
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return VariableDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._declarators.length, declarator; __ks_0 < __ks_1; ++__ks_0) {
				declarator = this._declarators[__ks_0];
				declarator.walk(fn);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return VariableDeclaration.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Statement.prototype.walk) {
				return Statement.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var VariableBindingDeclarator = Helper.class({
		$name: "VariableBindingDeclarator",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._binding = $compile.expression(this._data.name, this);
			this._binding.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._binding.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._binding.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAlreadyDeclared_0: function() {
			return false;
		},
		isAlreadyDeclared: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_isAlreadyDeclared_0.apply(this);
			}
			else if(AbstractNode.prototype.isAlreadyDeclared) {
				return AbstractNode.prototype.isAlreadyDeclared.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, init) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(init === void 0 || init === null) {
				throw new TypeError("'init' is not nullable");
			}
			this._binding.toFlatFragments(fragments, init);
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return VariableBindingDeclarator.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFlatFragments) {
				return AbstractNode.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._binding);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return VariableBindingDeclarator.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(!type.isAny()) {
				throw new NotImplementedException();
			}
		},
		type: function() {
			if(arguments.length === 1) {
				return VariableBindingDeclarator.prototype.__ks_func_type_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			this._binding.walk(fn);
		},
		walk: function() {
			if(arguments.length === 1) {
				return VariableBindingDeclarator.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.walk) {
				return AbstractNode.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var VariableIdentifierDeclarator = Helper.class({
		$name: "VariableIdentifierDeclarator",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._alreadyDeclared = false;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			VariableIdentifierDeclarator.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var name = this._data.name.name;
			if(this._scope.hasLocalVariable(name)) {
				SyntaxException.throwAlreadyDeclared(name, this);
			}
			if(this._options.format.variables === "es5") {
				this._scope.rename(name);
			}
			if(this._scope.hasDeclaredLocalVariable(name)) {
				this._alreadyDeclared = true;
			}
			this._variable = this._scope.define(name, this._parent.isImmutable(), Type.fromAST(this._data.type, this), this);
			this._name = new IdentifierLiteral(this._data.name, this);
			this._name.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._name.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._name.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAlreadyDeclared_0: function() {
			return this._alreadyDeclared;
		},
		isAlreadyDeclared: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_isAlreadyDeclared_0.apply(this);
			}
			else if(AbstractNode.prototype.isAlreadyDeclared) {
				return AbstractNode.prototype.isAlreadyDeclared.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return VariableIdentifierDeclarator.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._variable.name();
		},
		name: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_name_0.apply(this);
			}
			else if(AbstractNode.prototype.name) {
				return AbstractNode.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._variable.type(type);
		},
		type: function() {
			if(arguments.length === 1) {
				return VariableIdentifierDeclarator.prototype.__ks_func_type_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			fn(this._variable.name(), this._variable.type());
		},
		walk: function() {
			if(arguments.length === 1) {
				return VariableIdentifierDeclarator.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.walk) {
				return AbstractNode.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var WhileStatement = Helper.class({
		$name: "WhileStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._body = $compile.expression(this._data.body, this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._body.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("while(").compileBoolean(this._condition).code(")").step().compile(this._body).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return WhileStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Expression = Helper.class({
		$name: "Expression",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.acquireReusable) {
				return AbstractNode.prototype.acquireReusable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			else if(AbstractNode.prototype.releaseReusable) {
				return AbstractNode.prototype.releaseReusable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return true;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			else if(AbstractNode.prototype.hasExceptions) {
				return AbstractNode.prototype.hasExceptions.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAssignable_0: function() {
			return false;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isAssignable_0.apply(this);
			}
			else if(AbstractNode.prototype.isAssignable) {
				return AbstractNode.prototype.isAssignable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return false;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isAwait_0.apply(this);
			}
			else if(AbstractNode.prototype.isAwait) {
				return AbstractNode.prototype.isAwait.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwaiting_0: function() {
			return false;
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			else if(AbstractNode.prototype.isAwaiting) {
				return AbstractNode.prototype.isAwaiting.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isBooleanComputed_0: function() {
			return this.isComputed();
		},
		isBooleanComputed: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isBooleanComputed_0.apply(this);
			}
			else if(AbstractNode.prototype.isBooleanComputed) {
				return AbstractNode.prototype.isBooleanComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isCallable_0: function() {
			return false;
		},
		isCallable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isCallable_0.apply(this);
			}
			else if(AbstractNode.prototype.isCallable) {
				return AbstractNode.prototype.isCallable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComposite_0: function() {
			return true;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isComposite_0.apply(this);
			}
			else if(AbstractNode.prototype.isComposite) {
				return AbstractNode.prototype.isComposite.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isComputed_0.apply(this);
			}
			else if(AbstractNode.prototype.isComputed) {
				return AbstractNode.prototype.isComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isConditional_0: function() {
			return this.isNullable();
		},
		isConditional: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isConditional_0.apply(this);
			}
			else if(AbstractNode.prototype.isConditional) {
				return AbstractNode.prototype.isConditional.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isEntangled_0: function() {
			return true;
		},
		isEntangled: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isEntangled_0.apply(this);
			}
			else if(AbstractNode.prototype.isEntangled) {
				return AbstractNode.prototype.isEntangled.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(AbstractNode.prototype.isNullable) {
				return AbstractNode.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullableComputed_0: function() {
			return this.isComputed();
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			else if(AbstractNode.prototype.isNullableComputed) {
				return AbstractNode.prototype.isNullableComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_statement_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var expression = this;
			while(!KSType.is(expression._parent, Statement)) {
				expression = expression._parent;
			}
			return expression._parent;
		},
		statement: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_statement_0.apply(this, arguments);
			}
			return AbstractNode.prototype.statement.apply(this, arguments);
		},
		__ks_func_toBooleanFragments_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var fragments = arguments[++__ks_i];
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			return this.toFragments(fragments, mode);
		},
		toBooleanFragments: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Expression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			return this.toFragments(fragments, Mode.None);
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toNullableFragments) {
				return AbstractNode.prototype.toNullableFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			return this.toFragments(fragments, Mode.None);
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toReusableFragments) {
				return AbstractNode.prototype.toReusableFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var $predefined = {
		__false: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			return scope.reference("Boolean");
		},
		__null: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			return Type.Any;
		},
		__true: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			return scope.reference("Boolean");
		},
		__Error: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			return scope.reference("Error");
		},
		__Function: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			return scope.reference("Function");
		},
		__Infinity: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			return scope.reference("Number");
		},
		__Math: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			return scope.reference("Object");
		},
		__Number: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			return scope.reference("Number");
		},
		__NaN: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			return scope.reference("Number");
		},
		__Object: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			return scope.reference("Object");
		},
		__String: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			return scope.reference("String");
		},
		__RegExp: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			return scope.reference("RegExp");
		}
	};
	var Literal = Helper.class({
		$name: "Literal",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(value, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			Expression.prototype.__ks_cons.call(this, [false, parent]);
			this._value = value;
		},
		__ks_cons_1: function(data, parent, scope, value) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
			this._value = value;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				Literal.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 4) {
				Literal.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComposite_0: function() {
			return false;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_isEntangled_0: function() {
			return false;
		},
		isEntangled: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_isEntangled_0.apply(this);
			}
			return Expression.prototype.isEntangled.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._data) {
				fragments.code(this._value, this._data);
			}
			else {
				fragments.code(this._value);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Literal.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_value_0: function() {
			return this._value;
		},
		value: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_value_0.apply(this);
			}
			else if(Expression.prototype.value) {
				return Expression.prototype.value.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var IdentifierLiteral = Helper.class({
		$name: "IdentifierLiteral",
		$extends: Literal,
		__ks_init_1: function() {
			this._isVariable = false;
		},
		__ks_init: function() {
			Literal.prototype.__ks_init.call(this);
			IdentifierLiteral.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			var __ks__;
			var scope = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : parent.scope();
			Literal.prototype.__ks_cons.call(this, [data, parent, scope, data.name]);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				IdentifierLiteral.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			var __ks_0;
			if(KSType.isValue(__ks_0 = this._scope.getVariable(this._value)) ? (this._variable = __ks_0, true) : false) {
				this._isVariable = true;
			}
			else if(KSType.isFunction($predefined["__" + this._value])) {
				this._type = $predefined["__" + this._value](this._scope);
			}
			else if($runtime.isDefined(this._value, this._parent)) {
				this._type = Type.Any;
			}
			else {
				ReferenceException.throwNotDefined(this._value, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_analyse_0.apply(this);
			}
			return Literal.prototype.analyse.apply(this, arguments);
		},
		__ks_func_prepare_0: function() {
			if(this._isVariable) {
				this._type = this._variable.type();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_prepare_0.apply(this);
			}
			return Literal.prototype.prepare.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._value;
		},
		name: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_name_0.apply(this);
			}
			else if(Literal.prototype.name) {
				return Literal.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this._scope.getRenamedVariable(this._value), this._data);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IdentifierLiteral.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Literal.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_type_0.apply(this);
			}
			else if(Literal.prototype.type) {
				return Literal.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			if(this._isVariable) {
				fn(this._value, this._type);
			}
			else {
				throw new NotSupportedException();
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return IdentifierLiteral.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Literal.prototype.walk) {
				return Literal.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var NumberLiteral = Helper.class({
		$name: "NumberLiteral",
		$extends: Literal,
		__ks_init: function() {
			Literal.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			var __ks__;
			var scope = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : parent.scope();
			Literal.prototype.__ks_cons.call(this, [data, parent, scope, data.value]);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				NumberLiteral.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return NumberLiteral.prototype.__ks_func_type_0.apply(this);
			}
			else if(Literal.prototype.type) {
				return Literal.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var StringLiteral = Helper.class({
		$name: "StringLiteral",
		$extends: Literal,
		__ks_init: function() {
			Literal.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			var __ks__;
			var scope = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : parent.scope();
			Literal.prototype.__ks_cons.call(this, [data, parent, scope, $quote(data.value)]);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				StringLiteral.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_type_0: function() {
			return this._scope.reference("String");
		},
		type: function() {
			if(arguments.length === 0) {
				return StringLiteral.prototype.__ks_func_type_0.apply(this);
			}
			else if(Literal.prototype.type) {
				return Literal.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayExpression = Helper.class({
		$name: "ArrayExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._values = [];
			for(var __ks_0 = 0, __ks_1 = this._data.values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._data.values[__ks_0];
				this._values.push(value = $compile.expression(value, this));
				value.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				value.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._values.length, value; __ks_0 < __ks_1; ++__ks_0) {
				value = this._values[__ks_0];
				value.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("[");
			for(var index = 0, __ks_0 = this._values.length, value; index < __ks_0; ++index) {
				value = this._values[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(value);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Array");
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayRange = Helper.class({
		$name: "ArrayRange",
		$extends: Expression,
		__ks_init_1: function() {
			this._by = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayRange.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._from = $compile.expression(KSType.isValue(this._data.from) ? this._data.from : this._data.then, this);
			this._from.analyse();
			this._to = $compile.expression(KSType.isValue(this._data.to) ? this._data.to : this._data.til, this);
			this._to.analyse();
			if(KSType.isValue(this._data.by)) {
				this._by = $compile.expression(this._data.by, this);
				this._by.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._type = Type.arrayOf(this._scope.reference("Number"), this._scope);
			this._from.prepare();
			this._to.prepare();
			if(KSType.isValue(this._by)) {
				this._by.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._from.translate();
			this._to.translate();
			if(this._by !== null) {
				this._by.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			fragments.code($runtime.helper(this), ".newArrayRange(").compile(this._from).code($comma).compile(this._to);
			if(this._by === null) {
				fragments.code(", 1");
			}
			else {
				fragments.code(", ").compile(this._by);
			}
			fragments.code($comma, KSType.isValue(this._data.from), $comma, KSType.isValue(this._data.to), ")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayRange.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	function $return(data) {
		if(data === void 0) {
			data = null;
		}
		return {
			kind: NodeKind.ReturnStatement,
			value: data
		};
	}
	var ArrayComprehensionForFrom = Helper.class({
		$name: "ArrayComprehensionForFrom",
		$extends: Expression,
		__ks_init_1: function() {
			this._by = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayComprehensionForFrom.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, parent.newScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ArrayComprehensionForFrom.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._scope.define(this._data.loop.variable.name, false, this._scope.reference("Number"), this);
			this._variable = $compile.expression(this._data.loop.variable, this);
			this._variable.analyse();
			this._from = $compile.expression(this._data.loop.from, this);
			this._from.analyse();
			this._to = $compile.expression(KSType.isValue(this._data.loop.to) ? this._data.loop.to : this._data.loop.til, this);
			this._to.analyse();
			if(KSType.isValue(this._data.loop.by)) {
				this._by = $compile.expression(this._data.loop.by, this);
				this._by.analyse();
			}
			this._body = $compile.statement($return(this._data.body), this);
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				this._when = $compile.statement($return(this._data.loop.when), this);
				this._when.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._variable.prepare();
			this._from.prepare();
			this._to.prepare();
			if(KSType.isValue(this._by)) {
				this._by.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._variable.translate();
			this._from.translate();
			this._to.translate();
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapRange(").compile(this._from).code($comma).compile(this._to);
			if(this._by === null) {
				fragments.code(", 1");
			}
			else {
				fragments.code($comma).compile(this._by);
			}
			fragments.code($comma, KSType.isValue(this._data.loop.from), $comma, KSType.isValue(this._data.loop.to), $comma);
			fragments.code(surround.beforeParameters).compile(this._variable).code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(this._variable).code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForFrom.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Array");
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayComprehensionForIn = Helper.class({
		$name: "ArrayComprehensionForIn",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, parent.newScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ArrayComprehensionForIn.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._expression = $compile.expression(this._data.loop.expression, this);
			this._expression.analyse();
			if(KSType.isValue(this._data.loop.value)) {
				this._valueVariable = this._scope.define(this._data.loop.value.name, false, this);
				this._value = $compile.expression(this._data.loop.value, this);
				this._value.analyse();
			}
			else {
				this._valueName = this._scope.acquireTempName();
			}
			if(KSType.isValue(this._data.loop.index)) {
				this._indexVariable = this._scope.define(this._data.loop.index.name, false, this._scope.reference("Number"), this);
				this._index = $compile.expression(this._data.loop.index, this);
				this._index.analyse();
			}
			this._body = $compile.statement($return(this._data.body), this);
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				this._when = $compile.statement($return(this._data.loop.when), this);
				this._when.analyse();
			}
			if(KSType.isValue(this._valueName)) {
				this._scope.releaseTempName(this._valueName);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
			if(KSType.isValue(this._value)) {
				this._valueVariable.type(this._expression.type().parameter());
				this._value.prepare();
			}
			if(KSType.isValue(this._index)) {
				this._index.prepare();
			}
			this._body.prepare();
			this._type = Type.arrayOf(this._body.type(), this._scope);
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			if(KSType.isValue(this._index)) {
				this._index.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapArray(").compile(this._expression).code(", ");
			fragments.code(surround.beforeParameters).compile(KSType.isValue(this._value) ? this._value : this._valueName);
			if(KSType.isValue(this._index)) {
				fragments.code($comma).compile(this._index);
			}
			fragments.code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(KSType.isValue(this._value) ? this._value : this._valueName);
				if(KSType.isValue(this._index)) {
					fragments.code($comma).compile(this._index);
				}
				fragments.code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForIn.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayComprehensionForOf = Helper.class({
		$name: "ArrayComprehensionForOf",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, parent.newScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ArrayComprehensionForOf.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._expression = $compile.expression(this._data.loop.expression, this);
			this._expression.analyse();
			if(KSType.isValue(this._data.loop.key)) {
				this._scope.define(this._data.loop.key.name, false, this._scope.reference("String"), this);
				this._key = $compile.expression(this._data.loop.key, this);
				this._key.analyse();
			}
			else {
				this._keyName = this._scope.acquireTempName();
			}
			if(KSType.isValue(this._data.loop.value)) {
				this._scope.define(this._data.loop.value.name, false, this);
				this._value = $compile.expression(this._data.loop.value, this);
				this._value.analyse();
			}
			this._body = $compile.statement($return(this._data.body), this);
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				this._when = $compile.statement($return(this._data.loop.when), this);
				this._when.analyse();
			}
			if(KSType.isValue(this._keyName)) {
				this._scope.releaseTempName(this._keyName);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
			if(KSType.isValue(this._key)) {
				this._key.prepare();
			}
			if(KSType.isValue(this._value)) {
				this._value.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
			if(KSType.isValue(this._key)) {
				this._key.translate();
			}
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapObject(").compile(this._expression).code(", ");
			fragments.code(surround.beforeParameters).compile(KSType.isValue(this._key) ? this._key : this._keyName);
			if(KSType.isValue(this._value)) {
				fragments.code($comma).compile(this._value);
			}
			fragments.code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(KSType.isValue(this._key) ? this._key : this._keyName);
				if(KSType.isValue(this._value)) {
					fragments.code($comma).compile(this._value);
				}
				fragments.code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForOf.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Array");
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayComprehensionForRange = Helper.class({
		$name: "ArrayComprehensionForRange",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, parent.newScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ArrayComprehensionForRange.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._scope.define(this._data.loop.value.name, false, this._scope.reference("Number"), this);
			this._value = $compile.expression(this._data.loop.value, this);
			this._value.analyse();
			this._from = $compile.expression(this._data.loop.from, this);
			this._from.analyse();
			this._to = $compile.expression(this._data.loop.to, this);
			this._to.analyse();
			if(KSType.isValue(this._data.loop.by)) {
				this._by = $compile.expression(this._data.loop.by, this);
				this._body.analyse();
			}
			this._body = $compile.statement($return(this._data.body), this);
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				this._when = $compile.statement($return(this._data.loop.when), this);
				this._when.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
			this._from.prepare();
			this._to.prepare();
			if(KSType.isValue(this._by)) {
				this._by.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
			this._from.translate();
			this._to.translate();
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapRange(").compile(this._from).code($comma).compile(this._to);
			if(KSType.isValue(this._by)) {
				fragments.code(", ").compile(this._by);
			}
			else {
				fragments.code(", 1");
			}
			fragments.code($comma, "true", $comma, "true", $comma).code(surround.beforeParameters).compile(this._value).code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(this._value).code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForRange.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Array");
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AwaitExpression = Helper.class({
		$name: "AwaitExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._awaiting = true;
			this._reuseName = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			AwaitExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			var scope;
			if(arguments.length > 2 && (scope = arguments[++__ks_i]) !== void 0) {
				if(scope !== null && !KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
			}
			else {
				scope = null;
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
			while(KSType.isValue(parent) && !(KSType.is(parent, FunctionExpression) || KSType.is(parent, LambdaExpression) || KSType.is(parent, FunctionDeclaration) || KSType.is(parent, ClassMethodDeclaration) || KSType.is(parent, ImplementClassMethodDeclaration) || KSType.is(parent, ImplementNamespaceFunctionDeclaration))) {
				if(KSType.is(parent, TryStatement)) {
					this._try = parent;
				}
				parent = parent.parent();
			}
			if(KSType.isValue(parent)) {
				this._function = parent;
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				AwaitExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._operation = $compile.expression(this._data.operation, this);
			this._operation.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._operation.prepare();
			this._reuseName = this._scope.acquireTempName();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._operation.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return true;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isAwaiting_0: function() {
			return this._awaiting;
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			return Expression.prototype.isAwaiting.apply(this, arguments);
		},
		__ks_func_toAwaitExpressionFragments_0: function(fragments, statements) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			fragments.code("(__ks_e, " + this._reuseName + ") =>");
			var block = fragments.newBlock();
			var index = -1;
			var item;
			for(var i = 0, __ks_0 = statements.length, statement; index === -1 && i < __ks_0; ++i) {
				statement = statements[i];
				var __ks_1;
				if(KSType.isValue(__ks_1 = statement.toFragments(block, Mode.None)) ? (item = __ks_1, true) : false) {
					index = i;
				}
			}
			if(index !== -1) {
				item(statements.slice(index + 1));
			}
			block.done();
			fragments.code(")").done();
		},
		toAwaitExpressionFragments: function() {
			if(arguments.length === 2) {
				return AwaitExpression.prototype.__ks_func_toAwaitExpressionFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAwaitExpressionFragments) {
				return Expression.prototype.toAwaitExpressionFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._awaiting) {
				var item, __ks_0;
				if(KSType.isValue(__ks_0 = this._operation.toFragments(fragments, Mode.Async)) ? (item = __ks_0, true) : false) {
					return item;
				}
				else {
					this._awaiting = false;
					if(KSType.isValue(this._try)) {
						return Helper.vcurry(this._try.toAwaitExpressionFragments, this._try, fragments, [new Literal(this._reuseName, this)]);
					}
					else if(KSType.isValue(this._function) ? this._function.type().isAsync() : false) {
						return Helper.vcurry(this._function.toAwaitExpressionFragments, this._function, fragments, [new Literal(this._reuseName, this)]);
					}
					else {
						return Helper.vcurry(this.toAwaitExpressionFragments, this, fragments);
					}
				}
			}
			else {
				fragments.code(this._reuseName);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AwaitExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._operation.type();
		},
		type: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayBinding = Helper.class({
		$name: "ArrayBinding",
		$extends: Expression,
		__ks_init_1: function() {
			this._elements = [];
			this._existing = {};
			this._existingCount = 0;
			this._nonexisting = {};
			this._nonexistingCount = 0;
			this._variables = {};
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayBinding.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var index = 0, __ks_0 = this._data.elements.length, element; index < __ks_0; ++index) {
				element = this._data.elements[index];
				if((element.kind === NodeKind.BindingElement) && !element.name.computed) {
					if(this._scope.hasVariable(element.name.name)) {
						this._existing[element.name.name] = true;
						++this._existingCount;
					}
					else {
						this._nonexisting[element.name.name] = true;
						++this._nonexistingCount;
					}
				}
				this._elements.push(element = $compile.expression(element, this));
				element.analyse();
				if(KSType.is(element, BindingElement)) {
					element.index(index);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._existingCount && this._nonexistingCount) {
				fragments.code("[");
				var name;
				for(var i = 0, __ks_0 = this._data.elements.length, element; i < __ks_0; ++i) {
					element = this._data.elements[i];
					if(i) {
						fragments.code(", ");
					}
					if((element.kind === NodeKind.BindingElement) && !element.name.computed && this._existing[element.name.name]) {
						name = this._scope.acquireTempName();
						this._elements[i].toExistFragments(fragments, name);
						this._variables[name] = element.name.name;
					}
					else {
						this._elements[i].toFragments(fragments);
					}
				}
				fragments.code("]");
				this.statement().afterward(this);
			}
			else {
				fragments.code("[");
				for(var i = 0, __ks_0 = this._elements.length; i < __ks_0; ++i) {
					if(i) {
						fragments.code(", ");
					}
					this._elements[i].toFragments(fragments);
				}
				fragments.code("]");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayBinding.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAfterwardFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var name in this._variables) {
				var variable = this._variables[name];
				fragments.line(variable, " = ", name);
				this._scope.releaseTempName(name);
			}
		},
		toAfterwardFragments: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_toAfterwardFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAfterwardFragments) {
				return Expression.prototype.toAfterwardFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(this._nonexistingCount) {
				fragments.code("var ");
			}
			if(this._options.format.destructuring === "es5") {
				this.toFlatFragments(fragments, value);
			}
			else {
				fragments.compile(this).code($equals).compile(value);
			}
		},
		toAssignmentFragments: function() {
			if(arguments.length === 2) {
				return ArrayBinding.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAssignmentFragments) {
				return Expression.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(value.isComposite()) {
				if(this._elements.length === 1) {
					this._elements[0].toFlatFragments(fragments, value);
				}
				else {
					throw new NotImplementedException(this);
				}
			}
			else {
				for(var i = 0, __ks_0 = this._elements.length; i < __ks_0; ++i) {
					if(i) {
						fragments.code(", ");
					}
					this._elements[i].toFlatFragments(fragments, value);
				}
			}
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return ArrayBinding.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFlatFragments) {
				return Expression.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.walk(fn);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Expression.prototype.walk) {
				return Expression.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BindingElement = Helper.class({
		$name: "BindingElement",
		$extends: Expression,
		__ks_init_1: function() {
			this._defaultValue = null;
			this._index = -1;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			BindingElement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, new Scope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				BindingElement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			var scope = this.statement().scope();
			if((this._data.name.kind === NodeKind.Identifier) && !scope.hasVariable(this._data.name.name)) {
				scope.define(this._data.name.name, false, this.statement());
			}
			if(KSType.isValue(this._data.alias)) {
				this._scope.define(this._data.alias.name, false, this);
				this._alias = $compile.expression(this._data.alias, this);
				this._alias.analyse();
			}
			this._name = $compile.expression(this._data.name, this);
			this._name.analyse();
			if(KSType.isValue(this._data.defaultValue)) {
				this._defaultValue = $compile.expression(this._data.defaultValue, this);
				this._defaultValue.analyse();
				if(this._options.format.destructuring === "es5") {
					this._variable = this._scope.acquireTempName(this.statement());
					this._scope.releaseTempName(this._variable);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BindingElement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(KSType.isValue(this._alias)) {
				this._alias.prepare();
			}
			this._name.prepare();
			if(KSType.isValue(this._defaultValue)) {
				this._defaultValue.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BindingElement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(KSType.isValue(this._alias)) {
				this._alias.translate();
			}
			this._name.translate();
			if(KSType.isValue(this._defaultValue)) {
				this._defaultValue.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return BindingElement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_index_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			this._index = index;
			return this;
		},
		index: function() {
			if(arguments.length === 1) {
				return BindingElement.prototype.__ks_func_index_0.apply(this, arguments);
			}
			else if(Expression.prototype.index) {
				return Expression.prototype.index.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._data.spread) {
				fragments.code("...");
			}
			if(KSType.isValue(this._alias)) {
				if(this._data.alias.computed) {
					fragments.code("[").compile(this._alias).code("]: ");
				}
				else {
					fragments.compile(this._alias).code(": ");
				}
			}
			fragments.compile(this._name);
			if(KSType.isValue(this._defaultValue)) {
				fragments.code(" = ").compile(this._defaultValue);
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return BindingElement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toExistFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._data.spread) {
				fragments.code("...");
			}
			if(KSType.isValue(this._alias)) {
				if(this._data.alias.computed) {
					fragments.code("[").compile(this._alias).code("]: ");
				}
				else {
					fragments.compile(this._alias).code(": ");
				}
			}
			if(this._index === -1) {
				fragments.compile(this._name).code(": ", name);
			}
			else {
				fragments.code(name);
			}
			if(this._defaultValue !== null) {
				fragments.code(" = ").compile(this._defaultValue);
			}
		},
		toExistFragments: function() {
			if(arguments.length === 2) {
				return BindingElement.prototype.__ks_func_toExistFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toExistFragments) {
				return Expression.prototype.toExistFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(KSType.is(this._name, ObjectBinding)) {
				this._name.toFlatFragments(fragments, new FlatBindingElement(value, KSType.isValue(this._alias) ? this._alias : this._name, this));
			}
			else if(KSType.isValue(this._defaultValue)) {
				var variable = new Literal(false, this, this._scope, this._variable);
				fragments.compile(this._name).code($equals, "Type.isValue(").compile(variable).code($equals).compile(new FlatBindingElement(value, KSType.isValue(this._alias) ? this._alias : this._name, this)).code(") ? ").compile(variable).code(" : ").compile(this._defaultValue);
			}
			else if(this._index === -1) {
				fragments.compile(this._name).code($equals).wrap(value).code(".").compile(KSType.isValue(this._alias) ? this._alias : this._name);
			}
			else {
				fragments.compile(this._name).code($equals).wrap(value).code("[" + this._index + "]");
			}
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return BindingElement.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFlatFragments) {
				return Expression.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			this._name.walk(fn);
		},
		walk: function() {
			if(arguments.length === 1) {
				return BindingElement.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Expression.prototype.walk) {
				return Expression.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var FlatBindingElement = Helper.class({
		$name: "FlatBindingElement",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(item, property, parent) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(item === void 0 || item === null) {
				throw new TypeError("'item' is not nullable");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [{}, parent]);
			this._item = item;
			this._property = property;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				FlatBindingElement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FlatBindingElement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FlatBindingElement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return FlatBindingElement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComposite_0: function() {
			return false;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return FlatBindingElement.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrap(this._item).code(".").compile(this._property);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FlatBindingElement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ObjectBinding = Helper.class({
		$name: "ObjectBinding",
		$extends: Expression,
		__ks_init_1: function() {
			this._elements = [];
			this._exists = false;
			this._existing = {};
			this._name = null;
			this._variables = {};
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ObjectBinding.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if((this._options.format.destructuring === "es5") && (this._data.elements.length > 1)) {
				this._name = this._scope.acquireTempName(this.statement());
			}
			for(var __ks_0 = 0, __ks_1 = this._data.elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._data.elements[__ks_0];
				if(!element.name.computed && KSType.isValue(element.name.name) && this._scope.hasVariable(element.name.name)) {
					this._exists = true;
					this._existing[element.name.name] = true;
				}
				this._elements.push(element = $compile.expression(element, this));
				element.analyse();
			}
			if(this._name !== null) {
				this._scope.releaseTempName(this._name);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._exists) {
				fragments.code("{");
				var name;
				for(var i = 0, __ks_0 = this._data.elements.length, element; i < __ks_0; ++i) {
					element = this._data.elements[i];
					if(i) {
						fragments.code(", ");
					}
					if(this._existing[element.name.name]) {
						name = this._scope.acquireTempName();
						this._elements[i].toExistFragments(fragments, name);
						this._variables[name] = element.name.name;
					}
					else {
						this._elements[i].toFragments(fragments);
					}
				}
				fragments.code("}");
				this.statement().afterward(this);
			}
			else {
				fragments.code("{");
				for(var i = 0, __ks_0 = this._elements.length; i < __ks_0; ++i) {
					if(i) {
						fragments.code(", ");
					}
					this._elements[i].toFragments(fragments);
				}
				fragments.code("}");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ObjectBinding.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAfterwardFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var name in this._variables) {
				var variable = this._variables[name];
				fragments.line(variable, " = ", name);
				this._scope.releaseTempName(name);
			}
		},
		toAfterwardFragments: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_toAfterwardFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAfterwardFragments) {
				return Expression.prototype.toAfterwardFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			fragments.code("var ");
			if(this._options.format.destructuring === "es5") {
				this.toFlatFragments(fragments, value);
			}
			else {
				fragments.compile(this).code($equals).compile(value);
			}
		},
		toAssignmentFragments: function() {
			if(arguments.length === 2) {
				return ObjectBinding.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAssignmentFragments) {
				return Expression.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(value.isComposite()) {
				if(this._elements.length === 1) {
					this._elements[0].toFlatFragments(fragments, value);
				}
				else {
					var variable = new Literal(false, this, this._scope, this._name);
					this._elements[0].toFlatFragments(fragments, new TempBinding(variable, value, this));
					for(var i = 1, __ks_0 = this._elements.length; i < __ks_0; ++i) {
						fragments.code(", ");
						this._elements[i].toFlatFragments(fragments, variable);
					}
				}
			}
			else {
				for(var i = 0, __ks_0 = this._elements.length; i < __ks_0; ++i) {
					if(i) {
						fragments.code(", ");
					}
					this._elements[i].toFlatFragments(fragments, value);
				}
			}
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return ObjectBinding.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFlatFragments) {
				return Expression.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.walk(fn);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Expression.prototype.walk) {
				return Expression.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var TempBinding = Helper.class({
		$name: "TempBinding",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(name, value, parent) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [{}, parent]);
			this._name = name;
			this._value = value;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				TempBinding.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TempBinding.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TempBinding.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return TempBinding.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return TempBinding.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._name).code($equals).compile(this._value);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return TempBinding.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BlockExpression = Helper.class({
		$name: "BlockExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._await = false;
			this._exit = false;
			this._statements = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			BlockExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(this._data.statements) {
				for(var __ks_0 = 0, __ks_1 = this._data.statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
					statement = this._data.statements[__ks_0];
					this._statements.push(statement = $compile.statement(statement, this));
					statement.analyse();
					if(statement.isAwait()) {
						this._await = true;
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BlockExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
				if(this._exit) {
					SyntaxException.throwDeadCode(statement);
				}
				else {
					this._exit = statement.isExit();
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BlockExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return BlockExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return BlockExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			return this._exit;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return BlockExpression.prototype.__ks_func_isExit_0.apply(this);
			}
			else if(Expression.prototype.isExit) {
				return Expression.prototype.isExit.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._await) {
				var index = -1;
				var item;
				for(var i = 0, __ks_0 = this._statements.length, statement; index === -1 && i < __ks_0; ++i) {
					statement = this._statements[i];
					var __ks_1;
					if(KSType.isValue(__ks_1 = statement.toFragments(fragments, Mode.None)) ? (item = __ks_1, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(this._statements.slice(index + 1));
				}
			}
			else {
				for(var __ks_1 = 0, __ks_0 = this._statements.length, statement; __ks_1 < __ks_0; ++__ks_1) {
					statement = this._statements[__ks_1];
					statement.toFragments(fragments, mode);
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BlockExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CallExpression = Helper.class({
		$name: "CallExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._arguments = [];
			this._await = false;
			this._callees = [];
			this._hasDefaultCallee = false;
			this._list = true;
			this._nullable = false;
			this._nullableComputed = false;
			this._reusable = false;
			this._reuseName = null;
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			CallExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._data.arguments[__ks_0];
				if((argument.kind === NodeKind.UnaryExpression) && (argument.operator.kind === UnaryOperatorKind.Spread)) {
					this._arguments.push(argument = $compile.expression(argument.argument, this));
					this._list = false;
				}
				else {
					this._arguments.push(argument = $compile.expression(argument, this));
				}
				argument.analyse();
				if(argument.isAwait()) {
					this._await = true;
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.prepare();
			}
			if((this._data.callee.kind === NodeKind.MemberExpression) && !this._data.callee.computed) {
				this._object = $compile.expression(this._data.callee.object, this);
				this._object.analyse();
				this._object.prepare();
				this._property = this._data.callee.property.name;
				this.makeCallee(this._object.type());
			}
			else {
				var variable;
				if((this._data.callee.kind === NodeKind.Identifier) && (KSType.isValue(__ks_0 = this._scope.getVariable(this._data.callee.name)) ? (variable = __ks_0, true) : false)) {
					var type = variable.type();
					if(KSType.is(type, FunctionType)) {
						if(type.isAsync()) {
							if(KSType.is(this._parent, VariableDeclaration)) {
								if(!this._parent.isAwait()) {
									TypeException.throwNotSyncFunction(this._data.callee.name, this);
								}
							}
							else if(!KSType.is(this._parent, AwaitExpression)) {
								TypeException.throwNotSyncFunction(this._data.callee.name, this);
							}
						}
						else {
							if(KSType.is(this._parent, VariableDeclaration)) {
								if(this._parent.isAwait()) {
									TypeException.throwNotAsyncFunction(this._data.callee.name, this);
								}
							}
							else if(KSType.is(this._parent, AwaitExpression)) {
								TypeException.throwNotAsyncFunction(this._data.callee.name, this);
							}
						}
					}
					var substitute;
					if(KSType.isFunction(variable.replaceCall) && KSType.isValue(__ks_0 = variable.replaceCall(this._data, this._arguments)) ? (substitute = __ks_0, true) : false) {
						this.addCallee(new SubstituteCallee(this._data, substitute, this));
					}
					else {
						this.addCallee(new DefaultCallee(this._data, this));
					}
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this));
				}
			}
			if(this._hasDefaultCallee) {
				this._callees.push(this._defaultCallee);
			}
			if(this._callees.length === 1) {
				this._nullable = this._callees[0].isNullable();
				this._nullableComputed = this._callees[0].isNullableComputed();
				this._type = this._callees[0].type();
			}
			else {
				this._nullable = this._callees[0].isNullable();
				this._nullableComputed = this._callees[0].isNullableComputed();
				var types = [this._callees[0].type()];
				var type;
				for(var i = 1, __ks_0 = this._callees.length; i < __ks_0; ++i) {
					type = this._callees[i].type();
					if(!__ks_Array._im_any(types, function(item) {
						if(arguments.length < 1) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(item === void 0 || item === null) {
							throw new TypeError("'item' is not nullable");
						}
						return type.equals(item);
					})) {
						types.push(type);
					}
					if(this._callees[i].isNullable()) {
						this._nullable = true;
					}
					if(this._callees[i].isNullableComputed()) {
						this._nullableComputed = true;
					}
				}
				if(types.length === 1) {
					this._type = types[0];
				}
				else {
					this._type = new UnionType(types);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.translate();
			}
			for(var __ks_0 = 0, __ks_1 = this._callees.length, callee; __ks_0 < __ks_1; ++__ks_0) {
				callee = this._callees[__ks_0];
				callee.translate();
			}
			if(this._data.scope.kind === ScopeKind.Argument) {
				this._callScope = $compile.expression(this._data.scope.value, this);
				this._callScope.analyse();
				this._callScope.prepare();
				this._callScope.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			if(acquire) {
				this._reuseName = this.statement().scope().acquireTempName(this.statement());
			}
			if(this._callees.length === 1) {
				this._callees[0].acquireReusable(acquire);
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_addCallee_0: function(callee) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(callee === void 0 || callee === null) {
				throw new TypeError("'callee' is not nullable");
			}
			else if(!KSType.is(callee, Callee)) {
				throw new TypeError("'callee' is not of type 'Callee'");
			}
			if(KSType.is(callee, DefaultCallee)) {
				if(this._hasDefaultCallee) {
					var t1 = this._defaultCallee.type();
					if(!t1.isAny()) {
						var t2 = callee.type();
						if(t2.isAny()) {
							this._defaultCallee = t2;
						}
						else if(KSType.is(t1, UnionType)) {
							t1.addType(t2);
						}
						else if(KSType.is(t2, UnionType)) {
							t2.addType(t1);
							this._defaultCallee = t2;
						}
						else if(t1.isInstanceOf(t2, this)) {
							this._defaultCallee = t2;
						}
						else if(!t2.isInstanceOf(t1, this)) {
							this._defaultCallee.type(new UnionType([t1, t2]));
						}
					}
				}
				else {
					this._defaultCallee = callee;
					this._hasDefaultCallee = true;
				}
			}
			else {
				this._callees.push(callee);
			}
		},
		addCallee: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_addCallee_0.apply(this, arguments);
			}
			else if(Expression.prototype.addCallee) {
				return Expression.prototype.addCallee.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_arguments_0: function() {
			return this._arguments;
		},
		arguments: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_arguments_0.apply(this);
			}
			else if(Expression.prototype.arguments) {
				return Expression.prototype.arguments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isAwaiting_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				if(argument.isAwaiting()) {
					return true;
				}
			}
			return false;
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			return Expression.prototype.isAwaiting.apply(this, arguments);
		},
		__ks_func_isCallable_0: function() {
			return !this._reusable;
		},
		isCallable: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isCallable_0.apply(this);
			}
			return Expression.prototype.isCallable.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return this._nullable && !this._tested;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNullableComputed_0: function() {
			return this._nullableComputed;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			return Expression.prototype.isNullableComputed.apply(this, arguments);
		},
		__ks_func_makeCallee_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(KSType.is(type, AliasType)) {
				throw new NotImplementedException(this);
			}
			else if(KSType.is(type, ClassType)) {
				var __ks_class_1 = type;
				var methods, __ks_0;
				if(KSType.isValue(__ks_0 = __ks_class_1.getClassMethods(this._property)) ? (methods = __ks_0, true) : false) {
					var __ks_sealed_1 = false;
					var types = [];
					var m = [];
					var __ks_type_1;
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						if(method.isSealed()) {
							__ks_sealed_1 = true;
						}
						if(method.matchArguments(Helper.mapArray(this._arguments, function(argument) {
							return argument.type();
						}))) {
							m.push(method);
							__ks_type_1 = method.returnType();
							if(!__ks_type_1.isContainedIn(types)) {
								types.push(__ks_type_1);
							}
						}
					}
					if(types.length === 0) {
						if(__ks_sealed_1) {
							this.addCallee(new SealedMethodCallee(this._data, __ks_class_1, false, this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, this._object, this));
						}
					}
					else if(types.length === 1) {
						if(__ks_sealed_1) {
							this.addCallee(new SealedMethodCallee(this._data, __ks_class_1, false, m, types[0], this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, this._object, m, types[0], this));
						}
					}
					else {
						throw new NotImplementedException(this);
					}
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this._object, this));
				}
			}
			else if(KSType.is(type, FunctionType)) {
				this.makeCalleeFromReference(this._scope.reference("Function"));
			}
			else if(KSType.is(type, NamespaceType)) {
				var property;
				if(KSType.isValue(__ks_0 = type.getProperty(this._property)) ? (property = __ks_0, true) : false) {
					if(KSType.is(property, FunctionType) && type.isSealedProperty(this._property)) {
						this.addCallee(new SealedFunctionCallee(this._data, type, property, property.returnType(), this));
					}
					else {
						this.addCallee(new DefaultCallee(this._data, this._object, property, this));
					}
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this._object, this));
				}
			}
			else if(KSType.is(type, ParameterType)) {
				this.makeCallee(type.type());
			}
			else if(KSType.is(type, ReferenceType)) {
				this.makeCalleeFromReference(type);
			}
			else if(KSType.is(type, UnionType)) {
				var __ks_0 = type.types();
				for(var __ks_1 = 0, __ks_2 = __ks_0.length, type; __ks_1 < __ks_2; ++__ks_1) {
					type = __ks_0[__ks_1];
					this.makeCallee(type);
				}
			}
			else {
				this.addCallee(new DefaultCallee(this._data, this._object, this));
			}
		},
		makeCallee: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_makeCallee_0.apply(this, arguments);
			}
			else if(Expression.prototype.makeCallee) {
				return Expression.prototype.makeCallee.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_makeCalleeFromReference_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			var value = type.unalias();
			if(KSType.is(value, ClassType)) {
				var methods, __ks_0;
				if(KSType.isValue(__ks_0 = value.getInstanceMethods(this._property)) ? (methods = __ks_0, true) : false) {
					var __ks_sealed_1 = false;
					var types = [];
					var m = [];
					var __ks_type_1;
					for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
						method = methods[__ks_0];
						if(method.isSealed()) {
							__ks_sealed_1 = true;
						}
						if(method.matchArguments(Helper.mapArray(this._arguments, function(argument) {
							return argument.type();
						}))) {
							m.push(method);
							__ks_type_1 = method.returnType();
							if(!__ks_type_1.isContainedIn(types)) {
								types.push(__ks_type_1);
							}
						}
					}
					if(types.length === 0) {
						if(__ks_sealed_1) {
							this.addCallee(new SealedMethodCallee(this._data, value, true, this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, this._object, this));
						}
					}
					else if(types.length === 1) {
						var variable, substitute;
						if(__ks_sealed_1) {
							this.addCallee(new SealedMethodCallee(this._data, value, true, m, types[0], this));
						}
						else if((this._data.callee.object.kind === NodeKind.Identifier) && (KSType.isValue(__ks_0 = this._scope.getVariable(this._data.callee.object.name)) ? (variable = __ks_0, true) : false) && (KSType.isFunction(variable.replaceMemberCall) && KSType.isValue(__ks_0 = variable.replaceMemberCall(this._property, this._arguments)) ? (substitute = __ks_0, true) : false)) {
							this.addCallee(new SubstituteCallee(this._data, substitute, types[0], this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, this._object, m, types[0], this));
						}
					}
					else {
						throw new NotImplementedException(this);
					}
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this._object, this));
				}
			}
			else if(KSType.is(value, FunctionType)) {
				throw new NotImplementedException(this);
			}
			else if(KSType.is(value, ParameterType)) {
				throw new NotImplementedException(this);
			}
			else if(KSType.is(value, UnionType)) {
				var __ks_0 = value.types();
				for(var __ks_1 = 0, __ks_2 = __ks_0.length, type; __ks_1 < __ks_2; ++__ks_1) {
					type = __ks_0[__ks_1];
					this.makeCallee(type);
				}
			}
			else {
				this.addCallee(new DefaultCallee(this._data, this._object, this));
			}
		},
		makeCalleeFromReference: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_makeCalleeFromReference_0.apply(this, arguments);
			}
			else if(Expression.prototype.makeCalleeFromReference) {
				return Expression.prototype.makeCalleeFromReference.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			if(KSType.isValue(this._reuseName)) {
				this.statement().scope().releaseTempName(this._reuseName);
			}
			if(this._callees.length === 1) {
				this._callees[0].releaseReusable();
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(mode === Mode.Async) {
				for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
					argument = this._arguments[__ks_0];
					if(argument.isAwaiting()) {
						return argument.toFragments(fragments, mode);
					}
				}
				this.toCallFragments(fragments, mode);
				if(this._arguments.length) {
					fragments.code(", ");
				}
			}
			else {
				if(this._reusable) {
					fragments.code(this._reuseName);
				}
				else if(this.isNullable() && !this._tested) {
					fragments.wrapNullable(this).code(" ? ");
					this._tested = true;
					this.toFragments(fragments, mode);
					fragments.code(" : undefined");
				}
				else {
					for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
						argument = this._arguments[__ks_0];
						if(argument.isAwaiting()) {
							return argument.toFragments(fragments, mode);
						}
					}
					this.toCallFragments(fragments, mode);
					fragments.code(")");
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(mode === Mode.Async) {
				this.toCallFragments(fragments, mode);
				if(this._arguments.length) {
					fragments.code(", ");
				}
			}
			else {
				if(this._reusable) {
					fragments.code(this._reuseName);
				}
				else if(this.isNullable() && !this._tested) {
					fragments.wrapNullable(this).code(" ? ");
					this._tested = true;
					this.toFragments(fragments, mode);
					fragments.code(" : false");
				}
				else {
					this.toCallFragments(fragments, mode);
					fragments.code(")");
				}
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return CallExpression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_toCallFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._callees.length === 1) {
				this._callees[0].toFragments(fragments, mode, this);
			}
			else if(this._callees.length === 2) {
				this.module().flag("Type");
				this._callees[0].toTestFragments(fragments, this);
				fragments.code(" ? ");
				this._callees[0].toFragments(fragments, mode, this);
				fragments.code(") : ");
				this._callees[1].toFragments(fragments, mode, this);
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		toCallFragments: function() {
			if(arguments.length === 2) {
				return CallExpression.prototype.__ks_func_toCallFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toCallFragments) {
				return Expression.prototype.toCallFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(!this._tested) {
				this._tested = true;
				if(this._callees.length === 1) {
					this._callees[0].toNullableFragments(fragments, this);
				}
				else {
					throw new NotImplementedException(this);
				}
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code(this._reuseName, $equals).compile(this);
			this._reusable = true;
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toReusableFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Callee = Helper.class({
		$name: "Callee",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons: function(args) {
			if(args.length !== 0) {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return Callee.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return Callee.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_validate_0: function(type, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, FunctionType)) {
				throw new TypeError("'type' is not of type 'FunctionType'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks_0 = type.throws();
			for(var __ks_1 = 0, __ks_2 = __ks_0.length, __ks_throw_1; __ks_1 < __ks_2; ++__ks_1) {
				__ks_throw_1 = __ks_0[__ks_1];
				Exception.validateReportedError(__ks_throw_1, node);
			}
		},
		validate: function() {
			if(arguments.length === 2) {
				return Callee.prototype.__ks_func_validate_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var DefaultCallee = Helper.class({
		$name: "DefaultCallee",
		$extends: Callee,
		__ks_init: function() {
			Callee.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._data = data;
			this._expression = $compile.expression(data.callee, node);
			this._expression.analyse();
			this._expression.prepare();
			this._list = node._list;
			this._nullable = data.nullable || this._expression.isNullable();
			this._nullableComputed = data.nullable && this._expression.isNullable();
			this._scope = data.scope.kind;
			var type = this._expression.type();
			if(KSType.is(type, ClassType)) {
				TypeException.throwConstructorWithoutNew(type.name(), node);
			}
			else if(KSType.is(type, FunctionType)) {
				this.validate(type, node);
				this._type = type.returnType();
			}
			else {
				this._type = Type.Any;
			}
		},
		__ks_cons_1: function(data, object, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(object === void 0 || object === null) {
				throw new TypeError("'object' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._data = data;
			this._expression = new MemberExpression(data.callee, node, node.scope(), object);
			this._expression.analyse();
			this._expression.prepare();
			this._list = node._list;
			this._nullable = data.nullable || this._expression.isNullable();
			this._nullableComputed = data.nullable && this._expression.isNullable();
			this._scope = data.scope.kind;
			var type = this._expression.type();
			if(KSType.is(type, ClassType)) {
				TypeException.throwConstructorWithoutNew(type.name(), node);
			}
			else if(KSType.is(type, FunctionType)) {
				this.validate(type, node);
				this._type = type.returnType();
			}
			else {
				this._type = Type.Any;
			}
		},
		__ks_cons_2: function(data, object, type, node) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(object === void 0 || object === null) {
				throw new TypeError("'object' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._data = data;
			this._expression = new MemberExpression(data.callee, node, node.scope(), object);
			this._expression.analyse();
			this._expression.prepare();
			this._list = node._list;
			this._nullable = data.nullable || this._expression.isNullable();
			this._nullableComputed = data.nullable && this._expression.isNullable();
			this._scope = data.scope.kind;
			if(KSType.is(type, ClassType)) {
				TypeException.throwConstructorWithoutNew(type.name(), node);
			}
			else if(KSType.is(type, FunctionType)) {
				this.validate(type, node);
				this._type = type.returnType();
			}
			else {
				this._type = Type.Any;
			}
		},
		__ks_cons_3: function(data, object, methods, type, node) {
			if(arguments.length < 5) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(object === void 0 || object === null) {
				throw new TypeError("'object' is not nullable");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._data = data;
			this._type = type;
			this._expression = new MemberExpression(data.callee, node, node.scope(), object);
			this._expression.analyse();
			this._expression.prepare();
			this._list = node._list;
			this._nullable = data.nullable || this._expression.isNullable();
			this._nullableComputed = data.nullable && this._expression.isNullable();
			this._scope = data.scope.kind;
			for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				this.validate(method, node);
			}
			if(KSType.is(this._type, ClassType)) {
				TypeException.throwConstructorWithoutNew(this._type.name(), node);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				DefaultCallee.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 3) {
				DefaultCallee.prototype.__ks_cons_1.apply(this, args);
			}
			else if(args.length === 4) {
				DefaultCallee.prototype.__ks_cons_2.apply(this, args);
			}
			else if(args.length === 5) {
				DefaultCallee.prototype.__ks_cons_3.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._expression.acquireReusable(this._data.nullable || (!this._list && (this._scope === ScopeKind.This)));
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return DefaultCallee.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Callee.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return DefaultCallee.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Callee.prototype.isNullable) {
				return Callee.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullableComputed_0: function() {
			return this._nullableComputed;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return DefaultCallee.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			else if(Callee.prototype.isNullableComputed) {
				return Callee.prototype.isNullableComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			this._expression.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return DefaultCallee.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Callee.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(this._list) {
				var __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					fragments.wrap(this._expression, mode).code(".call(").compile(node._callScope, mode);
					for(var __ks_1 = 0, __ks_2 = node._arguments.length, argument; __ks_1 < __ks_2; ++__ks_1) {
						argument = node._arguments[__ks_1];
						fragments.code($comma).compile(argument, mode);
					}
				}
				else if(__ks_0 === ScopeKind.Null) {
					fragments.wrap(this._expression, mode).code(".call(null");
					for(var __ks_1 = 0, __ks_2 = node._arguments.length, argument; __ks_1 < __ks_2; ++__ks_1) {
						argument = node._arguments[__ks_1];
						fragments.code($comma).compile(argument, mode);
					}
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.wrap(this._expression, mode).code("(");
					for(var index = 0, __ks_1 = node._arguments.length, argument; index < __ks_1; ++index) {
						argument = node._arguments[index];
						if(index) {
							fragments.code($comma);
						}
						fragments.compile(argument, mode);
					}
				}
			}
			else {
				if(this._scope === ScopeKind.Argument) {
					fragments.compileReusable(this._expression).code(".apply(").compile(node._callScope, mode);
				}
				else if((this._scope === ScopeKind.Null) || !KSType.is(this._expression, MemberExpression)) {
					fragments.compileReusable(this._expression).code(".apply(null");
				}
				else {
					fragments.compileReusable(this._expression).code(".apply(").compile(this._expression.caller(), mode);
				}
				if((node._arguments.length === 1) && node._arguments[0].type().isArray()) {
					fragments.code($comma).compile(node._arguments[0]);
				}
				else {
					fragments.code(", [].concat(");
					for(var i = 0, __ks_1 = node._arguments.length; i < __ks_1; ++i) {
						if(i !== 0) {
							fragments.code($comma);
						}
						fragments.compile(node._arguments[i]);
					}
					fragments.code(")");
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 3) {
				return DefaultCallee.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toFragments) {
				return Callee.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toCurryFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			node.module().flag("Helper");
			var __ks_arguments_1 = node._arguments;
			if(this._list) {
				var __ks_0 = this._scope;
				if(__ks_0 === ScopeKind.Argument) {
					fragments.code($runtime.helper(node), ".vcurry(").compile(this._expression).code($comma).compile(node._callScope);
					for(var __ks_1 = 0, __ks_2 = __ks_arguments_1.length, argument; __ks_1 < __ks_2; ++__ks_1) {
						argument = __ks_arguments_1[__ks_1];
						fragments.code($comma).compile(argument);
					}
				}
				else if(__ks_0 === ScopeKind.Null) {
					fragments.code($runtime.helper(node), ".vcurry(").compile(this._expression).code(", null");
					for(var __ks_1 = 0, __ks_2 = __ks_arguments_1.length, argument; __ks_1 < __ks_2; ++__ks_1) {
						argument = __ks_arguments_1[__ks_1];
						fragments.code($comma).compile(argument);
					}
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.code($runtime.helper(node), ".vcurry(").compile(this._expression).code(", ").compile(this._expression.caller());
					for(var __ks_1 = 0, __ks_2 = __ks_arguments_1.length, argument; __ks_1 < __ks_2; ++__ks_1) {
						argument = __ks_arguments_1[__ks_1];
						fragments.code($comma).compile(argument, mode);
					}
				}
			}
			else {
				var __ks_1 = this._scope;
				if(__ks_1 === ScopeKind.Argument) {
					fragments.code($runtime.helper(node), ".curry(").compile(this._expression).code($comma).compile(node._callScope).code($comma);
					if((__ks_arguments_1.length === 1) && __ks_arguments_1[0].type().isArray()) {
						fragments.compile(__ks_arguments_1[0]);
					}
					else {
						fragments.code("[].concat(");
						for(var i = 0, __ks_2 = __ks_arguments_1.length; i < __ks_2; ++i) {
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(__ks_arguments_1[i]);
						}
						fragments.code(")");
					}
				}
				else if(__ks_1 === ScopeKind.Null) {
					fragments.code($runtime.helper(node), ".curry(").compile(this._expression).code(", null, ");
					if((__ks_arguments_1.length === 1) && __ks_arguments_1[0].type().isArray()) {
						fragments.compile(__ks_arguments_1[0]);
					}
					else {
						fragments.code("[].concat(");
						for(var i = 0, __ks_2 = __ks_arguments_1.length; i < __ks_2; ++i) {
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(__ks_arguments_1[i]);
						}
						fragments.code(")");
					}
				}
				else if(__ks_1 === ScopeKind.This) {
					fragments.code($runtime.helper(node), ".curry(").compile(this._expression).code($comma).compile(this._expression.caller()).code($comma);
					if((__ks_arguments_1.length === 1) && __ks_arguments_1[0].type().isArray()) {
						fragments.compile(__ks_arguments_1[0]);
					}
					else {
						fragments.code("[].concat(");
						for(var i = 0, __ks_2 = __ks_arguments_1.length; i < __ks_2; ++i) {
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(__ks_arguments_1[i]);
						}
						fragments.code(")");
					}
				}
			}
		},
		toCurryFragments: function() {
			if(arguments.length === 3) {
				return DefaultCallee.prototype.__ks_func_toCurryFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toCurryFragments) {
				return Callee.prototype.toCurryFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(this._data.nullable) {
				if(this._expression.isNullable()) {
					fragments.compileNullable(this._expression).code(" && ");
				}
				fragments.code($runtime.type(node) + ".isFunction(").compileReusable(this._expression).code(")");
			}
			else if(this._expression.isNullable()) {
				fragments.compileNullable(this._expression);
			}
			else {
				fragments.code($runtime.type(node) + ".isValue(").compileReusable(node).code(")");
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 2) {
				return DefaultCallee.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toNullableFragments) {
				return Callee.prototype.toNullableFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DefaultCallee.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Callee.prototype.translate) {
				return Callee.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		__ks_func_type_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._type = type;
			return this;
		},
		type: function() {
			if(arguments.length === 0) {
				return DefaultCallee.prototype.__ks_func_type_0.apply(this);
			}
			else if(arguments.length === 1) {
				return DefaultCallee.prototype.__ks_func_type_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SealedFunctionCallee = Helper.class({
		$name: "SealedFunctionCallee",
		$extends: Callee,
		__ks_init: function() {
			Callee.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, namespace, __ks_function_1, type, node) {
			if(arguments.length < 5) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(namespace === void 0 || namespace === null) {
				throw new TypeError("'namespace' is not nullable");
			}
			else if(!KSType.is(namespace, NamespaceType)) {
				throw new TypeError("'namespace' is not of type 'NamespaceType'");
			}
			if(__ks_function_1 === void 0 || __ks_function_1 === null) {
				throw new TypeError("'function' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._namespace = namespace;
			this._type = type;
			this._object = node._object;
			this._property = node._property;
			var nullable = data.nullable || node._object.isNullable();
			var nullableComputed = data.nullable && node._object.isNullable();
			this.validate(__ks_function_1, node);
		},
		__ks_cons: function(args) {
			if(args.length === 5) {
				SealedFunctionCallee.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Callee.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_translate_0: function() {
			this._object.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SealedFunctionCallee.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Callee.prototype.translate) {
				return Callee.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return SealedFunctionCallee.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Callee.prototype.isNullable) {
				return Callee.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullableComputed_0: function() {
			return this._nullableComputed;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return SealedFunctionCallee.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			else if(Callee.prototype.isNullableComputed) {
				return Callee.prototype.isNullableComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(node._list) {
				var __ks_0 = node._data.scope.kind;
				if(__ks_0 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This) {
					fragments.code("" + this._namespace.sealName() + "." + this._property + "(");
					for(var i = 0, __ks_1 = node._arguments.length; i < __ks_1; ++i) {
						if(i !== 0) {
							fragments.code($comma);
						}
						fragments.compile(node._arguments[i]);
					}
				}
			}
			else {
				var __ks_1 = node._data.scope.kind;
				if(__ks_1 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1 === ScopeKind.This) {
					throw new NotImplementedException(node);
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 3) {
				return SealedFunctionCallee.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toFragments) {
				return Callee.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._type.toTestFragments(fragments, this._object);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return SealedFunctionCallee.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toTestFragments) {
				return Callee.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return SealedFunctionCallee.prototype.__ks_func_type_0.apply(this);
			}
			else if(Callee.prototype.type) {
				return Callee.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SealedMethodCallee = Helper.class({
		$name: "SealedMethodCallee",
		$extends: Callee,
		__ks_init: function() {
			Callee.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var __ks_class_1 = arguments[++__ks_i];
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.is(__ks_class_1, ClassType)) {
				throw new TypeError("'class' is not of type 'ClassType'");
			}
			var instance = arguments[++__ks_i];
			if(instance === void 0 || instance === null) {
				throw new TypeError("'instance' is not nullable");
			}
			else if(!KSType.isBoolean(instance)) {
				throw new TypeError("'instance' is not of type 'Boolean'");
			}
			var __ks__;
			var methods = arguments.length > 4 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : [];
			var type;
			if(arguments.length > 5 && (type = arguments[++__ks_i]) !== void 0 && type !== null) {
				if(!KSType.is(type, Type)) {
					throw new TypeError("'type' is not of type 'Type'");
				}
			}
			else {
				type = Type.Any;
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._class = __ks_class_1;
			this._instance = instance;
			this._type = type;
			this._object = node._object;
			this._property = node._property;
			var nullable = data.nullable || node._object.isNullable();
			var nullableComputed = data.nullable && node._object.isNullable();
			for(var __ks_0 = 0, __ks_1 = methods.length, method; __ks_0 < __ks_1; ++__ks_0) {
				method = methods[__ks_0];
				this.validate(method, node);
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 4 && args.length <= 6) {
				SealedMethodCallee.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_translate_0: function() {
			this._object.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SealedMethodCallee.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Callee.prototype.translate) {
				return Callee.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return SealedMethodCallee.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Callee.prototype.isNullable) {
				return Callee.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullableComputed_0: function() {
			return this._nullableComputed;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return SealedMethodCallee.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			else if(Callee.prototype.isNullableComputed) {
				return Callee.prototype.isNullableComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(node._list) {
				var __ks_0 = node._data.scope.kind;
				if(__ks_0 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_0 === ScopeKind.This) {
					if(this._instance) {
						fragments.code(this._class.getSealedPath() + "._im_" + this._property + "(").compile(this._object);
						for(var i = 0, __ks_1 = node._arguments.length; i < __ks_1; ++i) {
							fragments.code($comma).compile(node._arguments[i]);
						}
					}
					else {
						fragments.code(this._class.getSealedPath() + "._cm_" + this._property + "(");
						for(var i = 0, __ks_1 = node._arguments.length; i < __ks_1; ++i) {
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(node._arguments[i]);
						}
					}
				}
			}
			else if((node._arguments.length === 1) && node._arguments[0].type().isArray()) {
				var __ks_1 = node._data.scope.kind;
				if(__ks_1 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1 === ScopeKind.This) {
					throw new NotImplementedException(node);
				}
			}
			else {
				var __ks_1 = node._data.scope.kind;
				if(__ks_1 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1 === ScopeKind.This) {
					if(this._instance) {
						fragments.code(this._class.getSealedPath() + "._im_" + this._property + ".apply(" + this._class.getSealedPath() + ", [").compile(this._object).code("].concat(");
					}
					else {
						fragments.code(this._class.getSealedPath() + "._cm_" + this._property + ".apply(" + this._class.getSealedPath() + ", [].concat(");
					}
					for(var i = 0, __ks_0 = node._arguments.length; i < __ks_0; ++i) {
						if(i !== 0) {
							fragments.code($comma);
						}
						fragments.compile(node._arguments[i]);
					}
					fragments.code(")");
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 3) {
				return SealedMethodCallee.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toFragments) {
				return Callee.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._type.toTestFragments(fragments, this._object);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return SealedMethodCallee.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toTestFragments) {
				return Callee.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return SealedMethodCallee.prototype.__ks_func_type_0.apply(this);
			}
			else if(Callee.prototype.type) {
				return Callee.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SubstituteCallee = Helper.class({
		$name: "SubstituteCallee",
		$extends: Callee,
		__ks_init: function() {
			Callee.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, substitute, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(substitute === void 0 || substitute === null) {
				throw new TypeError("'substitute' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._substitute = substitute;
			this._nullable = data.nullable || substitute.isNullable();
			this._nullableComputed = data.nullable && substitute.isNullable();
			this._type = this._substitute.type();
		},
		__ks_cons_1: function(data, substitute, type, node) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(substitute === void 0 || substitute === null) {
				throw new TypeError("'substitute' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._substitute = substitute;
			this._type = type;
			this._nullable = data.nullable || substitute.isNullable();
			this._nullableComputed = data.nullable && substitute.isNullable();
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				SubstituteCallee.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 4) {
				SubstituteCallee.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return SubstituteCallee.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Callee.prototype.isNullable) {
				return Callee.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullableComputed_0: function() {
			return this._nullableComputed;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return SubstituteCallee.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			else if(Callee.prototype.isNullableComputed) {
				return Callee.prototype.isNullableComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._substitute.toFragments(fragments, mode);
		},
		toFragments: function() {
			if(arguments.length === 3) {
				return SubstituteCallee.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toFragments) {
				return Callee.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return SubstituteCallee.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Callee.prototype.translate) {
				return Callee.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return SubstituteCallee.prototype.__ks_func_type_0.apply(this);
			}
			else if(Callee.prototype.type) {
				return Callee.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ConditionalExpression = Helper.class({
		$name: "ConditionalExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenTrue = $compile.expression(this._data.whenTrue, this);
			this._whenTrue.analyse();
			this._whenFalse = $compile.expression(this._data.whenFalse, this);
			this._whenFalse.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._whenTrue.prepare();
			this._whenFalse.prepare();
			var t = this._whenTrue.type();
			var f = this._whenFalse.type();
			this._type = t.equals(f) ? t : new UnionType([t, f]);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenTrue.translate();
			this._whenFalse.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrapBoolean(this._condition).code(" ? ").compile(this._whenTrue).code(" : ").compile(this._whenFalse);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ConditionalExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CreateExpression = Helper.class({
		$name: "CreateExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._arguments = [];
			this._list = true;
			this._type = Type.Any;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			CreateExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._class = $compile.expression(this._data.class, this);
			this._class.analyse();
			for(var __ks_0 = 0, __ks_1 = this._data.arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._data.arguments[__ks_0];
				if((argument.kind === NodeKind.UnaryExpression) && (argument.operator.kind === UnaryOperatorKind.Spread)) {
					this._arguments.push(argument = $compile.expression(argument.argument, this));
					this._list = false;
				}
				else {
					this._arguments.push(argument = $compile.expression(argument, this));
				}
				argument.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._class.prepare();
			var type = this._class.type();
			if(KSType.is(type, ClassType)) {
				if(type.isAbstract()) {
					TypeException.throwCannotBeInstantiated(type.name(), this);
				}
				this._type = type.reference();
			}
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._class.translate();
			for(var __ks_0 = 0, __ks_1 = this._arguments.length, argument; __ks_0 < __ks_1; ++__ks_0) {
				argument = this._arguments[__ks_0];
				argument.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._list) {
				fragments.code("new ").compile(this._class).code("(");
				for(var i = 0, __ks_0 = this._arguments.length; i < __ks_0; ++i) {
					if(i !== 0) {
						fragments.code($comma);
					}
					fragments.compile(this._arguments[i]);
				}
				fragments.code(")");
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CreateExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CurryExpression = Helper.class({
		$name: "CurryExpression",
		$extends: CallExpression,
		__ks_init: function() {
			CallExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			CallExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toCallFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._callees.length === 1) {
				this._callees[0].toCurryFragments(fragments, mode, this);
			}
			else if(this._callees.length === 2) {
				this.module().flag("Type");
				this._callees[0].toTestFragments(fragments, this);
				fragments.code(" ? ");
				this._callees[0].toCurryFragments(fragments, mode, this);
				fragments.code(") : ");
				this._callees[1].toCurryFragments(fragments, mode, this);
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		toCallFragments: function() {
			if(arguments.length === 2) {
				return CurryExpression.prototype.__ks_func_toCallFragments_0.apply(this, arguments);
			}
			return CallExpression.prototype.toCallFragments.apply(this, arguments);
		}
	});
	var EnumExpression = Helper.class({
		$name: "EnumExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._enum = $compile.expression(this._data.enum, this);
			this._enum.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._enum.prepare();
			this._type = this._enum.type().type();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._enum.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._enum).code(".", this._data.member.name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return EnumExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var FunctionExpression = Helper.class({
		$name: "FunctionExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._awaiting = false;
			this._exit = false;
			this._isObjectMember = false;
			this._statements = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			FunctionExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, new Scope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				FunctionExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._scope.define("this", true, this);
			this._parameters = [];
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
			this._isObjectMember = KSType.is(this._parent, ObjectMember);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			this._type = new FunctionType(Helper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			this._statements = [];
			var __ks_0 = $ast.body(this._data.body);
			for(var __ks_1 = 0, __ks_2 = __ks_0.length, statement; __ks_1 < __ks_2; ++__ks_1) {
				statement = __ks_0[__ks_1];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
				if(statement.isAwait()) {
					this._awaiting = true;
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
				if(this._exit) {
					SyntaxException.throwDeadCode(statement);
				}
				else {
					this._exit = statement.isExit();
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isMethod_0: function() {
			return false;
		},
		isMethod: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_isMethod_0.apply(this);
			}
			else if(Expression.prototype.isMethod) {
				return Expression.prototype.isMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Expression.prototype.parameters) {
				return Expression.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var surround;
			if(this._isObjectMember) {
				if(this._options.format.functions === "es5") {
					surround = {
						beforeParameters: ": function(",
						afterParameters: ")",
						footer: ""
					};
				}
				else {
					surround = {
						beforeParameters: "(",
						afterParameters: ")",
						footer: ""
					};
				}
			}
			else {
				surround = {
					beforeParameters: "function(",
					afterParameters: ")",
					footer: ""
				};
			}
			fragments.code(surround.beforeParameters);
			var block = Parameter.toFragments(this, fragments, false, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code(surround.afterParameters).newBlock();
			});
			if(this._awaiting) {
				var index = -1;
				var item;
				for(var i = 0, __ks_0 = this._statements.length, statement; index === -1 && i < __ks_0; ++i) {
					statement = this._statements[i];
					var __ks_1;
					if(KSType.isValue(__ks_1 = statement.toFragments(block, Mode.None)) ? (item = __ks_1, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(this._statements.slice(index + 1));
				}
			}
			else {
				for(var __ks_1 = 0, __ks_0 = this._statements.length, statement; __ks_1 < __ks_0; ++__ks_1) {
					statement = this._statements[__ks_1];
					block.compile(statement);
				}
				if(!this._exit && this._type.isAsync()) {
					block.line("__ks_cb()");
				}
			}
			block.done();
			if(surround.footer.length > 0) {
				fragments.code(surround.footer);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FunctionExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var LambdaExpression = Helper.class({
		$name: "LambdaExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._awaiting = false;
			this._exit = false;
			this._statements = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			LambdaExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, new Scope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				LambdaExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._parameters = [];
			for(var __ks_0 = 0, __ks_1 = this._data.parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._data.parameters[__ks_0];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.prepare();
			}
			this._type = new FunctionType(Helper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._parameters.length, parameter; __ks_0 < __ks_1; ++__ks_0) {
				parameter = this._parameters[__ks_0];
				parameter.translate();
			}
			this._statements = [];
			var __ks_0 = $ast.body(this._data.body);
			for(var __ks_1 = 0, __ks_2 = __ks_0.length, statement; __ks_1 < __ks_2; ++__ks_1) {
				statement = __ks_0[__ks_1];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
				if(statement.isAwait()) {
					this._awaiting = true;
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.prepare();
				if(this._exit) {
					SyntaxException.throwDeadCode(statement);
				}
				else {
					this._exit = statement.isExit();
				}
			}
			for(var __ks_0 = 0, __ks_1 = this._statements.length, statement; __ks_0 < __ks_1; ++__ks_0) {
				statement = this._statements[__ks_0];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isMethod_0: function() {
			return false;
		},
		isMethod: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_isMethod_0.apply(this);
			}
			else if(Expression.prototype.isMethod) {
				return Expression.prototype.isMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Expression.prototype.parameters) {
				return Expression.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var surround = $function.surround(this);
			fragments.code(surround.beforeParameters);
			var block = Parameter.toFragments(this, fragments, surround.arrow, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code(surround.afterParameters).newBlock();
			});
			if(this._awaiting) {
				var index = -1;
				var item;
				for(var i = 0, __ks_0 = this._statements.length, statement; index === -1 && i < __ks_0; ++i) {
					statement = this._statements[i];
					var __ks_1;
					if(KSType.isValue(__ks_1 = statement.toFragments(block, Mode.None)) ? (item = __ks_1, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(this._statements.slice(index + 1));
				}
			}
			else {
				for(var __ks_1 = 0, __ks_0 = this._statements.length, statement; __ks_1 < __ks_0; ++__ks_1) {
					statement = this._statements[__ks_1];
					block.compile(statement);
				}
				if(!this._exit && this._type.isAsync()) {
					block.line("__ks_cb()");
				}
			}
			block.done();
			if(surround.footer.length > 0) {
				fragments.code(surround.footer);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return LambdaExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var IfExpression = Helper.class({
		$name: "IfExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenTrue = $compile.expression(this._data.whenTrue, this);
			this._whenTrue.analyse();
			if(KSType.isValue(this._data.whenFalse)) {
				this._whenFalse = $compile.expression(this._data.whenFalse, this);
				this._whenFalse.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._whenTrue.prepare();
			if(KSType.isValue(this._whenFalse)) {
				this._whenFalse.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenTrue.translate();
			if(KSType.isValue(this._whenFalse)) {
				this._whenFalse.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isValue(this._whenFalse)) {
				fragments.wrapBoolean(this._condition).code(" ? ").compile(this._whenTrue).code(" : ").compile(this._whenFalse);
			}
			else {
				fragments.wrapBoolean(this._condition).code(" ? ").compile(this._whenTrue).code(" : undefined");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IfExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			ctrl.code("if(");
			if(this._condition.isAssignable()) {
				ctrl.code("(").compileBoolean(this._condition).code(")");
			}
			else {
				ctrl.compileBoolean(this._condition);
			}
			ctrl.code(")").step().line(this._whenTrue).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return IfExpression.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toStatementFragments) {
				return Expression.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			var t = this._whenTrue.type();
			if(KSType.isValue(this._whenFalse)) {
				var f = this._whenFalse.type();
				return Type.equals(t, f) ? t : Type.union(this, t, f);
			}
			else {
				return t;
			}
		},
		type: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var MemberExpression = Helper.class({
		$name: "MemberExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._prepareObject = true;
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			MemberExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope, object) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			if(object === void 0 || object === null) {
				throw new TypeError("'object' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
			this._object = object;
			this._prepareObject = false;
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				MemberExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Expression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			if(this._prepareObject) {
				this._object = $compile.expression(this._data.object, this);
				this._object.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._prepareObject) {
				this._object.prepare();
				if(this._data.computed) {
					this._property = $compile.expression(this._data.property, this);
					this._property.analyse();
					this._property.prepare();
					if(this._object.type().isArray()) {
						this._type = this._object.type().parameter();
					}
					else {
						this._type = Type.Any;
					}
				}
				else {
					this._property = this._data.property.name;
					var __ks_0;
					if(KSType.isValue(__ks_0 = this._object.type().getProperty(this._property)) ? (this._type = __ks_0, false) : true) {
						ReferenceException.throwNotDefinedProperty(this._property, this);
					}
				}
			}
			else if(this._data.computed) {
				this._property = $compile.expression(this._data.property, this);
				this._property.analyse();
				this._property.prepare();
			}
			else {
				this._property = this._data.property.name;
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._object.translate();
			if(this._data.computed) {
				this._property.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._object.acquireReusable(this._data.nullable || acquire);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_caller_0: function() {
			return this._object;
		},
		caller: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_caller_0.apply(this);
			}
			else if(Expression.prototype.caller) {
				return Expression.prototype.caller.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isCallable_0: function() {
			return this._object.isCallable();
		},
		isCallable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isCallable_0.apply(this);
			}
			return Expression.prototype.isCallable.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return this.isNullable() && !this._tested;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isEntangled_0: function() {
			return this.isCallable() || this.isNullable();
		},
		isEntangled: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isEntangled_0.apply(this);
			}
			return Expression.prototype.isEntangled.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._data.nullable || this._object.isNullable() || (this._data.computed && this._property.isNullable());
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNullableComputed_0: function() {
			return ((this._object.isNullable() ? 1 : 0) + (this._data.nullable ? 1 : 0) + ((this._data.computed && this._property.isNullable()) ? 1 : 0)) > 1;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			return Expression.prototype.isNullableComputed.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._object.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this.isNullable() && !this._tested) {
				fragments.wrapNullable(this).code(" ? ").compile(this._object);
				if(this._data.computed) {
					fragments.code("[").compile(this._property).code("] : undefined");
				}
				else {
					fragments.code($dot).compile(this._property).code(" : undefined");
				}
			}
			else {
				if(this._object.isComputed() || (this._object._data.kind === NodeKind.NumericExpression)) {
					fragments.code("(").compile(this._object).code(")");
				}
				else {
					fragments.compile(this._object);
				}
				if(this._data.computed) {
					fragments.code("[").compile(this._property).code("]");
				}
				else {
					fragments.code($dot).compile(this._property);
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return MemberExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this.isNullable() && !this._tested) {
				if(this._data.computed) {
					fragments.compileNullable(this).code(" ? ").compile(this._object).code("[").compile(this._property).code("]").code(" : false");
				}
				else {
					fragments.compileNullable(this).code(" ? ").compile(this._object).code($dot).compile(this._property).code(" : false");
				}
			}
			else {
				if(this._data.computed) {
					fragments.wrap(this._object).code("[").compile(this._property).code("]");
				}
				else {
					fragments.wrap(this._object).code($dot).compile(this._property);
				}
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return MemberExpression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(!this._tested) {
				this._tested = true;
				var conditional = false;
				if(this._object.isNullable()) {
					fragments.compileNullable(this._object);
					conditional = true;
				}
				if(this._data.nullable) {
					if(conditional) {
						fragments.code(" && ");
					}
					fragments.code($runtime.type(this) + ".isValue(").compileReusable(this._object).code(")");
					conditional = true;
				}
				if(this._data.computed && this._property.isNullable()) {
					if(conditional) {
						fragments.code(" && ");
					}
					fragments.compileNullable(this._property);
				}
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._object.isCallable()) {
				if(this._data.computed) {
					fragments.code("(").compileReusable(this._object).code(", ").compile(this._object).code("[").compileReusable(this._property).code("]").code(")");
				}
				else {
					fragments.code("(").compileReusable(this._object).code(", ").compile(this._object).code($dot).compile(this._property).code(")");
				}
			}
			else if(this._data.computed) {
				fragments.wrap(this._object).code("[").compileReusable(this._property).code("]");
			}
			else {
				fragments.wrap(this._object).code($dot).compile(this._property);
			}
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toReusableFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ObjectExpression = Helper.class({
		$name: "ObjectExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._properties = [];
			this._templates = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ObjectExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._data.properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._data.properties[__ks_0];
				if((property.name.kind === NodeKind.Identifier) || (property.name.kind === NodeKind.Literal)) {
					this._properties.push(property = new ObjectMember(property, this));
				}
				else {
					this._templates.push(property = new ObjectTemplateMember(property, this));
				}
				property.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.prepare();
			}
			for(var __ks_0 = 0, __ks_1 = this._templates.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._templates[__ks_0];
				property.prepare();
			}
			this._type = this._scope.reference("Object");
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._properties[__ks_0];
				property.translate();
			}
			for(var __ks_0 = 0, __ks_1 = this._templates.length, property; __ks_0 < __ks_1; ++__ks_0) {
				property = this._templates[__ks_0];
				property.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reference_0: function() {
			return this._parent.reference();
		},
		reference: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_reference_0.apply(this);
			}
			return Expression.prototype.reference.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._properties.length) {
				var object = fragments.newObject();
				for(var __ks_0 = 0, __ks_1 = this._properties.length, property; __ks_0 < __ks_1; ++__ks_0) {
					property = this._properties[__ks_0];
					object.newLine().compile(property);
				}
				object.done();
			}
			else {
				fragments.code("{}");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ObjectExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ObjectMember = Helper.class({
		$name: "ObjectMember",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(this._data.name.kind === NodeKind.Identifier) {
				this._name = new Literal(this._data.name, this, this._scope, this._data.name.name);
				this.reference("." + this._data.name.name);
			}
			else {
				this._name = new StringLiteral(this._data.name, this);
				this.reference("[" + $quote(this._data.name.value) + "]");
			}
			this._value = $compile.expression(this._data.value, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectMember.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ObjectMember.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ObjectMember.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name.value();
		},
		name: function() {
			if(arguments.length === 0) {
				return ObjectMember.prototype.__ks_func_name_0.apply(this);
			}
			else if(Expression.prototype.name) {
				return Expression.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_value_0: function() {
			return this._value;
		},
		value: function() {
			if(arguments.length === 0) {
				return ObjectMember.prototype.__ks_func_value_0.apply(this);
			}
			else if(Expression.prototype.value) {
				return Expression.prototype.value.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._name);
			if(this._data.value.kind !== NodeKind.FunctionExpression) {
				fragments.code(": ");
			}
			fragments.compile(this._value);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ObjectMember.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ObjectTemplateMember = Helper.class({
		$name: "ObjectTemplateMember",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = new TemplateExpression(this._data.name, this);
			this._name.computing(true);
			this._name.analyse();
			this._value = $compile.expression(this._data.value, this);
			this._value.analyse();
			this.statement().afterward(this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectTemplateMember.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ObjectTemplateMember.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ObjectTemplateMember.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAfterwardFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.newLine().code(this._parent.reference(), "[").compile(this._name).code("] = ").compile(this._value).done();
		},
		toAfterwardFragments: function() {
			if(arguments.length === 1) {
				return ObjectTemplateMember.prototype.__ks_func_toAfterwardFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAfterwardFragments) {
				return Expression.prototype.toAfterwardFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var OmittedExpression = Helper.class({
		$name: "OmittedExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return OmittedExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return OmittedExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return OmittedExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._data.spread) {
				fragments.code("...");
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return OmittedExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var RegularExpression = Helper.class({
		$name: "RegularExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this._data.value);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return RegularExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("RegExp");
		},
		type: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SequenceExpression = Helper.class({
		$name: "SequenceExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._expressions = [];
			for(var __ks_0 = 0, __ks_1 = this._data.expressions.length, expression; __ks_0 < __ks_1; ++__ks_0) {
				expression = this._data.expressions[__ks_0];
				this._expressions.push(expression = $compile.expression(expression, this));
				expression.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SequenceExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._expressions.length, expression; __ks_0 < __ks_1; ++__ks_0) {
				expression = this._expressions[__ks_0];
				expression.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SequenceExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._expressions.length, expression; __ks_0 < __ks_1; ++__ks_0) {
				expression = this._expressions[__ks_0];
				expression.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return SequenceExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("(");
			for(var i = 0, __ks_0 = this._expressions.length; i < __ks_0; ++i) {
				if(i !== 0) {
					fragments.code($comma);
				}
				fragments.compile(this._expressions[i]);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return SequenceExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._expressions[this._expressions.length - 1].type();
		},
		type: function() {
			if(arguments.length === 0) {
				return SequenceExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ThisExpression = Helper.class({
		$name: "ThisExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._calling = false;
			this._entangled = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ThisExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			var parent = this._parent;
			var __ks_0;
			do {
				if(KSType.is(parent, CallExpression) && (parent.data().callee === this._data)) {
					this._calling = true;
				}
				else if(KSType.is(parent, ClassDeclaration)) {
					this._class = parent.type();
					break;
				}
				else if(KSType.is(parent, ImplementClassMethodDeclaration)) {
					this._class = parent.class();
					break;
				}
			}
			while(KSType.isValue(__ks_0 = parent.parent()) ? (parent = __ks_0, true) : false)
			if(!KSType.isValue(parent)) {
				SyntaxException.throwOutOfClassAlias(this._name, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._calling) {
				var type, __ks_0;
				if(KSType.isValue(__ks_0 = this._class.getInstanceMethod(this._name, Helper.mapArray(this._parent.arguments(), function(argument) {
					return argument.type();
				}))) ? (type = __ks_0, true) : false) {
					this._fragment = "this." + this._name;
				}
				else if(KSType.isValue(__ks_0 = this._class.getInstanceVariable(this._name)) ? (this._type = __ks_0, true) : false) {
					this._fragment = "this." + this._name;
				}
				else if(KSType.isValue(__ks_0 = this._class.getInstanceVariable("_" + this._name)) ? (this._type = __ks_0, true) : false) {
					this._fragment = "this._" + this._name;
				}
				else {
					ReferenceException.throwNotDefinedField(this._name, this);
				}
			}
			else {
				if(KSType.isValue(__ks_0 = this._class.getInstanceVariable(this._name)) ? (this._type = __ks_0, true) : false) {
					this._fragment = "this." + this._name;
				}
				else if(KSType.isValue(__ks_0 = this._class.getInstanceVariable("_" + this._name)) ? (this._type = __ks_0, true) : false) {
					this._fragment = "this._" + this._name;
				}
				else if(KSType.isValue(__ks_0 = this._class.getPropertyGetter(this._name)) ? (this._type = __ks_0, true) : false) {
					this._fragment = "this." + this._name + "()";
					this._entangled = true;
				}
				else {
					ReferenceException.throwNotDefinedField(this._name, this);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isEntangled_0: function() {
			return this._entangled;
		},
		isEntangled: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_isEntangled_0.apply(this);
			}
			return Expression.prototype.isEntangled.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this._fragment);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ThisExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var TemplateExpression = Helper.class({
		$name: "TemplateExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._computing = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			TemplateExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._elements = [];
			for(var __ks_0 = 0, __ks_1 = this._data.elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._data.elements[__ks_0];
				this._elements.push(element = $compile.expression(element, this));
				element.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._elements.length, element; __ks_0 < __ks_1; ++__ks_0) {
				element = this._elements[__ks_0];
				element.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_computing_0: function(computing) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(computing === void 0 || computing === null) {
				throw new TypeError("'computing' is not nullable");
			}
			else if(!KSType.isBoolean(computing)) {
				throw new TypeError("'computing' is not of type 'Boolean'");
			}
			this._computing = computing;
		},
		computing: function() {
			if(arguments.length === 1) {
				return TemplateExpression.prototype.__ks_func_computing_0.apply(this, arguments);
			}
			else if(Expression.prototype.computing) {
				return Expression.prototype.computing.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return this._elements.length > 1;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._computing) {
				for(var index = 0, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
					element = this._elements[index];
					if(index === 0) {
						fragments.wrap(element);
					}
					else {
						fragments.code(" + ").wrap(element);
					}
				}
			}
			else {
				for(var index = 0, __ks_0 = this._elements.length, element; index < __ks_0; ++index) {
					element = this._elements[index];
					if(index === 0) {
						if(element.type().isString()) {
							fragments.wrap(element);
						}
						else {
							fragments.code("\"\" + ").wrap(element);
						}
					}
					else {
						fragments.code(" + ").wrap(element);
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return TemplateExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("String");
		},
		type: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnlessExpression = Helper.class({
		$name: "UnlessExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenFalse = $compile.expression(this._data.whenFalse, this);
			this._whenFalse.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._whenFalse.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenFalse.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrapBoolean(this._condition).code(" ? undefined : ").compile(this._whenFalse);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnlessExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("if(!").wrapBoolean(this._condition).code(")").step().line(this._whenFalse).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return UnlessExpression.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toStatementFragments) {
				return Expression.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Parameter = Helper.class({
		$name: "Parameter",
		$extends: AbstractNode,
		$static: {
			__ks_sttc_toFragments_0: function(node, fragments, arrow, fn) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(arrow === void 0 || arrow === null) {
					throw new TypeError("'arrow' is not nullable");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				if(node._options.parse.parameters === "es5") {
					return Parameter.toES5Fragments(node, fragments, fn);
				}
				else if(node._options.parse.parameters === "es6") {
					return Parameter.toES6Fragments(node, fragments, fn);
				}
				else {
					return Parameter.toKSFragments(node, fragments, arrow, fn);
				}
			},
			toFragments: function() {
				if(arguments.length === 4) {
					return Parameter.__ks_sttc_toFragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toFragments) {
					return AbstractNode.toFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_toES5Fragments_0: function(node, fragments, fn) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				var data = node.data();
				var __ks_0 = node.parameters();
				for(var i = 0, __ks_1 = __ks_0.length, parameter; i < __ks_1; ++i) {
					parameter = __ks_0[i];
					if(parameter.isRest()) {
						SyntaxException.throwNoRestParameter(node);
					}
					else if(parameter.hasDefaultValue()) {
						SyntaxException.throwNoDefaultParameter(node);
					}
					else if(parameter.isNullable()) {
						SyntaxException.throwNoNullParameter(node);
					}
					else if(parameter.isAnonymous()) {
						SyntaxException.throwNotNamedParameter(node);
					}
					if(i) {
						fragments.code($comma);
					}
					parameter.toParameterFragments(fragments);
				}
				return fn(fragments);
			},
			toES5Fragments: function() {
				if(arguments.length === 3) {
					return Parameter.__ks_sttc_toES5Fragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toES5Fragments) {
					return AbstractNode.toES5Fragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_toES6Fragments_0: function(node, fragments, fn) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				var data = node.data();
				var rest = false;
				var __ks_0 = node.parameters();
				for(var i = 0, __ks_1 = __ks_0.length, parameter; i < __ks_1; ++i) {
					parameter = __ks_0[i];
					if(parameter.isAnonymous()) {
						SyntaxException.throwNotNamedParameter(node);
					}
					if(i) {
						fragments.code($comma);
					}
					if(parameter.isRest()) {
						parameter.toParameterFragments(fragments);
						rest = true;
					}
					else if(rest) {
						SyntaxException.throwAfterRestParameter();
					}
					else {
						parameter.toParameterFragments(fragments);
					}
					if(parameter.hasDefaultValue()) {
						fragments.code(" = ").compile(parameter._defaultValue);
					}
				}
				return fn(fragments);
			},
			toES6Fragments: function() {
				if(arguments.length === 3) {
					return Parameter.__ks_sttc_toES6Fragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toES6Fragments) {
					return AbstractNode.toES6Fragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_toKSFragments_0: function(node, fragments, arrow, fn) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(arrow === void 0 || arrow === null) {
					throw new TypeError("'arrow' is not nullable");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				var data = node.data();
				var parameters = node.parameters();
				var signature = node.type();
				var name = arrow ? "__ks_arguments" : "arguments";
				var async = signature.isAsync();
				var parameter, ctrl;
				var maxb = 0;
				var rb = 0;
				var db = 0;
				var rr = 0;
				var maxa = 0;
				var ra = 0;
				var fr = false;
				var rest = -1;
				var type;
				for(var i = 0, __ks_0 = parameters.length; i < __ks_0; ++i) {
					parameter = parameters[i];
					type = parameter.type();
					if(rest !== -1) {
						if(type.min() !== 0) {
							ra += type.min();
						}
						maxa += type.max();
						if(parameter.isRest()) {
							fr = true;
						}
					}
					else if(type.max() === Infinity) {
						rest = i;
						rr = type.min();
					}
					else {
						if(type.min() === 0) {
							++db;
						}
						else {
							rb += type.min();
						}
						maxb += type.max();
						if(parameter.isRest()) {
							fr = true;
						}
					}
				}
				if(async) {
					if(rest !== -1) {
						++ra;
						++maxa;
					}
					else {
						++rb;
						++maxb;
					}
				}
				var l = (rest !== -1) ? rest : parameters.length;
				var context;
				if(!arrow && (((rest !== -1) && !fr && ((db === 0) || ((db + 1) === rest))) || ((rest === -1) && (signature.max() === l) && ((db === 0) || (db === l))))) {
					for(var i = 0, __ks_0 = parameters.length; i < l && i < __ks_0; ++i) {
						parameter = parameters[i];
						if(i > 0) {
							fragments.code($comma);
						}
						parameter.toParameterFragments(fragments);
					}
					if((ra === 0) && (rest !== -1) && (parameters[rest].type().isAny() || (maxa === 0)) && (node._options.format.parameters === "es6")) {
						parameter = parameters[rest];
						if(rest > 0) {
							fragments.code($comma);
						}
						parameter.toParameterFragments(fragments);
					}
					else if(async && (ra === 0)) {
						if(l > 0) {
							fragments.code($comma);
						}
						fragments.code("__ks_cb");
					}
					fragments = fn(fragments);
					if((rb + ra) > 0) {
						if(async) {
							node.module().flag("Type");
							if(rest !== -1) {
								fragments.line("" + $runtime.scope(node) + "__ks_cb = arguments.length > 0 ? arguments[arguments.length - 1] : null");
							}
							var __ks_ctrl_1 = fragments.newControl().code("if(arguments.length < " + (signature.min() + 1) + ")").step().line("" + $runtime.scope(node) + "__ks_error = new SyntaxError(\"wrong number of arguments (\" + arguments.length + \" for " + signature.min() + " + 1)\")");
							if(rest === -1) {
								__ks_ctrl_1.newControl().code("if(arguments.length > 0 && Type.isFunction((__ks_cb = arguments[arguments.length - 1])))").step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
							}
							else {
								__ks_ctrl_1.newControl().code("if(Type.isFunction(__ks_cb))").step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
							}
							__ks_ctrl_1.step().code("else if(!Type.isFunction(__ks_cb))").step().line("throw new TypeError(\"'callback' must be a function\")");
							__ks_ctrl_1.done();
						}
						else {
							fragments.newControl().code("if(arguments.length < " + signature.min() + ")").step().line("throw new SyntaxError(\"wrong number of arguments (\" + arguments.length + \" for " + signature.min() + ")\")").done();
						}
					}
					for(var i = 0, __ks_0 = parameters.length; i < l && i < __ks_0; ++i) {
						parameter = parameters[i];
						parameter.toValidationFragments(fragments);
					}
					if(rest !== -1) {
						parameter = parameters[rest];
						if(ra > 0) {
							if(parameter._anonymous) {
								fragments.line("" + $runtime.scope(node) + " __ks_i = arguments.length > " + (maxb + ra) + " ? arguments.length - " + ra + " : " + maxb);
							}
							else {
								fragments.line($runtime.scope(node), "__ks_i");
								if(parameter.type().isAny()) {
									fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = arguments.length > " + (maxb + ra) + " ? Array.prototype.slice.call(arguments, " + maxb + ", __ks_i = arguments.length - " + ra + ") : (__ks_i = " + maxb + ", [])").done();
								}
								else {
									fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = []").done();
								}
							}
						}
						else if((maxa > 0) && !parameter.type().isAny()) {
							if(maxb > 0) {
								throw new NotImplementedException(node);
							}
							else {
								fragments.line($runtime.scope(node), "__ks_i = -1");
							}
							if(parameter._anonymous) {
								ctrl = fragments.newControl().code("while(");
								parameter.type().toTestFragments(ctrl, new Literal(false, node, node.scope(), "arguments[++__ks_i]"));
								ctrl.code(")").step().done();
							}
							else {
								fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = []").done();
								ctrl = fragments.newControl().code("while(");
								parameter.type().toTestFragments(ctrl, new Literal(false, node, node.scope(), "arguments[++__ks_i]"));
								ctrl.code(")").step();
								ctrl.newLine().compile(parameter).code(".push(arguments[__ks_i])").done();
								ctrl.done();
							}
						}
						else if(node._options.format.parameters === "es5") {
							fragments.newLine().code($runtime.scope(node)).compile(parameter).code($equals, "Array.prototype.slice.call(arguments, " + maxb + ", arguments.length)").done();
						}
						if(parameter.hasDefaultValue()) {
							ctrl = fragments.newControl().code("if(").compile(parameter).code(".length === 0)").step();
							ctrl.newLine().compile(parameter).code($equals).compile(parameter._defaultValue).done();
							ctrl.done();
						}
						var arity;
						if((KSType.isValue(__ks_0 = parameter.arity()) ? (arity = __ks_0, true) : false) && (arity.min > 0)) {
							ctrl = fragments.newControl().code("if(").compile(parameter).code(".length < " + arity.min + ")").step();
							if(async) {
								ctrl.newLine().code("return __ks_cb(new SyntaxError(\"wrong number of rest values (\" + ").compile(parameter).code(".length + \" for at least " + arity.min + ")\"))").done();
							}
							else {
								ctrl.newLine().code("throw new SyntaxError(\"wrong number of rest values (\" + ").compile(parameter).code(".length + \" for at least " + arity.min + ")\")").done();
							}
							ctrl.done();
						}
					}
				}
				else {
					if(arrow) {
						fragments.code("...__ks_arguments");
					}
					fragments = fn(fragments);
					if((rb + ra) > 0) {
						if(async) {
							node.module().flag("Type");
							fragments.line("" + $runtime.scope(node) + "__ks_cb = arguments.length > 0 ? arguments[arguments.length - 1] : null");
							var __ks_ctrl_2 = fragments.newControl().code("if(arguments.length < " + (signature.min() + 1) + ")").step().line("" + $runtime.scope(node) + "__ks_error = new SyntaxError(\"wrong number of arguments (\" + arguments.length + \" for " + signature.min() + " + 1)\")");
							__ks_ctrl_2.newControl().code("if(Type.isFunction(__ks_cb))").step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
							__ks_ctrl_2.step().code("else if(!Type.isFunction(__ks_cb))").step().line("throw new TypeError(\"'callback' must be a function\")");
							__ks_ctrl_2.done();
						}
						else {
							fragments.newControl().code("if(" + name + ".length < " + signature.min() + ")").step().line("throw new SyntaxError(\"wrong number of arguments (\" + " + name + ".length + \" for " + signature.min() + ")\")").done();
						}
					}
					fragments.line($runtime.scope(node), "__ks_i = -1");
					context = {
						name: name,
						required: rb,
						optional: signature.min(),
						temp: false,
						length: data.parameters.length,
						async: async
					};
					for(var i = 0; i < l; ++i) {
						parameters[i].toBeforeRestFragments(fragments, context, i);
					}
					if(rest !== -1) {
						parameter = parameters[rest];
						if(ra > 0) {
							if(parameter._anonymous) {
								if((l + 1) < data.parameters.length) {
									fragments.newControl().code("if(" + name + ".length > __ks_i + " + (ra + 1) + ")").step().line("__ks_i = " + name + ".length - " + (ra + 1)).done();
								}
							}
							else {
								fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = " + name + ".length > __ks_i + " + (ra + 1) + " ? Array.prototype.slice.call(" + name + ", __ks_i + 1, " + name + ".length - " + ra + ") : []").done();
								if((l + 1) < data.parameters.length) {
									fragments.newLine().code("__ks_i += ").compile(parameter).code(".length").done();
								}
							}
						}
						else {
							if(!parameter._anonymous) {
								fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = " + name + ".length > ++__ks_i ? Array.prototype.slice.call(" + name + ", __ks_i, __ks_i = " + name + ".length) : []").done();
								if(!parameter.type().isAny() && ((l + 1) < data.parameters.length)) {
									fragments.newLine().code("__ks_i += ").compile(parameter).code(".length").done();
								}
							}
						}
					}
				}
				if((ra !== 0) || (maxa !== 0)) {
					parameter = parameters[rest];
					if((ra !== maxa) && !parameter.type().isAny()) {
						if(ra) {
							fragments.line($runtime.scope(node), "__ks_m = __ks_i + ", ra);
						}
						else {
							fragments.line($runtime.scope(node), "__ks_m = __ks_i");
						}
					}
					context = {
						name: name,
						any: parameter.type().isAny(),
						increment: false,
						temp: KSType.isValue(context) ? context.temp : false,
						length: parameters.length
					};
					for(var i = rest + 1, __ks_0 = parameters.length; i < __ks_0; ++i) {
						parameters[i].toAfterRestFragments(fragments, context, i);
					}
				}
				return fragments;
			},
			toKSFragments: function() {
				if(arguments.length === 4) {
					return Parameter.__ks_sttc_toKSFragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toKSFragments) {
					return AbstractNode.toKSFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._defaultValue = null;
			this._hasDefaultValue = false;
			this._header = false;
			this._maybeHeadedDefaultValue = false;
			this._nullable = false;
			this._rest = false;
			this._setterAlias = false;
			this._thisAlias = false;
			this._variable = null;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			Parameter.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._anonymous = !KSType.isValue(this._data.name);
			if(KSType.isValue(this._data.defaultValue)) {
				this._defaultValue = $compile.expression(this._data.defaultValue, this._parent);
				this._hasDefaultValue = true;
				this._defaultValue.analyse();
			}
			if(this._anonymous) {
				var name = this._scope.acquireTempName();
				this._variable = this._scope.define(name, false, this);
				this._name = $compile.expression($ast.identifier(name), this._parent);
			}
			else {
				this._variable = this._scope.define(this._data.name.name, false, this);
				this._name = $compile.expression(this._data.name, this._parent);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var type = null;
			if(this._parent.isMethod()) {
				if(!this._anonymous) {
					for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
						modifier = this._data.modifiers[__ks_0];
						if(modifier.kind === ModifierKind.SetterAlias) {
							this._setterAlias = true;
						}
						else if(modifier.kind === ModifierKind.ThisAlias) {
							this._thisAlias = true;
						}
					}
					if(this._thisAlias) {
						var alias = new AliasStatement(this._data.name.name, this._setterAlias, this);
						type = alias.type().reference();
					}
				}
				if(!KSType.isValue(type)) {
					type = Type.fromAST(this._data.type, this);
				}
			}
			else {
				for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; __ks_0 < __ks_1; ++__ks_0) {
					modifier = this._data.modifiers[__ks_0];
					if(modifier.kind === ModifierKind.ThisAlias) {
						SyntaxException.throwOutOfClassAlias(this);
					}
				}
				type = Type.fromAST(this._data.type, this);
			}
			this._nullable = type.isNullable();
			var min = 1;
			var max = 1;
			var nf = true;
			for(var __ks_0 = 0, __ks_1 = this._data.modifiers.length, modifier; nf && __ks_0 < __ks_1; ++__ks_0) {
				modifier = this._data.modifiers[__ks_0];
				if(modifier.kind === ModifierKind.Rest) {
					this._rest = true;
					if(modifier.arity) {
						min = modifier.arity.min;
						max = modifier.arity.max;
					}
					else {
						min = 0;
						max = Infinity;
					}
					nf = true;
				}
			}
			if(this._hasDefaultValue) {
				if(!this._nullable && (this._data.defaultValue.kind === NodeKind.Identifier) && (this._data.defaultValue.name === "null")) {
					this._nullable = true;
				}
				this._maybeHeadedDefaultValue = (this._options.format.parameters === "es6") && this._nullable;
				this._defaultValue.prepare();
				min = 0;
			}
			this._type = new ParameterType(type, min, max);
			this._variable.type(this._rest ? Type.arrayOf(type, this._scope) : type);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._hasDefaultValue) {
				this._defaultValue.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_arity_0: function() {
			if(this._rest) {
				for(var i = 0, __ks_0 = this._data.modifiers.length; i < __ks_0; ++i) {
					if(this._data.modifiers[i].kind === ModifierKind.Rest) {
						return this._data.modifiers[i].arity;
					}
				}
			}
			return null;
		},
		arity: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_arity_0.apply(this);
			}
			else if(AbstractNode.prototype.arity) {
				return AbstractNode.prototype.arity.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasDefaultValue_0: function() {
			return this._hasDefaultValue;
		},
		hasDefaultValue: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_hasDefaultValue_0.apply(this);
			}
			else if(AbstractNode.prototype.hasDefaultValue) {
				return AbstractNode.prototype.hasDefaultValue.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAnonymous_0: function() {
			return this._anonymous;
		},
		isAnonymous: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_isAnonymous_0.apply(this);
			}
			else if(AbstractNode.prototype.isAnonymous) {
				return AbstractNode.prototype.isAnonymous.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(AbstractNode.prototype.isNullable) {
				return AbstractNode.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isRest_0: function() {
			return this._rest;
		},
		isRest: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_isRest_0.apply(this);
			}
			else if(AbstractNode.prototype.isRest) {
				return AbstractNode.prototype.isRest.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isSetterAlias_0: function() {
			return this._setterAlias;
		},
		isSetterAlias: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_isSetterAlias_0.apply(this);
			}
			else if(AbstractNode.prototype.isSetterAlias) {
				return AbstractNode.prototype.isSetterAlias.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isThisAlias_0: function() {
			return this._thisAlias;
		},
		isThisAlias: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_isThisAlias_0.apply(this);
			}
			else if(AbstractNode.prototype.isThisAlias) {
				return AbstractNode.prototype.isThisAlias.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_returnType_0: function() {
			return this._type.returnType();
		},
		returnType: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_returnType_0.apply(this);
			}
			else if(AbstractNode.prototype.returnType) {
				return AbstractNode.prototype.returnType.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Parameter.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toParameterFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._rest) {
				fragments.code("...");
			}
			fragments.compile(this._name);
			if(this._maybeHeadedDefaultValue) {
				if(this._hasDefaultValue) {
					fragments.code($equals).compile(this._defaultValue);
				}
				else {
					fragments.code(" = null");
				}
			}
			this._header = true;
		},
		toParameterFragments: function() {
			if(arguments.length === 1) {
				return Parameter.prototype.__ks_func_toParameterFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toParameterFragments) {
				return AbstractNode.prototype.toParameterFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toValidationFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var async = this._parent.type().isAsync();
			if(this._anonymous) {
				if(!this._type.type().isAny() && !this._hasDefaultValue) {
					var ctrl = fragments.newControl().code("if(");
					if(this._nullable) {
						ctrl.compile(this._name).code(" !== null && ");
					}
					ctrl.code("!");
					this._variable.type().toTestFragments(ctrl, this);
					ctrl.code(")").step();
					if(async) {
						ctrl.line("return __ks_cb(new TypeError(\"anonymous argument is not of type " + this.type().toQuote() + "\"))");
					}
					else {
						ctrl.line("throw new TypeError(\"anonymous argument is not of type " + this.type().toQuote() + "\")");
					}
					ctrl.done();
				}
			}
			else {
				var ctrl = null;
				if(this._hasDefaultValue) {
					if(!this._header || !this._maybeHeadedDefaultValue) {
						ctrl = fragments.newControl().code("if(").compile(this._name).code(" === void 0");
						if(!this._nullable) {
							ctrl.code(" || ").compile(this._name).code(" === null");
						}
						ctrl.code(")").step();
						ctrl.newLine().compile(this._name).code($equals).compile(this._defaultValue).done();
					}
				}
				else {
					ctrl = fragments.newControl();
					if(this._nullable) {
						ctrl.code("if(").compile(this._name).code(" === void 0").code(")").step().newLine().compile(this._name).code(" = null").done();
					}
					else {
						ctrl.code("if(").compile(this._name).code(" === void 0").code(" || ").compile(this._name).code(" === null").code(")").step();
						if(async) {
							ctrl.line("return __ks_cb(new TypeError(\"'" + this._variable.name() + "' is not nullable\"))");
						}
						else {
							ctrl.line("throw new TypeError(\"'" + this._variable.name() + "' is not nullable\")");
						}
					}
				}
				if(this._rest) {
					if(!this._variable.type().parameter().isAny()) {
						throw new NotImplementedException(this);
					}
				}
				else if(!this._variable.type().isAny()) {
					if(KSType.isValue(ctrl)) {
						ctrl.step().code("else ");
					}
					else {
						ctrl = fragments.newControl();
					}
					ctrl.code("if(");
					if(this._nullable) {
						ctrl.compile(this._name).code(" !== null && ");
					}
					ctrl.code("!");
					this._variable.type().toTestFragments(ctrl, this);
					ctrl.code(")").step();
					if(async) {
						ctrl.line("return __ks_cb(new TypeError(\"'" + this._variable.name() + "' is not of type " + this._type.toQuote() + "\"))");
					}
					else {
						ctrl.line("throw new TypeError(\"'" + this._variable.name() + "' is not of type " + this._type.toQuote() + "\")");
					}
				}
				if(ctrl !== null) {
					ctrl.done();
				}
			}
		},
		toValidationFragments: function() {
			if(arguments.length === 1) {
				return Parameter.prototype.__ks_func_toValidationFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toValidationFragments) {
				return AbstractNode.prototype.toValidationFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAfterRestFragments_0: function(fragments, context, index) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(context === void 0 || context === null) {
				throw new TypeError("'context' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			var arity, __ks_0;
			if(KSType.isValue(__ks_0 = this.arity()) ? (arity = __ks_0, true) : false) {
				if(this._anonymous) {
					throw new NotImplementedException(this);
				}
				else {
					if(this._type.isAny()) {
						fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = Array.prototype.slice.call(" + context.name + ", __ks_i + 1, __ks_i + " + (arity.min + 1) + ")").done();
						if((index + 1) < context.length) {
							fragments.newLine().code("__ks_i += ").compile(this._name).code(".length").done();
						}
					}
					else {
						throw new NotImplementedException(this);
					}
				}
			}
			else if(this._hasDefaultValue) {
				if(context.any) {
					if(!this._anonymous) {
						fragments.newLine().code($runtime.scope(this)).compile(this._name).code($equals).compile(this._defaultValue).done();
					}
				}
				else {
					if(this._type.isAny()) {
						if(!context.temp) {
							fragments.line("" + $runtime.scope(this) + "__ks__");
							context.temp = true;
						}
						var line = fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = " + context.name + ".length > __ks_m && (__ks__ = " + context.name + "[" + (context.increment ? "++" : "") + "__ks_i]) !== void 0");
						if(!this._nullable) {
							line.code(" && __ks__ !== null");
						}
						line.code(" ? __ks__ : ").compile(this._defaultValue).done();
					}
					else {
						if(!context.temp) {
							fragments.line("" + $runtime.scope(this) + "__ks__");
							context.temp = true;
						}
						var line = fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = " + context.name + ".length > __ks_m && (__ks__ = " + context.name + "[__ks_i" + (context.increment ? " + 1" : "") + "]) !== void 0 && ");
						if(this._nullable) {
							line.code("(__ks__ === null || ");
							this._type.toTestFragments(line, new Literal(false, this, this._scope, "__ks__"));
							line.code(")");
						}
						else {
							this._type.toTestFragments(line, new Literal(false, this, this._scope, "__ks__"));
						}
						line.code(context.increment ? " ? (++__ks_i, __ks__) : " : " ? __ks__ : ").compile(this._defaultValue).done();
					}
					context.increment = true;
				}
			}
			else {
				if(this._anonymous) {
					if(context.increment) {
						fragments.line("++__ks_i");
					}
				}
				else {
					fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = " + context.name + "[", context.increment ? "++" : "", "__ks_i]").done();
					this.toValidationFragments(fragments);
				}
				context.increment = true;
			}
		},
		toAfterRestFragments: function() {
			if(arguments.length === 3) {
				return Parameter.prototype.__ks_func_toAfterRestFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toAfterRestFragments) {
				return AbstractNode.prototype.toAfterRestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBeforeRestFragments_0: function(fragments, context, index) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(context === void 0 || context === null) {
				throw new TypeError("'context' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			var arity, __ks_0;
			if(KSType.isValue(__ks_0 = this.arity()) ? (arity = __ks_0, true) : false) {
				context.required -= arity.min;
				if(this._anonymous) {
					throw new NotImplementedException(this);
				}
				else {
					if(this._type.isAny()) {
						if(context.required > 0) {
							fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = Array.prototype.slice.call(" + context.name + ", __ks_i + 1, Math.min(" + context.name + ".length - " + context.required + ", __ks_i + " + (arity.max + 1) + "))").done();
						}
						else {
							fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = Array.prototype.slice.call(" + context.name + ", __ks_i + 1, Math.min(" + context.name + ".length, __ks_i + " + (arity.max + 1) + "))").done();
						}
						if((index + 1) < context.length) {
							fragments.newLine().code("__ks_i += ").compile(this._name).code(".length").done();
						}
					}
					else {
						throw new NotImplementedException(this);
					}
				}
				context.optional += arity.max - arity.min;
			}
			else {
				if(this._hasDefaultValue) {
					if(this._type.isAny()) {
						if(!context.temp) {
							fragments.line("" + $runtime.scope(this) + "__ks__");
							context.temp = true;
						}
						var line = fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = " + context.name + ".length > " + context.optional + " && (__ks__ = " + context.name + "[++__ks_i]) !== void 0");
						if(!this._nullable) {
							line.code(" && __ks__ !== null");
						}
						line.code(" ? __ks__ : ").compile(this._defaultValue).done();
					}
					else {
						fragments.newLine().code($runtime.scope(this)).compile(this._name).done();
						var ctrl = fragments.newControl().code("if(" + context.name + ".length > " + context.optional + " && (").compile(this._name).code(" = " + context.name + "[++__ks_i]) !== void 0");
						if(!this._nullable) {
							ctrl.code(" && ").compile(this._name).code(" !== null");
						}
						ctrl.code(")").step();
						if(this._nullable) {
							var ctrl2 = ctrl.newControl().code("if(").compile(this._name).code(" !== null && !");
							this._type.toTestFragments(ctrl2, this);
							ctrl2.code(")").step();
							if(context.async) {
								ctrl2.line("return __ks_cb(new TypeError(\"'" + this._variable.name() + "' is not of type " + this._type.toQuote() + "\"))");
							}
							else {
								ctrl2.line("throw new TypeError(\"'" + this._variable.name() + "' is not of type " + this._type.toQuote() + "\")");
							}
							ctrl2.done();
						}
						else {
							var ctrl2 = ctrl.newControl().code("if(!");
							this._type.toTestFragments(ctrl2, this);
							ctrl2.code(")").step();
							if(context.async) {
								ctrl2.line("return __ks_cb(new TypeError(\"'" + this._variable.name() + "' is not of type " + this._type.toQuote() + "\"))");
							}
							else {
								ctrl2.line("throw new TypeError(\"'" + this._variable.name() + "' is not of type " + this._type.toQuote() + "\")");
							}
							ctrl2.done();
						}
						ctrl.step().code("else").step();
						ctrl.newLine().compile(this._name).code($equals).compile(this._defaultValue).done();
						ctrl.done();
					}
					++context.optional;
				}
				else {
					if(this._type.isAny()) {
						if(this._anonymous) {
							fragments.line("++__ks_i");
						}
						else {
							fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = " + context.name + "[++__ks_i]").done();
							this.toValidationFragments(fragments);
						}
					}
					else {
						fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = " + context.name + "[++__ks_i]").done();
						this.toValidationFragments(fragments);
					}
					--context.required;
				}
			}
		},
		toBeforeRestFragments: function() {
			if(arguments.length === 3) {
				return Parameter.prototype.__ks_func_toBeforeRestFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBeforeRestFragments) {
				return AbstractNode.prototype.toBeforeRestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_type_0.apply(this);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AliasStatement = Helper.class({
		$name: "AliasStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(name, setter, parameter) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(setter === void 0 || setter === null) {
				throw new TypeError("'setter' is not nullable");
			}
			else if(!KSType.isBoolean(setter)) {
				throw new TypeError("'setter' is not of type 'Boolean'");
			}
			if(parameter === void 0 || parameter === null) {
				throw new TypeError("'parameter' is not nullable");
			}
			else if(!KSType.is(parameter, Parameter)) {
				throw new TypeError("'parameter' is not of type 'Parameter'");
			}
			Statement.prototype.__ks_cons.call(this, [{}, parameter.parent()]);
			this._name = name;
			this._setter = setter;
			this._parameter = parameter;
			parameter.parent().addAliasStatement(this);
			var __ks_class_1 = parameter.parent().parent().type();
			if(setter) {
				var __ks_0;
				if(KSType.isValue(__ks_0 = __ks_class_1.getPropertySetter(name)) ? (this._type = __ks_0, false) : true) {
					ReferenceException.throwNotDefinedMember(name, this._parameter);
				}
			}
			else {
				if(KSType.isValue(__ks_0 = __ks_class_1.getInstanceVariable(name)) ? (this._type = __ks_0, true) : false) {
					this._variableName = name;
				}
				else if(KSType.isValue(__ks_0 = __ks_class_1.getInstanceVariable("_" + name)) ? (this._type = __ks_0, true) : false) {
					this._variableName = "_" + name;
				}
				else if(KSType.isValue(__ks_0 = __ks_class_1.getPropertySetter(name)) ? (this._type = __ks_0, true) : false) {
					this._setter = true;
				}
				else {
					ReferenceException.throwNotDefinedMember(name, this._parameter);
				}
			}
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				AliasStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				Statement.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._setter) {
				fragments.newLine().code("this." + this._name + "(").compile(this._parameter).code(")").done();
			}
			else {
				fragments.newLine().code("this." + this._variableName + " = ").compile(this._parameter).done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return AliasStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorExpression = Helper.class({
		$name: "AssignmentOperatorExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._await = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			AssignmentOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this.assignment(this._data);
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
			this._right = $compile.expression(this._data.right, this);
			this._right.analyse();
			this._await = this._right.isAwait();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			this._right.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
			this._right.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAssignable_0: function() {
			return true;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return Expression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isAwaiting_0: function() {
			return this._right.isAwaiting();
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			return Expression.prototype.isAwaiting.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._right.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_assignment_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var expression = this;
			while(!KSType.is(expression._parent, Statement)) {
				expression = expression._parent;
			}
			expression._parent.assignment(data, expression);
		},
		assignment: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_assignment_0.apply(this, arguments);
			}
			else if(Expression.prototype.assignment) {
				return Expression.prototype.assignment.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.compileNullable(this._right);
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._left.type();
		},
		type: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_variable_0: function() {
			return this._left.variable();
		},
		variable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_variable_0.apply(this);
			}
			else if(Expression.prototype.variable) {
				return Expression.prototype.variable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorAddition = Helper.class({
		$name: "AssignmentOperatorAddition",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" += ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorAddition.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseAnd = Helper.class({
		$name: "AssignmentOperatorBitwiseAnd",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" &= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseAnd.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseLeftShift = Helper.class({
		$name: "AssignmentOperatorBitwiseLeftShift",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" <<= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseLeftShift.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseOr = Helper.class({
		$name: "AssignmentOperatorBitwiseOr",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" |= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseOr.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseRightShift = Helper.class({
		$name: "AssignmentOperatorBitwiseRightShift",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" >>= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseRightShift.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseXor = Helper.class({
		$name: "AssignmentOperatorBitwiseXor",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" ^= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseXor.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorEquality = Helper.class({
		$name: "AssignmentOperatorEquality",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_hasExceptions_0: function() {
			return this._right.isAwaiting() && this._right.hasExceptions();
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorEquality.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isAwaiting()) {
				return this._right.toFragments(fragments, mode);
			}
			else {
				fragments.compile(this._left).code($equals).compile(this._right);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorEquality.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(KSType.isValue(this._left.toAssignmentFragments)) {
				this._left.toAssignmentFragments(fragments, this._right);
			}
			else {
				fragments.compile(this._left).code($equals).compile(this._right);
			}
		},
		toAssignmentFragments: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorEquality.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toAssignmentFragments) {
				return AssignmentOperatorExpression.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code($equals).wrap(this._right);
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorEquality.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.toBooleanFragments.apply(this, arguments);
		}
	});
	var AssignmentOperatorExistential = Helper.class({
		$name: "AssignmentOperatorExistential",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			this._right.prepare();
			this._right.acquireReusable(true);
			this._right.releaseReusable();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExistential.prototype.__ks_func_prepare_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._right.acquireReusable(true);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExistential.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._right.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExistential.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_isAssignable_0: function() {
			return false;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExistential.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isNullable()) {
				fragments.wrapNullable(this._right).code(" && ").code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? ").compile(this._left).code($equals).wrap(this._right).code(" : undefined");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorExistential.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isNullable()) {
				fragments.wrapNullable(this._right).code(" && ").code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? (").compile(this._left).code($equals).wrap(this._right).code(", true) : false");
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorExistential.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.toBooleanFragments.apply(this, arguments);
		}
	});
	var AssignmentOperatorModulo = Helper.class({
		$name: "AssignmentOperatorModulo",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" %= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorModulo.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorMultiplication = Helper.class({
		$name: "AssignmentOperatorMultiplication",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" *= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorMultiplication.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorNonExistential = Helper.class({
		$name: "AssignmentOperatorNonExistential",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._right.acquireReusable(true);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._right.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_isAssignable_0: function() {
			return false;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isNullable()) {
				fragments.wrapNullable(this._right).code(" && ").code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? ").compile(this._left).code($equals).wrap(this._right).code(" : undefined");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isNullable()) {
				fragments.wrapNullable(this._right).code(" && ").code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? (").compile(this._left).code($equals).wrap(this._right).code(", false) : true");
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.toBooleanFragments.apply(this, arguments);
		}
	});
	var AssignmentOperatorNullCoalescing = Helper.class({
		$name: "AssignmentOperatorNullCoalescing",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isAssignable_0: function() {
			return false;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorNullCoalescing.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._left.isNullable()) {
				fragments.code("(");
				this._left.toNullableFragments(fragments);
				fragments.code(" && " + $runtime.type(this) + ".isValue(").compile(this._left).code("))");
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(").compile(this._left).code(")");
			}
			fragments.code(" ? undefined : ").compile(this._left).code($equals).compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNullCoalescing.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			ctrl.code("if(!");
			if(this._left.isNullable()) {
				ctrl.code("(");
				this._left.toNullableFragments(ctrl);
				ctrl.code(" && " + $runtime.type(this) + ".isValue(").compile(this._left).code("))");
			}
			else {
				ctrl.code($runtime.type(this) + ".isValue(").compile(this._left).code(")");
			}
			ctrl.code(")").step().newLine().compile(this._left).code($equals).compile(this._right).done();
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNullCoalescing.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toStatementFragments) {
				return AssignmentOperatorExpression.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorSubtraction = Helper.class({
		$name: "AssignmentOperatorSubtraction",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" -= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorSubtraction.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorExpression = Helper.class({
		$name: "BinaryOperatorExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._await = false;
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			BinaryOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
			this._right = $compile.expression(this._data.right, this);
			this._right.analyse();
			this._await = this._left.isAwait() || this._right.isAwait();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			this._right.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
			this._right.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isAwaiting_0: function() {
			return this._left.isAwaiting() || this._right.isAwaiting();
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			return Expression.prototype.isAwaiting.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._left.isNullable() || this._right.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNullableComputed_0: function() {
			return (this._left.isNullable() && this._right.isNullable()) || this._left.isNullableComputed() || this._right.isNullableComputed();
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			return Expression.prototype.isNullableComputed.apply(this, arguments);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._left.acquireReusable(false);
			this._right.acquireReusable(false);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return BinaryOperatorExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._left.releaseReusable();
			this._right.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._await) {
				if(this._left.isAwaiting()) {
					return this._left.toFragments(fragments, mode);
				}
				else if(this._right.isAwaiting()) {
					return this._right.toFragments(fragments, mode);
				}
				else {
					this.toOperatorFragments(fragments);
				}
			}
			else if(this.isNullable() && !this._tested) {
				fragments.wrapNullable(this).code(" ? ");
				this.toOperatorFragments(fragments);
				fragments.code(" : false");
			}
			else {
				this.toOperatorFragments(fragments);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(!this._tested) {
				if(this._left.isNullable()) {
					fragments.compileNullable(this._left);
					if(this._right.isNullable()) {
						fragments.code(" && ").compileNullable(this._right);
					}
				}
				else {
					fragments.compileNullable(this._right);
				}
				this._tested = true;
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		}
	});
	var BinaryOperatorAddition = Helper.class({
		$name: "BinaryOperatorAddition",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("+", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorAddition.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			if(this._left.type().isNumber() || this._left.type().isString()) {
				return this._left.type();
			}
			else {
				return new UnionType([this._scope.reference("Number"), this._scope.reference("String")]);
			}
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorAddition.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorAnd = Helper.class({
		$name: "BinaryOperatorAnd",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrapBoolean(this._left).code($space).code("&&", this._data.operator).code($space).wrapBoolean(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorAnd.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorAnd.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseAnd = Helper.class({
		$name: "BinaryOperatorBitwiseAnd",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("&", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseAnd.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseAnd.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseLeftShift = Helper.class({
		$name: "BinaryOperatorBitwiseLeftShift",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("<<", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseLeftShift.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseLeftShift.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseOr = Helper.class({
		$name: "BinaryOperatorBitwiseOr",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("|", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseOr.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseOr.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseRightShift = Helper.class({
		$name: "BinaryOperatorBitwiseRightShift",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code(">>", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseRightShift.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseRightShift.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseXor = Helper.class({
		$name: "BinaryOperatorBitwiseXor",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("^", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseXor.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseXor.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorDivision = Helper.class({
		$name: "BinaryOperatorDivision",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("/", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorDivision.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorDivision.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorEquality = Helper.class({
		$name: "BinaryOperatorEquality",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("===", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorEquality.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorEquality.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorGreaterThan = Helper.class({
		$name: "BinaryOperatorGreaterThan",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code(">", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorGreaterThan.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorGreaterThan.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorGreaterThanOrEqual = Helper.class({
		$name: "BinaryOperatorGreaterThanOrEqual",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code(">=", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorGreaterThanOrEqual.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorGreaterThanOrEqual.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorInequality = Helper.class({
		$name: "BinaryOperatorInequality",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("!==", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorInequality.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorInequality.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorLessThan = Helper.class({
		$name: "BinaryOperatorLessThan",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("<", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorLessThan.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorLessThan.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorLessThanOrEqual = Helper.class({
		$name: "BinaryOperatorLessThanOrEqual",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("<=", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorLessThanOrEqual.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorLessThanOrEqual.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorModulo = Helper.class({
		$name: "BinaryOperatorModulo",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("%", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorModulo.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorModulo.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorMultiplication = Helper.class({
		$name: "BinaryOperatorMultiplication",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("*", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorMultiplication.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorMultiplication.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorNullCoalescing = Helper.class({
		$name: "BinaryOperatorNullCoalescing",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			BinaryOperatorExpression.prototype.prepare.apply(this, []);
			this._left.acquireReusable(true);
			this._left.releaseReusable();
			if(this._left.type().equals(this._right.type())) {
				this._type = this._left.type();
			}
			else {
				this._type = new UnionType([this._left.type(), this._right.type()]);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_prepare_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._left.acquireReusable(true);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._left.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._left.isNullable()) {
				fragments.code("(");
				this._left.toNullableFragments(fragments);
				fragments.code(" && " + $runtime.type(this) + ".isValue(").compileReusable(this._left).code("))");
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(").compileReusable(this._left).code(")");
			}
			fragments.code(" ? ").compile(this._left).code(" : ").wrap(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorOr = Helper.class({
		$name: "BinaryOperatorOr",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrapBoolean(this._left).code($space).code("||", this._data.operator).code($space).wrapBoolean(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorOr.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorOr.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorSubtraction = Helper.class({
		$name: "BinaryOperatorSubtraction",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space, "-", this._data.operator, $space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorSubtraction.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorSubtraction.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorTypeCasting = Helper.class({
		$name: "BinaryOperatorTypeCasting",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
			this._type = Type.fromAST(this._data.right, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._left.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorTypeEquality = Helper.class({
		$name: "BinaryOperatorTypeEquality",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
			this._type = Type.fromAST(this._data.right, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this._type.toTestFragments(fragments, this._left);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorTypeInequality = Helper.class({
		$name: "BinaryOperatorTypeInequality",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
			this._type = Type.fromAST(this._data.right, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._data.right.kind === NodeKind.TypeReference) {
				fragments.code("!");
				this._type.toTestFragments(fragments, this._left);
			}
			else if(KSType.isValue(this._data.right.types)) {
				fragments.code("!(");
				this._type.toTestFragments(fragments, this._left);
				fragments.code(")");
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorExpression = Helper.class({
		$name: "PolyadicOperatorExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			PolyadicOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._operands = [];
			for(var __ks_0 = 0, __ks_1 = this._data.operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._data.operands[__ks_0];
				this._operands.push(operand = $compile.expression(operand, this));
				operand.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			for(var i = 0, __ks_0 = this._operands.length; i < __ks_0; ++i) {
				this._operands[i].acquireReusable(false);
				this._operands[i].releaseReusable();
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(operand.isNullable()) {
					return true;
				}
			}
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var test = this.isNullable() && !this._tested;
			if(test) {
				fragments.compileNullable(this).code(" ? ");
			}
			this.toOperatorFragments(fragments);
			if(test) {
				fragments.code(" : false");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(!this._tested) {
				var nf = false;
				for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
					operand = this._operands[__ks_0];
					if(operand.isNullable()) {
						if(nf) {
							fragments.code(" && ");
						}
						else {
							nf = true;
						}
						fragments.compileNullable(operand);
					}
				}
				this._tested = true;
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		}
	});
	var PolyadicOperatorAddition = Helper.class({
		$name: "PolyadicOperatorAddition",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("+", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorAddition.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			if(this._operands[0].type().isNumber() || this._operands[0].type().isString()) {
				return this._operands[0].type();
			}
			else {
				return new UnionType([this._scope.reference("Number"), this._scope.reference("String")]);
			}
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorAddition.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorAnd = Helper.class({
		$name: "PolyadicOperatorAnd",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("&&", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrapBoolean(operand);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorAnd.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorAnd.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseAnd = Helper.class({
		$name: "PolyadicOperatorBitwiseAnd",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("&", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorBitwiseAnd.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseAnd.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseLeftShift = Helper.class({
		$name: "PolyadicOperatorBitwiseLeftShift",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("<<", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorBitwiseLeftShift.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseLeftShift.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseOr = Helper.class({
		$name: "PolyadicOperatorBitwiseOr",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("|", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorBitwiseOr.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseOr.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseRightShift = Helper.class({
		$name: "PolyadicOperatorBitwiseRightShift",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code(">>", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorBitwiseRightShift.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseRightShift.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseXor = Helper.class({
		$name: "PolyadicOperatorBitwiseXor",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("^", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorBitwiseXor.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseXor.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorDivision = Helper.class({
		$name: "PolyadicOperatorDivision",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("/", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorDivision.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorDivision.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorEquality = Helper.class({
		$name: "PolyadicOperatorEquality",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var l = this._operands.length - 1;
			for(var i = 0; i < l; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.compile(this._operands[i]).code(" === ").compile(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorEquality.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorEquality.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorGreaterThan = Helper.class({
		$name: "PolyadicOperatorGreaterThan",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var i = 0, __ks_0 = this._operands.length - 1; i < __ks_0; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.wrap(this._operands[i]).code($space).code(">", this._data.operator).code($space).wrap(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorGreaterThan.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorGreaterThan.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorGreaterThanOrEqual = Helper.class({
		$name: "PolyadicOperatorGreaterThanOrEqual",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var i = 0, __ks_0 = this._operands.length - 1; i < __ks_0; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.wrap(this._operands[i]).code($space).code(">=", this._data.operator).code($space).wrap(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorGreaterThanOrEqual.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorGreaterThanOrEqual.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorLessThan = Helper.class({
		$name: "PolyadicOperatorLessThan",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var i = 0, __ks_0 = this._operands.length - 1; i < __ks_0; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.wrap(this._operands[i]).code($space).code("<", this._data.operator).code($space).wrap(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorLessThan.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorLessThan.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorLessThanOrEqual = Helper.class({
		$name: "PolyadicOperatorLessThanOrEqual",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var i = 0, __ks_0 = this._operands.length - 1; i < __ks_0; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.wrap(this._operands[i]).code($space).code("<=", this._data.operator).code($space).wrap(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorLessThanOrEqual.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorLessThanOrEqual.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorMultiplication = Helper.class({
		$name: "PolyadicOperatorMultiplication",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("*", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorMultiplication.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorMultiplication.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorModulo = Helper.class({
		$name: "PolyadicOperatorModulo",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("%", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorModulo.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorModulo.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorNullCoalescing = Helper.class({
		$name: "PolyadicOperatorNullCoalescing",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				PolyadicOperatorNullCoalescing.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
			}
		},
		__ks_func_analyse_0: function() {
			this._operands = [];
			for(var __ks_0 = 0, __ks_1 = this._data.operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._data.operands[__ks_0];
				this._operands.push(operand = $compile.expression(operand, this, this.newScope()));
				operand.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_analyse_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.analyse.apply(this, arguments);
		},
		__ks_func_prepare_0: function() {
			var types = [];
			var operandType, type, ne;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				operand.prepare();
				operand.acquireReusable(true);
				operand.releaseReusable();
				operandType = operand.type();
				ne = true;
				for(var __ks_2 = 0, __ks_3 = types.length; ne && __ks_2 < __ks_3; ++__ks_2) {
					type = types[__ks_2];
					if(type.equals(operandType)) {
						ne = false;
					}
				}
				if(ne) {
					types.push(operandType);
				}
			}
			if(types.length === 1) {
				this._type = types[0];
			}
			else {
				this._type = new UnionType(types);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_prepare_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			for(var i = 0, __ks_0 = this._operands.length - 2; i <= __ks_0; ++i) {
				this._operands[i].acquireReusable(true);
				this._operands[i].releaseReusable();
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Type");
			var l = this._operands.length - 1;
			var operand;
			for(var i = 0; i < l; ++i) {
				operand = this._operands[i];
				if(operand.isNullable()) {
					fragments.code("(");
					operand.toNullableFragments(fragments);
					fragments.code(" && " + $runtime.type(this) + ".isValue(").compileReusable(operand).code("))");
				}
				else {
					fragments.code($runtime.type(this) + ".isValue(").compileReusable(operand).code(")");
				}
				fragments.code(" ? ").compile(operand).code(" : ");
			}
			fragments.compile(this._operands[l]);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorOr = Helper.class({
		$name: "PolyadicOperatorOr",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("||", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrapBoolean(operand);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorOr.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorOr.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorSubtraction = Helper.class({
		$name: "PolyadicOperatorSubtraction",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_0 = 0, __ks_1 = this._operands.length, operand; __ks_0 < __ks_1; ++__ks_0) {
				operand = this._operands[__ks_0];
				if(nf) {
					fragments.code($space).code("-", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorSubtraction.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorSubtraction.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorExpression = Helper.class({
		$name: "UnaryOperatorExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._argument = $compile.expression(this._data.argument, this);
			this._argument.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._argument.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._argument.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		}
	});
	var UnaryOperatorBitwiseNot = Helper.class({
		$name: "UnaryOperatorBitwiseNot",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("~", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorBitwiseNot.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorBitwiseNot.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorDecrementPostfix = Helper.class({
		$name: "UnaryOperatorDecrementPostfix",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrap(this._argument).code("--", this._data.operator);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorDecrementPostfix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorDecrementPostfix.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorDecrementPrefix = Helper.class({
		$name: "UnaryOperatorDecrementPrefix",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("--", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorDecrementPrefix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorDecrementPrefix.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorExistential = Helper.class({
		$name: "UnaryOperatorExistential",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isComputed_0: function() {
			return this._argument.isNullable();
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExistential.prototype.__ks_func_isComputed_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._argument.isNullable()) {
				fragments.wrapNullable(this._argument).code(" && ").code($runtime.type(this) + ".isValue(", this._data.operator).compile(this._argument).code(")", this._data.operator);
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(", this._data.operator).compile(this._argument).code(")", this._data.operator);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorExistential.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExistential.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorIncrementPostfix = Helper.class({
		$name: "UnaryOperatorIncrementPostfix",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrap(this._argument).code("++", this._data.operator);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorIncrementPostfix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorIncrementPostfix.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorIncrementPrefix = Helper.class({
		$name: "UnaryOperatorIncrementPrefix",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("++", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorIncrementPrefix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorIncrementPrefix.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorNegation = Helper.class({
		$name: "UnaryOperatorNegation",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("!", this._data.operator).wrapBoolean(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorNegation.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorNegation.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorNegative = Helper.class({
		$name: "UnaryOperatorNegative",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("-", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorNegative.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorNegative.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var $compile = {
		expression: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			var __ks__;
			var scope = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : parent.scope();
			var expression;
			var clazz = $expressions[data.kind];
			if(KSType.isValue(clazz)) {
				expression = KSType.isClass(clazz) ? new clazz(data, parent, scope) : clazz(data, parent, scope);
			}
			else if(data.kind === NodeKind.BinaryExpression) {
				if(KSType.isValue($binaryOperators[data.operator.kind]) ? (clazz = $binaryOperators[data.operator.kind], true) : false) {
					expression = new clazz(data, parent, scope);
				}
				else if(data.operator.kind === BinaryOperatorKind.Assignment) {
					if((clazz = $assignmentOperators[data.operator.assignment])) {
						expression = new clazz(data, parent, scope);
					}
					else {
						throw new NotSupportedException("Unexpected assignment operator " + data.operator.assignment, parent);
					}
				}
				else {
					throw new NotSupportedException("Unexpected binary operator " + data.operator.kind, parent);
				}
			}
			else if(data.kind === NodeKind.PolyadicExpression) {
				if(KSType.isValue($polyadicOperators[data.operator.kind]) ? (clazz = $polyadicOperators[data.operator.kind], true) : false) {
					expression = new clazz(data, parent, scope);
				}
				else {
					throw new NotSupportedException("Unexpected polyadic operator " + data.operator.kind, parent);
				}
			}
			else if(data.kind === NodeKind.UnaryExpression) {
				if(KSType.isValue($unaryOperators[data.operator.kind]) ? (clazz = $unaryOperators[data.operator.kind], true) : false) {
					expression = new clazz(data, parent, scope);
				}
				else {
					throw new NotSupportedException("Unexpected unary operator " + data.operator.kind, parent);
				}
			}
			else {
				throw new NotSupportedException("Unexpected expression/statement " + data.kind, parent);
			}
			return expression;
		},
		statement: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(Attribute.conditional(data, parent.module()._compiler._target)) {
				var clazz = KSType.isValue($statements[data.kind]) ? $statements[data.kind] : $statements.default;
				return new clazz(data, parent);
			}
			else {
				return null;
			}
		}
	};
	var $assignmentOperators = {};
	$assignmentOperators[AssignmentOperatorKind.Addition] = AssignmentOperatorAddition;
	$assignmentOperators[AssignmentOperatorKind.BitwiseAnd] = AssignmentOperatorBitwiseAnd;
	$assignmentOperators[AssignmentOperatorKind.BitwiseLeftShift] = AssignmentOperatorBitwiseLeftShift;
	$assignmentOperators[AssignmentOperatorKind.BitwiseOr] = AssignmentOperatorBitwiseOr;
	$assignmentOperators[AssignmentOperatorKind.BitwiseRightShift] = AssignmentOperatorBitwiseRightShift;
	$assignmentOperators[AssignmentOperatorKind.BitwiseXor] = AssignmentOperatorBitwiseXor;
	$assignmentOperators[AssignmentOperatorKind.Equality] = AssignmentOperatorEquality;
	$assignmentOperators[AssignmentOperatorKind.Existential] = AssignmentOperatorExistential;
	$assignmentOperators[AssignmentOperatorKind.Modulo] = AssignmentOperatorModulo;
	$assignmentOperators[AssignmentOperatorKind.Multiplication] = AssignmentOperatorMultiplication;
	$assignmentOperators[AssignmentOperatorKind.NonExistential] = AssignmentOperatorNonExistential;
	$assignmentOperators[AssignmentOperatorKind.NullCoalescing] = AssignmentOperatorNullCoalescing;
	$assignmentOperators[AssignmentOperatorKind.Subtraction] = AssignmentOperatorSubtraction;
	var $binaryOperators = {};
	$binaryOperators[BinaryOperatorKind.Addition] = BinaryOperatorAddition;
	$binaryOperators[BinaryOperatorKind.And] = BinaryOperatorAnd;
	$binaryOperators[BinaryOperatorKind.BitwiseAnd] = BinaryOperatorBitwiseAnd;
	$binaryOperators[BinaryOperatorKind.BitwiseLeftShift] = BinaryOperatorBitwiseLeftShift;
	$binaryOperators[BinaryOperatorKind.BitwiseOr] = BinaryOperatorBitwiseOr;
	$binaryOperators[BinaryOperatorKind.BitwiseRightShift] = BinaryOperatorBitwiseRightShift;
	$binaryOperators[BinaryOperatorKind.BitwiseXor] = BinaryOperatorBitwiseXor;
	$binaryOperators[BinaryOperatorKind.Division] = BinaryOperatorDivision;
	$binaryOperators[BinaryOperatorKind.Equality] = BinaryOperatorEquality;
	$binaryOperators[BinaryOperatorKind.GreaterThan] = BinaryOperatorGreaterThan;
	$binaryOperators[BinaryOperatorKind.GreaterThanOrEqual] = BinaryOperatorGreaterThanOrEqual;
	$binaryOperators[BinaryOperatorKind.Inequality] = BinaryOperatorInequality;
	$binaryOperators[BinaryOperatorKind.LessThan] = BinaryOperatorLessThan;
	$binaryOperators[BinaryOperatorKind.LessThanOrEqual] = BinaryOperatorLessThanOrEqual;
	$binaryOperators[BinaryOperatorKind.Modulo] = BinaryOperatorModulo;
	$binaryOperators[BinaryOperatorKind.Multiplication] = BinaryOperatorMultiplication;
	$binaryOperators[BinaryOperatorKind.NullCoalescing] = BinaryOperatorNullCoalescing;
	$binaryOperators[BinaryOperatorKind.Or] = BinaryOperatorOr;
	$binaryOperators[BinaryOperatorKind.Subtraction] = BinaryOperatorSubtraction;
	$binaryOperators[BinaryOperatorKind.TypeCasting] = BinaryOperatorTypeCasting;
	$binaryOperators[BinaryOperatorKind.TypeEquality] = BinaryOperatorTypeEquality;
	$binaryOperators[BinaryOperatorKind.TypeInequality] = BinaryOperatorTypeInequality;
	var $expressions = {};
	$expressions[NodeKind.ArrayBinding] = ArrayBinding;
	$expressions[NodeKind.ArrayComprehension] = function(data, parent, scope) {
		if(arguments.length < 3) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
		}
		if(data === void 0 || data === null) {
			throw new TypeError("'data' is not nullable");
		}
		if(parent === void 0 || parent === null) {
			throw new TypeError("'parent' is not nullable");
		}
		if(scope === void 0 || scope === null) {
			throw new TypeError("'scope' is not nullable");
		}
		if(data.loop.kind === NodeKind.ForFromStatement) {
			return new ArrayComprehensionForFrom(data, parent, scope);
		}
		else if(data.loop.kind === NodeKind.ForInStatement) {
			return new ArrayComprehensionForIn(data, parent, scope);
		}
		else if(data.loop.kind === NodeKind.ForOfStatement) {
			return new ArrayComprehensionForOf(data, parent, scope);
		}
		else if(data.loop.kind === NodeKind.ForRangeStatement) {
			return new ArrayComprehensionForRange(data, parent, scope);
		}
		else {
			throw new NotSupportedException(parent, "Unexpected kind " + data.loop.kind);
		}
	};
	$expressions[NodeKind.ArrayExpression] = ArrayExpression;
	$expressions[NodeKind.ArrayRange] = ArrayRange;
	$expressions[NodeKind.AwaitExpression] = AwaitExpression;
	$expressions[NodeKind.BindingElement] = BindingElement;
	$expressions[NodeKind.Block] = BlockExpression;
	$expressions[NodeKind.CallExpression] = CallExpression;
	$expressions[NodeKind.ConditionalExpression] = ConditionalExpression;
	$expressions[NodeKind.CreateExpression] = CreateExpression;
	$expressions[NodeKind.CurryExpression] = CurryExpression;
	$expressions[NodeKind.EnumExpression] = EnumExpression;
	$expressions[NodeKind.FunctionExpression] = FunctionExpression;
	$expressions[NodeKind.Identifier] = IdentifierLiteral;
	$expressions[NodeKind.IfExpression] = IfExpression;
	$expressions[NodeKind.LambdaExpression] = LambdaExpression;
	$expressions[NodeKind.Literal] = StringLiteral;
	$expressions[NodeKind.MemberExpression] = MemberExpression;
	$expressions[NodeKind.NumericExpression] = NumberLiteral;
	$expressions[NodeKind.ObjectBinding] = ObjectBinding;
	$expressions[NodeKind.ObjectExpression] = ObjectExpression;
	$expressions[NodeKind.ObjectMember] = ObjectMember;
	$expressions[NodeKind.OmittedExpression] = OmittedExpression;
	$expressions[NodeKind.RegularExpression] = RegularExpression;
	$expressions[NodeKind.SequenceExpression] = SequenceExpression;
	$expressions[NodeKind.TemplateExpression] = TemplateExpression;
	$expressions[NodeKind.ThisExpression] = ThisExpression;
	$expressions[NodeKind.UnlessExpression] = UnlessExpression;
	var $statements = {};
	$statements[NodeKind.BreakStatement] = BreakStatement;
	$statements[NodeKind.ClassDeclaration] = ClassDeclaration;
	$statements[NodeKind.ContinueStatement] = ContinueStatement;
	$statements[NodeKind.DestroyStatement] = DestroyStatement;
	$statements[NodeKind.DoUntilStatement] = DoUntilStatement;
	$statements[NodeKind.DoWhileStatement] = DoWhileStatement;
	$statements[NodeKind.EnumDeclaration] = EnumDeclaration;
	$statements[NodeKind.ExportDeclaration] = ExportDeclaration;
	$statements[NodeKind.ExternDeclaration] = ExternDeclaration;
	$statements[NodeKind.ExternOrRequireDeclaration] = ExternOrRequireDeclaration;
	$statements[NodeKind.ForFromStatement] = ForFromStatement;
	$statements[NodeKind.ForInStatement] = ForInStatement;
	$statements[NodeKind.ForOfStatement] = ForOfStatement;
	$statements[NodeKind.ForRangeStatement] = ForRangeStatement;
	$statements[NodeKind.FunctionDeclaration] = FunctionDeclaration;
	$statements[NodeKind.IfStatement] = IfStatement;
	$statements[NodeKind.ImplementDeclaration] = ImplementDeclaration;
	$statements[NodeKind.ImportDeclaration] = ImportDeclaration;
	$statements[NodeKind.IncludeDeclaration] = IncludeDeclaration;
	$statements[NodeKind.IncludeOnceDeclaration] = IncludeOnceDeclaration;
	$statements[NodeKind.NamespaceDeclaration] = NamespaceDeclaration;
	$statements[NodeKind.RequireDeclaration] = RequireDeclaration;
	$statements[NodeKind.RequireOrExternDeclaration] = RequireOrExternDeclaration;
	$statements[NodeKind.RequireOrImportDeclaration] = RequireOrImportDeclaration;
	$statements[NodeKind.ReturnStatement] = ReturnStatement;
	$statements[NodeKind.SwitchStatement] = SwitchStatement;
	$statements[NodeKind.ThrowStatement] = ThrowStatement;
	$statements[NodeKind.TryStatement] = TryStatement;
	$statements[NodeKind.TypeAliasDeclaration] = TypeAliasDeclaration;
	$statements[NodeKind.UnlessStatement] = UnlessStatement;
	$statements[NodeKind.UntilStatement] = UntilStatement;
	$statements[NodeKind.VariableDeclaration] = VariableDeclaration;
	$statements[NodeKind.WhileStatement] = WhileStatement;
	$statements["default"] = ExpressionStatement;
	var $polyadicOperators = {};
	$polyadicOperators[BinaryOperatorKind.Addition] = PolyadicOperatorAddition;
	$polyadicOperators[BinaryOperatorKind.And] = PolyadicOperatorAnd;
	$polyadicOperators[BinaryOperatorKind.BitwiseAnd] = PolyadicOperatorBitwiseAnd;
	$polyadicOperators[BinaryOperatorKind.BitwiseLeftShift] = PolyadicOperatorBitwiseLeftShift;
	$polyadicOperators[BinaryOperatorKind.BitwiseOr] = PolyadicOperatorBitwiseOr;
	$polyadicOperators[BinaryOperatorKind.BitwiseRightShift] = PolyadicOperatorBitwiseRightShift;
	$polyadicOperators[BinaryOperatorKind.BitwiseXor] = PolyadicOperatorBitwiseXor;
	$polyadicOperators[BinaryOperatorKind.Division] = PolyadicOperatorDivision;
	$polyadicOperators[BinaryOperatorKind.Equality] = PolyadicOperatorEquality;
	$polyadicOperators[BinaryOperatorKind.GreaterThan] = PolyadicOperatorGreaterThan;
	$polyadicOperators[BinaryOperatorKind.GreaterThanOrEqual] = PolyadicOperatorGreaterThanOrEqual;
	$polyadicOperators[BinaryOperatorKind.LessThan] = PolyadicOperatorLessThan;
	$polyadicOperators[BinaryOperatorKind.LessThanOrEqual] = PolyadicOperatorLessThanOrEqual;
	$polyadicOperators[BinaryOperatorKind.Modulo] = PolyadicOperatorModulo;
	$polyadicOperators[BinaryOperatorKind.Multiplication] = PolyadicOperatorMultiplication;
	$polyadicOperators[BinaryOperatorKind.NullCoalescing] = PolyadicOperatorNullCoalescing;
	$polyadicOperators[BinaryOperatorKind.Or] = PolyadicOperatorOr;
	$polyadicOperators[BinaryOperatorKind.Subtraction] = PolyadicOperatorSubtraction;
	var $unaryOperators = {};
	$unaryOperators[UnaryOperatorKind.BitwiseNot] = UnaryOperatorBitwiseNot;
	$unaryOperators[UnaryOperatorKind.DecrementPostfix] = UnaryOperatorDecrementPostfix;
	$unaryOperators[UnaryOperatorKind.DecrementPrefix] = UnaryOperatorDecrementPrefix;
	$unaryOperators[UnaryOperatorKind.Existential] = UnaryOperatorExistential;
	$unaryOperators[UnaryOperatorKind.IncrementPostfix] = UnaryOperatorIncrementPostfix;
	$unaryOperators[UnaryOperatorKind.IncrementPrefix] = UnaryOperatorIncrementPrefix;
	$unaryOperators[UnaryOperatorKind.Negation] = UnaryOperatorNegation;
	$unaryOperators[UnaryOperatorKind.Negative] = UnaryOperatorNegative;
	var $targets = {
		ecma: {
			"5": {
				format: {
					classes: "es5",
					destructuring: "es5",
					functions: "es5",
					parameters: "es5",
					spreads: "es5",
					variables: "es5"
				}
			},
			"6": {
				format: {
					classes: "es6",
					destructuring: "es6",
					functions: "es6",
					parameters: "es6",
					spreads: "es6",
					variables: "es6"
				}
			}
		}
	};
	var Compiler = Helper.class({
		$name: "Compiler",
		$static: {
			__ks_sttc_registerTarget_0: function(target, options) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(target === void 0 || target === null) {
					throw new TypeError("'target' is not nullable");
				}
				if(options === void 0 || options === null) {
					throw new TypeError("'options' is not nullable");
				}
				var __ks_0;
				if(KSType.isValue(__ks_0 = $targetRegex.exec(target)) ? (target = __ks_0, false) : true) {
					throw new Error("Invalid target syntax: " + target);
				}
				if(!KSType.isValue($targets[target[1]])) {
					$targets[target[1]] = {};
				}
				$targets[target[1]][target[2]] = options;
			},
			registerTarget: function() {
				if(arguments.length === 2) {
					return Compiler.__ks_sttc_registerTarget_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_registerTargets_0: function(targets) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(targets === void 0 || targets === null) {
					throw new TypeError("'targets' is not nullable");
				}
				for(var name in targets) {
					var data = targets[name];
					if(KSType.isString(data)) {
						Compiler.registerTargetAlias(name, data);
					}
					else {
						Compiler.registerTarget(name, data);
					}
				}
			},
			registerTargets: function() {
				if(arguments.length === 1) {
					return Compiler.__ks_sttc_registerTargets_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_registerTargetAlias_0: function(target, alias) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(target === void 0 || target === null) {
					throw new TypeError("'target' is not nullable");
				}
				if(alias === void 0 || alias === null) {
					throw new TypeError("'alias' is not nullable");
				}
				var __ks_0;
				if(KSType.isValue(__ks_0 = $targetRegex.exec(target)) ? (target = __ks_0, false) : true) {
					throw new Error("Invalid target syntax: " + target);
				}
				if(KSType.isValue(__ks_0 = $targetRegex.exec(alias)) ? (alias = __ks_0, false) : true) {
					throw new Error("Invalid target syntax: " + alias);
				}
				if(!KSType.isValue($targets[alias[1]])) {
					throw new Error("Undefined target '" + alias[1] + "'");
				}
				else if(!KSType.isValue($targets[alias[1]][alias[2]])) {
					throw new Error("Undefined target's version '" + alias[2] + "'");
				}
				if(!KSType.isValue($targets[target[1]])) {
					$targets[target[1]] = {};
				}
				$targets[target[1]][target[2]] = $targets[alias[1]][alias[2]];
			},
			registerTargetAlias: function() {
				if(arguments.length === 2) {
					return Compiler.__ks_sttc_registerTargetAlias_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var file = arguments[++__ks_i];
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			else if(!KSType.isString(file)) {
				throw new TypeError("'file' is not of type 'String'");
			}
			var __ks__;
			var options = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var hashes = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : {};
			this._file = file;
			this._hashes = hashes;
			this._options = __ks_Object._cm_merge({
				target: "ecma-v6",
				register: true,
				config: {
					header: true,
					error: {
						level: "fatal",
						ignore: [],
						raise: []
					},
					parse: {
						parameters: "kaoscript"
					},
					format: {},
					runtime: {
						helper: {
							alias: "Helper",
							member: "Helper",
							package: "@kaoscript/runtime"
						},
						type: {
							alias: "Type",
							member: "Type",
							package: "@kaoscript/runtime"
						}
					}
				}
			}, options);
			var target, __ks_0;
			if(KSType.isValue(__ks_0 = $targetRegex.exec(this._options.target)) ? (target = __ks_0, false) : true) {
				throw new Error("Invalid target syntax: " + this._options.target);
			}
			this._target = {
				name: target[1],
				version: target[2]
			};
			if(!KSType.isValue($targets[this._target.name])) {
				throw new Error("Undefined target '" + this._target.name + "'");
			}
			else if(!KSType.isValue($targets[this._target.name][this._target.version])) {
				throw new Error("Undefined target's version '" + this._target.version + "'");
			}
			this._options.target = "" + this._target.name + "-v" + this._target.version;
			this._options.config = __ks_Object._cm_defaults($targets[this._target.name][this._target.version], this._options.config);
		},
		__ks_cons: function(args) {
			if(args.length >= 1 && args.length <= 3) {
				Compiler.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_compile_0: function(data) {
			if(data === void 0) {
				data = null;
			}
			this._module = new Module(KSType.isValue(data) ? data : fs.readFile(this._file), this, this._file);
			this._module.compile();
			this._fragments = this._module.toFragments();
			return this;
		},
		compile: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Compiler.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_createServant_0: function(file) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			return new Compiler(file, {
				config: this._options.config,
				register: false,
				target: this._options.target
			}, this._hashes);
		},
		createServant: function() {
			if(arguments.length === 1) {
				return Compiler.prototype.__ks_func_createServant_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_readFile_0: function() {
			return fs.readFile(this._file);
		},
		readFile: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_readFile_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_sha256_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var file = arguments[++__ks_i];
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			var __ks__;
			var data = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			return KSType.isValue(this._hashes[file]) ? this._hashes[file] : (this._hashes[file] = fs.sha256(KSType.isValue(data) ? data : fs.readFile(file)));
		},
		sha256: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Compiler.prototype.__ks_func_sha256_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toHashes_0: function() {
			return this._module.toHashes();
		},
		toHashes: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toHashes_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toMetadata_0: function() {
			return this._module.toMetadata();
		},
		toMetadata: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toMetadata_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toSource_0: function() {
			var source = "";
			for(var __ks_0 = 0, __ks_1 = this._fragments.length, fragment; __ks_0 < __ks_1; ++__ks_0) {
				fragment = this._fragments[__ks_0];
				source += fragment.code;
			}
			if(source.length) {
				return source.substr(0, source.length - 1);
			}
			else {
				return source;
			}
		},
		toSource: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toSource_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toSourceMap_0: function() {
			return this._module.toSourceMap();
		},
		toSourceMap: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toSourceMap_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_writeFiles_0: function() {
			fs.mkdir(path.dirname(this._file));
			fs.writeFile(getBinaryPath(this._file, this._options.target), this.toSource());
			if(!this._module._binary) {
				var metadata = this.toMetadata();
				fs.writeFile(getMetadataPath(this._file, this._options.target), JSON.stringify(metadata));
			}
			fs.writeFile(getHashPath(this._file, this._options.target), JSON.stringify(this._module.toHashes()));
		},
		writeFiles: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_writeFiles_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_writeOutput_0: function() {
			if(!this._options.output) {
				throw new Error("Undefined option: output");
			}
			fs.mkdir(this._options.output);
			var filename = path.join(this._options.output, path.basename(this._file)).slice(0, -3) + ".js";
			fs.writeFile(filename, this.toSource());
			return this;
		},
		writeOutput: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_writeOutput_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	function compileFile() {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		var __ks_i = -1;
		var file = arguments[++__ks_i];
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		var __ks__;
		var options = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
		var compiler = new Compiler(file, options);
		return compiler.compile().toSource();
	}
	function getBinaryPath(file, target) {
		if(arguments.length < 2) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		if(target === void 0 || target === null) {
			throw new TypeError("'target' is not nullable");
		}
		return fs.hidden(file, target, $extensions.binary);
	}
	function getHashPath(file, target) {
		if(arguments.length < 2) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		if(target === void 0 || target === null) {
			throw new TypeError("'target' is not nullable");
		}
		return fs.hidden(file, target, $extensions.hash);
	}
	function getMetadataPath(file, target) {
		if(arguments.length < 2) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		if(target === void 0 || target === null) {
			throw new TypeError("'target' is not nullable");
		}
		return fs.hidden(file, target, $extensions.metadata);
	}
	function isUpToDate(file, target, source) {
		if(arguments.length < 3) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
		}
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		if(target === void 0 || target === null) {
			throw new TypeError("'target' is not nullable");
		}
		if(source === void 0 || source === null) {
			throw new TypeError("'source' is not nullable");
		}
		var hashes;
		try {
			hashes = JSON.parse(fs.readFile(getHashPath(file, target)));
		}
		catch(__ks_0) {
			return false;
		}
		var root = path.dirname(file);
		for(var name in hashes) {
			var hash = hashes[name];
			if(name === ".") {
				if(fs.sha256(source) !== hash) {
					return null;
				}
			}
			else {
				if(fs.sha256(fs.readFile(path.join(root, name))) !== hash) {
					return null;
				}
			}
		}
		return true;
	}
	return {
		Exception: Exception,
		IOException: IOException,
		NotImplementedException: NotImplementedException,
		NotSupportedException: NotSupportedException,
		ReferenceException: ReferenceException,
		SyntaxException: SyntaxException,
		TypeException: TypeException,
		CodeFragment: CodeFragment,
		FragmentBuilder: FragmentBuilder,
		ControlBuilder: ControlBuilder,
		BlockBuilder: BlockBuilder,
		ExpressionBuilder: ExpressionBuilder,
		LineBuilder: LineBuilder,
		ObjectBuilder: ObjectBuilder,
		ArrayBuilder: ArrayBuilder,
		Module: Module,
		Compiler: Compiler,
		compileFile: compileFile,
		getBinaryPath: getBinaryPath,
		getHashPath: getHashPath,
		getMetadataPath: getMetadataPath,
		isUpToDate: isUpToDate,
		extensions: $extensions
	};
}