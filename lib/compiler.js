// Generated by kaoscript 0.9.0
var __ks__ = require("@kaoscript/runtime");
var Helper = __ks__.Helper, KSType = __ks__.Type;
module.exports = function() {
	var metadata = require("../package.json");
	var fs = require("../src/fs.js");
	var path = require("path");
	var AssignmentOperatorKind = {
		Addition: 1,
		BitwiseAnd: 2,
		BitwiseLeftShift: 3,
		BitwiseOr: 4,
		BitwiseRightShift: 5,
		BitwiseXor: 6,
		Division: 7,
		Equality: 8,
		Existential: 9,
		Modulo: 10,
		Multiplication: 11,
		NonExistential: 12,
		NullCoalescing: 13,
		Subtraction: 14
	};
	var BinaryOperatorKind = {
		Addition: 1,
		And: 2,
		Assignment: 3,
		BitwiseAnd: 4,
		BitwiseLeftShift: 5,
		BitwiseOr: 6,
		BitwiseRightShift: 7,
		BitwiseXor: 8,
		Division: 9,
		Equality: 10,
		GreaterThan: 11,
		GreaterThanOrEqual: 12,
		Inequality: 13,
		LessThan: 14,
		LessThanOrEqual: 15,
		Modulo: 16,
		Multiplication: 17,
		NullCoalescing: 18,
		Or: 19,
		Subtraction: 20,
		TypeCasting: 21,
		TypeEquality: 22,
		TypeInequality: 23
	};
	var MacroElementKind = {
		Expression: 1,
		Literal: 2,
		NewLine: 3
	};
	var ModifierKind = {
		Abstract: 1,
		Async: 2,
		AutoEvaluate: 3,
		Override: 4,
		Private: 5,
		Protected: 6,
		Public: 7,
		Rest: 8,
		Sealed: 9,
		SetterAlias: 10,
		Static: 11,
		ThisAlias: 12
	};
	var NodeKind = {
		AccessorDeclaration: 1,
		ArrayBinding: 2,
		ArrayComprehension: 3,
		ArrayExpression: 4,
		ArrayRange: 5,
		AttributeDeclaration: 6,
		AttributeExpression: 7,
		AttributeOperation: 8,
		AwaitExpression: 9,
		BinaryExpression: 10,
		BindingElement: 11,
		Block: 12,
		BreakStatement: 13,
		CallExpression: 14,
		CallMacroExpression: 15,
		CatchClause: 16,
		ClassDeclaration: 17,
		ClassName: 18,
		CommentBlock: 19,
		CommentLine: 20,
		ComputedPropertyName: 21,
		ConditionalExpression: 22,
		ContinueStatement: 23,
		CreateExpression: 24,
		CurryExpression: 25,
		DestroyStatement: 26,
		DiscloseDeclaration: 27,
		DoUntilStatement: 28,
		DoWhileStatement: 29,
		EnumDeclaration: 30,
		EnumExpression: 31,
		EnumMember: 32,
		ExportDeclaration: 33,
		ExportDeclarationSpecifier: 34,
		ExportNamedSpecifier: 35,
		ExportPropertiesSpecifier: 36,
		ExportWildcardSpecifier: 37,
		ExternDeclaration: 38,
		ExternOrRequireDeclaration: 39,
		FieldDeclaration: 40,
		ForFromStatement: 41,
		ForInStatement: 42,
		ForOfStatement: 43,
		ForRangeStatement: 44,
		FunctionDeclaration: 45,
		FunctionExpression: 46,
		Identifier: 47,
		IfExpression: 48,
		IfStatement: 49,
		ImplementDeclaration: 50,
		ImportArgument: 51,
		ImportDeclaration: 52,
		ImportDeclarator: 53,
		ImportNamespaceSpecifier: 54,
		ImportReference: 55,
		ImportSpecifier: 56,
		IncludeAgainDeclaration: 57,
		IncludeDeclaration: 58,
		LambdaExpression: 59,
		Literal: 60,
		MacroDeclaration: 61,
		MacroExpression: 62,
		MemberExpression: 63,
		MethodDeclaration: 64,
		MixinDeclaration: 65,
		Module: 66,
		MutatorDeclaration: 67,
		NamespaceDeclaration: 68,
		NumericExpression: 69,
		ObjectBinding: 70,
		ObjectExpression: 71,
		ObjectMember: 72,
		OmittedExpression: 73,
		Parameter: 74,
		PolyadicExpression: 75,
		PropertyDeclaration: 76,
		RegularExpression: 77,
		RequireDeclaration: 78,
		RequireOrExternDeclaration: 79,
		RequireOrImportDeclaration: 80,
		ReturnStatement: 81,
		SequenceExpression: 82,
		ShorthandProperty: 83,
		SurrogateDeclaration: 84,
		SwitchClause: 85,
		SwitchConditionArray: 86,
		SwitchConditionEnum: 87,
		SwitchConditionObject: 88,
		SwitchConditionRange: 89,
		SwitchConditionType: 90,
		SwitchExpression: 91,
		SwitchStatement: 92,
		SwitchTypeCasting: 93,
		TaggedTemplateExpression: 94,
		TemplateExpression: 95,
		ThisExpression: 96,
		ThrowStatement: 97,
		TraitDeclaration: 98,
		TryStatement: 99,
		TypeAliasDeclaration: 100,
		TypeReference: 101,
		UnaryExpression: 102,
		UnlessExpression: 103,
		UnlessStatement: 104,
		UntilStatement: 105,
		UnionType: 106,
		VariableDeclaration: 107,
		VariableDeclarator: 108,
		WhileStatement: 109
	};
	var ReificationKind = {
		Arguments: 1,
		Block: 2,
		Expression: 3,
		Identifier: 4
	};
	var ScopeKind = {
		Argument: 1,
		Null: 2,
		This: 3
	};
	var UnaryOperatorKind = {
		BitwiseNot: 1,
		DecrementPostfix: 2,
		DecrementPrefix: 3,
		Existential: 4,
		IncrementPostfix: 5,
		IncrementPrefix: 6,
		Negation: 7,
		Negative: 8,
		Spread: 9
	};
	var Parser = (function() {
		var __ks_SyntaxError = {};
		var AST = (function() {
			var $polyadic = {};
			$polyadic[BinaryOperatorKind.Addition] = true;
			$polyadic[BinaryOperatorKind.And] = true;
			$polyadic[BinaryOperatorKind.Assignment] = false;
			$polyadic[BinaryOperatorKind.BitwiseAnd] = true;
			$polyadic[BinaryOperatorKind.BitwiseLeftShift] = true;
			$polyadic[BinaryOperatorKind.BitwiseOr] = true;
			$polyadic[BinaryOperatorKind.BitwiseRightShift] = true;
			$polyadic[BinaryOperatorKind.BitwiseXor] = true;
			$polyadic[BinaryOperatorKind.Division] = true;
			$polyadic[BinaryOperatorKind.Equality] = true;
			$polyadic[BinaryOperatorKind.GreaterThan] = true;
			$polyadic[BinaryOperatorKind.GreaterThanOrEqual] = true;
			$polyadic[BinaryOperatorKind.Inequality] = false;
			$polyadic[BinaryOperatorKind.LessThan] = true;
			$polyadic[BinaryOperatorKind.LessThanOrEqual] = true;
			$polyadic[BinaryOperatorKind.Modulo] = true;
			$polyadic[BinaryOperatorKind.Multiplication] = true;
			$polyadic[BinaryOperatorKind.NullCoalescing] = true;
			$polyadic[BinaryOperatorKind.Or] = true;
			$polyadic[BinaryOperatorKind.Subtraction] = true;
			$polyadic[BinaryOperatorKind.TypeCasting] = false;
			$polyadic[BinaryOperatorKind.TypeEquality] = false;
			$polyadic[BinaryOperatorKind.TypeInequality] = false;
			var $precedence = {};
			$precedence[BinaryOperatorKind.Addition] = 13;
			$precedence[BinaryOperatorKind.And] = 6;
			$precedence[BinaryOperatorKind.Assignment] = 3;
			$precedence[BinaryOperatorKind.BitwiseAnd] = 11;
			$precedence[BinaryOperatorKind.BitwiseLeftShift] = 12;
			$precedence[BinaryOperatorKind.BitwiseOr] = 9;
			$precedence[BinaryOperatorKind.BitwiseRightShift] = 12;
			$precedence[BinaryOperatorKind.BitwiseXor] = 10;
			$precedence[BinaryOperatorKind.Division] = 14;
			$precedence[BinaryOperatorKind.Equality] = 7;
			$precedence[BinaryOperatorKind.GreaterThan] = 8;
			$precedence[BinaryOperatorKind.GreaterThanOrEqual] = 8;
			$precedence[BinaryOperatorKind.Inequality] = 7;
			$precedence[BinaryOperatorKind.LessThan] = 8;
			$precedence[BinaryOperatorKind.LessThanOrEqual] = 8;
			$precedence[BinaryOperatorKind.Modulo] = 14;
			$precedence[BinaryOperatorKind.Multiplication] = 14;
			$precedence[BinaryOperatorKind.NullCoalescing] = 15;
			$precedence[BinaryOperatorKind.Or] = 5;
			$precedence[BinaryOperatorKind.Subtraction] = 13;
			$precedence[BinaryOperatorKind.TypeCasting] = 8;
			$precedence[BinaryOperatorKind.TypeEquality] = 8;
			$precedence[BinaryOperatorKind.TypeInequality] = 8;
			var CONDITIONAL_PRECEDENCE = 4;
			function location() {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				var __ks_i = -1;
				var descriptor = arguments[++__ks_i];
				if(descriptor === void 0 || descriptor === null) {
					throw new TypeError("'descriptor' is not nullable");
				}
				var firstToken = arguments[++__ks_i];
				if(firstToken === void 0 || firstToken === null) {
					throw new TypeError("'firstToken' is not nullable");
				}
				var __ks__;
				var lastToken = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
				if(lastToken === null) {
					if(!KSType.isValue(descriptor.start)) {
						descriptor.start = firstToken.start;
					}
					descriptor.end = firstToken.end;
				}
				else {
					descriptor.start = firstToken.start;
					descriptor.end = lastToken.end;
				}
				return descriptor;
			}
			function reorderExpression(operations) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(operations === void 0 || operations === null) {
					throw new TypeError("'operations' is not nullable");
				}
				var precedences = {};
				var precedenceList = [];
				var precedence;
				for(var i = 1, __ks_5 = operations.length; i < __ks_5; i += 2) {
					if(operations[i].kind === NodeKind.ConditionalExpression) {
						if(precedences[CONDITIONAL_PRECEDENCE]) {
							++precedences[CONDITIONAL_PRECEDENCE];
						}
						else {
							precedences[CONDITIONAL_PRECEDENCE] = 1;
						}
						precedenceList.push(CONDITIONAL_PRECEDENCE);
						i++;
					}
					else {
						precedence = $precedence[operations[i].operator.kind];
						if(precedences[precedence]) {
							++precedences[precedence];
						}
						else {
							precedences[precedence] = 1;
						}
						precedenceList.push(precedence);
					}
				}
				precedenceList = precedenceList.sort(function(a, b) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(a === void 0 || a === null) {
						throw new TypeError("'a' is not nullable");
					}
					if(b === void 0 || b === null) {
						throw new TypeError("'b' is not nullable");
					}
					return b - a;
				});
				var count, k, operator, left;
				for(var __ks_5 = 0, __ks_3 = precedenceList.length; __ks_5 < __ks_3; ++__ks_5) {
					precedence = precedenceList[__ks_5];
					count = precedences[precedence];
					var __ks_6;
					for(k = 1, __ks_6 = operations.length; count && k < __ks_6; k += 2) {
						if(operations[k].kind === NodeKind.ConditionalExpression) {
							if(precedence === CONDITIONAL_PRECEDENCE) {
								--count;
								operator = operations[k];
								operator.condition = operations[k - 1];
								operator.whenTrue = operations[k + 1];
								operator.whenFalse = operations[k + 2];
								operator.start = operator.condition.start;
								operator.end = operator.whenFalse.end;
								operations.splice(k - 1, 4, operator);
								k -= 3;
							}
							else {
								k++;
							}
						}
						else if($precedence[operations[k].operator.kind] === precedence) {
							--count;
							operator = operations[k];
							if(operator.kind === NodeKind.BinaryExpression) {
								left = operations[k - 1];
								if((left.kind === NodeKind.BinaryExpression) && (operator.operator.kind === left.operator.kind) && $polyadic[operator.operator.kind]) {
									operator.kind = NodeKind.PolyadicExpression;
									operator.start = left.start;
									operator.end = operations[k + 1].end;
									operator.operands = [left.left, left.right, operations[k + 1]];
								}
								else if((left.kind === NodeKind.PolyadicExpression) && (operator.operator.kind === left.operator.kind)) {
									left.operands.push(operations[k + 1]);
									left.end = operations[k + 1].end;
									operator = left;
								}
								else {
									operator.left = left;
									operator.right = operations[k + 1];
									operator.start = operator.left.start;
									operator.end = operator.right.end;
								}
							}
							else {
								operator.left = operations[k - 1];
								operator.right = operations[k + 1];
								operator.start = operator.left.start;
								operator.end = operator.right.end;
							}
							operations.splice(k - 1, 3, operator);
							k -= 2;
						}
					}
				}
				return operations[0];
			}
			function AccessorDeclaration() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					return location({
						kind: NodeKind.AccessorDeclaration
					}, first);
				}
				else if(arguments.length === 3) {
					var __ks_i = -1;
					var body = arguments[++__ks_i];
					if(body === void 0 || body === null) {
						throw new TypeError("'body' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					return location({
						kind: NodeKind.AccessorDeclaration,
						body: body.value
					}, first, last);
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function ArrayBinding(elements, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(elements === void 0 || elements === null) {
					throw new TypeError("'elements' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ArrayBinding,
					elements: Helper.mapArray(elements, function(element) {
						return element.value;
					})
				}, first, last);
			}
			function ArrayComprehension(expression, loop, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(loop === void 0 || loop === null) {
					throw new TypeError("'loop' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ArrayComprehension,
					body: expression.value,
					loop: loop.value
				}, first, last);
			}
			function ArrayExpression(values, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(values === void 0 || values === null) {
					throw new TypeError("'values' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ArrayExpression,
					values: Helper.mapArray(values, function(value) {
						return value.value;
					})
				}, first, last);
			}
			function ArrayRangeFI(from, til, by, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(from === void 0 || from === null) {
					throw new TypeError("'from' is not nullable");
				}
				if(til === void 0 || til === null) {
					throw new TypeError("'til' is not nullable");
				}
				if(by === void 0) {
					by = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.ArrayRange,
					from: from.value,
					til: til.value
				}, first, last);
				if(KSType.isValue(by)) {
					node.by = by.value;
				}
				return node;
			}
			function ArrayRangeFO(from, to, by, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(from === void 0 || from === null) {
					throw new TypeError("'from' is not nullable");
				}
				if(to === void 0 || to === null) {
					throw new TypeError("'to' is not nullable");
				}
				if(by === void 0) {
					by = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.ArrayRange,
					from: from.value,
					to: to.value
				}, first, last);
				if(KSType.isValue(by)) {
					node.by = by.value;
				}
				return node;
			}
			function ArrayRangeTI(then, til, by, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(then === void 0 || then === null) {
					throw new TypeError("'then' is not nullable");
				}
				if(til === void 0 || til === null) {
					throw new TypeError("'til' is not nullable");
				}
				if(by === void 0) {
					by = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.ArrayRange,
					then: then.value,
					til: til.value
				}, first, last);
				if(KSType.isValue(by)) {
					node.by = by.value;
				}
				return node;
			}
			function ArrayRangeTO(then, to, by, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(then === void 0 || then === null) {
					throw new TypeError("'then' is not nullable");
				}
				if(to === void 0 || to === null) {
					throw new TypeError("'to' is not nullable");
				}
				if(by === void 0) {
					by = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.ArrayRange,
					then: then.value,
					to: to.value
				}, first, last);
				if(KSType.isValue(by)) {
					node.by = by.value;
				}
				return node;
			}
			function AssignmentOperator(operator, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(operator === void 0 || operator === null) {
					throw new TypeError("'operator' is not nullable");
				}
				else if(!KSType.is(operator, AssignmentOperatorKind)) {
					throw new TypeError("'operator' is not of type 'AssignmentOperatorKind'");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location({
					kind: BinaryOperatorKind.Assignment,
					assignment: operator
				}, first);
			}
			function AttributeDeclaration(declaration, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(declaration === void 0 || declaration === null) {
					throw new TypeError("'declaration' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.AttributeDeclaration,
					declaration: declaration.value
				}, first, last);
			}
			function AttributeExpression(name, __ks_arguments_1, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.AttributeExpression,
					name: name.value,
					arguments: Helper.mapArray(__ks_arguments_1, function(argument) {
						return argument.value;
					})
				}, first, last);
			}
			function AttributeOperation(name, value, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.AttributeOperation,
					name: name.value,
					value: value.value
				}, first, last);
			}
			function AwaitExpression(variables, autotype, operand, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(variables === void 0) {
					variables = null;
				}
				if(autotype === void 0 || autotype === null) {
					throw new TypeError("'autotype' is not nullable");
				}
				if(operand === void 0 || operand === null) {
					throw new TypeError("'operand' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.AwaitExpression,
					operation: operand.value
				}, first, last);
				if(variables !== null) {
					node.variables = Helper.mapArray(variables, function(variable) {
						return variable.value;
					});
				}
				if(autotype) {
					node.autotype = true;
				}
				return node;
			}
			function BinaryExpression() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var operator = arguments[++__ks_i];
					if(operator === void 0 || operator === null) {
						throw new TypeError("'operator' is not nullable");
					}
					return location({
						kind: NodeKind.BinaryExpression,
						operator: operator.value
					}, operator);
				}
				else if(arguments.length >= 3 && arguments.length <= 5) {
					var __ks_i = -1;
					var left = arguments[++__ks_i];
					if(left === void 0 || left === null) {
						throw new TypeError("'left' is not nullable");
					}
					var operator = arguments[++__ks_i];
					if(operator === void 0 || operator === null) {
						throw new TypeError("'operator' is not nullable");
					}
					var right = arguments[++__ks_i];
					if(right === void 0 || right === null) {
						throw new TypeError("'right' is not nullable");
					}
					var __ks__;
					var first = arguments.length > 3 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : left;
					var last = arguments.length > 4 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : right;
					return location({
						kind: NodeKind.BinaryExpression,
						operator: operator.value,
						left: left.value,
						right: right.value
					}, first, last);
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function BinaryOperator(operator, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(operator === void 0 || operator === null) {
					throw new TypeError("'operator' is not nullable");
				}
				else if(!KSType.is(operator, BinaryOperatorKind)) {
					throw new TypeError("'operator' is not of type 'BinaryOperatorKind'");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location({
					kind: operator
				}, first);
			}
			function BindingElement() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					return location({
						kind: NodeKind.BindingElement,
						name: name.value
					}, name);
				}
				else if(arguments.length === 6) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					var alias = arguments[++__ks_i];
					if(alias === void 0) {
						alias = null;
					}
					var spread = arguments[++__ks_i];
					if(spread === void 0) {
						spread = null;
					}
					var defaultValue = arguments[++__ks_i];
					if(defaultValue === void 0) {
						defaultValue = null;
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					var node = location({
						kind: NodeKind.BindingElement,
						name: name.value
					}, first, last);
					if(KSType.isValue(alias)) {
						node.alias = alias.value;
					}
					if(KSType.isValue(spread)) {
						node.spread = true;
					}
					if(KSType.isValue(defaultValue)) {
						node.defaultValue = defaultValue.value;
					}
					return node;
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function Block(attributes, statements, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(statements === void 0 || statements === null) {
					throw new TypeError("'statements' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.Block,
					attributes: Helper.mapArray(attributes, function(attribute) {
						return attribute.value;
					}),
					statements: Helper.mapArray(statements, function(statement) {
						return statement.value;
					})
				}, first, last);
			}
			function BreakStatement(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location({
					kind: NodeKind.BreakStatement
				}, first);
			}
			function CallExpression() {
				if(arguments.length === 4) {
					var __ks_i = -1;
					var callee = arguments[++__ks_i];
					if(callee === void 0 || callee === null) {
						throw new TypeError("'callee' is not nullable");
					}
					var __ks_arguments_1 = arguments[++__ks_i];
					if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
						throw new TypeError("'arguments' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					return location({
						kind: NodeKind.CallExpression,
						scope: {
							kind: ScopeKind.This
						},
						callee: callee.value,
						arguments: Helper.mapArray(__ks_arguments_1.value, function(argument) {
							return argument.value;
						}),
						nullable: false
					}, first, last);
				}
				else if(arguments.length === 6) {
					var __ks_i = -1;
					var scope = arguments[++__ks_i];
					if(scope === void 0 || scope === null) {
						throw new TypeError("'scope' is not nullable");
					}
					var callee = arguments[++__ks_i];
					if(callee === void 0 || callee === null) {
						throw new TypeError("'callee' is not nullable");
					}
					var __ks_arguments_1 = arguments[++__ks_i];
					if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
						throw new TypeError("'arguments' is not nullable");
					}
					var nullable = arguments[++__ks_i];
					if(nullable === void 0 || nullable === null) {
						throw new TypeError("'nullable' is not nullable");
					}
					else if(!KSType.isBoolean(nullable)) {
						throw new TypeError("'nullable' is not of type 'Boolean'");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					return location({
						kind: NodeKind.CallExpression,
						scope: scope,
						callee: callee.value,
						arguments: Helper.mapArray(__ks_arguments_1.value, function(argument) {
							return argument.value;
						}),
						nullable: nullable
					}, first, last);
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function CallMacroExpression(callee, __ks_arguments_1, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(callee === void 0 || callee === null) {
					throw new TypeError("'callee' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.CallMacroExpression,
					callee: callee.value,
					arguments: Helper.mapArray(__ks_arguments_1.value, function(argument) {
						return argument.value;
					})
				}, first, last);
			}
			function CatchClause(binding, type, body, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(binding === void 0) {
					binding = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.CatchClause,
					body: body.value
				}, first, last);
				if(binding !== null) {
					node.binding = binding.value;
				}
				if(type !== null) {
					node.type = type.value;
				}
				return node;
			}
			function ClassDeclaration(name, version, __ks_extends_1, modifiers, members, first, last) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(version === void 0) {
					version = null;
				}
				if(__ks_extends_1 === void 0) {
					__ks_extends_1 = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.ClassDeclaration,
					name: name.value,
					modifiers: Helper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					}),
					members: Helper.mapArray(members, function(member) {
						return member.value;
					})
				}, first, last);
				if(version !== null) {
					node.version = version.value;
				}
				if(__ks_extends_1 !== null) {
					node.extends = __ks_extends_1.value;
				}
				return node;
			}
			function ComputedPropertyName(expression, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ComputedPropertyName,
					expression: expression.value
				}, first, last);
			}
			function ConditionalExpression() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					return location({
						kind: NodeKind.ConditionalExpression
					}, first);
				}
				else if(arguments.length === 3) {
					var __ks_i = -1;
					var condition = arguments[++__ks_i];
					if(condition === void 0 || condition === null) {
						throw new TypeError("'condition' is not nullable");
					}
					var whenTrue = arguments[++__ks_i];
					if(whenTrue === void 0 || whenTrue === null) {
						throw new TypeError("'whenTrue' is not nullable");
					}
					var whenFalse = arguments[++__ks_i];
					if(whenFalse === void 0 || whenFalse === null) {
						throw new TypeError("'whenFalse' is not nullable");
					}
					return location({
						kind: NodeKind.ConditionalExpression,
						condition: condition.value,
						whenTrue: whenTrue.value,
						whenFalse: whenFalse.value
					}, condition, whenFalse);
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function ContinueStatement(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location({
					kind: NodeKind.ContinueStatement
				}, first);
			}
			function CreateExpression(__ks_class_1, __ks_arguments_1, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(__ks_class_1 === void 0 || __ks_class_1 === null) {
					throw new TypeError("'class' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.CreateExpression,
					class: __ks_class_1.value,
					arguments: Helper.mapArray(__ks_arguments_1.value, function(argument) {
						return argument.value;
					})
				}, first, last);
			}
			function CurryExpression(scope, callee, __ks_arguments_1, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				if(callee === void 0 || callee === null) {
					throw new TypeError("'callee' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.CurryExpression,
					scope: scope,
					callee: callee.value,
					arguments: Helper.mapArray(__ks_arguments_1.value, function(argument) {
						return argument.value;
					})
				}, first, last);
			}
			function DestroyStatement(variable, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.DestroyStatement,
					variable: variable.value
				}, first, last);
			}
			function DiscloseDeclaration(name, members, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.DiscloseDeclaration,
					name: name.value,
					members: Helper.mapArray(members, function(member) {
						return member.value;
					})
				}, first, last);
			}
			function DoUntilStatement(condition, body, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.DoUntilStatement,
					condition: condition.value,
					body: body.value
				}, first, last);
			}
			function DoWhileStatement(condition, body, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.DoWhileStatement,
					condition: condition.value,
					body: body.value
				}, first, last);
			}
			function EnumExpression(__ks_enum_1, member) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(__ks_enum_1 === void 0 || __ks_enum_1 === null) {
					throw new TypeError("'enum' is not nullable");
				}
				if(member === void 0 || member === null) {
					throw new TypeError("'member' is not nullable");
				}
				return location({
					kind: NodeKind.EnumExpression,
					enum: __ks_enum_1.value,
					member: member.value
				}, __ks_enum_1, member);
			}
			function EnumDeclaration(name, type, members, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.EnumDeclaration,
					name: name.value,
					members: members
				}, first, last);
				if(type !== null) {
					node.type = type.value;
				}
				return node;
			}
			function EnumMember() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					return location({
						kind: NodeKind.EnumMember,
						name: name.value
					}, name);
				}
				else if(arguments.length === 2) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					var value = arguments[++__ks_i];
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					return location({
						kind: NodeKind.EnumMember,
						name: name.value,
						value: value.value
					}, name, value);
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function ExportDeclaration(declarations, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ExportDeclaration,
					declarations: Helper.mapArray(declarations, function(declarator) {
						return declarator.value;
					})
				}, first, last);
			}
			function ExportDeclarationSpecifier(declaration) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(declaration === void 0 || declaration === null) {
					throw new TypeError("'declaration' is not nullable");
				}
				return location({
					kind: NodeKind.ExportDeclarationSpecifier,
					declaration: declaration.value
				}, declaration);
			}
			function ExportNamedSpecifier(local, exported) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(local === void 0 || local === null) {
					throw new TypeError("'local' is not nullable");
				}
				if(exported === void 0 || exported === null) {
					throw new TypeError("'exported' is not nullable");
				}
				return location({
					kind: NodeKind.ExportNamedSpecifier,
					local: local.value,
					exported: exported.value
				}, local, exported);
			}
			function ExportPropertiesSpecifier(object, properties, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(object === void 0 || object === null) {
					throw new TypeError("'object' is not nullable");
				}
				if(properties === void 0 || properties === null) {
					throw new TypeError("'properties' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ExportPropertiesSpecifier,
					object: object.value,
					properties: properties
				}, object, last);
			}
			function ExportWildcardSpecifier(local, end) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(local === void 0 || local === null) {
					throw new TypeError("'local' is not nullable");
				}
				if(end === void 0 || end === null) {
					throw new TypeError("'end' is not nullable");
				}
				return location({
					kind: NodeKind.ExportWildcardSpecifier,
					local: local.value
				}, local, end);
			}
			function ExternDeclaration(declarations, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ExternDeclaration,
					declarations: Helper.mapArray(declarations, function(declarator) {
						return declarator.value;
					})
				}, first, last);
			}
			function ExternOrRequireDeclaration(declarations, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ExternOrRequireDeclaration,
					declarations: Helper.mapArray(declarations, function(declarator) {
						return declarator.value;
					})
				}, first, last);
			}
			function FieldDeclaration(attributes, modifiers, name, type, defaultValue, first, last) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(attributes === void 0) {
					attributes = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.FieldDeclaration,
					modifiers: Helper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					}),
					name: name.value
				}, first, last);
				if(attributes !== null) {
					node.attributes = Helper.mapArray(attributes.value, function(attribute) {
						return attribute.value;
					});
				}
				if(type !== null) {
					node.type = type.value;
				}
				if(defaultValue !== null) {
					node.defaultValue = defaultValue.value;
				}
				return node;
			}
			function ForFromStatement(declaration, rebindable, variable, from, til, to, by, until, __ks_while_1, when, first, last) {
				if(arguments.length < 12) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 12)");
				}
				if(declaration === void 0 || declaration === null) {
					throw new TypeError("'declaration' is not nullable");
				}
				else if(!KSType.isBoolean(declaration)) {
					throw new TypeError("'declaration' is not of type 'Boolean'");
				}
				if(rebindable === void 0 || rebindable === null) {
					throw new TypeError("'rebindable' is not nullable");
				}
				else if(!KSType.isBoolean(rebindable)) {
					throw new TypeError("'rebindable' is not of type 'Boolean'");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(from === void 0 || from === null) {
					throw new TypeError("'from' is not nullable");
				}
				if(til === void 0) {
					til = null;
				}
				if(to === void 0) {
					to = null;
				}
				if(by === void 0) {
					by = null;
				}
				if(until === void 0) {
					until = null;
				}
				if(__ks_while_1 === void 0) {
					__ks_while_1 = null;
				}
				if(when === void 0) {
					when = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.ForFromStatement,
					variable: variable.value,
					from: from.value,
					declaration: declaration
				}, first, last);
				if(declaration) {
					node.rebindable = rebindable;
				}
				if(til !== null) {
					node.til = til.value;
				}
				else if(to !== null) {
					node.to = to.value;
				}
				if(by !== null) {
					node.by = by.value;
				}
				if(until !== null) {
					node.until = until.value;
				}
				else if(__ks_while_1 !== null) {
					node.while = __ks_while_1.value;
				}
				if(when !== null) {
					node.when = when.value;
				}
				return node;
			}
			function ForInStatement(declaration, rebindable, value, index, expression, desc, from, til, to, until, __ks_while_1, when, first, last) {
				if(arguments.length < 14) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 14)");
				}
				if(declaration === void 0 || declaration === null) {
					throw new TypeError("'declaration' is not nullable");
				}
				else if(!KSType.isBoolean(declaration)) {
					throw new TypeError("'declaration' is not of type 'Boolean'");
				}
				if(rebindable === void 0 || rebindable === null) {
					throw new TypeError("'rebindable' is not nullable");
				}
				else if(!KSType.isBoolean(rebindable)) {
					throw new TypeError("'rebindable' is not of type 'Boolean'");
				}
				if(value === void 0) {
					value = null;
				}
				if(index === void 0) {
					index = null;
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(desc === void 0) {
					desc = null;
				}
				if(from === void 0) {
					from = null;
				}
				if(til === void 0) {
					til = null;
				}
				if(to === void 0) {
					to = null;
				}
				if(until === void 0) {
					until = null;
				}
				if(__ks_while_1 === void 0) {
					__ks_while_1 = null;
				}
				if(when === void 0) {
					when = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.ForInStatement,
					expression: expression.value,
					desc: desc !== null,
					declaration: declaration
				}, first, last);
				if(declaration) {
					node.rebindable = rebindable;
				}
				if(value !== null) {
					node.value = value.value;
				}
				if(index !== null) {
					node.index = index.value;
				}
				if(from !== null) {
					node.from = from.value;
				}
				if(til !== null) {
					node.til = til.value;
				}
				else if(to !== null) {
					node.to = to.value;
				}
				if(until !== null) {
					node.until = until.value;
				}
				else if(__ks_while_1 !== null) {
					node.while = __ks_while_1.value;
				}
				if(when !== null) {
					node.when = when.value;
				}
				return node;
			}
			function ForRangeStatement(declaration, rebindable, value, index, from, then, til, to, by, until, __ks_while_1, when, first, last) {
				if(arguments.length < 14) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 14)");
				}
				if(declaration === void 0 || declaration === null) {
					throw new TypeError("'declaration' is not nullable");
				}
				else if(!KSType.isBoolean(declaration)) {
					throw new TypeError("'declaration' is not of type 'Boolean'");
				}
				if(rebindable === void 0 || rebindable === null) {
					throw new TypeError("'rebindable' is not nullable");
				}
				else if(!KSType.isBoolean(rebindable)) {
					throw new TypeError("'rebindable' is not of type 'Boolean'");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(index === void 0) {
					index = null;
				}
				if(from === void 0) {
					from = null;
				}
				if(then === void 0) {
					then = null;
				}
				if(til === void 0) {
					til = null;
				}
				if(to === void 0) {
					to = null;
				}
				if(by === void 0) {
					by = null;
				}
				if(until === void 0) {
					until = null;
				}
				if(__ks_while_1 === void 0) {
					__ks_while_1 = null;
				}
				if(when === void 0) {
					when = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.ForRangeStatement,
					value: value.value,
					declaration: declaration
				}, first, last);
				if(declaration) {
					node.rebindable = rebindable;
				}
				if(index !== null) {
					node.index = index.value;
				}
				if(from !== null) {
					node.from = from.value;
				}
				else if(then !== null) {
					node.then = then.value;
				}
				if(til !== null) {
					node.til = til.value;
				}
				else if(to !== null) {
					node.to = to.value;
				}
				if(by !== null) {
					node.by = by.value;
				}
				if(until !== null) {
					node.until = until.value;
				}
				else if(__ks_while_1 !== null) {
					node.while = __ks_while_1.value;
				}
				if(when !== null) {
					node.when = when.value;
				}
				return node;
			}
			function ForOfStatement(declaration, rebindable, key, value, expression, until, __ks_while_1, when, first, last) {
				if(arguments.length < 10) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 10)");
				}
				if(declaration === void 0 || declaration === null) {
					throw new TypeError("'declaration' is not nullable");
				}
				else if(!KSType.isBoolean(declaration)) {
					throw new TypeError("'declaration' is not of type 'Boolean'");
				}
				if(rebindable === void 0 || rebindable === null) {
					throw new TypeError("'rebindable' is not nullable");
				}
				else if(!KSType.isBoolean(rebindable)) {
					throw new TypeError("'rebindable' is not of type 'Boolean'");
				}
				if(key === void 0) {
					key = null;
				}
				if(value === void 0) {
					value = null;
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(until === void 0) {
					until = null;
				}
				if(__ks_while_1 === void 0) {
					__ks_while_1 = null;
				}
				if(when === void 0) {
					when = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.ForOfStatement,
					expression: expression.value,
					declaration: declaration
				}, first, last);
				if(declaration) {
					node.rebindable = rebindable;
				}
				if(key !== null) {
					node.key = key.value;
				}
				if(value !== null) {
					node.value = value.value;
				}
				if(until !== null) {
					node.until = until.value;
				}
				else if(__ks_while_1 !== null) {
					node.while = __ks_while_1.value;
				}
				if(when !== null) {
					node.when = when.value;
				}
				return node;
			}
			function FunctionDeclaration(name, parameters, modifiers, type, __ks_throws_1, body, first, last) {
				if(arguments.length < 8) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(parameters === void 0) {
					parameters = null;
				}
				if(modifiers === void 0) {
					modifiers = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(__ks_throws_1 === void 0) {
					__ks_throws_1 = null;
				}
				if(body === void 0) {
					body = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.FunctionDeclaration,
					name: name.value
				}, first, last);
				if(parameters !== null) {
					node.parameters = Helper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					});
				}
				if(modifiers === null) {
					node.modifiers = [];
				}
				else {
					node.modifiers = Helper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
				}
				if(type !== null) {
					node.type = type.value;
				}
				if(__ks_throws_1 === null) {
					node.throws = [];
				}
				else {
					node.throws = Helper.mapArray(__ks_throws_1.value, function(__ks_throw_1) {
						return __ks_throw_1.value;
					});
				}
				if(body !== null) {
					node.body = body.value;
				}
				return node;
			}
			function FunctionExpression(parameters, modifiers, type, __ks_throws_1, body, first, last) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(modifiers === void 0) {
					modifiers = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(__ks_throws_1 === void 0) {
					__ks_throws_1 = null;
				}
				if(body === void 0) {
					body = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.FunctionExpression,
					parameters: Helper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					})
				}, first, last);
				if(modifiers === null) {
					node.modifiers = [];
				}
				else {
					node.modifiers = Helper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
				}
				if(type !== null) {
					node.type = type.value;
				}
				if(__ks_throws_1 === null) {
					node.throws = [];
				}
				else {
					node.throws = Helper.mapArray(__ks_throws_1.value, function(__ks_throw_1) {
						return __ks_throw_1.value;
					});
				}
				if(body !== null) {
					node.body = body.value;
				}
				return node;
			}
			function IfExpression(condition, whenTrue, whenFalse, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(whenTrue === void 0 || whenTrue === null) {
					throw new TypeError("'whenTrue' is not nullable");
				}
				if(whenFalse === void 0) {
					whenFalse = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.IfExpression,
					condition: condition.value,
					whenTrue: whenTrue.value
				}, first, last);
				if(whenFalse !== null) {
					node.whenFalse = whenFalse.value;
				}
				return node;
			}
			function IfStatement(condition, whenTrue, whenFalse, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(whenTrue === void 0 || whenTrue === null) {
					throw new TypeError("'whenTrue' is not nullable");
				}
				if(whenFalse === void 0) {
					whenFalse = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.IfStatement,
					condition: condition.value,
					whenTrue: whenTrue.value
				}, first, last);
				if(whenFalse !== null) {
					node.whenFalse = whenFalse.value;
				}
				return node;
			}
			function ImplementDeclaration(variable, properties, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(properties === void 0 || properties === null) {
					throw new TypeError("'properties' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ImplementDeclaration,
					variable: variable.value,
					properties: Helper.mapArray(properties, function(property) {
						return property.value;
					})
				}, first, last);
			}
			function ImportArgument() {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				var __ks_i = -1;
				var seep = arguments[++__ks_i];
				if(seep === void 0) {
					seep = null;
				}
				var imported = arguments[++__ks_i];
				if(imported === void 0 || imported === null) {
					throw new TypeError("'imported' is not nullable");
				}
				var __ks__;
				var local = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
				return location({
					kind: NodeKind.ImportArgument,
					imported: imported.value,
					local: local.value,
					seeped: seep !== null
				}, KSType.isValue(seep) ? seep : imported, KSType.isValue(local) ? local : imported);
			}
			function ImportDeclaration(declarations, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ImportDeclaration,
					declarations: Helper.mapArray(declarations, function(declaration) {
						return declaration.value;
					})
				}, first, last);
			}
			function ImportDeclarator(source, specifiers, __ks_arguments_1, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(source === void 0 || source === null) {
					throw new TypeError("'source' is not nullable");
				}
				if(specifiers === void 0 || specifiers === null) {
					throw new TypeError("'specifiers' is not nullable");
				}
				if(__ks_arguments_1 === void 0) {
					__ks_arguments_1 = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.ImportDeclarator,
					source: source.value,
					specifiers: Helper.mapArray(specifiers, function(specifier) {
						return specifier.value;
					})
				}, first, last);
				if(__ks_arguments_1 !== null) {
					node.arguments = __ks_arguments_1;
				}
				return node;
			}
			function ImportNamespaceSpecifier(local, specifiers, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(local === void 0 || local === null) {
					throw new TypeError("'local' is not nullable");
				}
				if(specifiers === void 0) {
					specifiers = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.ImportNamespaceSpecifier,
					local: local.value
				}, first, last);
				if(specifiers !== null) {
					node.specifiers = Helper.mapArray(specifiers, function(specifier) {
						return specifier.value;
					});
				}
				return node;
			}
			function ImportSpecifier(imported, local, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(imported === void 0 || imported === null) {
					throw new TypeError("'imported' is not nullable");
				}
				if(local === void 0 || local === null) {
					throw new TypeError("'local' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ImportSpecifier,
					imported: imported.value,
					local: local.value
				}, first, last);
			}
			function Identifier(name, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location({
					kind: NodeKind.Identifier,
					name: name
				}, first);
			}
			function IncludeAgainDeclaration(files, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(files === void 0 || files === null) {
					throw new TypeError("'files' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.IncludeAgainDeclaration,
					files: files
				}, first, last);
			}
			function IncludeDeclaration(files, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(files === void 0 || files === null) {
					throw new TypeError("'files' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.IncludeDeclaration,
					files: files
				}, first, last);
			}
			function LambdaExpression(parameters, modifiers, type, body, first, last) {
				if(arguments.length < 6) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(modifiers === void 0) {
					modifiers = null;
				}
				if(type === void 0) {
					type = null;
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.LambdaExpression,
					modifiers: [],
					parameters: Helper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					}),
					body: body.value
				}, first, last);
				if(modifiers === null) {
					node.modifiers = [];
				}
				else {
					node.modifiers = Helper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					});
				}
				if(type !== null) {
					node.type = type.value;
				}
				return node;
			}
			function Literal() {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				var __ks_i = -1;
				var value = arguments[++__ks_i];
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var __ks__;
				var last = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
				return location({
					kind: NodeKind.Literal,
					value: value
				}, first, last);
			}
			function MacroDeclaration() {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				var __ks_i = -1;
				var __ks__;
				var attributes = arguments.length > 5 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : [];
				var name = arguments[++__ks_i];
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				var parameters = arguments[++__ks_i];
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				var body = arguments[++__ks_i];
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var last = arguments[++__ks_i];
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.MacroDeclaration,
					attributes: attributes,
					name: name.value,
					parameters: Helper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					}),
					body: body.value
				}, first, last);
			}
			function MacroExpression(elements, multilines, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(elements === void 0 || elements === null) {
					throw new TypeError("'elements' is not nullable");
				}
				if(multilines === void 0 || multilines === null) {
					throw new TypeError("'multilines' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.MacroExpression,
					elements: Helper.mapArray(elements, function(element) {
						return element.value;
					}),
					multilines: multilines
				}, first, last);
			}
			function MacroElementExpression(expression, reification, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(reification === void 0) {
					reification = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: MacroElementKind.Expression,
					expression: expression.value
				}, first, last);
				if(reification === null) {
					node.reification = {
						kind: ReificationKind.Expression
					};
				}
				else {
					node.reification = reification;
				}
				return node;
			}
			function MacroElementLiteral(value, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: MacroElementKind.Literal,
					value: value
				}, first, last);
			}
			function MacroElementNewLine(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location({
					kind: MacroElementKind.NewLine
				}, first);
			}
			function MacroReification(value, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(value === "a") {
					return location({
						kind: ReificationKind.Arguments
					}, first);
				}
				else if(value === "b") {
					return location({
						kind: ReificationKind.Block
					}, first);
				}
				else if(value === "e") {
					return location({
						kind: ReificationKind.Expression
					}, first);
				}
				else if(value === "i") {
					return location({
						kind: ReificationKind.Identifier
					}, first);
				}
			}
			function MemberExpression() {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				var __ks_i = -1;
				var object = arguments[++__ks_i];
				if(object === void 0 || object === null) {
					throw new TypeError("'object' is not nullable");
				}
				var property = arguments[++__ks_i];
				if(property === void 0 || property === null) {
					throw new TypeError("'property' is not nullable");
				}
				var computed = arguments[++__ks_i];
				if(computed === void 0 || computed === null) {
					throw new TypeError("'computed' is not nullable");
				}
				var nullable = arguments[++__ks_i];
				if(nullable === void 0 || nullable === null) {
					throw new TypeError("'nullable' is not nullable");
				}
				var __ks__;
				var first = arguments.length > 4 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : object;
				var last = arguments.length > 5 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : property;
				return location({
					kind: NodeKind.MemberExpression,
					object: object.value,
					property: property.value,
					computed: computed,
					nullable: nullable
				}, first, last);
			}
			function MethodDeclaration(attributes, modifiers, name, parameters, type, __ks_throws_1, body, first, last) {
				if(arguments.length < 9) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 9)");
				}
				if(attributes === void 0) {
					attributes = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(__ks_throws_1 === void 0) {
					__ks_throws_1 = null;
				}
				if(body === void 0) {
					body = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.MethodDeclaration,
					modifiers: Helper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					}),
					name: name.value,
					parameters: Helper.mapArray(parameters.value, function(parameter) {
						return parameter.value;
					})
				}, first, last);
				if(attributes !== null) {
					node.attributes = Helper.mapArray(attributes.value, function(attribute) {
						return attribute.value;
					});
				}
				if(type !== null) {
					node.type = type.value;
				}
				if(__ks_throws_1 === null) {
					node.throws = [];
				}
				else {
					node.throws = Helper.mapArray(__ks_throws_1.value, function(__ks_throw_1) {
						return __ks_throw_1.value;
					});
				}
				if(body !== null) {
					node.body = body.value;
				}
				return node;
			}
			function Modifier() {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				var __ks_i = -1;
				var kind = arguments[++__ks_i];
				if(kind === void 0 || kind === null) {
					throw new TypeError("'kind' is not nullable");
				}
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var __ks__;
				var last = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
				return location({
					kind: kind
				}, first, last);
			}
			function Module(attributes, body, parser) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(attributes === void 0 || attributes === null) {
					throw new TypeError("'attributes' is not nullable");
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(parser === void 0 || parser === null) {
					throw new TypeError("'parser' is not nullable");
				}
				else if(!KSType.is(parser, Parser)) {
					throw new TypeError("'parser' is not of type 'Parser'");
				}
				return location({
					kind: NodeKind.Module,
					attributes: Helper.mapArray(attributes, function(attribute) {
						return attribute.value;
					}),
					body: body,
					start: {
						line: 1,
						column: 1
					}
				}, parser.position());
			}
			function MutatorDeclaration() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					return location({
						kind: NodeKind.MutatorDeclaration
					}, first);
				}
				else if(arguments.length === 3) {
					var __ks_i = -1;
					var body = arguments[++__ks_i];
					if(body === void 0 || body === null) {
						throw new TypeError("'body' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					return location({
						kind: NodeKind.MutatorDeclaration,
						body: body.value
					}, first, last);
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function Nullable(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location({
					kind: NodeKind.TypeReference,
					typeName: {
						kind: NodeKind.Identifier,
						name: "any"
					},
					nullable: true
				}, first);
			}
			function NamespaceDeclaration(modifiers, name, statements, first, last) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(statements === void 0 || statements === null) {
					throw new TypeError("'statements' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.NamespaceDeclaration,
					modifiers: Helper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					}),
					name: name.value,
					statements: Helper.mapArray(statements, function(statement) {
						return statement.value;
					})
				}, first, last);
			}
			function NumericExpression(value, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location({
					kind: NodeKind.NumericExpression,
					value: value
				}, first);
			}
			function ObjectBinding(elements, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(elements === void 0 || elements === null) {
					throw new TypeError("'elements' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ObjectBinding,
					elements: Helper.mapArray(elements, function(element) {
						return element.value;
					})
				}, first, last);
			}
			function ObjectExpression(properties, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(properties === void 0 || properties === null) {
					throw new TypeError("'properties' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ObjectExpression,
					properties: Helper.mapArray(properties, function(property) {
						return property.value;
					})
				}, first, last);
			}
			function ObjectMember() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					return location({
						kind: NodeKind.ObjectMember,
						name: name.value
					}, name, name);
				}
				else if(arguments.length === 2) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					var value = arguments[++__ks_i];
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					return location({
						kind: NodeKind.ObjectMember,
						name: name.value,
						value: value.value
					}, name, value);
				}
				else if(arguments.length === 5) {
					var __ks_i = -1;
					var attributes = arguments[++__ks_i];
					if(attributes === void 0) {
						attributes = null;
					}
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					var value = arguments[++__ks_i];
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					var node = location({
						kind: NodeKind.ObjectMember,
						name: name.value,
						value: value.value
					}, first, last);
					if(attributes !== null) {
						node.attributes = Helper.mapArray(attributes.value, function(attribute) {
							return attribute.value;
						});
					}
					return node;
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function ObjectReference(properties, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(properties === void 0 || properties === null) {
					throw new TypeError("'properties' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.TypeReference,
					typeName: {
						kind: NodeKind.Identifier,
						name: "object"
					},
					properties: Helper.mapArray(properties, function(property) {
						return property.value;
					})
				}, first, last);
			}
			function ObjectMemberReference(name, type) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				var node;
				return node = location({
					kind: NodeKind.ObjectMember,
					name: name.value,
					type: type.value
				}, name, type);
			}
			function OmittedExpression(spread, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(spread === void 0 || spread === null) {
					throw new TypeError("'spread' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var node = location({
					kind: NodeKind.OmittedExpression
				}, first);
				if(spread) {
					node.spread = true;
				}
				else {
					node.end = node.start;
				}
				return node;
			}
			function PropertyDeclaration(attributes, modifiers, name, type, defaultValue, accessor, mutator, first, last) {
				if(arguments.length < 9) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 9)");
				}
				if(attributes === void 0) {
					attributes = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(defaultValue === void 0) {
					defaultValue = null;
				}
				if(accessor === void 0) {
					accessor = null;
				}
				if(mutator === void 0) {
					mutator = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.PropertyDeclaration,
					modifiers: Helper.mapArray(modifiers, function(modifier) {
						return modifier.value;
					}),
					name: name.value
				}, first, last);
				if(attributes !== null) {
					node.attributes = Helper.mapArray(attributes.value, function(attribute) {
						return attribute.value;
					});
				}
				if(type !== null) {
					node.type = type.value;
				}
				if(defaultValue !== null) {
					node.defaultValue = defaultValue.value;
				}
				if(accessor !== null) {
					node.accessor = accessor.value;
				}
				if(mutator !== null) {
					node.mutator = mutator.value;
				}
				return node;
			}
			function Parameter() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					return location({
						kind: NodeKind.Parameter,
						modifiers: [],
						name: name.value
					}, name, name);
				}
				else if(arguments.length === 6) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0) {
						name = null;
					}
					var type = arguments[++__ks_i];
					if(type === void 0) {
						type = null;
					}
					var modifiers = arguments[++__ks_i];
					if(modifiers === void 0 || modifiers === null) {
						throw new TypeError("'modifiers' is not nullable");
					}
					var defaultValue = arguments[++__ks_i];
					if(defaultValue === void 0) {
						defaultValue = null;
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					var node = location({
						kind: NodeKind.Parameter,
						modifiers: modifiers
					}, first, last);
					if(name !== null) {
						node.name = name.value;
					}
					if(type !== null) {
						node.type = type.value;
					}
					if(defaultValue !== null) {
						node.defaultValue = defaultValue.value;
					}
					return node;
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function RegularExpression(value, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location({
					kind: NodeKind.RegularExpression,
					value: value
				}, first);
			}
			function RequireDeclaration(declarations, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.RequireDeclaration,
					declarations: Helper.mapArray(declarations, function(declarator) {
						return declarator.value;
					})
				}, first, last);
			}
			function RequireOrExternDeclaration(declarations, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.RequireOrExternDeclaration,
					declarations: Helper.mapArray(declarations, function(declarator) {
						return declarator.value;
					})
				}, first, last);
			}
			function RequireOrImportDeclaration(declarations, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(declarations === void 0 || declarations === null) {
					throw new TypeError("'declarations' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.RequireOrImportDeclaration,
					declarations: Helper.mapArray(declarations, function(declaration) {
						return declaration.value;
					})
				}, first, last);
			}
			function RestModifier(min, max, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(min === void 0 || min === null) {
					throw new TypeError("'min' is not nullable");
				}
				if(max === void 0 || max === null) {
					throw new TypeError("'max' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: ModifierKind.Rest,
					arity: {
						min: min,
						max: max
					}
				}, first, last);
			}
			function ReturnStatement() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					return location({
						kind: NodeKind.ReturnStatement
					}, first, first);
				}
				else if(arguments.length === 3) {
					var __ks_i = -1;
					var value = arguments[++__ks_i];
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					return location({
						kind: NodeKind.ReturnStatement,
						value: value.value
					}, first, last);
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function Scope() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var scope = arguments[++__ks_i];
					if(scope === void 0 || scope === null) {
						throw new TypeError("'scope' is not nullable");
					}
					else if(!KSType.is(scope, ScopeKind)) {
						throw new TypeError("'scope' is not of type 'ScopeKind'");
					}
					return {
						kind: scope
					};
				}
				else if(arguments.length === 2) {
					var __ks_i = -1;
					var scope = arguments[++__ks_i];
					if(scope === void 0 || scope === null) {
						throw new TypeError("'scope' is not nullable");
					}
					else if(!KSType.is(scope, ScopeKind)) {
						throw new TypeError("'scope' is not of type 'ScopeKind'");
					}
					var value = arguments[++__ks_i];
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					return {
						kind: scope,
						value: value.value
					};
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function SequenceExpression(expressions, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(expressions === void 0 || expressions === null) {
					throw new TypeError("'expressions' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.SequenceExpression,
					expressions: Helper.mapArray(expressions, function(expression) {
						return expression.value;
					})
				}, first, last);
			}
			function ShorthandProperty(attributes, name, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0) {
					attributes = null;
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.ShorthandProperty,
					name: name.value
				}, first, last);
				if(attributes !== null) {
					node.attributes = Helper.mapArray(attributes.value, function(attribute) {
						return attribute.value;
					});
				}
				return node;
			}
			function SwitchClause(conditions, bindings, filter, body, first, last) {
				if(arguments.length < 6) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(conditions === void 0) {
					conditions = null;
				}
				if(bindings === void 0) {
					bindings = null;
				}
				if(filter === void 0) {
					filter = null;
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.SwitchClause,
					body: body.value
				}, first, last);
				if(conditions === null) {
					node.conditions = [];
				}
				else {
					node.conditions = Helper.mapArray(conditions, function(condition) {
						return condition.value;
					});
				}
				if(bindings === null) {
					node.bindings = [];
				}
				else {
					node.bindings = Helper.mapArray(bindings.value, function(binding) {
						return binding.value;
					});
				}
				if(filter !== null) {
					node.filter = filter.value;
				}
				return node;
			}
			function SwitchConditionArray(values, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(values === void 0 || values === null) {
					throw new TypeError("'values' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.SwitchConditionArray,
					values: Helper.mapArray(values, function(value) {
						return value.value;
					})
				}, first, last);
			}
			function SwitchConditionObject(members, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.SwitchConditionObject,
					members: Helper.mapArray(members, function(member) {
						return member.value;
					})
				}, first, last);
			}
			function SwitchConditionRangeFO(from, to) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(from === void 0 || from === null) {
					throw new TypeError("'from' is not nullable");
				}
				if(to === void 0 || to === null) {
					throw new TypeError("'to' is not nullable");
				}
				return location({
					kind: NodeKind.SwitchConditionRange,
					from: from.value,
					to: to.value
				}, from, to);
			}
			function SwitchConditionType(type, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.SwitchConditionType,
					type: type.value
				}, first, last);
			}
			function SwitchExpression(expression, clauses, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(clauses === void 0 || clauses === null) {
					throw new TypeError("'clauses' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.SwitchExpression,
					expression: expression.value,
					clauses: Helper.mapArray(clauses.value, function(clause) {
						return clause;
					})
				}, first, last);
			}
			function SwitchStatement(expression, clauses, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(clauses === void 0 || clauses === null) {
					throw new TypeError("'clauses' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.SwitchStatement,
					expression: expression.value,
					clauses: Helper.mapArray(clauses.value, function(clause) {
						return clause;
					})
				}, first, last);
			}
			function SwitchTypeCasting(name, type) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				return location({
					kind: NodeKind.SwitchTypeCasting,
					name: name.value,
					type: type.value
				}, name, type);
			}
			function TaggedTemplateExpression(tag, template, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(tag === void 0 || tag === null) {
					throw new TypeError("'tag' is not nullable");
				}
				if(template === void 0 || template === null) {
					throw new TypeError("'template' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.TaggedTemplateExpression,
					tag: tag.value,
					template: template.value
				}, first, last);
			}
			function TemplateExpression(elements, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(elements === void 0 || elements === null) {
					throw new TypeError("'elements' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.TemplateExpression,
					elements: Helper.mapArray(elements, function(element) {
						return element.value;
					})
				}, first, last);
			}
			function ThisExpression(name, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.ThisExpression,
					name: name.value
				}, first, last);
			}
			function ThrowStatement() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					return location({
						kind: NodeKind.ThrowStatement
					}, first);
				}
				else if(arguments.length === 3) {
					var __ks_i = -1;
					var value = arguments[++__ks_i];
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					return location({
						kind: NodeKind.ThrowStatement,
						value: value.value
					}, first, last);
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function TryStatement(body, catchClauses, catchClause, finalizer, first, last) {
				if(arguments.length < 6) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(catchClauses === void 0 || catchClauses === null) {
					throw new TypeError("'catchClauses' is not nullable");
				}
				if(catchClause === void 0) {
					catchClause = null;
				}
				if(finalizer === void 0) {
					finalizer = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				var node = location({
					kind: NodeKind.TryStatement,
					body: body.value,
					catchClauses: Helper.mapArray(catchClauses, function(clause) {
						return clause.value;
					})
				}, first, last);
				if(catchClause !== null) {
					node.catchClause = catchClause.value;
				}
				if(finalizer !== null) {
					node.finalizer = finalizer.value;
				}
				return node;
			}
			function TypeReference() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					return location({
						kind: NodeKind.TypeReference,
						typeName: name.value
					}, name);
				}
				else if(arguments.length === 5) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					var parameters = arguments[++__ks_i];
					if(parameters === void 0) {
						parameters = null;
					}
					var nullable = arguments[++__ks_i];
					if(nullable === void 0) {
						nullable = null;
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					var node;
					if(parameters === null) {
						node = location({
							kind: NodeKind.TypeReference,
							typeName: name.value
						}, first, last);
					}
					else {
						node = location({
							kind: NodeKind.TypeReference,
							typeName: name.value,
							typeParameters: Helper.mapArray(parameters.value, function(parameter) {
								return parameter.value;
							})
						}, first, last);
					}
					if(KSType.isValue(nullable) ? nullable.ok : false) {
						node.nullable = true;
					}
					return node;
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function TypeAliasDeclaration(name, type, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.TypeAliasDeclaration,
					name: name.value,
					type: type.value
				}, first, last);
			}
			function UnaryExpression(operator, operand, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(operator === void 0 || operator === null) {
					throw new TypeError("'operator' is not nullable");
				}
				if(operand === void 0 || operand === null) {
					throw new TypeError("'operand' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.UnaryExpression,
					operator: operator.value,
					argument: operand.value
				}, first, last);
			}
			function UnaryOperator(operator, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(operator === void 0 || operator === null) {
					throw new TypeError("'operator' is not nullable");
				}
				else if(!KSType.is(operator, UnaryOperatorKind)) {
					throw new TypeError("'operator' is not of type 'UnaryOperatorKind'");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return location({
					kind: operator
				}, first);
			}
			function UnionType(types, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(types === void 0 || types === null) {
					throw new TypeError("'types' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.UnionType,
					types: Helper.mapArray(types, function(type) {
						return type.value;
					})
				}, first, last);
			}
			function UnlessExpression(condition, whenFalse, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(whenFalse === void 0 || whenFalse === null) {
					throw new TypeError("'whenFalse' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.UnlessExpression,
					condition: condition.value,
					whenFalse: whenFalse.value
				}, first, last);
			}
			function UnlessStatement(condition, whenFalse, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(whenFalse === void 0 || whenFalse === null) {
					throw new TypeError("'whenFalse' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.UnlessStatement,
					condition: condition.value,
					whenFalse: whenFalse.value
				}, first, last);
			}
			function UntilStatement(condition, body, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.UntilStatement,
					condition: condition.value,
					body: body.value
				}, first, last);
			}
			function VariableDeclaration() {
				if(arguments.length === 4) {
					var __ks_i = -1;
					var variables = arguments[++__ks_i];
					if(variables === void 0 || variables === null) {
						throw new TypeError("'variables' is not nullable");
					}
					var rebindable = arguments[++__ks_i];
					if(rebindable === void 0 || rebindable === null) {
						throw new TypeError("'rebindable' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					return location({
						kind: NodeKind.VariableDeclaration,
						rebindable: rebindable,
						variables: Helper.mapArray(variables, function(variable) {
							return variable.value;
						})
					}, first, last);
				}
				else if(arguments.length === 7) {
					var __ks_i = -1;
					var variables = arguments[++__ks_i];
					if(variables === void 0 || variables === null) {
						throw new TypeError("'variables' is not nullable");
					}
					var rebindable = arguments[++__ks_i];
					if(rebindable === void 0 || rebindable === null) {
						throw new TypeError("'rebindable' is not nullable");
					}
					var equals = arguments[++__ks_i];
					if(equals === void 0 || equals === null) {
						throw new TypeError("'equals' is not nullable");
					}
					var isAwait = arguments[++__ks_i];
					if(isAwait === void 0 || isAwait === null) {
						throw new TypeError("'isAwait' is not nullable");
					}
					var expression = arguments[++__ks_i];
					if(expression === void 0 || expression === null) {
						throw new TypeError("'expression' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					return location({
						kind: NodeKind.VariableDeclaration,
						rebindable: rebindable,
						variables: Helper.mapArray(variables, function(variable) {
							return variable.value;
						}),
						autotype: equals.value,
						await: isAwait,
						init: expression.value
					}, first, last);
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function VariableDeclarator() {
				if(arguments.length === 1) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					return location({
						kind: NodeKind.VariableDeclarator,
						name: name.value
					}, name);
				}
				else if(arguments.length === 2) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					var type = arguments[++__ks_i];
					if(type === void 0 || type === null) {
						throw new TypeError("'type' is not nullable");
					}
					return location({
						kind: NodeKind.VariableDeclarator,
						name: name.value,
						type: type.value
					}, name, type);
				}
				else if(arguments.length === 5) {
					var __ks_i = -1;
					var name = arguments[++__ks_i];
					if(name === void 0 || name === null) {
						throw new TypeError("'name' is not nullable");
					}
					var type = arguments[++__ks_i];
					if(type === void 0) {
						type = null;
					}
					var __ks_sealed_1 = arguments[++__ks_i];
					if(__ks_sealed_1 === void 0 || __ks_sealed_1 === null) {
						throw new TypeError("'sealed' is not nullable");
					}
					var first = arguments[++__ks_i];
					if(first === void 0 || first === null) {
						throw new TypeError("'first' is not nullable");
					}
					var last = arguments[++__ks_i];
					if(last === void 0 || last === null) {
						throw new TypeError("'last' is not nullable");
					}
					var node = location({
						kind: NodeKind.VariableDeclarator,
						name: name.value,
						sealed: __ks_sealed_1
					}, first, last);
					if(type !== null) {
						node.type = type.value;
					}
					return node;
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			};
			function WhileStatement(condition, body, first, last) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(condition === void 0 || condition === null) {
					throw new TypeError("'condition' is not nullable");
				}
				if(body === void 0 || body === null) {
					throw new TypeError("'body' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return location({
					kind: NodeKind.WhileStatement,
					condition: condition.value,
					body: body.value
				}, first, last);
			}
			return {
				reorderExpression: reorderExpression,
				AccessorDeclaration: AccessorDeclaration,
				ArrayBinding: ArrayBinding,
				ArrayComprehension: ArrayComprehension,
				ArrayExpression: ArrayExpression,
				ArrayRangeFI: ArrayRangeFI,
				ArrayRangeFO: ArrayRangeFO,
				ArrayRangeTI: ArrayRangeTI,
				ArrayRangeTO: ArrayRangeTO,
				AssignmentOperator: AssignmentOperator,
				AttributeDeclaration: AttributeDeclaration,
				AttributeExpression: AttributeExpression,
				AttributeOperation: AttributeOperation,
				AwaitExpression: AwaitExpression,
				BinaryExpression: BinaryExpression,
				BinaryOperator: BinaryOperator,
				BindingElement: BindingElement,
				Block: Block,
				BreakStatement: BreakStatement,
				CallExpression: CallExpression,
				CallMacroExpression: CallMacroExpression,
				CatchClause: CatchClause,
				ClassDeclaration: ClassDeclaration,
				ComputedPropertyName: ComputedPropertyName,
				ConditionalExpression: ConditionalExpression,
				ContinueStatement: ContinueStatement,
				CreateExpression: CreateExpression,
				CurryExpression: CurryExpression,
				DestroyStatement: DestroyStatement,
				DiscloseDeclaration: DiscloseDeclaration,
				DoUntilStatement: DoUntilStatement,
				DoWhileStatement: DoWhileStatement,
				EnumExpression: EnumExpression,
				EnumDeclaration: EnumDeclaration,
				EnumMember: EnumMember,
				ExportDeclaration: ExportDeclaration,
				ExportDeclarationSpecifier: ExportDeclarationSpecifier,
				ExportNamedSpecifier: ExportNamedSpecifier,
				ExportPropertiesSpecifier: ExportPropertiesSpecifier,
				ExportWildcardSpecifier: ExportWildcardSpecifier,
				ExternDeclaration: ExternDeclaration,
				ExternOrRequireDeclaration: ExternOrRequireDeclaration,
				FieldDeclaration: FieldDeclaration,
				ForFromStatement: ForFromStatement,
				ForInStatement: ForInStatement,
				ForRangeStatement: ForRangeStatement,
				ForOfStatement: ForOfStatement,
				FunctionDeclaration: FunctionDeclaration,
				FunctionExpression: FunctionExpression,
				IfExpression: IfExpression,
				IfStatement: IfStatement,
				ImplementDeclaration: ImplementDeclaration,
				ImportArgument: ImportArgument,
				ImportDeclaration: ImportDeclaration,
				ImportDeclarator: ImportDeclarator,
				ImportNamespaceSpecifier: ImportNamespaceSpecifier,
				ImportSpecifier: ImportSpecifier,
				Identifier: Identifier,
				IncludeAgainDeclaration: IncludeAgainDeclaration,
				IncludeDeclaration: IncludeDeclaration,
				LambdaExpression: LambdaExpression,
				Literal: Literal,
				MacroDeclaration: MacroDeclaration,
				MacroExpression: MacroExpression,
				MacroElementExpression: MacroElementExpression,
				MacroElementLiteral: MacroElementLiteral,
				MacroElementNewLine: MacroElementNewLine,
				MacroReification: MacroReification,
				MemberExpression: MemberExpression,
				MethodDeclaration: MethodDeclaration,
				Modifier: Modifier,
				Module: Module,
				MutatorDeclaration: MutatorDeclaration,
				Nullable: Nullable,
				NamespaceDeclaration: NamespaceDeclaration,
				NumericExpression: NumericExpression,
				ObjectBinding: ObjectBinding,
				ObjectExpression: ObjectExpression,
				ObjectMember: ObjectMember,
				ObjectReference: ObjectReference,
				ObjectMemberReference: ObjectMemberReference,
				OmittedExpression: OmittedExpression,
				PropertyDeclaration: PropertyDeclaration,
				Parameter: Parameter,
				RegularExpression: RegularExpression,
				RequireDeclaration: RequireDeclaration,
				RequireOrExternDeclaration: RequireOrExternDeclaration,
				RequireOrImportDeclaration: RequireOrImportDeclaration,
				RestModifier: RestModifier,
				ReturnStatement: ReturnStatement,
				Scope: Scope,
				SequenceExpression: SequenceExpression,
				ShorthandProperty: ShorthandProperty,
				SwitchClause: SwitchClause,
				SwitchConditionArray: SwitchConditionArray,
				SwitchConditionObject: SwitchConditionObject,
				SwitchConditionRangeFO: SwitchConditionRangeFO,
				SwitchConditionType: SwitchConditionType,
				SwitchExpression: SwitchExpression,
				SwitchStatement: SwitchStatement,
				SwitchTypeCasting: SwitchTypeCasting,
				TaggedTemplateExpression: TaggedTemplateExpression,
				TemplateExpression: TemplateExpression,
				ThisExpression: ThisExpression,
				ThrowStatement: ThrowStatement,
				TryStatement: TryStatement,
				TypeReference: TypeReference,
				TypeAliasDeclaration: TypeAliasDeclaration,
				UnaryExpression: UnaryExpression,
				UnaryOperator: UnaryOperator,
				UnionType: UnionType,
				UnlessExpression: UnlessExpression,
				UnlessStatement: UnlessStatement,
				UntilStatement: UntilStatement,
				VariableDeclaration: VariableDeclaration,
				VariableDeclarator: VariableDeclarator,
				WhileStatement: WhileStatement
			};
		})();
		var Token = {
			INVALID: 0,
			ABSTRACT: 1,
			AMPERSAND: 2,
			AMPERSAND_AMPERSAND: 3,
			AMPERSAND_EQUALS: 4,
			AS: 5,
			ASTERISK: 6,
			ASTERISK_ASTERISK_LEFT_ROUND: 7,
			ASTERISK_DOLLAR_LEFT_ROUND: 8,
			ASTERISK_EQUALS: 9,
			ASYNC: 10,
			AT: 11,
			AWAIT: 12,
			BINARY_NUMBER: 13,
			BREAK: 14,
			BY: 15,
			CARET: 16,
			CARET_AT_LEFT_ROUND: 17,
			CARET_CARET_LEFT_ROUND: 18,
			CARET_DOLLAR_LEFT_ROUND: 19,
			CARET_EQUALS: 20,
			CATCH: 21,
			CLASS: 22,
			CLASS_VERSION: 23,
			COLON: 24,
			COLON_COLON: 25,
			COLON_EQUALS: 26,
			COMMA: 27,
			CONST: 28,
			CONTINUE: 29,
			DECIMAL_NUMBER: 30,
			DELETE: 31,
			DESC: 32,
			DISCLOSE: 33,
			DO: 34,
			DOT: 35,
			DOT_DOT: 36,
			DOT_DOT_DOT: 37,
			ELSE: 38,
			ELSE_IF: 39,
			ENUM: 40,
			EOF: 41,
			EQUALS: 42,
			EQUALS_EQUALS: 43,
			EQUALS_RIGHT_ANGLE: 44,
			EXCLAMATION: 45,
			EXCLAMATION_EQUALS: 46,
			EXCLAMATION_LEFT_ROUND: 47,
			EXCLAMATION_QUESTION_EQUALS: 48,
			EXPORT: 49,
			EXTENDS: 50,
			EXTERN: 51,
			EXTERN_REQUIRE: 52,
			FINALLY: 53,
			FOR: 54,
			FROM: 55,
			FUNC: 56,
			GET: 57,
			HASH: 58,
			HASH_EXCLAMATION_LEFT_SQUARE: 59,
			HASH_LEFT_SQUARE: 60,
			HEX_NUMBER: 61,
			IDENTIFIER: 62,
			IF: 63,
			IMPL: 64,
			IMPORT: 65,
			IMPORT_LITERAL: 66,
			IN: 67,
			INCLUDE: 68,
			INCLUDE_AGAIN: 69,
			IS: 70,
			IS_NOT: 71,
			LEFT_ANGLE: 72,
			LEFT_ANGLE_EQUALS: 73,
			LEFT_ANGLE_LEFT_ANGLE: 74,
			LEFT_ANGLE_LEFT_ANGLE_EQUALS: 75,
			LEFT_CURLY: 76,
			LEFT_ROUND: 77,
			LEFT_SQUARE: 78,
			LET: 79,
			MACRO: 80,
			MINUS: 81,
			MINUS_EQUALS: 82,
			MINUS_MINUS: 83,
			NAMESPACE: 84,
			NEW: 85,
			NEWLINE: 86,
			OCTAL_NUMBER: 87,
			OF: 88,
			ON: 89,
			OVERRIDE: 90,
			PERCENT: 91,
			PERCENT_EQUALS: 92,
			PIPE: 93,
			PIPE_EQUALS: 94,
			PIPE_PIPE: 95,
			PLUS: 96,
			PLUS_EQUALS: 97,
			PLUS_PLUS: 98,
			PRIVATE: 99,
			PROTECTED: 100,
			PUBLIC: 101,
			QUESTION: 102,
			QUESTION_EQUALS: 103,
			QUESTION_DOT: 104,
			QUESTION_LEFT_ROUND: 105,
			QUESTION_LEFT_SQUARE: 106,
			QUESTION_QUESTION: 107,
			QUESTION_QUESTION_EQUALS: 108,
			RADIX_NUMBER: 109,
			REGEXP: 110,
			REQUIRE: 111,
			REQUIRE_EXTERN: 112,
			REQUIRE_IMPORT: 113,
			RETURN: 114,
			RIGHT_ANGLE: 115,
			RIGHT_ANGLE_EQUALS: 116,
			RIGHT_ANGLE_RIGHT_ANGLE: 117,
			RIGHT_ANGLE_RIGHT_ANGLE_EQUALS: 118,
			RIGHT_CURLY: 119,
			RIGHT_ROUND: 120,
			RIGHT_SQUARE: 121,
			SEALED: 122,
			SET: 123,
			SLASH: 124,
			SLASH_EQUALS: 125,
			STATIC: 126,
			STRING: 127,
			SWITCH: 128,
			TEMPLATE_BEGIN: 129,
			TEMPLATE_ELEMENT: 130,
			TEMPLATE_END: 131,
			TEMPLATE_VALUE: 132,
			THROW: 133,
			TIL: 134,
			TILDE: 135,
			TO: 136,
			TRY: 137,
			TYPE: 138,
			UNLESS: 139,
			UNTIL: 140,
			WHEN: 141,
			WHERE: 142,
			WHILE: 143,
			WITH: 144
		};
		var __ks_3;
		var overhauls = (__ks_3 = {}, __ks_3[Token.CLASS_VERSION] = function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			return data.split(".");
		}, __ks_3[Token.STRING] = function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			return data.slice(1, -1).replace(/(^|[^\\])\\('|")/g, "$1$2");
		}, __ks_3);
		var regex = {
			binary_number: /^0b[_0-1]+[a-zA-Z]*/,
			class_version: /^\d+(\.\d+(\.\d+)?)?/,
			decimal_number: /^[0-9][_0-9]*(?:\.[_0-9]+)?[a-zA-Z]*/,
			double_quote: /^([^\\"]|\\.)*\"/,
			hex_number: /^0x[_0-9a-fA-F]+[a-zA-Z]*/,
			macro_value: /^[^#\r\n]+/,
			octal_number: /^0o[_0-8]+[a-zA-Z]*/,
			radix_number: /^(?:[0-9]|[1-2][0-9]|3[0-6])r[_0-9a-zA-Z]+/,
			regex: /^=?(?:[^\n\r\*\\\/\[]|\\[^\n\r]|\[(?:[^\n\r\]\\]|\\[^\n\r])*\])(?:[^\n\r\\\/\[]|\\[^\n\r]|\[(?:[^\n\r\]\\]|\\[^\n\r])*\])*\/[gmi]*/,
			resource: /(^\s*\r?\n\s*)|(^\})|(^\s*\/\/[^\r\n]*\r?\n\s*)|(^\s*\/\*)|(^\S+)/,
			single_quote: /^([^\\']|\\.)*\'/,
			template: /^(?:[^`\\]|\\(?!\())+/
		};
		var M = (function() {
			function BINARY_OPERATOR(that, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(that === void 0 || that === null) {
					throw new TypeError("'that' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 33) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.EXCLAMATION_EQUALS;
					}
					else if((c === 63) && (that.charAt(2) === 61)) {
						that.next(3);
						return Token.EXCLAMATION_QUESTION_EQUALS;
					}
				}
				else if(c === 37) {
					if(that.charAt(1) === 61) {
						that.next(2);
						return Token.PERCENT_EQUALS;
					}
					else {
						that.next(1);
						return Token.PERCENT;
					}
				}
				else if(c === 38) {
					c = that.charAt(1);
					if(c === 38) {
						that.next(2);
						return Token.AMPERSAND_AMPERSAND;
					}
					else if(c === 61) {
						that.next(2);
						return Token.AMPERSAND_EQUALS;
					}
					else {
						that.next(1);
						return Token.AMPERSAND;
					}
				}
				else if(c === 42) {
					if(that.charAt(1) === 61) {
						that.next(2);
						return Token.ASTERISK_EQUALS;
					}
					else {
						that.next(1);
						return Token.ASTERISK;
					}
				}
				else if(c === 43) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.PLUS_EQUALS;
					}
					else if(c !== 43) {
						that.next(1);
						return Token.PLUS;
					}
				}
				else if(c === 45) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.MINUS_EQUALS;
					}
					else if(c !== 45) {
						that.next(1);
						return Token.MINUS;
					}
				}
				else if(c === 47) {
					if(that.charAt(1) === 61) {
						that.next(2);
						return Token.SLASH_EQUALS;
					}
					else {
						that.next(1);
						return Token.SLASH;
					}
				}
				else if(c === 60) {
					c = that.charAt(1);
					if(c === 60) {
						if(that.charAt(2) === 61) {
							that.next(3);
							return Token.LEFT_ANGLE_LEFT_ANGLE_EQUALS;
						}
						else {
							that.next(2);
							return Token.LEFT_ANGLE_LEFT_ANGLE;
						}
					}
					else if(c === 61) {
						that.next(2);
						return Token.LEFT_ANGLE_EQUALS;
					}
					else {
						that.next(1);
						return Token.LEFT_ANGLE;
					}
				}
				else if(c === 61) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.EQUALS_EQUALS;
					}
					else if(c !== 62) {
						that.next(1);
						return Token.EQUALS;
					}
				}
				else if(c === 62) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.RIGHT_ANGLE_EQUALS;
					}
					else if(c === 62) {
						if(that.charAt(2) === 61) {
							that.next(3);
							return Token.RIGHT_ANGLE_RIGHT_ANGLE_EQUALS;
						}
						else {
							that.next(2);
							return Token.RIGHT_ANGLE_RIGHT_ANGLE;
						}
					}
					else {
						that.next(1);
						return Token.RIGHT_ANGLE;
					}
				}
				else if(c === 63) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.QUESTION_EQUALS;
					}
					else if(c === 63) {
						if(that.charAt(2) === 61) {
							that.next(3);
							return Token.QUESTION_QUESTION_EQUALS;
						}
						else {
							that.next(2);
							return Token.QUESTION_QUESTION;
						}
					}
				}
				else if(c === 94) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.CARET_EQUALS;
					}
					else {
						that.next(1);
						return Token.CARET;
					}
				}
				else if(c === 124) {
					c = that.charAt(1);
					if(c === 61) {
						that.next(2);
						return Token.PIPE_EQUALS;
					}
					else if(c === 124) {
						that.next(2);
						return Token.PIPE_PIPE;
					}
					else {
						that.next(1);
						return Token.PIPE;
					}
				}
				return Token.INVALID;
			}
			function EXPORT_STATEMENT(that, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(that === void 0 || that === null) {
					throw new TypeError("'that' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 97) {
					var identifier = that.scanIdentifier(true);
					if(identifier === "bstract") {
						return Token.ABSTRACT;
					}
					else if(identifier === "sync") {
						return Token.ASYNC;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 99) {
					var identifier = that.scanIdentifier(true);
					if(identifier === "lass") {
						return Token.CLASS;
					}
					else if(identifier === "onst") {
						return Token.CONST;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 101) {
					if(that.scanIdentifier(true) === "num") {
						return Token.ENUM;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 102) {
					if(that.scanIdentifier(true) === "unc") {
						return Token.FUNC;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 108) {
					if(that.scanIdentifier(true) === "et") {
						return Token.LET;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 109) {
					if(that.scanIdentifier(true) === "acro") {
						return Token.MACRO;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 110) {
					if(that.scanIdentifier(true) === "amespace") {
						return Token.NAMESPACE;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 115) {
					var identifier = that.scanIdentifier(true);
					if(identifier === "ealed") {
						return Token.SEALED;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 116) {
					if(that.scanIdentifier(true) === "ype") {
						return Token.TYPE;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if((c === 36) || (c === 95) || ((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122))) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				return Token.INVALID;
			}
			function EXTERN_STATEMENT(that, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(that === void 0 || that === null) {
					throw new TypeError("'that' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 97) {
					var identifier = that.scanIdentifier(true);
					if(identifier === "bstract") {
						return Token.ABSTRACT;
					}
					else if(identifier === "sync") {
						return Token.ASYNC;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 99) {
					var identifier = that.scanIdentifier(true);
					if(identifier === "lass") {
						return Token.CLASS;
					}
					else if(identifier === "onst") {
						return Token.CONST;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 101) {
					if(that.scanIdentifier(true) === "num") {
						return Token.ENUM;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 102) {
					if(that.scanIdentifier(true) === "unc") {
						return Token.FUNC;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 108) {
					if(that.scanIdentifier(true) === "et") {
						return Token.LET;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 110) {
					if(that.scanIdentifier(true) === "amespace") {
						return Token.NAMESPACE;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 115) {
					if(that.scanIdentifier(true) === "ealed") {
						return Token.SEALED;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if((c === 36) || (c === 95) || ((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122))) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				return Token.INVALID;
			}
			function MACRO(that, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(that === void 0 || that === null) {
					throw new TypeError("'that' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var c = that._data.charCodeAt(++index);
				if((c === 13) && (that.charAt(1) === 10)) {
					that.nextLine(2);
					return Token.NEWLINE;
				}
				else if((c === 10) || (c === 13)) {
					that.nextLine(1);
					return Token.NEWLINE;
				}
				else if(c === 35) {
					that.next(1);
					return Token.HASH;
				}
				else if(c === 40) {
					that.next(1);
					return Token.LEFT_ROUND;
				}
				else if(c === 41) {
					that.next(1);
					return Token.RIGHT_ROUND;
				}
				else if(c === 123) {
					that.next(1);
					return Token.LEFT_CURLY;
				}
				else if(c === 125) {
					that.next(1);
					return Token.RIGHT_CURLY;
				}
				var from = index;
				while(++index < that._length) {
					c = that._data.charCodeAt(index);
					if((c === 10) || (c === 13) || (c === 35) || (c === 40) || (c === 41) || (c === 123) || (c === 125)) {
						that.next(index - from);
						return Token.INVALID;
					}
				}
				if(index === (from + 1)) {
					return Token.EOF;
				}
				else {
					that.next(index - from);
					return Token.INVALID;
				}
			}
			function MODULE_STATEMENT(that, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(that === void 0 || that === null) {
					throw new TypeError("'that' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 100) {
					if((that.charAt(1) === 105) && (that.charAt(2) === 115) && (that.charAt(3) === 99) && (that.charAt(4) === 108) && (that.charAt(5) === 111) && (that.charAt(6) === 115) && (that.charAt(7) === 101) && that.isBoundary(8)) {
						that.next(8);
						return Token.DISCLOSE;
					}
				}
				else if(c === 101) {
					if((that.charAt(1) === 120) && (that.charAt(2) === 112) && (that.charAt(3) === 111) && (that.charAt(4) === 114) && (that.charAt(5) === 116) && that.isBoundary(6)) {
						that.next(6);
						return Token.EXPORT;
					}
					else if((that.charAt(1) === 120) && (that.charAt(2) === 116) && (that.charAt(3) === 101) && (that.charAt(4) === 114) && (that.charAt(5) === 110)) {
						if(that.charAt(6) === 124) {
							if((that.charAt(7) === 114) && (that.charAt(8) === 101) && (that.charAt(9) === 113) && (that.charAt(10) === 117) && (that.charAt(11) === 105) && (that.charAt(12) === 114) && (that.charAt(13) === 101) && that.isBoundary(14)) {
								that.next(14);
								return Token.EXTERN_REQUIRE;
							}
						}
						else if(that.isBoundary(6)) {
							that.next(6);
							return Token.EXTERN;
						}
					}
				}
				else if(c === 105) {
					if((that.charAt(1) === 110) && (that.charAt(2) === 99) && (that.charAt(3) === 108) && (that.charAt(4) === 117) && (that.charAt(5) === 100) && (that.charAt(6) === 101)) {
						if((that.charAt(7) === 32) && (that.charAt(8) === 97) && (that.charAt(9) === 103) && (that.charAt(10) === 97) && (that.charAt(11) === 105) && (that.charAt(12) === 110) && that.isBoundary(13)) {
							that.next(13);
							return Token.INCLUDE_AGAIN;
						}
						else if(that.isBoundary(7)) {
							that.next(7);
							return Token.INCLUDE;
						}
					}
				}
				else if(c === 114) {
					if((that.charAt(1) === 101) && (that.charAt(2) === 113) && (that.charAt(3) === 117) && (that.charAt(4) === 105) && (that.charAt(5) === 114) && (that.charAt(6) === 101)) {
						if(that.charAt(7) === 124) {
							if((that.charAt(8) === 101) && (that.charAt(9) === 120) && (that.charAt(10) === 116) && (that.charAt(11) === 101) && (that.charAt(12) === 114) && (that.charAt(13) === 110) && that.isBoundary(14)) {
								that.next(14);
								return Token.REQUIRE_EXTERN;
							}
							else if((that.charAt(8) === 105) && (that.charAt(9) === 109) && (that.charAt(10) === 112) && (that.charAt(11) === 111) && (that.charAt(12) === 114) && (that.charAt(13) === 116) && that.isBoundary(14)) {
								that.next(14);
								return Token.REQUIRE_IMPORT;
							}
						}
						else if(that.isBoundary(7)) {
							that.next(7);
							return Token.REQUIRE;
						}
					}
				}
				return Token.INVALID;
			}
			function NUMBER(that, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(that === void 0 || that === null) {
					throw new TypeError("'that' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if((c >= 48) && (c <= 57)) {
					var substr = that._data.substr(that._index);
					var match;
					if(KSType.isValue(__ks_5 = regex.binary_number.exec(substr)) ? (match = __ks_5, true) : false) {
						that.next(match[0].length);
						return Token.BINARY_NUMBER;
					}
					else if(KSType.isValue(__ks_5 = regex.octal_number.exec(substr)) ? (match = __ks_5, true) : false) {
						that.next(match[0].length);
						return Token.OCTAL_NUMBER;
					}
					else if(KSType.isValue(__ks_5 = regex.hex_number.exec(substr)) ? (match = __ks_5, true) : false) {
						that.next(match[0].length);
						return Token.HEX_NUMBER;
					}
					else if(KSType.isValue(__ks_5 = regex.radix_number.exec(substr)) ? (match = __ks_5, true) : false) {
						that.next(match[0].length);
						return Token.RADIX_NUMBER;
					}
					else if(KSType.isValue(__ks_5 = regex.decimal_number.exec(substr)) ? (match = __ks_5, true) : false) {
						that.next(match[0].length);
						return Token.DECIMAL_NUMBER;
					}
				}
				return Token.INVALID;
			}
			function OPERAND(that, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(that === void 0 || that === null) {
					throw new TypeError("'that' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 34) {
					var match, __ks_7;
					if(KSType.isValue(__ks_5 = regex.double_quote.exec(that.substringAt(1))) ? (match = __ks_5, true) : false) {
						that.next(match[0].length + 1);
						return Token.STRING;
					}
				}
				else if(c === 36) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				else if(c === 39) {
					var match, __ks_8, __ks_9;
					if(KSType.isValue(__ks_5 = regex.single_quote.exec(that.substringAt(1))) ? (match = __ks_5, true) : false) {
						that.next(match[0].length + 1);
						return Token.STRING;
					}
				}
				else if(c === 40) {
					that.next(1);
					return Token.LEFT_ROUND;
				}
				else if(c === 47) {
					var match, __ks_10, __ks_11;
					if(KSType.isValue(__ks_5 = regex.regex.exec(that.substringAt(1))) ? (match = __ks_5, true) : false) {
						that.next(match[0].length + 1);
						return Token.REGEXP;
					}
				}
				else if(c === 64) {
					that.next(1);
					return Token.AT;
				}
				else if((c >= 65) && (c <= 90)) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				else if(c === 91) {
					that.next(1);
					return Token.LEFT_SQUARE;
				}
				else if(c === 95) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				else if(c === 96) {
					that.next(1);
					return Token.TEMPLATE_BEGIN;
				}
				else if(c === 97) {
					if(that.scanIdentifier(true) === "wait") {
						return Token.AWAIT;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if(c === 110) {
					if(that.scanIdentifier(true) === "ew") {
						return Token.NEW;
					}
					else {
						return Token.IDENTIFIER;
					}
				}
				else if((c >= 98) && (c <= 122)) {
					that.scanIdentifier(false);
					return Token.IDENTIFIER;
				}
				else if(c === 123) {
					that.next(1);
					return Token.LEFT_CURLY;
				}
				return Token.INVALID;
			}
			function OPERAND_JUNCTION(that, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(that === void 0 || that === null) {
					throw new TypeError("'that' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var c = that._data.charCodeAt(index + 1);
				var p = that._data.charCodeAt(index);
				if((p === 9) || (p === 32)) {
					return Token.INVALID;
				}
				else if((c === 13) && (that.charAt(1) === 10)) {
					that.nextLine(2);
					return Token.NEWLINE;
				}
				else if((c === 10) || (c === 13)) {
					that.nextLine(1);
					return Token.NEWLINE;
				}
				else if(c === 33) {
					if(that.charAt(1) === 40) {
						that.next(2);
						return Token.EXCLAMATION_LEFT_ROUND;
					}
				}
				else if(c === 40) {
					that.next(1);
					return Token.LEFT_ROUND;
				}
				else if(c === 42) {
					if(that.charAt(2) === 40) {
						c = that.charAt(1);
						if(c === 36) {
							that.next(3);
							return Token.ASTERISK_DOLLAR_LEFT_ROUND;
						}
						else if(c === 42) {
							that.next(3);
							return Token.ASTERISK_ASTERISK_LEFT_ROUND;
						}
					}
				}
				else if(c === 46) {
					if(((c = that.charAt(1)) !== 46) && (c !== 9) && (c !== 32)) {
						that.next(1);
						return Token.DOT;
					}
				}
				else if(c === 58) {
					c = that.charAt(1);
					if((c === 58) && !(((c = that.charAt(2)) === 9) || (c === 32))) {
						that.next(2);
						return Token.COLON_COLON;
					}
					else if((c !== 61) && (c !== 9) && (c !== 32)) {
						that.next(1);
						return Token.COLON;
					}
				}
				else if(c === 63) {
					c = that.charAt(1);
					if(c === 40) {
						that.next(2);
						return Token.QUESTION_LEFT_ROUND;
					}
					else if((c === 46) && !(((c = that.charAt(2)) === 9) || (c === 32))) {
						that.next(2);
						return Token.QUESTION_DOT;
					}
					else if(c === 91) {
						that.next(2);
						return Token.QUESTION_LEFT_SQUARE;
					}
				}
				else if(c === 91) {
					that.next(1);
					return Token.LEFT_SQUARE;
				}
				else if(c === 94) {
					if(that.charAt(2) === 40) {
						c = that.charAt(1);
						if(c === 36) {
							that.next(3);
							return Token.CARET_DOLLAR_LEFT_ROUND;
						}
						else if(c === 64) {
							that.next(3);
							return Token.CARET_AT_LEFT_ROUND;
						}
						else if(c === 94) {
							that.next(3);
							return Token.CARET_CARET_LEFT_ROUND;
						}
					}
				}
				else if(c === 96) {
					that.next(1);
					return Token.TEMPLATE_BEGIN;
				}
				return Token.INVALID;
			}
			function POSTFIX_OPERATOR(that, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(that === void 0 || that === null) {
					throw new TypeError("'that' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var p = that._data.charCodeAt(index);
				var c = that._data.charCodeAt(index + 1);
				if((p === 9) || (p === 32)) {
					return Token.INVALID;
				}
				else if(c === 43) {
					if(that.charAt(1) === 43) {
						that.next(2);
						return Token.PLUS_PLUS;
					}
				}
				else if(c === 45) {
					if(that.charAt(1) === 45) {
						that.next(2);
						return Token.MINUS_MINUS;
					}
				}
				else if(c === 63) {
					if(!(((c = that.charAt(1)) === 40) || (c === 46) || (c === 61) || (c === 63) || (c === 91))) {
						that.next(1);
						return Token.QUESTION;
					}
				}
				return Token.INVALID;
			}
			function PREFIX_OPERATOR(that, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(that === void 0 || that === null) {
					throw new TypeError("'that' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 33) {
					if(!(((c = that.charAt(1)) === 61) || ((c === 63) && (that.charAt(2) === 61)) || (c === 9) || (c === 32))) {
						that.next(1);
						return Token.EXCLAMATION;
					}
				}
				else if(c === 43) {
					if((that.charAt(1) === 43) && !(((c = that.charAt(2)) === 9) || (c === 32))) {
						that.next(2);
						return Token.PLUS_PLUS;
					}
				}
				else if(c === 45) {
					c = that.charAt(1);
					if(c === 45) {
						if(!(((c = that.charAt(2)) === 9) || (c === 32))) {
							that.next(2);
							return Token.MINUS_MINUS;
						}
					}
					else if(((c !== 61) && (c !== 9)) || (c !== 32)) {
						that.next(1);
						return Token.MINUS;
					}
				}
				else if(c === 46) {
					if((that.charAt(1) === 46) && (that.charAt(2) === 46) && !(((c = that.charAt(3)) === 9) || (c === 32))) {
						that.next(3);
						return Token.DOT_DOT_DOT;
					}
				}
				else if(c === 63) {
					if(!(((c = that.charAt(1)) === 9) || (c === 32))) {
						that.next(1);
						return Token.QUESTION;
					}
				}
				else if(c === 126) {
					if(!(((c = that.charAt(1)) === 9) || (c === 32))) {
						that.next(1);
						return Token.TILDE;
					}
				}
				return Token.INVALID;
			}
			function STATEMENT(that, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(that === void 0 || that === null) {
					throw new TypeError("'that' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(c === 97) {
					if((that.charAt(1) === 98) && (that.charAt(2) === 115) && (that.charAt(3) === 116) && (that.charAt(4) === 114) && (that.charAt(5) === 97) && (that.charAt(6) === 99) && (that.charAt(7) === 116) && that.isBoundary(8)) {
						that.next(8);
						return Token.ABSTRACT;
					}
					else if((that.charAt(1) === 115) && (that.charAt(2) === 121) && (that.charAt(3) === 110) && (that.charAt(4) === 99) && that.isBoundary(5)) {
						that.next(5);
						return Token.ASYNC;
					}
				}
				else if(c === 98) {
					if((that.charAt(1) === 114) && (that.charAt(2) === 101) && (that.charAt(3) === 97) && (that.charAt(4) === 107) && that.isBoundary(5)) {
						that.next(5);
						return Token.BREAK;
					}
				}
				else if(c === 99) {
					if((that.charAt(1) === 108) && (that.charAt(2) === 97) && (that.charAt(3) === 115) && (that.charAt(4) === 115) && that.isBoundary(5)) {
						that.next(5);
						return Token.CLASS;
					}
					else if((that.charAt(1) === 111) && (that.charAt(2) === 110) && (that.charAt(3) === 115) && (that.charAt(4) === 116) && that.isBoundary(5)) {
						that.next(5);
						return Token.CONST;
					}
					else if((that.charAt(1) === 111) && (that.charAt(2) === 110) && (that.charAt(3) === 116) && (that.charAt(4) === 105) && (that.charAt(5) === 110) && (that.charAt(6) === 117) && (that.charAt(7) === 101) && that.isBoundary(8)) {
						that.next(8);
						return Token.CONTINUE;
					}
				}
				else if(c === 100) {
					if((that.charAt(1) === 111) && that.isBoundary(2)) {
						that.next(2);
						return Token.DO;
					}
					else if((that.charAt(1) === 101) && (that.charAt(2) === 108) && (that.charAt(3) === 101) && (that.charAt(4) === 116) && (that.charAt(5) === 101) && that.isBoundary(6)) {
						that.next(6);
						return Token.DELETE;
					}
				}
				else if(c === 101) {
					if((that.charAt(1) === 110) && (that.charAt(2) === 117) && (that.charAt(3) === 109) && that.isBoundary(4)) {
						that.next(4);
						return Token.ENUM;
					}
				}
				else if(c === 102) {
					if((that.charAt(1) === 111) && (that.charAt(2) === 114) && that.isBoundary(3)) {
						that.next(3);
						return Token.FOR;
					}
					else if((that.charAt(1) === 117) && (that.charAt(2) === 110) && (that.charAt(3) === 99) && that.isBoundary(4)) {
						that.next(4);
						return Token.FUNC;
					}
				}
				else if(c === 105) {
					if((that.charAt(1) === 102) && that.isBoundary(2)) {
						that.next(2);
						return Token.IF;
					}
					else if((that.charAt(1) === 109) && (that.charAt(2) === 112) && (that.charAt(3) === 108) && that.isBoundary(4)) {
						that.next(4);
						return Token.IMPL;
					}
					else if((that.charAt(1) === 109) && (that.charAt(2) === 112) && (that.charAt(3) === 111) && (that.charAt(4) === 114) && (that.charAt(5) === 116) && that.isBoundary(6)) {
						that.next(6);
						return Token.IMPORT;
					}
				}
				else if(c === 108) {
					if((that.charAt(1) === 101) && (that.charAt(2) === 116) && that.isBoundary(3)) {
						that.next(3);
						return Token.LET;
					}
				}
				else if(c === 109) {
					if((that.charAt(1) === 97) && (that.charAt(2) === 99) && (that.charAt(3) === 114) && (that.charAt(4) === 111) && that.isBoundary(5)) {
						that.next(5);
						return Token.MACRO;
					}
				}
				else if(c === 110) {
					if((that.charAt(1) === 97) && (that.charAt(2) === 109) && (that.charAt(3) === 101) && (that.charAt(4) === 115) && (that.charAt(5) === 112) && (that.charAt(6) === 97) && (that.charAt(7) === 99) && (that.charAt(8) === 101) && that.isBoundary(9)) {
						that.next(9);
						return Token.NAMESPACE;
					}
				}
				else if(c === 114) {
					if((that.charAt(1) === 101) && (that.charAt(2) === 116) && (that.charAt(3) === 117) && (that.charAt(4) === 114) && (that.charAt(5) === 110) && that.isBoundary(6)) {
						that.next(6);
						return Token.RETURN;
					}
				}
				else if(c === 115) {
					if((that.charAt(1) === 101) && (that.charAt(2) === 97) && (that.charAt(3) === 108) && (that.charAt(4) === 101) && (that.charAt(5) === 100) && that.isBoundary(6)) {
						that.next(6);
						return Token.SEALED;
					}
					else if((that.charAt(1) === 119) && (that.charAt(2) === 105) && (that.charAt(3) === 116) && (that.charAt(4) === 99) && (that.charAt(5) === 104) && that.isBoundary(6)) {
						that.next(6);
						return Token.SWITCH;
					}
				}
				else if(c === 116) {
					if((that.charAt(1) === 104) && (that.charAt(2) === 114) && (that.charAt(3) === 111) && (that.charAt(4) === 119) && that.isBoundary(5)) {
						that.next(5);
						return Token.THROW;
					}
					else if((that.charAt(1) === 114) && (that.charAt(2) === 121) && that.isBoundary(3)) {
						that.next(3);
						return Token.TRY;
					}
					else if((that.charAt(1) === 121) && (that.charAt(2) === 112) && (that.charAt(3) === 101) && that.isBoundary(4)) {
						that.next(4);
						return Token.TYPE;
					}
				}
				else if(c === 117) {
					if((that.charAt(1) === 110) && (that.charAt(2) === 108) && (that.charAt(3) === 101) && (that.charAt(4) === 115) && (that.charAt(5) === 115) && that.isBoundary(6)) {
						that.next(6);
						return Token.UNLESS;
					}
					else if((that.charAt(1) === 110) && (that.charAt(2) === 116) && (that.charAt(3) === 105) && (that.charAt(4) === 108) && that.isBoundary(5)) {
						that.next(5);
						return Token.UNTIL;
					}
				}
				else if(c === 119) {
					if((that.charAt(1) === 104) && (that.charAt(2) === 105) && (that.charAt(3) === 108) && (that.charAt(4) === 101) && that.isBoundary(5)) {
						that.next(5);
						return Token.WHILE;
					}
				}
				return Token.INVALID;
			}
			function TEMPLATE(that, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(that === void 0 || that === null) {
					throw new TypeError("'that' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var c = that._data.charCodeAt(++index);
				var match, __ks_12, __ks_13;
				if((c === 92) && (that._data.charCodeAt(index + 1) === 40)) {
					that.next(2);
					return Token.TEMPLATE_ELEMENT;
				}
				else if(c === 96) {
					return Token.TEMPLATE_END;
				}
				else if(KSType.isValue(__ks_5 = regex.template.exec(that._data.substr(index))) ? (match = __ks_5, true) : false) {
					that.next(match[0].length);
					return Token.TEMPLATE_VALUE;
				}
				return Token.INVALID;
			}
			function TYPE_OPERATOR(that, index) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(that === void 0 || that === null) {
					throw new TypeError("'that' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var c = that.skip(index);
				if(c === -1) {
					return Token.EOF;
				}
				else if(index === that._index) {
					return Token.INVALID;
				}
				else if(c === 97) {
					if((that.charAt(1) === 115) && that.isBoundary(2)) {
						that.next(2);
						return Token.AS;
					}
				}
				else if(c === 105) {
					if(that.charAt(1) === 115) {
						if(((c = that.charAt(2)) === 9) || (c === 32)) {
							if((that.charAt(3) === 110) && (that.charAt(4) === 111) && (that.charAt(5) === 116) && that.isBoundary(6)) {
								that.next(6);
								return Token.IS_NOT;
							}
							that.next(2);
							return Token.IS;
						}
						else if(that.isBoundary(2)) {
							that.next(2);
							return Token.IS;
						}
					}
				}
				return Token.INVALID;
			}
			return {
				BINARY_OPERATOR: BINARY_OPERATOR,
				EXPORT_STATEMENT: EXPORT_STATEMENT,
				EXTERN_STATEMENT: EXTERN_STATEMENT,
				MACRO: MACRO,
				MODULE_STATEMENT: MODULE_STATEMENT,
				NUMBER: NUMBER,
				OPERAND: OPERAND,
				OPERAND_JUNCTION: OPERAND_JUNCTION,
				POSTFIX_OPERATOR: POSTFIX_OPERATOR,
				PREFIX_OPERATOR: PREFIX_OPERATOR,
				STATEMENT: STATEMENT,
				TEMPLATE: TEMPLATE,
				TYPE_OPERATOR: TYPE_OPERATOR
			};
		})();
		var recognize = (__ks_3 = {}, __ks_3[Token.ABSTRACT] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 97) && (that.charAt(1) === 98) && (that.charAt(2) === 115) && (that.charAt(3) === 116) && (that.charAt(4) === 114) && (that.charAt(5) === 97) && (that.charAt(6) === 99) && (that.charAt(7) === 116) && that.isBoundary(8)) {
				return that.next(8);
			}
			else {
				return false;
			}
		}, __ks_3[Token.ASTERISK] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 42) && ((c = that.charAt(1)) !== 42) && (c !== 36) && (c !== 61)) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.AS] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 97) && (that.charAt(1) === 115) && that.isBoundary(2)) {
				return that.next(2);
			}
			else {
				return false;
			}
		}, __ks_3[Token.ASYNC] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 97) && (that.charAt(1) === 115) && (that.charAt(2) === 121) && (that.charAt(3) === 110) && (that.charAt(4) === 99) && that.isBoundary(5)) {
				return that.next(5);
			}
			else {
				return false;
			}
		}, __ks_3[Token.AT] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 64) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.AWAIT] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 97) && (that.charAt(1) === 119) && (that.charAt(2) === 97) && (that.charAt(3) === 105) && (that.charAt(4) === 116) && that.isBoundary(5)) {
				return that.next(5);
			}
			else {
				return false;
			}
		}, __ks_3[Token.BY] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 98) && (that.charAt(1) === 121) && that.isBoundary(2)) {
				return that.next(2);
			}
			else {
				return false;
			}
		}, __ks_3[Token.CATCH] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 99) && (that.charAt(1) === 97) && (that.charAt(2) === 116) && (that.charAt(3) === 99) && (that.charAt(4) === 104) && that.isBoundary(5)) {
				return that.next(5);
			}
			else {
				return false;
			}
		}, __ks_3[Token.COLON] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 58) {
				c = that.charAt(1);
				return ((c === 58) || (c === 61)) ? false : that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.COLON_EQUALS] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 58) && (that.charAt(1) === 61)) {
				return that.next(2);
			}
			else {
				return false;
			}
		}, __ks_3[Token.COMMA] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 44) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.CONST] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 99) && (that.charAt(1) === 111) && (that.charAt(2) === 110) && (that.charAt(3) === 115) && (that.charAt(4) === 116) && that.isBoundary(5)) {
				return that.next(5);
			}
			else {
				return false;
			}
		}, __ks_3[Token.CLASS] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 99) && (that.charAt(1) === 108) && (that.charAt(2) === 97) && (that.charAt(3) === 115) && (that.charAt(4) === 115) && that.isBoundary(5)) {
				return that.next(5);
			}
			else {
				return false;
			}
		}, __ks_3[Token.CLASS_VERSION] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			var match, __ks_14, __ks_15;
			if(KSType.isValue(__ks_5 = regex.class_version.exec(that.substringAt(0))) ? (match = __ks_5, true) : false) {
				return that.next(match[0].length);
			}
			else {
				return false;
			}
		}, __ks_3[Token.DESC] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 100) && (that.charAt(1) === 101) && (that.charAt(2) === 115) && (that.charAt(3) === 99) && that.isBoundary(4)) {
				return that.next(4);
			}
			else {
				return false;
			}
		}, __ks_3[Token.DOT] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 46) && (that.charAt(1) !== 46)) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.DOT_DOT] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 46) && (that.charAt(1) === 46) && (that.charAt(2) !== 46)) {
				return that.next(2);
			}
			else {
				return false;
			}
		}, __ks_3[Token.DOT_DOT_DOT] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 46) && (that.charAt(1) === 46) && (that.charAt(2) === 46)) {
				return that.next(3);
			}
			else {
				return false;
			}
		}, __ks_3[Token.ELSE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 101) && (that.charAt(1) === 108) && (that.charAt(2) === 115) && (that.charAt(3) === 101) && that.isBoundary(4)) {
				return that.next(4);
			}
			else {
				return false;
			}
		}, __ks_3[Token.ELSE_IF] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 101) && (that.charAt(1) === 108) && (that.charAt(2) === 115) && (that.charAt(3) === 101) && (that.charAt(4) === 32) && (that.charAt(5) === 105) && (that.charAt(6) === 102) && that.isBoundary(7)) {
				return that.next(7);
			}
			else {
				return false;
			}
		}, __ks_3[Token.EQUALS] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 61) && ((c = that.charAt(1)) !== 61) && (c !== 62)) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.EQUALS_RIGHT_ANGLE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 61) && (that.charAt(1) === 62)) {
				return that.next(2);
			}
			else {
				return false;
			}
		}, __ks_3[Token.EXTENDS] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 101) && (that.charAt(1) === 120) && (that.charAt(2) === 116) && (that.charAt(3) === 101) && (that.charAt(4) === 110) && (that.charAt(5) === 100) && (that.charAt(6) === 115) && that.isBoundary(7)) {
				return that.next(7);
			}
			else {
				return false;
			}
		}, __ks_3[Token.FINALLY] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 102) && (that.charAt(1) === 105) && (that.charAt(2) === 110) && (that.charAt(3) === 97) && (that.charAt(4) === 108) && (that.charAt(5) === 108) && (that.charAt(6) === 121) && that.isBoundary(7)) {
				return that.next(7);
			}
			else {
				return false;
			}
		}, __ks_3[Token.FOR] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 102) && (that.charAt(1) === 111) && (that.charAt(2) === 114) && that.isBoundary(3)) {
				return that.next(3);
			}
			else {
				return false;
			}
		}, __ks_3[Token.FROM] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 102) && (that.charAt(1) === 114) && (that.charAt(2) === 111) && (that.charAt(3) === 109) && that.isBoundary(4)) {
				return that.next(4);
			}
			else {
				return false;
			}
		}, __ks_3[Token.FUNC] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 102) && (that.charAt(1) === 117) && (that.charAt(2) === 110) && (that.charAt(3) === 99) && that.isBoundary(4)) {
				return that.next(4);
			}
			else {
				return false;
			}
		}, __ks_3[Token.GET] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 103) && (that.charAt(1) === 101) && (that.charAt(2) === 116) && that.isBoundary(3)) {
				return that.next(3);
			}
			else {
				return false;
			}
		}, __ks_3[Token.HASH_EXCLAMATION_LEFT_SQUARE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 35) && (that.charAt(1) === 33) && (that.charAt(2) === 91)) {
				return that.next(3);
			}
			else {
				return false;
			}
		}, __ks_3[Token.HASH_LEFT_SQUARE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 35) && (that.charAt(1) === 91)) {
				return that.next(2);
			}
			else {
				return false;
			}
		}, __ks_3[Token.IDENTIFIER] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 36) || (c === 95) || ((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122))) {
				that.scanIdentifier(false);
				return true;
			}
			else {
				return false;
			}
		}, __ks_3[Token.IF] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 105) && (that.charAt(1) === 102) && that.isBoundary(2)) {
				return that.next(2);
			}
			else {
				return false;
			}
		}, __ks_3[Token.IN] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 105) && (that.charAt(1) === 110) && that.isBoundary(2)) {
				return that.next(2);
			}
			else {
				return false;
			}
		}, __ks_3[Token.IS] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 105) && (that.charAt(1) === 115) && that.isBoundary(2)) {
				return that.next(2);
			}
			else {
				return false;
			}
		}, __ks_3[Token.LEFT_ANGLE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 60) {
				c = that.charAt(1);
				return ((c === 60) || (c === 61)) ? false : that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.LEFT_CURLY] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 123) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.LEFT_ROUND] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 40) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.LEFT_SQUARE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 91) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.LET] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 108) && (that.charAt(1) === 101) && (that.charAt(2) === 116) && that.isBoundary(3)) {
				return that.next(3);
			}
			else {
				return false;
			}
		}, __ks_3[Token.MACRO] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 109) && (that.charAt(1) === 97) && (that.charAt(2) === 99) && (that.charAt(3) === 114) && (that.charAt(4) === 111) && that.isBoundary(5)) {
				return that.next(5);
			}
			else {
				return false;
			}
		}, __ks_3[Token.MINUS] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 45) && ((c = that.charAt(1)) !== 61)) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.NEWLINE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 13) && (that.charAt(1) === 10)) {
				return that.nextLine(2);
			}
			else if((c === 10) || (c === 13)) {
				return that.nextLine(1);
			}
			return false;
		}, __ks_3[Token.OF] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 111) && (that.charAt(1) === 102) && that.isBoundary(2)) {
				return that.next(2);
			}
			else {
				return false;
			}
		}, __ks_3[Token.ON] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 111) && (that.charAt(1) === 110) && that.isBoundary(2)) {
				return that.next(2);
			}
			else {
				return false;
			}
		}, __ks_3[Token.OVERRIDE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 111) && (that.charAt(1) === 118) && (that.charAt(2) === 101) && (that.charAt(3) === 114) && (that.charAt(4) === 114) && (that.charAt(5) === 105) && (that.charAt(6) === 100) && (that.charAt(7) === 101) && that.isBoundary(8)) {
				return that.next(8);
			}
			else {
				return false;
			}
		}, __ks_3[Token.PIPE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 124) && (that.charAt(1) !== 61)) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.PIPE_PIPE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 124) && (that.charAt(1) === 124)) {
				return that.next(2);
			}
			else {
				return false;
			}
		}, __ks_3[Token.PRIVATE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 112) && (that.charAt(1) === 114) && (that.charAt(2) === 105) && (that.charAt(3) === 118) && (that.charAt(4) === 97) && (that.charAt(5) === 116) && (that.charAt(6) === 101) && that.isBoundary(7)) {
				return that.next(7);
			}
			else {
				return false;
			}
		}, __ks_3[Token.PROTECTED] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 112) && (that.charAt(1) === 114) && (that.charAt(2) === 111) && (that.charAt(3) === 116) && (that.charAt(4) === 101) && (that.charAt(5) === 99) && (that.charAt(6) === 116) && (that.charAt(7) === 101) && (that.charAt(8) === 100) && that.isBoundary(9)) {
				return that.next(9);
			}
			else {
				return false;
			}
		}, __ks_3[Token.PUBLIC] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 112) && (that.charAt(1) === 117) && (that.charAt(2) === 98) && (that.charAt(3) === 108) && (that.charAt(4) === 105) && (that.charAt(5) === 99) && that.isBoundary(6)) {
				return that.next(6);
			}
			else {
				return false;
			}
		}, __ks_3[Token.QUESTION] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 63) {
				return (((c = that.charAt(1)) === 40) || (c === 46) || (c === 61) || (c === 63) || (c === 91)) ? false : that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.RETURN] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 114) && (that.charAt(1) === 101) && (that.charAt(2) === 116) && (that.charAt(3) === 117) && (that.charAt(4) === 114) && (that.charAt(5) === 110) && that.isBoundary(6)) {
				return that.next(6);
			}
			else {
				return false;
			}
		}, __ks_3[Token.RIGHT_ANGLE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 62) {
				c = that.charAt(1);
				return ((c === 61) || (c === 62)) ? false : that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.RIGHT_CURLY] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 125) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.RIGHT_ROUND] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 41) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.RIGHT_SQUARE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 93) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.SET] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 115) && (that.charAt(1) === 101) && (that.charAt(2) === 116) && that.isBoundary(3)) {
				return that.next(3);
			}
			else {
				return false;
			}
		}, __ks_3[Token.STATIC] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 115) && (that.charAt(1) === 116) && (that.charAt(2) === 97) && (that.charAt(3) === 116) && (that.charAt(4) === 105) && (that.charAt(5) === 99) && that.isBoundary(6)) {
				return that.next(6);
			}
			else {
				return false;
			}
		}, __ks_3[Token.STRING] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 34) {
				var match, __ks_16, __ks_17;
				if(KSType.isValue(__ks_5 = regex.double_quote.exec(that.substringAt(1))) ? (match = __ks_5, true) : false) {
					return that.next(match[0].length + 1);
				}
			}
			else if(c === 39) {
				var match, __ks_18, __ks_19;
				if(KSType.isValue(__ks_5 = regex.single_quote.exec(that.substringAt(1))) ? (match = __ks_5, true) : false) {
					return that.next(match[0].length + 1);
				}
			}
			return false;
		}, __ks_3[Token.SWITCH] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 115) && (that.charAt(1) === 119) && (that.charAt(2) === 105) && (that.charAt(3) === 116) && (that.charAt(4) === 99) && (that.charAt(5) === 104) && that.isBoundary(6)) {
				return that.next(6);
			}
			else {
				return false;
			}
		}, __ks_3[Token.TEMPLATE_BEGIN] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 96) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.TEMPLATE_END] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 96) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.THROW] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 116) && (that.charAt(1) === 104) && (that.charAt(2) === 114) && (that.charAt(3) === 111) && (that.charAt(4) === 119) && that.isBoundary(5)) {
				return that.next(5);
			}
			else {
				return false;
			}
		}, __ks_3[Token.TIL] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 116) && (that.charAt(1) === 105) && (that.charAt(2) === 108) && that.isBoundary(3)) {
				return that.next(3);
			}
			else {
				return false;
			}
		}, __ks_3[Token.TILDE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if(c === 126) {
				return that.next(1);
			}
			else {
				return false;
			}
		}, __ks_3[Token.TO] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 116) && (that.charAt(1) === 111) && that.isBoundary(2)) {
				return that.next(2);
			}
			else {
				return false;
			}
		}, __ks_3[Token.UNLESS] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 117) && (that.charAt(1) === 110) && (that.charAt(2) === 108) && (that.charAt(3) === 101) && (that.charAt(4) === 115) && (that.charAt(5) === 115) && that.isBoundary(6)) {
				return that.next(6);
			}
			else {
				return false;
			}
		}, __ks_3[Token.UNTIL] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 117) && (that.charAt(1) === 110) && (that.charAt(2) === 116) && (that.charAt(3) === 105) && (that.charAt(4) === 108) && that.isBoundary(5)) {
				return that.next(5);
			}
			else {
				return false;
			}
		}, __ks_3[Token.WHEN] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 119) && (that.charAt(1) === 104) && (that.charAt(2) === 101) && (that.charAt(3) === 110) && that.isBoundary(4)) {
				return that.next(4);
			}
			else {
				return false;
			}
		}, __ks_3[Token.WHERE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 119) && (that.charAt(1) === 104) && (that.charAt(2) === 101) && (that.charAt(3) === 114) && (that.charAt(4) === 101) && that.isBoundary(5)) {
				return that.next(5);
			}
			else {
				return false;
			}
		}, __ks_3[Token.WHILE] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 119) && (that.charAt(1) === 104) && (that.charAt(2) === 105) && (that.charAt(3) === 108) && (that.charAt(4) === 101) && that.isBoundary(5)) {
				return that.next(5);
			}
			else {
				return false;
			}
		}, __ks_3[Token.WITH] = function(that, c) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(c === void 0 || c === null) {
				throw new TypeError("'c' is not nullable");
			}
			if((c === 119) && (that.charAt(1) === 105) && (that.charAt(2) === 116) && (that.charAt(3) === 104) && that.isBoundary(4)) {
				return that.next(4);
			}
			else {
				return false;
			}
		}, __ks_3);
		var Scanner = Helper.class({
			$name: "Scanner",
			$create: function() {
				this.__ks_init();
				this.__ks_cons(arguments);
			},
			__ks_init_1: function() {
				this._column = 1;
				this._eof = false;
				this._index = 0;
				this._line = 1;
				this._nextColumn = 1;
				this._nextIndex = 0;
				this._nextLine = 1;
			},
			__ks_init: function() {
				Scanner.prototype.__ks_init_1.call(this);
			},
			__ks_cons_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				else if(!KSType.isString(data)) {
					throw new TypeError("'data' is not of type 'String'");
				}
				this._data = data;
				this._length = this._data.length;
			},
			__ks_cons: function(args) {
				if(args.length === 1) {
					Scanner.prototype.__ks_cons_0.apply(this, args);
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			},
			__ks_func_charAt_0: function(d) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(d === void 0 || d === null) {
					throw new TypeError("'d' is not nullable");
				}
				return this._data.charCodeAt(this._index + d);
			},
			charAt: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_charAt_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_char_0: function() {
				return this._eof ? "EOF" : this._data[this._index];
			},
			char: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_char_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_column_0: function() {
				return this._column;
			},
			column: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_column_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_commit_0: function() {
				if(this._eof) {
					return null;
				}
				else {
					this._column = this._nextColumn;
					this._line = this._nextLine;
					this._index = this._nextIndex;
					return Token.INVALID;
				}
			},
			commit: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_commit_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_endPosition_0: function() {
				return {
					line: this._nextLine,
					column: this._nextColumn
				};
			},
			endPosition: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_endPosition_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_eof_0: function() {
				this._eof = true;
				return Token.EOF;
			},
			eof: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_eof_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_isBoundary_0: function(d) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(d === void 0 || d === null) {
					throw new TypeError("'d' is not nullable");
				}
				var c = this._data.charCodeAt(this._index + d);
				return (c === 9) || (c === 10) || (c === 13) || (c === 32) || !(((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 90)) || ((c >= 97) && (c <= 122)) || (c === 95) || (c === 36));
			},
			isBoundary: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_isBoundary_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_isEOF_0: function() {
				return this._eof;
			},
			isEOF: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_isEOF_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_line_0: function() {
				return this._line;
			},
			line: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_line_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_mark_0: function() {
				return {
					eof: this._eof,
					index: this._index,
					line: this._line,
					column: this._column
				};
			},
			mark: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_mark_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_match_0: function() {
				var tokens = Array.prototype.slice.call(arguments, 0, arguments.length);
				if(this._eof) {
					return Token.EOF;
				}
				else {
					var c = this.skip(this._index - 1);
					if(c === -1) {
						return this.eof();
					}
					for(var __ks_5 = 0, __ks_20 = tokens.length, token; __ks_5 < __ks_20; ++__ks_5) {
						token = tokens[__ks_5];
						if(recognize[token](this, c)) {
							return token;
						}
					}
					return Token.INVALID;
				}
			},
			match: function() {
				return Scanner.prototype.__ks_func_match_0.apply(this, arguments);
			},
			__ks_func_matchM_0: function(matcher) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(matcher === void 0 || matcher === null) {
					throw new TypeError("'matcher' is not nullable");
				}
				else if(!KSType.isFunction(matcher)) {
					throw new TypeError("'matcher' is not of type 'Function'");
				}
				if(this._eof) {
					return Token.EOF;
				}
				else {
					return matcher(this, this._index - 1);
				}
			},
			matchM: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_matchM_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_next_0: function(length) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(length === void 0 || length === null) {
					throw new TypeError("'length' is not nullable");
				}
				this._nextIndex = this._index + length;
				this._nextColumn = this._column + length;
				return true;
			},
			next: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_next_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_nextLine_0: function(length) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(length === void 0 || length === null) {
					throw new TypeError("'length' is not nullable");
				}
				this._nextIndex = this._index + length;
				this._nextColumn = 1;
				this._nextLine = this._line + 1;
				return true;
			},
			nextLine: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_nextLine_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_position_0: function() {
				return {
					start: {
						line: this._line,
						column: this._column
					},
					end: {
						line: this._nextLine,
						column: this._nextColumn
					}
				};
			},
			position: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_position_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_rollback_0: function(mark) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mark === void 0 || mark === null) {
					throw new TypeError("'mark' is not nullable");
				}
				this._eof = mark.eof;
				this._index = mark.index;
				this._line = mark.line;
				this._column = mark.column;
				return true;
			},
			rollback: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_rollback_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_scanIdentifier_0: function(substr) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(substr === void 0 || substr === null) {
					throw new TypeError("'substr' is not nullable");
				}
				var index = this._index - 1;
				var c;
				while((++index < this._length) && (((c = this._data.charCodeAt(index)) === 36) || ((c >= 48) && (c <= 57)) || ((c >= 65) && (c <= 90)) || (c === 95) || ((c >= 97) && (c <= 122)))) {
				}
				if(substr) {
					var identifier = this._data.substring(this._index + 1, index);
					this.next(index - this._index);
					return identifier;
				}
				else {
					this.next(index - this._index);
				}
			},
			scanIdentifier: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_scanIdentifier_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_skip_0: function() {
				this.skip(this._index - 1);
			},
			__ks_func_skip_1: function(index) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				var c;
				while(++index < this._length) {
					c = this._data.charCodeAt(index);
					if((c === 32) || (c === 9)) {
						this._column++;
					}
					else if(c === 47) {
						c = this._data.charCodeAt(index + 1);
						if(c === 42) {
							var oldIndex = index;
							var line = this._line;
							var column = this._column;
							var left = 1;
							var lineIndex = index - this._column;
							++index;
							while(++index < this._length) {
								c = this._data.charCodeAt(index);
								if(c === 10) {
									line++;
									column = 1;
									lineIndex = index;
								}
								else if((c === 42) && (this._data.charCodeAt(index + 1) === 47)) {
									--left;
									if(left === 0) {
										++index;
										column += index - lineIndex;
										break;
									}
								}
								else if((c === 47) && (this._data.charCodeAt(index + 1) === 42)) {
									++left;
								}
							}
							if(left !== 0) {
								this._nextIndex = this._index = oldIndex;
								this._nextColumn = this._column;
								this._nextLine = this._line;
								return 47;
							}
							this._line = line;
							this._column = column;
						}
						else if(c === 47) {
							var lineIndex = index;
							while((++index < this._length) && (this._data.charCodeAt(index + 1) !== 10)) {
							}
							this._column += index - lineIndex;
						}
						else {
							this._nextIndex = this._index = index;
							this._nextColumn = this._column;
							this._nextLine = this._line;
							return 47;
						}
					}
					else {
						this._nextIndex = this._index = index;
						this._nextColumn = this._column;
						this._nextLine = this._line;
						return c;
					}
				}
				this._nextIndex = this._index = index;
				this._nextColumn = this._column;
				this._nextLine = this._line;
				this.eof();
				return -1;
			},
			skip: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_skip_0.apply(this);
				}
				else if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_skip_1.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_skipComments_0: function() {
				var index = this._index - 1;
				var c;
				while(++index < this._length) {
					c = this._data.charCodeAt(index);
					if((c === 32) || (c === 9)) {
						this._column++;
					}
					else if(c === 47) {
						c = this._data.charCodeAt(index + 1);
						if(c === 42) {
							var oldIndex = index;
							var line = this._line;
							var column = this._column;
							var left = 1;
							var lineIndex = index - this._column;
							++index;
							while(++index < this._length) {
								c = this._data.charCodeAt(index);
								if(c === 10) {
									line++;
									column = 1;
									lineIndex = index;
								}
								else if((c === 42) && (this._data.charCodeAt(index + 1) === 47)) {
									--left;
									if(left === 0) {
										++index;
										column += index - lineIndex;
										break;
									}
								}
								else if((c === 47) && (this._data.charCodeAt(index + 1) === 42)) {
									++left;
								}
							}
							if(left !== 0) {
								this._nextIndex = this._index = oldIndex;
								this._nextColumn = this._column;
								this._nextLine = this._line;
								return 47;
							}
							while(++index < this._length) {
								c = this._data.charCodeAt(index);
								if((c === 32) || (c === 9)) {
									column++;
								}
								else {
									break;
								}
							}
							c = this._data.charCodeAt(index);
							if((c === 13) && (this._data.charCodeAt(index + 1) === 10)) {
								line++;
								column = 1;
								++index;
							}
							else if((c === 10) || (c === 13)) {
								line++;
								column = 1;
							}
							else {
								--index;
							}
							this._line = line;
							this._column = column;
						}
						else if(c === 47) {
							var lineIndex = index;
							while((++index < this._length) && (this._data.charCodeAt(index + 1) !== 10)) {
							}
							this._column += index - lineIndex;
							c = this._data.charCodeAt(index + 1);
							if((c === 13) && (this._data.charCodeAt(index + 2) === 10)) {
								this._line++;
								this._column = 1;
								index += 2;
							}
							else if((c === 10) || (c === 13)) {
								this._line++;
								this._column = 1;
								++index;
							}
						}
						else {
							this._nextIndex = this._index = index;
							this._nextColumn = this._column;
							this._nextLine = this._line;
							return 47;
						}
					}
					else {
						this._nextIndex = this._index = index;
						this._nextColumn = this._column;
						this._nextLine = this._line;
						return c;
					}
				}
				this._nextIndex = this._index = index;
				this._nextColumn = this._column;
				this._nextLine = this._line;
				this.eof();
				return -1;
			},
			skipComments: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_skipComments_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_skipNewLine_0: function(index) {
				if(index === void 0 || index === null) {
					index = this._index - 1;
				}
				var c;
				while(++index < this._length) {
					c = this._data.charCodeAt(index);
					if((c === 13) && (this._data.charCodeAt(index + 1) === 10)) {
						this._line++;
						this._column = 1;
						++index;
					}
					else if((c === 10) || (c === 13)) {
						this._line++;
						this._column = 1;
					}
					else if((c === 32) || (c === 9)) {
						this._column++;
					}
					else if(c === 47) {
						c = this._data.charCodeAt(index + 1);
						if(c === 42) {
							var oldIndex = index;
							var line = this._line;
							var column = this._column;
							var left = 1;
							var lineIndex = index - this._column;
							++index;
							while(++index < this._length) {
								c = this._data.charCodeAt(index);
								if(c === 10) {
									line++;
									column = 1;
									lineIndex = index;
								}
								else if((c === 42) && (this._data.charCodeAt(index + 1) === 47)) {
									--left;
									if(left === 0) {
										++index;
										column += index - lineIndex;
										break;
									}
								}
								else if((c === 47) && (this._data.charCodeAt(index + 1) === 42)) {
									++left;
								}
							}
							if(left !== 0) {
								this._nextIndex = this._index = oldIndex;
								this._nextColumn = this._column;
								this._nextLine = this._line;
								return 47;
							}
							this._line = line;
							this._column = column;
						}
						else if(c === 47) {
							var lineIndex = index;
							while((++index < this._length) && (this._data.charCodeAt(index + 1) !== 10)) {
							}
							this._column += index - lineIndex;
						}
						else {
							this._nextIndex = this._index = index;
							this._nextColumn = this._column;
							this._nextLine = this._line;
							return 47;
						}
					}
					else {
						this._nextIndex = this._index = index;
						this._nextColumn = this._column;
						this._nextLine = this._line;
						return c;
					}
				}
				this._nextIndex = this._index = index;
				this._nextColumn = this._column;
				this._nextLine = this._line;
				this.eof();
				return -1;
			},
			skipNewLine: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Scanner.prototype.__ks_func_skipNewLine_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_startPosition_0: function() {
				return {
					line: this._line,
					column: this._column
				};
			},
			startPosition: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_startPosition_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_substringAt_0: function(d) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(d === void 0 || d === null) {
					throw new TypeError("'d' is not nullable");
				}
				return this._data.substr(this._index + d);
			},
			substringAt: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_substringAt_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_test_0: function(token) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(token === void 0 || token === null) {
					throw new TypeError("'token' is not nullable");
				}
				else if(!KSType.is(token, Token)) {
					throw new TypeError("'token' is not of type 'Token'");
				}
				if(this._eof) {
					return false;
				}
				else {
					var c = this.skip(this._index - 1);
					if(c === -1) {
						return this.eof() === token;
					}
					else {
						return recognize[token](this, c);
					}
				}
			},
			test: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_test_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_testNS_0: function(token) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(token === void 0 || token === null) {
					throw new TypeError("'token' is not nullable");
				}
				else if(!KSType.is(token, Token)) {
					throw new TypeError("'token' is not of type 'Token'");
				}
				if(this._eof) {
					return false;
				}
				else {
					return recognize[token](this, this._data.charCodeAt(this._index));
				}
			},
			testNS: function() {
				if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_testNS_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_toQuote_0: function() {
				if(this._eof) {
					return "\"EOF\"";
				}
				else if((this._index + 1) >= this._nextIndex) {
					var c = this._data.charCodeAt(this._index);
					if(c === 10) {
						return "\"NewLine\"";
					}
					else {
						return "\"" + this._data[this._index] + "\"";
					}
				}
				else {
					return "\"" + this._data.substring(this._index, this._nextIndex) + "\"";
				}
			},
			toQuote: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_toQuote_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_value_0: function() {
				return this._data.substring(this._index, this._nextIndex);
			},
			__ks_func_value_1: function(token) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(token === void 0 || token === null) {
					throw new TypeError("'token' is not nullable");
				}
				else if(!KSType.is(token, Token)) {
					throw new TypeError("'token' is not of type 'Token'");
				}
				if(KSType.isFunction(overhauls[token])) {
					return overhauls[token](this._data.substring(this._index, this._nextIndex));
				}
				else {
					return this._data.substring(this._index, this._nextIndex);
				}
			},
			value: function() {
				if(arguments.length === 0) {
					return Scanner.prototype.__ks_func_value_0.apply(this);
				}
				else if(arguments.length === 1) {
					return Scanner.prototype.__ks_func_value_1.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		});
		var ExpressionMode = {
			Default: 0,
			NoAnonymousFunction: 1,
			NoAwait: 2,
			NoObject: 4,
			WithMacro: 8
		};
		var MacroTerminator = {
			COMMA: 0,
			NEWLINE: 1,
			RIGHT_CURLY: 2,
			RIGHT_ROUND: 4,
			RIGHT_SQUARE: 8
		};
		MacroTerminator.Array = MacroTerminator.COMMA | MacroTerminator.NEWLINE | MacroTerminator.RIGHT_SQUARE;
		MacroTerminator.List = MacroTerminator.COMMA | MacroTerminator.NEWLINE | MacroTerminator.RIGHT_ROUND;
		MacroTerminator.Object = MacroTerminator.COMMA | MacroTerminator.NEWLINE | MacroTerminator.RIGHT_CURLY;
		MacroTerminator.Parenthesis = MacroTerminator.NEWLINE | MacroTerminator.RIGHT_ROUND;
		var ParameterMode = {
			Function: 1,
			Macro: 2,
			Method: 3
		};
		var ParserMode = {
			Default: 0,
			MacroExpression: 1
		};
		var NO = {
			ok: false
		};
		var Parser = Helper.class({
			$name: "Parser",
			$create: function() {
				this.__ks_init();
				this.__ks_cons(arguments);
			},
			__ks_init_1: function() {
				this._history = [];
				this._mode = ParserMode.Default;
			},
			__ks_init: function() {
				Parser.prototype.__ks_init_1.call(this);
			},
			__ks_cons_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				else if(!KSType.isString(data)) {
					throw new TypeError("'data' is not of type 'String'");
				}
				this._scanner = new Scanner(data);
			},
			__ks_cons: function(args) {
				if(args.length === 1) {
					Parser.prototype.__ks_cons_0.apply(this, args);
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			},
			__ks_func_commit_0: function() {
				this._token = this._scanner.commit();
				return this;
			},
			commit: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_commit_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_mark_0: function() {
				return this._scanner.mark();
			},
			mark: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_mark_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_match_0: function() {
				var tokens = Array.prototype.slice.call(arguments, 0, arguments.length);
				return this._token = this._scanner.match.apply(this._scanner, tokens);
			},
			match: function() {
				return Parser.prototype.__ks_func_match_0.apply(this, arguments);
			},
			__ks_func_matchM_0: function(matcher) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(matcher === void 0 || matcher === null) {
					throw new TypeError("'matcher' is not nullable");
				}
				else if(!KSType.isFunction(matcher)) {
					throw new TypeError("'matcher' is not of type 'Function'");
				}
				return this._token = this._scanner.matchM(matcher);
			},
			matchM: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_matchM_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_position_0: function() {
				return this._scanner.position();
			},
			position: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_position_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_relocate_0: function(node, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				if(last === void 0) {
					last = null;
				}
				if(first !== null) {
					node.start = node.value.start = first.start;
				}
				if(last !== null) {
					node.end = node.value.end = last.end;
				}
				return node;
			},
			relocate: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_relocate_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_rollback_0: function(mark) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mark === void 0 || mark === null) {
					throw new TypeError("'mark' is not nullable");
				}
				this._token = mark.token;
				return this._scanner.rollback(mark);
			},
			rollback: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_rollback_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_skipNewLine_0: function() {
				if(this._scanner.skipNewLine() === -1) {
					this._token = Token.EOF;
				}
				else {
					this._token = Token.INVALID;
				}
			},
			skipNewLine: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_skipNewLine_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_test_0: function(token) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(token === void 0 || token === null) {
					throw new TypeError("'token' is not nullable");
				}
				if(this._scanner.test(token)) {
					this._token = token;
					return true;
				}
				else {
					return false;
				}
			},
			test: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_test_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_testNS_0: function(token) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(token === void 0 || token === null) {
					throw new TypeError("'token' is not nullable");
				}
				if(this._scanner.testNS(token)) {
					this._token = token;
					return true;
				}
				else {
					return false;
				}
			},
			testNS: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_testNS_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_throw_0: function() {
				throw new SyntaxError("Unexpected " + this._scanner.toQuote() + " at line " + this._scanner.line() + " and column " + this._scanner.column());
			},
			__ks_func_throw_1: function(expected) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(expected === void 0 || expected === null) {
					throw new TypeError("'expected' is not nullable");
				}
				else if(!KSType.isString(expected)) {
					throw new TypeError("'expected' is not of type 'String'");
				}
				throw new SyntaxError("Expecting \"" + expected + "\" but got " + this._scanner.toQuote() + " at line " + this._scanner.line() + " and column " + this._scanner.column());
			},
			__ks_func_throw_2: function(expecteds) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(expecteds === void 0 || expecteds === null) {
					throw new TypeError("'expecteds' is not nullable");
				}
				else if(!KSType.isArray(expecteds)) {
					throw new TypeError("'expecteds' is not of type 'Array'");
				}
				throw new SyntaxError("Expecting \"" + expecteds.slice(0, expecteds.length - 1).join("\", \"") + "\" or \"" + expecteds[expecteds.length - 1] + "\" but got " + this._scanner.toQuote() + " at line " + this._scanner.line() + " and column " + this._scanner.column());
			},
			throw: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_throw_0.apply(this);
				}
				else if(arguments.length === 1) {
					if(KSType.isString(arguments[0])) {
						return Parser.prototype.__ks_func_throw_1.apply(this, arguments);
					}
					else {
						return Parser.prototype.__ks_func_throw_2.apply(this, arguments);
					}
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_until_0: function(token) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(token === void 0 || token === null) {
					throw new TypeError("'token' is not nullable");
				}
				return !this._scanner.test(token) && !this._scanner.isEOF();
			},
			until: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_until_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_value_0: function() {
				return this._scanner.value(this._token);
			},
			value: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_value_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_yep_0: function() {
				var position = this._scanner.position();
				return {
					ok: true,
					start: position.start,
					end: position.end
				};
			},
			__ks_func_yep_1: function(value) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				return {
					ok: true,
					value: value,
					start: value.start,
					end: value.end
				};
			},
			__ks_func_yep_2: function(value, first, last) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(last === void 0 || last === null) {
					throw new TypeError("'last' is not nullable");
				}
				return {
					ok: true,
					value: value,
					start: first.start,
					end: last.end
				};
			},
			yep: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_yep_0.apply(this);
				}
				else if(arguments.length === 1) {
					return Parser.prototype.__ks_func_yep_1.apply(this, arguments);
				}
				else if(arguments.length === 3) {
					return Parser.prototype.__ks_func_yep_2.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_yes_0: function() {
				var position = this._scanner.position();
				this.commit();
				return {
					ok: true,
					start: position.start,
					end: position.end
				};
			},
			__ks_func_yes_1: function(value) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				var start = KSType.isValue(value.start) ? value.start : this._scanner.startPosition();
				var end = KSType.isValue(value.end) ? value.end : this._scanner.endPosition();
				this.commit();
				return {
					ok: true,
					value: value,
					start: start,
					end: end
				};
			},
			yes: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_yes_0.apply(this);
				}
				else if(arguments.length === 1) {
					return Parser.prototype.__ks_func_yes_1.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_NL_0M_0: function() {
				this.skipNewLine();
			},
			NL_0M: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_NL_0M_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_altArrayComprehension_0: function(expression, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var loop = this.reqForExpression(this.yes());
				this.NL_0M();
				if(!this.test(Token.RIGHT_SQUARE)) {
					this.throw("]");
				}
				return this.yep(AST.ArrayComprehension(expression, loop, first, this.yes()));
			},
			altArrayComprehension: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_altArrayComprehension_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_altArrayList_0: function(expression, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var values = [expression];
				while(this.match(Token.RIGHT_SQUARE, Token.COMMA, Token.NEWLINE) !== null) {
					if(this._token === Token.RIGHT_SQUARE) {
						return this.yep(AST.ArrayExpression(values, first, this.yes()));
					}
					else if(this._token === Token.COMMA) {
						this.commit().NL_0M();
						values.push(this.reqExpression(null, MacroTerminator.Array));
					}
					else if(this._token === Token.NEWLINE) {
						this.commit().NL_0M();
						if(this.match(Token.RIGHT_SQUARE, Token.COMMA) === Token.COMMA) {
							this.commit().NL_0M();
							values.push(this.reqExpression(null, MacroTerminator.Array));
						}
						else if(this._token === Token.RIGHT_SQUARE) {
							return this.yep(AST.ArrayExpression(values, first, this.yes()));
						}
						else {
							values.push(this.reqExpression(null, MacroTerminator.Array));
						}
					}
					else {
						this.throw("]");
					}
				}
			},
			altArrayList: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_altArrayList_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_altDestructuringObjectItem_0: function(name) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(this.match(Token.EQUALS, Token.COLON) === Token.EQUALS) {
					this.commit();
					var defaultValue = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.BindingElement(name, null, null, defaultValue, name, defaultValue));
				}
				else if(this._token === Token.COLON) {
					this.commit();
					var alias = this.reqVariableIdentifier();
					if(this.test(Token.EQUALS)) {
						this.commit();
						var defaultValue = this.reqExpression(ExpressionMode.Default);
						return this.yep(AST.BindingElement(alias, name, null, defaultValue, name, defaultValue));
					}
					else {
						return this.yep(AST.BindingElement(alias, name, null, null, name, alias));
					}
				}
				else {
					return this.yep(AST.BindingElement(name, null, null, null, name, name));
				}
			},
			altDestructuringObjectItem: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_altDestructuringObjectItem_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_altForExpressionFrom_0: function(declaration, rebindable, variable, first) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(declaration === void 0 || declaration === null) {
					throw new TypeError("'declaration' is not nullable");
				}
				if(rebindable === void 0 || rebindable === null) {
					throw new TypeError("'rebindable' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.commit();
				var from = this.reqExpression(ExpressionMode.Default);
				var til, to;
				if(this.match(Token.TIL, Token.TO) === Token.TIL) {
					this.commit();
					til = this.reqExpression(ExpressionMode.Default);
				}
				else if(this._token === Token.TO) {
					this.commit();
					to = this.reqExpression(ExpressionMode.Default);
				}
				else {
					this.throw(["til", "to"]);
				}
				var by;
				if(this.test(Token.BY)) {
					this.commit();
					by = this.reqExpression(ExpressionMode.Default);
				}
				var until, __ks_while_1;
				if(this.match(Token.UNTIL, Token.WHILE) === Token.UNTIL) {
					this.commit();
					until = this.reqExpression(ExpressionMode.Default);
				}
				else if(this._token === Token.WHILE) {
					this.commit();
					__ks_while_1 = this.reqExpression(ExpressionMode.Default);
				}
				this.NL_0M();
				var whenExp;
				if(this.test(Token.WHEN)) {
					var __ks_first_1 = this.yes();
					var __ks_21;
					whenExp = this.relocate(this.reqExpression(ExpressionMode.Default), __ks_first_1, null);
				}
				return this.yep(AST.ForFromStatement(declaration, rebindable, variable, from, til, to, by, until, __ks_while_1, whenExp, first, KSType.isValue(whenExp) ? whenExp : KSType.isValue(__ks_while_1) ? __ks_while_1 : KSType.isValue(until) ? until : KSType.isValue(by) ? by : KSType.isValue(to) ? to : KSType.isValue(til) ? til : from));
			},
			altForExpressionFrom: function() {
				if(arguments.length === 4) {
					return Parser.prototype.__ks_func_altForExpressionFrom_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_altForExpressionIn_0: function(declaration, rebindable, value, index, expression, first) {
				if(arguments.length < 6) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(declaration === void 0 || declaration === null) {
					throw new TypeError("'declaration' is not nullable");
				}
				if(rebindable === void 0 || rebindable === null) {
					throw new TypeError("'rebindable' is not nullable");
				}
				if(value === void 0) {
					value = null;
				}
				if(index === void 0) {
					index = null;
				}
				if(expression === void 0 || expression === null) {
					throw new TypeError("'expression' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var desc = null;
				if(this.test(Token.DESC)) {
					desc = this.yes();
				}
				this.NL_0M();
				var from, til, to;
				if(this.test(Token.FROM)) {
					this.commit();
					from = this.reqExpression(ExpressionMode.Default);
				}
				if(this.match(Token.TIL, Token.TO) === Token.TIL) {
					this.commit();
					til = this.reqExpression(ExpressionMode.Default);
				}
				else if(this._token === Token.TO) {
					this.commit();
					to = this.reqExpression(ExpressionMode.Default);
				}
				this.NL_0M();
				var until, __ks_while_1;
				if(this.match(Token.UNTIL, Token.WHILE) === Token.UNTIL) {
					this.commit();
					until = this.reqExpression(ExpressionMode.Default);
				}
				else if(this._token === Token.WHILE) {
					this.commit();
					__ks_while_1 = this.reqExpression(ExpressionMode.Default);
				}
				this.NL_0M();
				var whenExp;
				if(this.test(Token.WHEN)) {
					var __ks_first_1 = this.yes();
					var __ks_22;
					whenExp = this.relocate(this.reqExpression(ExpressionMode.Default), __ks_first_1, null);
				}
				return this.yep(AST.ForInStatement(declaration, rebindable, value, index, expression, desc, from, til, to, until, __ks_while_1, whenExp, first, KSType.isValue(whenExp) ? whenExp : KSType.isValue(__ks_while_1) ? __ks_while_1 : KSType.isValue(until) ? until : KSType.isValue(to) ? to : KSType.isValue(til) ? til : KSType.isValue(from) ? from : KSType.isValue(desc) ? desc : expression));
			},
			altForExpressionIn: function() {
				if(arguments.length === 6) {
					return Parser.prototype.__ks_func_altForExpressionIn_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_altForExpressionInRange_0: function(declaration, rebindable, value, index, first) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(declaration === void 0 || declaration === null) {
					throw new TypeError("'declaration' is not nullable");
				}
				if(rebindable === void 0 || rebindable === null) {
					throw new TypeError("'rebindable' is not nullable");
				}
				if(value === void 0) {
					value = null;
				}
				if(index === void 0) {
					index = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.commit();
				var operand = this.tryPrefixedOperand(ExpressionMode.Default);
				if(operand.ok) {
					if((this.match(Token.LEFT_ANGLE, Token.DOT_DOT) === Token.LEFT_ANGLE) || (this._token === Token.DOT_DOT)) {
						var then = this._token === Token.LEFT_ANGLE;
						if(then) {
							this.commit();
							if(!this.test(Token.DOT_DOT)) {
								this.throw("..");
							}
							this.commit();
						}
						else {
							this.commit();
						}
						var til = this.test(Token.LEFT_ANGLE);
						if(til) {
							this.commit();
						}
						var toOperand = this.reqPrefixedOperand(ExpressionMode.Default);
						var byOperand;
						if(this.test(Token.DOT_DOT)) {
							this.commit();
							byOperand = this.reqPrefixedOperand(ExpressionMode.Default);
						}
						return this.altForExpressionRange(declaration, rebindable, value, index, then ? null : operand, then ? operand : null, til ? toOperand : null, til ? null : toOperand, byOperand, first);
					}
					else {
						return this.altForExpressionIn(declaration, rebindable, value, index, operand, first);
					}
				}
				else {
					return this.altForExpressionIn(declaration, rebindable, value, index, this.reqExpression(ExpressionMode.Default), first);
				}
			},
			altForExpressionInRange: function() {
				if(arguments.length === 5) {
					return Parser.prototype.__ks_func_altForExpressionInRange_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_altForExpressionOf_0: function(declaration, rebindable, key, value, first) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(declaration === void 0 || declaration === null) {
					throw new TypeError("'declaration' is not nullable");
				}
				if(rebindable === void 0 || rebindable === null) {
					throw new TypeError("'rebindable' is not nullable");
				}
				if(key === void 0) {
					key = null;
				}
				if(value === void 0) {
					value = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.commit();
				var expression = this.reqExpression(ExpressionMode.Default);
				var until, __ks_while_1;
				if(this.match(Token.UNTIL, Token.WHILE) === Token.UNTIL) {
					this.commit();
					until = this.reqExpression(ExpressionMode.Default);
				}
				else if(this._token === Token.WHILE) {
					this.commit();
					__ks_while_1 = this.reqExpression(ExpressionMode.Default);
				}
				this.NL_0M();
				var whenExp;
				if(this.test(Token.WHEN)) {
					var __ks_first_1 = this.yes();
					var __ks_23;
					whenExp = this.relocate(this.reqExpression(ExpressionMode.Default), __ks_first_1, null);
				}
				return this.yep(AST.ForOfStatement(declaration, rebindable, key, value, expression, until, __ks_while_1, whenExp, first, KSType.isValue(whenExp) ? whenExp : KSType.isValue(__ks_while_1) ? __ks_while_1 : KSType.isValue(until) ? until : expression));
			},
			altForExpressionOf: function() {
				if(arguments.length === 5) {
					return Parser.prototype.__ks_func_altForExpressionOf_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_altForExpressionRange_0: function(declaration, rebindable, value, index, from, then, til, to, by, first) {
				if(arguments.length < 10) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 10)");
				}
				if(declaration === void 0 || declaration === null) {
					throw new TypeError("'declaration' is not nullable");
				}
				if(rebindable === void 0 || rebindable === null) {
					throw new TypeError("'rebindable' is not nullable");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				if(index === void 0) {
					index = null;
				}
				if(from === void 0) {
					from = null;
				}
				if(then === void 0) {
					then = null;
				}
				if(til === void 0) {
					til = null;
				}
				if(to === void 0) {
					to = null;
				}
				if(by === void 0) {
					by = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var until, __ks_while_1;
				if(this.match(Token.UNTIL, Token.WHILE) === Token.UNTIL) {
					this.commit();
					until = this.reqExpression(ExpressionMode.Default);
				}
				else if(this._token === Token.WHILE) {
					this.commit();
					__ks_while_1 = this.reqExpression(ExpressionMode.Default);
				}
				this.NL_0M();
				var whenExp;
				if(this.test(Token.WHEN)) {
					var __ks_first_1 = this.yes();
					var __ks_24;
					whenExp = this.relocate(this.reqExpression(ExpressionMode.Default), __ks_first_1, null);
				}
				return this.yep(AST.ForRangeStatement(declaration, rebindable, value, index, from, then, til, to, by, until, __ks_while_1, whenExp, first, KSType.isValue(whenExp) ? whenExp : KSType.isValue(__ks_while_1) ? __ks_while_1 : KSType.isValue(until) ? until : KSType.isValue(by) ? by : KSType.isValue(to) ? to : KSType.isValue(til) ? til : KSType.isValue(then) ? then : from));
			},
			altForExpressionRange: function() {
				if(arguments.length === 10) {
					return Parser.prototype.__ks_func_altForExpressionRange_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_altLetStatementAwait_0: function(first, variables, equals) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(variables === void 0 || variables === null) {
					throw new TypeError("'variables' is not nullable");
				}
				if(equals === void 0 || equals === null) {
					throw new TypeError("'equals' is not nullable");
				}
				if(!this.test(Token.AWAIT)) {
					this.throw("await");
				}
				this.commit();
				var operand = this.reqPrefixedOperand(ExpressionMode.Default);
				return this.yep(AST.VariableDeclaration(variables, true, equals, true, operand, first, operand));
			},
			altLetStatementAwait: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_altLetStatementAwait_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_altLetStatementEquals_0: function(first, variables, equals) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(variables === void 0 || variables === null) {
					throw new TypeError("'variables' is not nullable");
				}
				if(equals === void 0 || equals === null) {
					throw new TypeError("'equals' is not nullable");
				}
				this.NL_0M();
				if(this.test(Token.AWAIT)) {
					this.commit();
					var operand = this.reqPrefixedOperand(ExpressionMode.Default);
					return this.yep(AST.VariableDeclaration(variables, true, equals, true, operand, first, operand));
				}
				else {
					var init = this.reqExpression(ExpressionMode.Default);
					if(this.match(Token.IF, Token.UNLESS) === Token.IF) {
						var __ks_first_1 = this.yes();
						var condition = this.reqExpression(ExpressionMode.Default);
						if(this.test(Token.ELSE)) {
							this.commit();
							var whenFalse = this.reqExpression(ExpressionMode.Default);
							var __ks_26;
							init = this.yep(AST.IfExpression(condition, init, whenFalse, init, whenFalse));
						}
						else {
							var __ks_27;
							init = this.yep(AST.IfExpression(condition, init, null, init, condition));
						}
					}
					else if(this._token === Token.UNLESS) {
						this.commit();
						var condition = this.reqExpression(ExpressionMode.Default);
						var __ks_28;
						init = this.yep(AST.UnlessExpression(condition, init, init, condition));
					}
					var statement, __ks_25;
					return statement = this.yep(AST.VariableDeclaration(variables, true, equals, false, init, first, init));
				}
			},
			altLetStatementEquals: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_altLetStatementEquals_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqArray_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.test(Token.RIGHT_SQUARE)) {
					return this.yep(AST.ArrayExpression([], first, this.yes()));
				}
				var operand = this.tryPrefixedOperand(ExpressionMode.Default);
				if(operand.ok && ((this.match(Token.LEFT_ANGLE, Token.DOT_DOT) === Token.LEFT_ANGLE) || (this._token === Token.DOT_DOT))) {
					var then = this._token === Token.LEFT_ANGLE;
					if(then) {
						this.commit();
						if(!this.test(Token.DOT_DOT)) {
							this.throw("..");
						}
						this.commit();
					}
					else {
						this.commit();
					}
					var til = this.test(Token.LEFT_ANGLE);
					if(til) {
						this.commit();
					}
					var toOperand = this.reqPrefixedOperand(ExpressionMode.Default);
					var byOperand;
					if(this.test(Token.DOT_DOT)) {
						this.commit();
						byOperand = this.reqPrefixedOperand(ExpressionMode.Default);
					}
					if(!this.test(Token.RIGHT_SQUARE)) {
						this.throw("]");
					}
					if(then) {
						if(til) {
							return this.yep(AST.ArrayRangeTI(operand, toOperand, byOperand, first, this.yes()));
						}
						else {
							return this.yep(AST.ArrayRangeTO(operand, toOperand, byOperand, first, this.yes()));
						}
					}
					else {
						if(til) {
							return this.yep(AST.ArrayRangeFI(operand, toOperand, byOperand, first, this.yes()));
						}
						else {
							return this.yep(AST.ArrayRangeFO(operand, toOperand, byOperand, first, this.yes()));
						}
					}
				}
				else {
					var expression;
					if(operand.ok) {
						expression = this.reqOperation(ExpressionMode.Default, operand);
					}
					else {
						this.NL_0M();
						if(this.test(Token.RIGHT_SQUARE)) {
							return this.yep(AST.ArrayExpression([], first, this.yes()));
						}
						expression = this.reqExpression(null, MacroTerminator.Array);
					}
					if(this.match(Token.RIGHT_SQUARE, Token.FOR, Token.NEWLINE) === Token.RIGHT_SQUARE) {
						return this.yep(AST.ArrayExpression([expression], first, this.yes()));
					}
					else if(this._token === Token.FOR) {
						return this.altArrayComprehension(expression, first);
					}
					else if(this._token === Token.NEWLINE) {
						var mark = this.mark();
						this.commit().NL_0M();
						if(this.match(Token.RIGHT_SQUARE, Token.FOR) === Token.RIGHT_SQUARE) {
							return this.yep(AST.ArrayExpression([expression], first, this.yes()));
						}
						else if(this._token === Token.FOR) {
							return this.altArrayComprehension(expression, first);
						}
						else {
							this.rollback(mark);
							return this.altArrayList(expression, first);
						}
					}
					else {
						return this.altArrayList(expression, first);
					}
				}
			},
			reqArray: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqArray_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqAttribute_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var declaration = this.reqAttributeMember();
				if(!this.test(Token.RIGHT_SQUARE)) {
					this.throw("]");
				}
				var last = this.yes();
				if(!this.test(Token.NEWLINE)) {
					this.throw("NewLine");
				}
				this.commit();
				this._token = this._scanner.skipComments();
				return this.yep(AST.AttributeDeclaration(declaration, first, last));
			},
			reqAttribute: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqAttribute_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqAttributeBlock_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var declaration = this.reqAttributeMember();
				if(!this.test(Token.RIGHT_SQUARE)) {
					this.throw("]");
				}
				var last = this.yes();
				this.reqNL_EOF_1M();
				return this.yep(AST.AttributeDeclaration(declaration, first, last));
			},
			reqAttributeBlock: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqAttributeBlock_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqAttributeList_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var attributes = [this.reqAttribute(first)];
				while(this.test(Token.HASH_LEFT_SQUARE)) {
					attributes.push(this.reqAttribute(this.yes()));
				}
				return this.yep(attributes);
			},
			reqAttributeList: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqAttributeList_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqAttributeMember_0: function() {
				var identifier = this.reqIdentifier();
				if(this.match(Token.MINUS, Token.EQUALS, Token.LEFT_ROUND) === Token.MINUS) {
					var plus;
					do {
						this.commit();
						plus = this.reqIdentifier();
						identifier.value.name += "-" + plus.value.name;
						identifier.value.end = identifier.end = plus.end;
					}
					while(this.test(Token.MINUS))
					return identifier;
				}
				else if(this._token === Token.EQUALS) {
					this.commit();
					var value = this.reqString();
					return this.yep(AST.AttributeOperation(identifier, value, identifier, value));
				}
				else if(this._token === Token.LEFT_ROUND) {
					this.commit();
					var __ks_arguments_1 = [this.reqAttributeMember()];
					while(this.test(Token.COMMA)) {
						this.commit();
						__ks_arguments_1.push(this.reqAttributeMember());
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
					return this.yep(AST.AttributeExpression(identifier, __ks_arguments_1, identifier, this.yes()));
				}
				else {
					return identifier;
				}
			},
			reqAttributeMember: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqAttributeMember_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqAwaitExpression_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var operand = this.reqPrefixedOperand(ExpressionMode.Default);
				return this.yep(AST.AwaitExpression(null, false, operand, first, operand));
			},
			reqAwaitExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqAwaitExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqBinaryOperand_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var mode = arguments[++__ks_i];
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var __ks__;
				var operand = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
				if(operand === null) {
					var mark = this.mark();
					var expression;
					if((expression = this.tryFunctionExpression(mode)).ok) {
						return expression;
					}
					else if(this.rollback(mark) && (expression = this.trySwitchExpression(mode)).ok) {
						return expression;
					}
					this.rollback(mark);
				}
				operand = this.reqPrefixedOperand(mode, operand);
				var operator;
				var __ks_5 = this.matchM(M.TYPE_OPERATOR);
				if(__ks_5 === Token.AS) {
					var __ks_29, __ks_30;
					operator = this.yep(AST.BinaryOperator(BinaryOperatorKind.TypeCasting, this.yes()));
				}
				else if(__ks_5 === Token.IS) {
					var __ks_31, __ks_32;
					operator = this.yep(AST.BinaryOperator(BinaryOperatorKind.TypeEquality, this.yes()));
				}
				else if(__ks_5 === Token.IS_NOT) {
					var __ks_33, __ks_34;
					operator = this.yep(AST.BinaryOperator(BinaryOperatorKind.TypeInequality, this.yes()));
				}
				else {
					return operand;
				}
				return this.yep(AST.BinaryExpression(operand, operator, this.reqTypeEntity(NO)));
			},
			reqBinaryOperand: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqBinaryOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqBlock_0: function(first) {
				if(first === void 0 || first === null) {
					first = NO;
				}
				if(!first.ok) {
					if(!this.test(Token.LEFT_CURLY)) {
						this.throw("{");
					}
					first = this.yes();
				}
				this.NL_0M();
				var attributes = [];
				var statements = [];
				var statement, attrs;
				while((this.match(Token.RIGHT_CURLY, Token.HASH_EXCLAMATION_LEFT_SQUARE, Token.HASH_LEFT_SQUARE) !== Token.EOF) && (this._token !== Token.RIGHT_CURLY)) {
					if(this._token === Token.HASH_EXCLAMATION_LEFT_SQUARE) {
						attributes.push(this.reqAttributeBlock(this.yes()));
					}
					else {
						if(this._token === Token.HASH_LEFT_SQUARE) {
							var __ks_35;
							attrs = this.reqAttributeList(this.yes());
						}
						else {
							attrs = null;
						}
						statements.push(statement = this.reqStatement());
						if(attrs === null) {
							statement.value.attributes = [];
						}
						else {
							statement.value.attributes = Helper.mapArray(attrs.value, function(attr) {
								return attr.value;
							});
							statement.value.start = statement.start = statement.value.attributes[0].start;
						}
					}
					this.NL_0M();
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.Block(attributes, statements, first, this.yes()));
			},
			reqBlock: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Parser.prototype.__ks_func_reqBlock_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqBreakStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return this.yep(AST.BreakStatement(first));
			},
			reqBreakStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqBreakStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqCatchOnClause_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var type = this.reqIdentifier();
				var binding;
				if(this.test(Token.CATCH)) {
					this.commit();
					var __ks_36;
					binding = this.reqIdentifier();
				}
				this.NL_0M();
				var body = this.reqBlock();
				return this.yep(AST.CatchClause(binding, type, body, first, body));
			},
			reqCatchOnClause: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqCatchOnClause_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqClassAbstractMethod_0: function(attributes, modifiers, first) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(attributes === void 0) {
					attributes = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				var name;
				if(this.test(Token.ASYNC)) {
					var async = this.reqIdentifier();
					var __ks_37;
					name = this.tryIdentifier();
					if(name.ok) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Async, async)));
					}
					else {
						name = async;
					}
				}
				else {
					name = this.reqIdentifier();
				}
				return this.reqClassAbstractMethodBody(attributes, modifiers, name, KSType.isValue(first) ? first : name);
			},
			reqClassAbstractMethod: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_reqClassAbstractMethod_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqClassAbstractMethodBody_0: function(attributes, modifiers, name, first) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0) {
					attributes = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var parameters = this.reqClassMethodParameterList();
				var type = this.reqFunctionReturns();
				var __ks_throws_1 = this.reqFunctionThrows();
				this.reqNL_1M();
				return this.yep(AST.MethodDeclaration(attributes, modifiers, name, parameters, type, __ks_throws_1, null, first, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
			},
			reqClassAbstractMethodBody: function() {
				if(arguments.length === 4) {
					return Parser.prototype.__ks_func_reqClassAbstractMethodBody_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqClassField_0: function(attributes, modifiers, name, type, first) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(attributes === void 0) {
					attributes = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var defaultValue;
				if(this.test(Token.EQUALS)) {
					this.commit();
					var __ks_38;
					defaultValue = this.reqExpression(ExpressionMode.Default);
				}
				this.reqNL_1M();
				return this.yep(AST.FieldDeclaration(attributes, modifiers, name, type, defaultValue, first, KSType.isValue(defaultValue) ? defaultValue : KSType.isValue(type) ? type : name));
			},
			reqClassField: function() {
				if(arguments.length === 5) {
					return Parser.prototype.__ks_func_reqClassField_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqClassMember_0: function(attributes, modifiers, first) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(attributes === void 0) {
					attributes = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				var name;
				if(this.test(Token.ASYNC)) {
					var async = this.reqIdentifier();
					var __ks_39;
					name = this.tryNameIST();
					if(name.ok) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Async, async)));
						return this.reqClassMethod(attributes, modifiers, name, null, KSType.isValue(first) ? first : async);
					}
					else {
						name = async;
					}
				}
				else {
					name = this.reqNameIST();
				}
				return this.reqClassMemberBody(attributes, modifiers, name, KSType.isValue(first) ? first : name);
			},
			reqClassMember: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_reqClassMember_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqClassMemberBody_0: function(attributes, modifiers, name, first) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(attributes === void 0) {
					attributes = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.match(Token.COLON, Token.LEFT_CURLY, Token.LEFT_ROUND) === Token.COLON) {
					this.commit();
					var type = this.reqTypeVar();
					if(this.test(Token.LEFT_CURLY)) {
						this.commit();
						return this.reqClassProperty(attributes, modifiers, name, type, first);
					}
					else {
						return this.reqClassField(attributes, modifiers, name, type, first);
					}
				}
				else if(this._token === Token.LEFT_CURLY) {
					this.commit();
					return this.reqClassProperty(attributes, modifiers, name, null, first);
				}
				else if(this._token === Token.LEFT_ROUND) {
					return this.reqClassMethod(attributes, modifiers, name, this.yes(), first);
				}
				else {
					return this.reqClassField(attributes, modifiers, name, null, first);
				}
			},
			reqClassMemberBody: function() {
				if(arguments.length === 4) {
					return Parser.prototype.__ks_func_reqClassMemberBody_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqClassMemberList_0: function(members) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				var first = null;
				var attributes = null;
				if(this.test(Token.HASH_LEFT_SQUARE)) {
					var __ks_40, __ks_41;
					attributes = this.reqAttributeList(first = this.yes());
				}
				var mark1 = this.mark();
				if(this.test(Token.MACRO)) {
					first = this.yes();
					var identifier;
					if(this.test(Token.LEFT_CURLY)) {
						this.commit().NL_0M();
						while(this.until(Token.RIGHT_CURLY)) {
							members.push(this.reqMacroStatement(attributes));
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						this.commit().reqNL_1M();
						return;
					}
					else if((identifier = this.tryIdentifier()).ok) {
						members.push(this.reqMacroStatement(attributes, identifier, first));
						return;
					}
					this.rollback(mark1);
					first = null;
				}
				var modifiers = [];
				if(this.match(Token.PRIVATE, Token.PROTECTED, Token.PUBLIC) === Token.PRIVATE) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Private, this.yes())));
				}
				else if(this._token === Token.PROTECTED) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Protected, this.yes())));
				}
				else if(this._token === Token.PUBLIC) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Public, this.yes())));
				}
				var mark2 = this.mark();
				if(this.test(Token.ABSTRACT)) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Abstract, this.yes())));
					if(!KSType.isValue(first)) {
						first = modifiers[0];
					}
					if(this.test(Token.LEFT_CURLY)) {
						this.commit().NL_0M();
						var attrs;
						while(this.until(Token.RIGHT_CURLY)) {
							if(this.test(Token.HASH_LEFT_SQUARE)) {
								var __ks_42;
								attrs = this.reqAttributeList(first = this.yes());
								if(attributes !== null) {
									attrs.value = [].concat(attributes.value, attrs.value);
								}
							}
							else {
								attrs = attributes;
								first = null;
							}
							members.push(this.reqClassAbstractMethod(attrs, modifiers, first));
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						this.commit();
						this.reqNL_1M();
					}
					else {
						var member = this.tryClassAbstractMethod(attributes, modifiers, first);
						if(member.ok) {
							members.push(member);
						}
						else {
							this.rollback(mark2);
							modifiers.pop();
							members.push(this.reqClassMember(attributes, modifiers, first));
						}
					}
				}
				else {
					if(this.test(Token.STATIC)) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Static, this.yes())));
					}
					if((first === null) && (modifiers.length !== 0)) {
						first = modifiers[0];
					}
					if((first !== null) && this.test(Token.LEFT_CURLY)) {
						this.commit().NL_0M();
						var attrs;
						while(this.until(Token.RIGHT_CURLY)) {
							if(this.test(Token.HASH_LEFT_SQUARE)) {
								var __ks_43;
								attrs = this.reqAttributeList(first = this.yes());
								if(attributes !== null) {
									attrs.value = [].concat(attributes.value, attrs.value);
								}
							}
							else {
								attrs = attributes;
								first = null;
							}
							members.push(this.reqClassMember(attrs, modifiers, first));
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						this.commit();
						this.reqNL_1M();
					}
					else {
						var member = this.tryClassMember(attributes, modifiers, first);
						if(member.ok) {
							members.push(member);
						}
						else {
							if(modifiers.length === 2) {
								this.rollback(mark2);
							}
							else {
								this.rollback(mark1);
							}
							modifiers.pop();
							members.push(this.reqClassMember(attributes, modifiers, first));
						}
					}
				}
			},
			reqClassMemberList: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqClassMemberList_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqClassMethod_0: function(attributes, modifiers, name, round, first) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(attributes === void 0) {
					attributes = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(round === void 0) {
					round = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var parameters = this.reqClassMethodParameterList(round);
				if(this.test(Token.NEWLINE)) {
					this.commit().NL_0M();
					return this.yep(AST.MethodDeclaration(attributes, modifiers, name, parameters, null, null, null, first, parameters));
				}
				else {
					var type = this.reqFunctionReturns();
					var __ks_throws_1 = this.reqFunctionThrows();
					var body = this.reqFunctionBody();
					this.reqNL_1M();
					return this.yep(AST.MethodDeclaration(attributes, modifiers, name, parameters, type, __ks_throws_1, body, first, body));
				}
			},
			reqClassMethod: function() {
				if(arguments.length === 5) {
					return Parser.prototype.__ks_func_reqClassMethod_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqClassMethodParameterList_0: function(top) {
				if(top === void 0 || top === null) {
					top = NO;
				}
				if(!top.ok) {
					if(!this.test(Token.LEFT_ROUND)) {
						this.throw("(");
					}
					var __ks_44;
					top = this.yes();
				}
				var parameters = [];
				while(this.until(Token.RIGHT_ROUND)) {
					while(this.reqParameter(parameters, ParameterMode.Method)) {
					}
				}
				if(!this.test(Token.RIGHT_ROUND)) {
					this.throw(")");
				}
				return this.yep(parameters, top, this.yes());
			},
			reqClassMethodParameterList: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Parser.prototype.__ks_func_reqClassMethodParameterList_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqClassProperty_0: function(attributes, modifiers, name, type, first) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(attributes === void 0) {
					attributes = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(type === void 0) {
					type = null;
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var defaultValue, accessor, mutator;
				if(this.test(Token.NEWLINE)) {
					this.commit().NL_0M();
					if(this.match(Token.GET, Token.SET) === Token.GET) {
						var __ks_first_1 = this.yes();
						if(this.match(Token.EQUALS_RIGHT_ANGLE, Token.LEFT_CURLY) === Token.EQUALS_RIGHT_ANGLE) {
							this.commit();
							var expression = this.reqExpression(ExpressionMode.Default);
							var __ks_45, __ks_46;
							accessor = this.yep(AST.AccessorDeclaration(expression, __ks_first_1, expression));
						}
						else if(this._token === Token.LEFT_CURLY) {
							var block = this.reqBlock();
							var __ks_47;
							accessor = this.yep(AST.AccessorDeclaration(block, __ks_first_1, block));
						}
						else {
							var __ks_48;
							accessor = this.yep(AST.AccessorDeclaration(__ks_first_1));
						}
						this.reqNL_1M();
						if(this.test(Token.SET)) {
							var __ks_first_2 = this.yes();
							if(this.match(Token.EQUALS_RIGHT_ANGLE, Token.LEFT_CURLY) === Token.EQUALS_RIGHT_ANGLE) {
								this.commit();
								var expression = this.reqExpression(ExpressionMode.Default);
								var __ks_49;
								mutator = this.yep(AST.MutatorDeclaration(expression, __ks_first_2, expression));
							}
							else if(this._token === Token.LEFT_CURLY) {
								var block = this.reqBlock();
								var __ks_50;
								mutator = this.yep(AST.MutatorDeclaration(block, __ks_first_2, block));
							}
							else {
								var __ks_51;
								mutator = this.yep(AST.MutatorDeclaration(__ks_first_2));
							}
							this.reqNL_1M();
						}
					}
					else if(this._token === Token.SET) {
						var __ks_first_3 = this.yes();
						if(this.match(Token.EQUALS_RIGHT_ANGLE, Token.LEFT_CURLY) === Token.EQUALS_RIGHT_ANGLE) {
							this.commit();
							var expression = this.reqExpression(ExpressionMode.Default);
							var __ks_52;
							mutator = this.yep(AST.MutatorDeclaration(expression, __ks_first_3, expression));
						}
						else if(this._token === Token.LEFT_CURLY) {
							var block = this.reqBlock();
							var __ks_53;
							mutator = this.yep(AST.MutatorDeclaration(block, __ks_first_3, block));
						}
						else {
							var __ks_54;
							mutator = this.yep(AST.MutatorDeclaration(__ks_first_3));
						}
						this.reqNL_1M();
					}
					else {
						this.throw(["get", "set"]);
					}
				}
				else {
					if(this.match(Token.GET, Token.SET) === Token.GET) {
						var __ks_55, __ks_56;
						accessor = this.yep(AST.AccessorDeclaration(this.yes()));
						if(this.test(Token.COMMA)) {
							this.commit();
							if(this.test(Token.SET)) {
								var __ks_57, __ks_58;
								mutator = this.yep(AST.MutatorDeclaration(this.yes()));
							}
							else {
								this.throw("set");
							}
						}
					}
					else if(this._token === Token.SET) {
						var __ks_59, __ks_60;
						mutator = this.yep(AST.MutatorDeclaration(this.yes()));
					}
					else {
						this.throw(["get", "set"]);
					}
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				var last = this.yes();
				if(this.test(Token.EQUALS)) {
					this.commit();
					defaultValue = this.reqExpression(ExpressionMode.Default);
				}
				this.reqNL_1M();
				return this.yep(AST.PropertyDeclaration(attributes, modifiers, name, type, defaultValue, accessor, mutator, first, KSType.isValue(defaultValue) ? defaultValue : last));
			},
			reqClassProperty: function() {
				if(arguments.length === 5) {
					return Parser.prototype.__ks_func_reqClassProperty_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqClassStatement_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var __ks__;
				var modifiers = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : [];
				return this.reqClassStatementBody(this.reqIdentifier(), first, modifiers);
			},
			reqClassStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqClassStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqClassStatementBody_0: function() {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				var __ks_i = -1;
				var name = arguments[++__ks_i];
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var __ks__;
				var modifiers = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : [];
				var generic;
				if(this.test(Token.LEFT_ANGLE)) {
					var __ks_61, __ks_62;
					generic = this.reqTypeGeneric(this.yes());
				}
				var version;
				if(this.test(Token.AT)) {
					this.commit();
					if(!this.test(Token.CLASS_VERSION)) {
						this.throw("Class Version");
					}
					var data = this.value();
					version = this.yes({
						major: data[0],
						minor: (data.length > 1) ? data[1] : 0,
						patch: (data.length > 2) ? data[2] : 0
					});
					version.value.start = version.start;
					version.value.end = version.end;
				}
				var __ks_extends_1;
				if(this.test(Token.EXTENDS)) {
					this.commit();
					__ks_extends_1 = this.reqIdentifier();
					if(this.testNS(Token.DOT)) {
						var property;
						do {
							this.commit();
							property = this.reqIdentifier();
							var __ks_63;
							__ks_extends_1 = this.yep(AST.MemberExpression(__ks_extends_1, property, false, false));
						}
						while(this.testNS(Token.DOT))
					}
				}
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit().NL_0M();
				var members = [];
				while(this.until(Token.RIGHT_CURLY)) {
					this.reqClassMemberList(members);
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.ClassDeclaration(name, version, __ks_extends_1, modifiers, members, first, this.yes()));
			},
			reqClassStatementBody: function() {
				if(arguments.length >= 2 && arguments.length <= 3) {
					return Parser.prototype.__ks_func_reqClassStatementBody_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqComputedPropertyName_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var expression = this.reqExpression(ExpressionMode.Default);
				if(!this.test(Token.RIGHT_SQUARE)) {
					this.throw("]");
				}
				return this.yep(AST.ComputedPropertyName(expression, first, this.yes()));
			},
			reqComputedPropertyName: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqComputedPropertyName_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqConstStatement_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var __ks__;
				var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : ExpressionMode.Default;
				var variable = this.reqTypedVariable();
				if(this.test(Token.COMMA)) {
					var variables = [variable];
					do {
						this.commit();
						variables.push(this.reqTypedVariable());
					}
					while(this.test(Token.COMMA))
					var equals = this.reqVariableEquals();
					if(!this.test(Token.AWAIT)) {
						this.throw("await");
					}
					this.commit();
					var operand = this.reqPrefixedOperand(mode);
					return this.yep(AST.VariableDeclaration(variables, false, equals, true, operand, first, operand));
				}
				else {
					var equals = this.reqVariableEquals();
					if(this.test(Token.AWAIT)) {
						this.commit();
						var operand = this.reqPrefixedOperand(mode);
						return this.yep(AST.VariableDeclaration([variable], false, equals, true, operand, first, operand));
					}
					else {
						var expression = this.reqExpression(mode);
						return this.yep(AST.VariableDeclaration([variable], false, equals, false, expression, first, expression));
					}
				}
			},
			reqConstStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqConstStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqContinueStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				return this.yep(AST.ContinueStatement(first));
			},
			reqContinueStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqContinueStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqCreateExpression_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var __ks_class_1, last;
				if(this.match(Token.IDENTIFIER, Token.LEFT_ROUND, Token.AT) === Token.IDENTIFIER) {
					var __ks_64;
					__ks_class_1 = this.reqIdentifier();
					while(this.test(Token.DOT)) {
						this.commit();
						var property = this.reqIdentifier();
						var __ks_65;
						__ks_class_1 = this.yep(AST.MemberExpression(__ks_class_1, property, false, false));
					}
					if(this.match(Token.LEFT_ANGLE, Token.LEFT_SQUARE) === Token.LEFT_ANGLE) {
						var generic = this.reqTypeGeneric(this.yes());
						var __ks_66;
						__ks_class_1 = this.yep(AST.TypeReference(__ks_class_1, generic, null, __ks_class_1, generic));
					}
					else if(this._token === Token.LEFT_SQUARE) {
						var reference = false;
						__ks_class_1 = this.reqVariableName(__ks_class_1);
					}
				}
				else if(this._token === Token.LEFT_ROUND) {
					this.commit();
					__ks_class_1 = this.reqExpression(ExpressionMode.Default);
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
					last = this.yes();
				}
				else if(this._token === Token.AT) {
					var __ks_67;
					__ks_class_1 = this.reqThisExpression(this.yes());
				}
				else {
					this.throw(["Identifier", "("]);
				}
				if(this.test(Token.LEFT_ROUND)) {
					this.commit();
					return this.yep(AST.CreateExpression(__ks_class_1, this.reqExpression0CNList(), first, this.yes()));
				}
				else {
					return this.yep(AST.CreateExpression(__ks_class_1, this.yep([]), first, last));
				}
			},
			reqCreateExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqCreateExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqDestructuringArray_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.NL_0M();
				var elements = [];
				while(true) {
					elements.push(this.reqDestructuringArrayItem());
					if((this.match(Token.COMMA, Token.NEWLINE) === Token.COMMA) || (this._token === Token.NEWLINE)) {
						this.commit().NL_0M();
					}
					else {
						break;
					}
					if(this.test(Token.RIGHT_SQUARE)) {
						break;
					}
				}
				if(!this.test(Token.RIGHT_SQUARE)) {
					this.throw("]");
				}
				return this.yep(AST.ArrayBinding(elements, first, this.yes()));
			},
			reqDestructuringArray: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqDestructuringArray_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqDestructuringArrayItem_0: function() {
				var spread, name, defaultValue;
				if(this.test(Token.DOT_DOT_DOT)) {
					var __ks_68;
					spread = this.yes();
					if(this.test(Token.IDENTIFIER)) {
						var __ks_69, __ks_70, __ks_71;
						name = this.yep(AST.Identifier(this._scanner.value(), this.yes()));
						if(this.test(Token.EQUALS)) {
							this.commit();
							defaultValue = this.reqExpression(ExpressionMode.Default);
						}
						return this.yep(AST.BindingElement(name, null, spread, defaultValue, spread, KSType.isValue(defaultValue) ? defaultValue : name));
					}
					else {
						return this.yep(AST.OmittedExpression(true, spread));
					}
				}
				else {
					if(this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE, Token.IDENTIFIER) === Token.LEFT_CURLY) {
						var __ks_72;
						name = this.reqDestructuringObject(this.yes());
					}
					else if(this._token === Token.LEFT_SQUARE) {
						var __ks_73;
						name = this.reqDestructuringArray(this.yes());
					}
					else if(this._token === Token.IDENTIFIER) {
						var __ks_74, __ks_75, __ks_76;
						name = this.yep(AST.Identifier(this._scanner.value(), this.yes()));
					}
					else {
						return this.yep(AST.OmittedExpression(false, this.yep()));
					}
					if(this.test(Token.EQUALS)) {
						this.commit();
						defaultValue = this.reqExpression(ExpressionMode.Default);
					}
					return this.yep(AST.BindingElement(name, null, spread, defaultValue, name, KSType.isValue(defaultValue) ? defaultValue : name));
				}
			},
			reqDestructuringArrayItem: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqDestructuringArrayItem_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqDestructuringObject_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.NL_0M();
				var elements = [];
				while(true) {
					elements.push(this.reqDestructuringObjectItem());
					if((this.match(Token.COMMA, Token.NEWLINE) === Token.COMMA) || (this._token === Token.NEWLINE)) {
						this.commit().NL_0M();
					}
					else {
						break;
					}
					if(this.test(Token.RIGHT_CURLY)) {
						break;
					}
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.ObjectBinding(elements, first, this.yes()));
			},
			reqDestructuringObject: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqDestructuringObject_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqDestructuringObjectItem_0: function() {
				if(this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE, Token.IDENTIFIER) === Token.LEFT_CURLY) {
					return this.yep(AST.BindingElement(this.reqDestructuringObject(this.yes())));
				}
				else if(this._token === Token.LEFT_SQUARE) {
					var square = this.yes();
					if(this.test(Token.IDENTIFIER)) {
						var identifier = this.yep(AST.Identifier(this._scanner.value(), this.yes()));
						if(this.test(Token.RIGHT_SQUARE)) {
							identifier.value.computed = true;
							this.relocate(identifier, square, this.yes());
							return this.altDestructuringObjectItem(identifier);
						}
						else {
							return this.yep(AST.BindingElement(this.reqDestructuringArray(square, identifier)));
						}
					}
					else {
						return this.yep(AST.BindingElement(this.reqDestructuringArray(square)));
					}
				}
				else if(this._token === Token.IDENTIFIER) {
					return this.altDestructuringObjectItem(this.yep(AST.Identifier(this._scanner.value(), this.yes())));
				}
				else {
					this.throw(["Identifier", "{", "["]);
				}
			},
			reqDestructuringObjectItem: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqDestructuringObjectItem_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqDiscloseStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var name = this.reqIdentifier();
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit().NL_0M();
				var members = [];
				while(this.until(Token.RIGHT_CURLY)) {
					this.reqExternClassMemberList(members);
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.DiscloseDeclaration(name, members, first, this.yes()));
			},
			reqDiscloseStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqDiscloseStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqDoStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.NL_0M();
				var body = this.reqBlock();
				this.reqNL_1M();
				if(this.match(Token.UNTIL, Token.WHILE) === Token.UNTIL) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.DoUntilStatement(condition, body, first, condition));
				}
				else if(this._token === Token.WHILE) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.DoWhileStatement(condition, body, first, condition));
				}
				else {
					this.throw(["until", "while"]);
				}
			},
			reqDoStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqDoStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqEnumStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var name = this.reqIdentifier();
				var type;
				if(this.test(Token.LEFT_ANGLE)) {
					this.commit();
					var __ks_77;
					type = this.reqTypeEntity(NO);
					if(!this.test(Token.RIGHT_ANGLE)) {
						this.throw(">");
					}
					this.commit();
				}
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit();
				this.NL_0M();
				var members = [];
				var identifier;
				while(!(this.test(Token.RIGHT_CURLY))) {
					identifier = this.reqIdentifier();
					if(this.test(Token.EQUALS)) {
						this.commit();
						members.push(AST.EnumMember(identifier, this.reqExpression(ExpressionMode.Default)));
					}
					else {
						members.push(AST.EnumMember(identifier));
					}
					if(this.test(Token.COMMA)) {
						this.commit().NL_0M();
					}
					else if(this.test(Token.NEWLINE)) {
						this.commit().NL_0M();
						if(this.test(Token.COMMA)) {
							this.commit().NL_0M();
						}
					}
					else {
						break;
					}
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.EnumDeclaration(name, type, members, first, this.yes()));
			},
			reqEnumStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqEnumStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExportDeclarator_0: function() {
				var __ks_78 = this.matchM(M.EXPORT_STATEMENT);
				if(__ks_78 === Token.ABSTRACT) {
					var first = this.yes();
					if(this.test(Token.CLASS)) {
						this.commit();
						var modifiers = [this.yep(AST.Modifier(ModifierKind.Abstract, first))];
						return this.yep(AST.ExportDeclarationSpecifier(this.reqClassStatement(first, modifiers)));
					}
					else {
						this.throw("class");
					}
				}
				else if(__ks_78 === Token.ASYNC) {
					var first = this.reqIdentifier();
					if(this.test(Token.FUNC)) {
						this.commit();
						var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, first))];
						return this.yep(AST.ExportDeclarationSpecifier(this.reqFunctionStatement(first, modifiers)));
					}
					else {
						return this.reqExportIdentifier(first);
					}
				}
				else if(__ks_78 === Token.CLASS) {
					return this.yep(AST.ExportDeclarationSpecifier(this.reqClassStatement(this.yes())));
				}
				else if(__ks_78 === Token.CONST) {
					return this.yep(AST.ExportDeclarationSpecifier(this.reqConstStatement(this.yes(), ExpressionMode.NoAwait)));
				}
				else if(__ks_78 === Token.ENUM) {
					return this.yep(AST.ExportDeclarationSpecifier(this.reqEnumStatement(this.yes())));
				}
				else if(__ks_78 === Token.FUNC) {
					return this.yep(AST.ExportDeclarationSpecifier(this.reqFunctionStatement(this.yes())));
				}
				else if(__ks_78 === Token.IDENTIFIER) {
					return this.reqExportIdentifier(this.reqIdentifier());
				}
				else if(__ks_78 === Token.LET) {
					return this.yep(AST.ExportDeclarationSpecifier(this.reqLetStatement(this.yes(), ExpressionMode.NoAwait)));
				}
				else if(__ks_78 === Token.MACRO) {
					if((this._mode & ParserMode.MacroExpression) === 0) {
						return this.yep(AST.ExportDeclarationSpecifier(this.tryMacroStatement(this.yes())));
					}
					else {
						return this.yep(AST.ExportDeclarationSpecifier(this.reqMacroExpression(this.yes())));
					}
				}
				else if(__ks_78 === Token.NAMESPACE) {
					return this.yep(AST.ExportDeclarationSpecifier(this.tryNamespaceStatement(this.yes())));
				}
				else if(__ks_78 === Token.SEALED) {
					var first = this.yes();
					var modifiers = [this.yep(AST.Modifier(ModifierKind.Sealed, first))];
					if(this.test(Token.CLASS)) {
						this.commit();
						return this.yep(AST.ExportDeclarationSpecifier(this.reqClassStatement(first, modifiers)));
					}
					else if(this.test(Token.ABSTRACT)) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Abstract, this.yes())));
						if(this.test(Token.CLASS)) {
							this.commit();
							return this.yep(AST.ExportDeclarationSpecifier(this.reqClassStatement(first, modifiers)));
						}
						else {
							this.throw("class");
						}
					}
					else {
						this.throw("class");
					}
				}
				else if(__ks_78 === Token.TYPE) {
					return this.yep(AST.ExportDeclarationSpecifier(this.reqTypeStatement(this.yes(), this.reqIdentifier())));
				}
				else {
					this.throw();
				}
			},
			reqExportDeclarator: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqExportDeclarator_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExportIdentifier_0: function(value) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				var identifier = null;
				if(this.testNS(Token.DOT)) {
					do {
						this.commit();
						if(this.testNS(Token.ASTERISK)) {
							return this.yep(AST.ExportWildcardSpecifier(value, this.yes()));
						}
						else {
							var __ks_79;
							identifier = this.reqIdentifier();
							var __ks_80;
							value = this.yep(AST.MemberExpression(value, identifier, false, false));
						}
					}
					while(this.testNS(Token.DOT))
				}
				if(this.test(Token.EQUALS_RIGHT_ANGLE)) {
					this.commit();
					return this.yep(AST.ExportNamedSpecifier(value, this.reqIdentifier()));
				}
				else if(this.test(Token.FOR)) {
					this.commit();
					if(this.test(Token.ASTERISK)) {
						return this.yep(AST.ExportWildcardSpecifier(value, this.yes()));
					}
					else if(this.test(Token.LEFT_CURLY)) {
						var members = [];
						this.commit().NL_0M();
						while(!(this.test(Token.RIGHT_CURLY))) {
							identifier = this.reqIdentifier();
							if(this.test(Token.EQUALS_RIGHT_ANGLE)) {
								this.commit();
								members.push(AST.ExportNamedSpecifier(identifier, this.reqIdentifier()));
							}
							else {
								members.push(AST.ExportNamedSpecifier(identifier, identifier));
							}
							if(this.test(Token.COMMA)) {
								this.commit();
							}
							this.reqNL_1M();
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						return this.yep(AST.ExportPropertiesSpecifier(value, members, this.yes()));
					}
					else {
						var members = [];
						identifier = this.reqIdentifier();
						if(this.test(Token.EQUALS_RIGHT_ANGLE)) {
							this.commit();
							members.push(AST.ExportNamedSpecifier(identifier, this.reqIdentifier()));
						}
						else {
							members.push(AST.ExportNamedSpecifier(identifier, identifier));
						}
						while(this.test(Token.COMMA)) {
							this.commit();
							identifier = this.reqIdentifier();
							if(this.test(Token.EQUALS_RIGHT_ANGLE)) {
								this.commit();
								members.push(AST.ExportNamedSpecifier(identifier, this.reqIdentifier()));
							}
							else {
								members.push(AST.ExportNamedSpecifier(identifier, identifier));
							}
						}
						return this.yep(AST.ExportPropertiesSpecifier(value, members, this.yep()));
					}
				}
				else {
					return this.yep(AST.ExportNamedSpecifier(value, KSType.isValue(identifier) ? identifier : value));
				}
			},
			reqExportIdentifier: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExportIdentifier_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExportStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var declarations = [];
				var last;
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().NL_0M();
					while(!(this.test(Token.RIGHT_CURLY))) {
						declarations.push(this.reqExportDeclarator());
						this.reqNL_1M();
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					var __ks_81;
					last = this.yes();
				}
				else {
					declarations.push(this.reqExportDeclarator());
					while(this.test(Token.COMMA)) {
						this.commit();
						declarations.push(this.reqExportDeclarator());
					}
					last = declarations[declarations.length - 1];
				}
				this.reqNL_EOF_1M();
				return this.yep(AST.ExportDeclaration(declarations, first, last));
			},
			reqExportStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExportStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExpression_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var mode = arguments[++__ks_i];
				if(mode === void 0) {
					mode = null;
				}
				var __ks__;
				var terminator = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
				if(mode === null) {
					if(((this._mode & ParserMode.MacroExpression) !== 0) && this._scanner.test(Token.IDENTIFIER) && (this._scanner.value() === "macro")) {
						return this.reqMacroExpression(this.yes(), terminator);
					}
					else {
						mode = ExpressionMode.Default;
					}
				}
				return this.reqOperation(mode);
			},
			reqExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExpression0CNList_0: function() {
				this.NL_0M();
				if(this.test(Token.RIGHT_ROUND)) {
					return this.yep([]);
				}
				else {
					var expressions = [];
					while(true) {
						expressions.push(this.reqExpression(null, MacroTerminator.List));
						if((this.match(Token.COMMA, Token.NEWLINE) === Token.COMMA) || (this._token === Token.NEWLINE)) {
							this.commit().NL_0M();
						}
						else {
							break;
						}
						if(this.test(Token.RIGHT_ROUND)) {
							break;
						}
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
					return this.yep(expressions);
				}
			},
			reqExpression0CNList: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqExpression0CNList_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExpressionStatement_0: function() {
				var expression = this.reqExpression(ExpressionMode.Default);
				if(this.match(Token.FOR, Token.IF, Token.UNLESS) === Token.FOR) {
					var statement = this.reqForExpression(this.yes());
					statement.value.body = expression.value;
					this.relocate(statement, expression, null);
					return statement;
				}
				else if(this._token === Token.IF) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.IfStatement(condition, expression, null, expression, condition));
				}
				else if(this._token === Token.UNLESS) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.UnlessStatement(condition, expression, expression, condition));
				}
				else {
					return expression;
				}
			},
			reqExpressionStatement: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqExpressionStatement_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExternClassDeclaration_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var __ks__;
				var modifiers = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : [];
				var name = this.reqIdentifier();
				var generic;
				if(this.test(Token.LEFT_ANGLE)) {
					var __ks_82, __ks_83;
					generic = this.reqTypeGeneric(this.yes());
				}
				var __ks_extends_1;
				if(this.test(Token.EXTENDS)) {
					this.commit();
					__ks_extends_1 = this.reqIdentifier();
				}
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().NL_0M();
					var members = [];
					while(!(this.test(Token.RIGHT_CURLY))) {
						this.reqExternClassMemberList(members);
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					return this.yep(AST.ClassDeclaration(name, null, __ks_extends_1, modifiers, members, first, this.yes()));
				}
				else {
					return this.yep(AST.ClassDeclaration(name, null, __ks_extends_1, modifiers, [], first, KSType.isValue(__ks_extends_1) ? __ks_extends_1 : KSType.isValue(generic) ? generic : name));
				}
			},
			reqExternClassDeclaration: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqExternClassDeclaration_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExternClassMember_0: function(modifiers, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				var name = this.reqIdentifier();
				if(this.match(Token.COLON, Token.LEFT_CURLY, Token.LEFT_ROUND) === Token.COLON) {
					this.commit();
					var type = this.reqTypeVar();
					if(this.test(Token.LEFT_CURLY)) {
						this.commit();
						return this.reqExternClassProperty(modifiers, name, type, KSType.isValue(first) ? first : name);
					}
					else {
						return this.reqExternClassField(modifiers, name, type, KSType.isValue(first) ? first : name);
					}
				}
				else if(this._token === Token.LEFT_CURLY) {
					this.commit();
					return this.reqExternClassProperty(modifiers, name, null, KSType.isValue(first) ? first : name);
				}
				else if(this._token === Token.LEFT_ROUND) {
					return this.reqExternClassMethod(modifiers, name, this.yes(), KSType.isValue(first) ? first : name);
				}
				else {
					return this.reqExternClassField(modifiers, name, null, KSType.isValue(first) ? first : name);
				}
			},
			reqExternClassMember: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqExternClassMember_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExternClassMemberList_0: function(members) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				var first = null;
				var modifiers = [];
				if(this.match(Token.PRIVATE, Token.PROTECTED, Token.PUBLIC) === Token.PRIVATE) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Private, this.yes())));
				}
				else if(this._token === Token.PROTECTED) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Protected, this.yes())));
				}
				else if(this._token === Token.PUBLIC) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Public, this.yes())));
				}
				if(this.test(Token.ABSTRACT)) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Abstract, this.yes())));
					first = modifiers[0];
					if(this.test(Token.LEFT_CURLY)) {
						this.commit().NL_0M();
						while(!(this.test(Token.RIGHT_CURLY))) {
							members.push(this.reqClassAbstractMethod(null, modifiers, first));
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						this.commit().reqNL_1M();
					}
					else {
						members.push(this.reqClassAbstractMethod(null, modifiers, first));
					}
				}
				else {
					if(this.test(Token.STATIC)) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Static, this.yes())));
					}
					if((first === null) && (modifiers.length !== 0)) {
						first = modifiers[0];
					}
					if(this.test(Token.LEFT_CURLY)) {
						if(first === null) {
							var __ks_84;
							first = this.yes();
						}
						else {
							this.commit();
						}
						this.NL_0M();
						while(!(this.test(Token.RIGHT_CURLY))) {
							members.push(this.reqExternClassMember(modifiers, first));
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						this.commit();
						this.reqNL_1M();
					}
					else {
						members.push(this.reqExternClassMember(modifiers, first));
					}
				}
			},
			reqExternClassMemberList: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExternClassMemberList_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExternClassMethod_0: function(modifiers, name, round, first) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(round === void 0 || round === null) {
					throw new TypeError("'round' is not nullable");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var parameters = this.reqClassMethodParameterList(round);
				var type = this.reqFunctionReturns();
				this.reqNL_1M();
				return this.yep(AST.MethodDeclaration(null, modifiers, name, parameters, type, null, null, first, KSType.isValue(type) ? type : parameters));
			},
			reqExternClassMethod: function() {
				if(arguments.length === 4) {
					return Parser.prototype.__ks_func_reqExternClassMethod_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExternDeclarator_0: function(ns) {
				if(ns === void 0 || ns === null) {
					ns = false;
				}
				var __ks_85 = this.matchM(M.EXTERN_STATEMENT);
				if(__ks_85 === Token.ABSTRACT) {
					var __ks_abstract_1 = this.yep(AST.Modifier(ModifierKind.Abstract, this.yes()));
					if(this.test(Token.CLASS)) {
						this.commit();
						return this.reqExternClassDeclaration(__ks_abstract_1, [__ks_abstract_1]);
					}
					else {
						this.throw("class");
					}
				}
				else if(__ks_85 === Token.ASYNC) {
					var first = this.reqIdentifier();
					var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, first))];
					if(this.test(Token.FUNC)) {
						this.commit();
						return this.reqExternFunctionDeclaration(first, modifiers);
					}
					else {
						var fn = this.tryExternFunctionDeclaration(first, modifiers);
						if(fn.ok) {
							return fn;
						}
						else {
							return this.reqExternVariableDeclarator(first);
						}
					}
				}
				else if(__ks_85 === Token.CLASS) {
					return this.reqExternClassDeclaration(this.yes(), []);
				}
				else if(__ks_85 === Token.CONST && ns) {
					var first = this.yes();
					var name = this.reqIdentifier();
					if(this.test(Token.COLON)) {
						this.commit();
						var type = this.reqTypeVar();
						return this.yep(AST.VariableDeclarator(name, type, true, first, type));
					}
					else {
						return this.yep(AST.VariableDeclarator(name, null, true, first, name));
					}
				}
				else if(__ks_85 === Token.ENUM) {
					return this.reqExternEnumDeclaration(this.yes());
				}
				else if(__ks_85 === Token.FUNC) {
					var first = this.yes();
					return this.reqExternFunctionDeclaration(first, []);
				}
				else if(__ks_85 === Token.IDENTIFIER) {
					return this.reqExternVariableDeclarator(this.reqIdentifier());
				}
				else if(__ks_85 === Token.NAMESPACE) {
					return this.reqExternNamespaceDeclaration(this.yes(), []);
				}
				else if(__ks_85 === Token.SEALED) {
					var __ks_sealed_1 = this.yep(AST.Modifier(ModifierKind.Sealed, this.yes()));
					if(this.matchM(M.EXTERN_STATEMENT) === Token.ABSTRACT) {
						var __ks_abstract_1 = this.yep(AST.Modifier(ModifierKind.Abstract, this.yes()));
						if(this.test(Token.CLASS)) {
							this.commit();
							return this.reqExternClassDeclaration(__ks_sealed_1, [__ks_sealed_1, __ks_abstract_1]);
						}
						else {
							this.throw("class");
						}
					}
					else if(this._token === Token.CLASS) {
						this.commit();
						return this.reqExternClassDeclaration(__ks_sealed_1, [__ks_sealed_1]);
					}
					else if(this._token === Token.IDENTIFIER) {
						var name = this.reqIdentifier();
						if(this.test(Token.COLON)) {
							this.commit();
							var type = this.reqTypeVar();
							return this.yep(AST.VariableDeclarator(name, type, true, __ks_sealed_1, type));
						}
						else {
							return this.yep(AST.VariableDeclarator(name, null, true, __ks_sealed_1, name));
						}
					}
					else if(this._token === Token.NAMESPACE) {
						this.commit();
						return this.reqExternNamespaceDeclaration(__ks_sealed_1, [__ks_sealed_1]);
					}
					else {
						this.throw(["class", "namespace"]);
					}
				}
				else if(__ks_85 === Token.LET && ns) {
					var first = this.yes();
					var name = this.reqIdentifier();
					if(this.test(Token.COLON)) {
						this.commit();
						var type = this.reqTypeVar();
						return this.yep(AST.VariableDeclarator(name, type, false, first, type));
					}
					else {
						return this.yep(AST.VariableDeclarator(name, null, false, first, name));
					}
				}
				else {
					this.throw();
				}
			},
			reqExternDeclarator: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Parser.prototype.__ks_func_reqExternDeclarator_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExternEnumDeclaration_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var name = this.reqIdentifier();
				var type;
				if(this.test(Token.LEFT_ANGLE)) {
					this.commit();
					var __ks_86;
					type = this.reqTypeEntity(NO);
					if(!this.test(Token.RIGHT_ANGLE)) {
						this.throw(">");
					}
					this.commit();
				}
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit();
				this.NL_0M();
				var members = [];
				while(!(this.test(Token.RIGHT_CURLY))) {
					members.push(AST.EnumMember(this.reqIdentifier()));
					if(this.test(Token.COMMA)) {
						this.commit().NL_0M();
					}
					else if(this.test(Token.NEWLINE)) {
						this.commit().NL_0M();
						if(this.test(Token.COMMA)) {
							this.commit().NL_0M();
						}
					}
					else {
						break;
					}
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.EnumDeclaration(name, type, members, first, this.yes()));
			},
			reqExternEnumDeclaration: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExternEnumDeclaration_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExternFunctionDeclaration_0: function(first, modifiers) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				var name = this.reqIdentifier();
				if(this.test(Token.LEFT_ROUND)) {
					var parameters = this.reqFunctionParameterList();
					var type = this.reqFunctionReturns();
					var __ks_throws_1 = this.reqFunctionThrows();
					return this.yep(AST.FunctionDeclaration(name, parameters, modifiers, type, __ks_throws_1, null, first, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
				}
				else {
					var position = this.yep();
					var type = this.reqFunctionReturns();
					var __ks_throws_1 = this.reqFunctionThrows();
					return this.yep(AST.FunctionDeclaration(name, null, modifiers, type, __ks_throws_1, null, first, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : name));
				}
			},
			reqExternFunctionDeclaration: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqExternFunctionDeclaration_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExternNamespaceDeclaration_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var __ks__;
				var modifiers = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : [];
				var name = this.reqIdentifier();
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().NL_0M();
					var statements = [];
					while(!(this.test(Token.RIGHT_CURLY))) {
						statements.push(this.reqExternDeclarator(true));
						this.reqNL_1M();
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					return this.yep(AST.NamespaceDeclaration(modifiers, name, statements, first, this.yes()));
				}
				else {
					return this.yep(AST.NamespaceDeclaration(modifiers, name, [], first, name));
				}
			},
			reqExternNamespaceDeclaration: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqExternNamespaceDeclaration_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExternOrRequireStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var declarations = [];
				var last;
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().NL_0M();
					while(!(this.test(Token.RIGHT_CURLY))) {
						declarations.push(this.reqExternDeclarator());
						this.reqNL_1M();
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					var __ks_87;
					last = this.yes();
				}
				else {
					declarations.push(this.reqExternDeclarator());
					while(this.test(Token.COMMA)) {
						this.commit();
						declarations.push(this.reqExternDeclarator());
					}
					last = declarations[declarations.length - 1];
				}
				this.reqNL_EOF_1M();
				return this.yep(AST.ExternOrRequireDeclaration(declarations, first, last));
			},
			reqExternOrRequireStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExternOrRequireStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExternStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var declarations = [];
				var last;
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().NL_0M();
					while(!(this.test(Token.RIGHT_CURLY))) {
						declarations.push(this.reqExternDeclarator());
						this.reqNL_1M();
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					var __ks_88;
					last = this.yes();
				}
				else {
					declarations.push(this.reqExternDeclarator());
					while(this.test(Token.COMMA)) {
						this.commit();
						declarations.push(this.reqExternDeclarator());
					}
					last = declarations[declarations.length - 1];
				}
				this.reqNL_EOF_1M();
				return this.yep(AST.ExternDeclaration(declarations, first, last));
			},
			reqExternStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExternStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqExternVariableDeclarator_0: function(name) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(this.match(Token.COLON, Token.LEFT_ROUND) === Token.COLON) {
					this.commit();
					var type = this.reqTypeVar();
					return this.yep(AST.VariableDeclarator(name, type));
				}
				else if(this._token === Token.LEFT_ROUND) {
					var parameters = this.reqFunctionParameterList();
					var type = this.reqFunctionReturns();
					return this.yep(AST.FunctionDeclaration(name, parameters, [], type, null, null, name, KSType.isValue(type) ? type : parameters));
				}
				else {
					return this.yep(AST.VariableDeclarator(name));
				}
			},
			reqExternVariableDeclarator: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqExternVariableDeclarator_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqForExpression_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var declaration = false;
				var rebindable = true;
				if(this.test(Token.LET)) {
					this.commit();
					declaration = true;
				}
				else if(this.test(Token.CONST)) {
					this.commit();
					declaration = true;
					rebindable = false;
				}
				var identifier1, identifier2;
				if(this.test(Token.COLON)) {
					this.commit();
					var __ks_89;
					identifier2 = this.reqIdentifier();
				}
				else {
					identifier1 = this.reqIdentifier();
					if(this.test(Token.COMMA)) {
						this.commit();
						identifier2 = this.reqIdentifier();
					}
				}
				this.NL_0M();
				if(KSType.isValue(identifier2)) {
					if(this.match(Token.IN, Token.OF) === Token.IN) {
						return this.altForExpressionInRange(declaration, rebindable, identifier1, identifier2, first);
					}
					else if(this._token === Token.OF) {
						return this.altForExpressionOf(declaration, rebindable, identifier1, identifier2, first);
					}
					else {
						this.throw(["in", "of"]);
					}
				}
				else {
					if(this.match(Token.FROM, Token.IN, Token.OF) === Token.FROM) {
						return this.altForExpressionFrom(declaration, rebindable, identifier1, first);
					}
					else if(this._token === Token.IN) {
						return this.altForExpressionInRange(declaration, rebindable, identifier1, identifier2, first);
					}
					else if(this._token === Token.OF) {
						return this.altForExpressionOf(declaration, rebindable, identifier1, identifier2, first);
					}
					else {
						this.throw(["from", "in", "of"]);
					}
				}
			},
			reqForExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqForExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqForStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var statement = this.reqForExpression(first);
				this.NL_0M();
				var block = this.reqBlock();
				statement.value.body = block.value;
				this.relocate(statement, null, block);
				return statement;
			},
			reqForStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqForStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqFunctionBody_0: function() {
				if(this.match(Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE) === Token.LEFT_CURLY) {
					return this.reqBlock(this.yes());
				}
				else if(this._token === Token.EQUALS_RIGHT_ANGLE) {
					this.commit().NL_0M();
					return this.reqExpression(ExpressionMode.Default);
				}
				else {
					this.throw(["{", "=>"]);
				}
			},
			reqFunctionBody: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqFunctionBody_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqFunctionParameterList_0: function() {
				if(!this.test(Token.LEFT_ROUND)) {
					this.throw("(");
				}
				var first = this.yes();
				var parameters = [];
				if(!this.test(Token.RIGHT_ROUND)) {
					while(this.reqParameter(parameters, ParameterMode.Function)) {
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
				}
				return this.yep(parameters, first, this.yes());
			},
			reqFunctionParameterList: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqFunctionParameterList_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqFunctionReturns_0: function() {
				if(this.test(Token.COLON)) {
					this.commit();
					return this.reqTypeVar();
				}
				else {
					return null;
				}
			},
			reqFunctionReturns: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqFunctionReturns_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqFunctionStatement_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var __ks__;
				var modifiers = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : [];
				var name = this.reqIdentifier();
				var parameters = this.reqFunctionParameterList();
				var type = this.reqFunctionReturns();
				var __ks_throws_1 = this.reqFunctionThrows();
				this.NL_0M();
				var body = this.reqFunctionBody();
				return this.yep(AST.FunctionDeclaration(name, parameters, modifiers, type, __ks_throws_1, body, first, body));
			},
			reqFunctionStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqFunctionStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqFunctionThrows_0: function() {
				if(this.test(Token.TILDE)) {
					this.commit();
					var exceptions = [this.reqIdentifier()];
					while(this.test(Token.COMMA)) {
						this.commit();
						exceptions.push(this.reqIdentifier());
					}
					return this.yep(exceptions);
				}
				else {
					return null;
				}
			},
			reqFunctionThrows: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqFunctionThrows_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqIdentifier_0: function() {
				if(this._scanner.test(Token.IDENTIFIER)) {
					return this.yep(AST.Identifier(this._scanner.value(), this.yes()));
				}
				else {
					this.throw("Identifier");
				}
			},
			reqIdentifier: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqIdentifier_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqIfStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.NL_0M();
				var condition = this.reqExpression(ExpressionMode.NoAnonymousFunction);
				this.NL_0M();
				var whenTrue = this.reqBlock();
				if(this.test(Token.NEWLINE)) {
					var mark = this.mark();
					this.commit().NL_0M();
					if(this.match(Token.ELSE_IF, Token.ELSE) === Token.ELSE_IF) {
						var position = this.yes();
						position.start.column += 5;
						var whenFalse = this.reqIfStatement(position);
						return this.yep(AST.IfStatement(condition, whenTrue, whenFalse, first, whenFalse));
					}
					else if(this._token === Token.ELSE) {
						this.commit().NL_0M();
						var whenFalse = this.reqBlock();
						return this.yep(AST.IfStatement(condition, whenTrue, whenFalse, first, whenFalse));
					}
					else {
						this.rollback(mark);
						return this.yep(AST.IfStatement(condition, whenTrue, null, first, whenTrue));
					}
				}
				else {
					return this.yep(AST.IfStatement(condition, whenTrue, null, first, whenTrue));
				}
			},
			reqIfStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqIfStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqImplementMemberList_0: function(members) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(members === void 0 || members === null) {
					throw new TypeError("'members' is not nullable");
				}
				var first = null;
				var attributes = null;
				if(this.test(Token.HASH_LEFT_SQUARE)) {
					var __ks_90, __ks_91;
					attributes = this.reqAttributeList(first = this.yes());
				}
				var mark = this.mark();
				var modifiers = [];
				if(this.test(Token.OVERRIDE)) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Override, this.yes())));
				}
				if(this.match(Token.PRIVATE, Token.PROTECTED, Token.PUBLIC) === Token.PRIVATE) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Private, this.yes())));
					if(modifiers.length > 1) {
						mark = this.mark();
					}
				}
				else if(this._token === Token.PROTECTED) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Protected, this.yes())));
					if(modifiers.length > 1) {
						mark = this.mark();
					}
				}
				else if(this._token === Token.PUBLIC) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Public, this.yes())));
					if(modifiers.length > 1) {
						mark = this.mark();
					}
				}
				if(this.test(Token.STATIC)) {
					modifiers.push(this.yep(AST.Modifier(ModifierKind.Static, this.yes())));
					if(modifiers.length > 1) {
						mark = this.mark();
					}
				}
				if(modifiers.length !== 0) {
					first = modifiers[0];
				}
				if(this.test(Token.LEFT_CURLY)) {
					if(first === null) {
						first = this.yes();
					}
					else {
						this.commit();
					}
					this.NL_0M();
					var attrs;
					while(!(this.test(Token.RIGHT_CURLY))) {
						if(this.test(Token.HASH_LEFT_SQUARE)) {
							var __ks_92;
							attrs = this.reqAttributeList(first = this.yes());
							if(attributes !== null) {
								attrs.value = [].concat(attributes.value, attrs.value);
							}
						}
						else {
							attrs = attributes;
							first = null;
						}
						members.push(this.reqClassMember(attrs, modifiers, first));
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					this.commit();
					this.reqNL_1M();
				}
				else {
					var member = this.tryClassMember(attributes, modifiers, first);
					if(member.ok) {
						members.push(member);
					}
					else {
						this.rollback(mark);
						modifiers.pop();
						members.push(this.reqClassMember(attributes, modifiers, first));
					}
				}
			},
			reqImplementMemberList: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqImplementMemberList_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqImplementStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var variable = this.reqIdentifier();
				if(this.test(Token.LEFT_ANGLE)) {
					this.reqTypeGeneric(this.yes());
				}
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit().NL_0M();
				var members = [];
				while(!(this.test(Token.RIGHT_CURLY))) {
					this.reqImplementMemberList(members);
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.ImplementDeclaration(variable, members, first, this.yes()));
			},
			reqImplementStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqImplementStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqImportDeclarator_0: function() {
				var source = this.reqString();
				var last = source;
				var __ks_arguments_1 = null;
				if(this.test(Token.LEFT_ROUND)) {
					this.commit();
					__ks_arguments_1 = [];
					var identifier, seep;
					while(this.until(Token.RIGHT_ROUND)) {
						if(!this._scanner.test(Token.IDENTIFIER)) {
							this.throw("Identifier");
						}
						if(this._scanner.value() === "seep") {
							var __ks_93;
							seep = this.yes();
							if(!(identifier = this.tryIdentifier()).ok) {
								var __ks_94;
								identifier = this.yep(AST.Identifier("seep", seep));
								seep = null;
							}
						}
						else {
							identifier = this.reqIdentifier();
							seep = null;
						}
						if(this.test(Token.COLON)) {
							this.commit();
							__ks_arguments_1.push(AST.ImportArgument(seep, identifier, this.reqIdentifier()));
						}
						else {
							__ks_arguments_1.push(AST.ImportArgument(seep, identifier, identifier));
						}
						if(this.test(Token.COMMA)) {
							this.commit();
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
					this.commit();
				}
				var specifiers = [];
				if(this.match(Token.EQUALS_RIGHT_ANGLE, Token.FOR, Token.LEFT_CURLY) === Token.EQUALS_RIGHT_ANGLE) {
					this.commit();
					last = this.reqIdentifier();
					if(this.test(Token.LEFT_CURLY)) {
						specifiers.push(this.yep(AST.ImportNamespaceSpecifier(last, this.reqImportSpecifiers([]), last, this.yes())));
					}
					else {
						specifiers.push(this.yep(AST.ImportNamespaceSpecifier(last, null, last, last)));
					}
				}
				else if(this._token === Token.FOR) {
					this.commit();
					var imported, local;
					while(this.until(Token.NEWLINE)) {
						imported = this.reqExternDeclarator();
						if(this.test(Token.EQUALS_RIGHT_ANGLE)) {
							this.commit();
							local = this.reqIdentifier();
							specifiers.push(this.yep(AST.ImportSpecifier(imported, local, imported, local)));
						}
						else {
							specifiers.push(this.yep(AST.ImportSpecifier(imported, this.yep(imported.value.name), imported, imported)));
						}
						if(this.test(Token.COMMA)) {
							this.commit();
						}
						else {
							break;
						}
					}
				}
				else if(this._token === Token.LEFT_CURLY) {
					this.reqImportSpecifiers(specifiers);
					last = this.yes();
				}
				return this.yep(AST.ImportDeclarator(source, specifiers, __ks_arguments_1, source, last));
			},
			reqImportDeclarator: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqImportDeclarator_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqImportSpecifiers_0: function(specifiers) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(specifiers === void 0 || specifiers === null) {
					throw new TypeError("'specifiers' is not nullable");
				}
				this.commit().reqNL_1M();
				var first, imported, local;
				while(!(this.test(Token.RIGHT_CURLY))) {
					if(this.match(Token.ASTERISK) === Token.ASTERISK) {
						var __ks_95;
						first = this.yes();
						if(!this.test(Token.EQUALS_RIGHT_ANGLE)) {
							this.throw("=>");
						}
						this.commit();
						local = this.reqIdentifier();
						specifiers.push(this.yep(AST.ImportNamespaceSpecifier(local, null, first, local)));
					}
					else {
						imported = this.reqExternDeclarator();
						if(this.test(Token.EQUALS_RIGHT_ANGLE)) {
							this.commit();
							local = this.reqIdentifier();
							specifiers.push(this.yep(AST.ImportSpecifier(imported, local, imported, local)));
						}
						else {
							specifiers.push(this.yep(AST.ImportSpecifier(imported, this.yep(imported.value.name), imported, imported)));
						}
					}
					if(this.test(Token.NEWLINE)) {
						this.commit().NL_0M();
					}
					else {
						break;
					}
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return specifiers;
			},
			reqImportSpecifiers: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqImportSpecifiers_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqImportStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.NL_0M();
				var declarations = [];
				var last;
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().reqNL_1M();
					while(!(this.test(Token.RIGHT_CURLY))) {
						declarations.push(this.reqImportDeclarator());
						if(this.test(Token.NEWLINE)) {
							this.commit().NL_0M();
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					var __ks_96;
					last = this.yes();
				}
				else {
					declarations.push(last = this.reqImportDeclarator());
				}
				return this.yep(AST.ImportDeclaration(declarations, first, last));
			},
			reqImportStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqImportStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqIncludeStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().reqNL_1M();
					var files = [];
					while(!(this.test(Token.RIGHT_CURLY))) {
						if(this.test(Token.STRING)) {
							files.push(this.value());
							this.commit().reqNL_1M();
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					var last = this.yes();
					this.reqNL_EOF_1M();
					return this.yep(AST.IncludeDeclaration(files, first, last));
				}
				else {
					if(!this.test(Token.STRING)) {
						this.throw("String");
					}
					var files = [this.value()];
					var last = this.yes();
					this.reqNL_EOF_1M();
					return this.yep(AST.IncludeDeclaration(files, first, last));
				}
			},
			reqIncludeStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqIncludeStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqIncludeAgainStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().reqNL_1M();
					var files = [];
					while(!(this.test(Token.RIGHT_CURLY))) {
						if(this.test(Token.STRING)) {
							files.push(this.value());
							this.commit().reqNL_1M();
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					var last = this.yes();
					this.reqNL_EOF_1M();
					return this.yep(AST.IncludeAgainDeclaration(files, first, last));
				}
				else {
					if(!this.test(Token.STRING)) {
						this.throw("String");
					}
					var files = [this.value()];
					var last = this.yes();
					this.reqNL_EOF_1M();
					return this.yep(AST.IncludeAgainDeclaration(files, first, last));
				}
			},
			reqIncludeAgainStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqIncludeAgainStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqLetStatement_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var __ks__;
				var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : ExpressionMode.Default;
				if(this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE) === Token.LEFT_CURLY) {
					var variables = [];
					variables.push(this.yep(AST.VariableDeclarator(this.reqDestructuringObject(this.yes()))));
					if(this.test(Token.COMMA)) {
						do {
							this.commit();
							if(this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE) === Token.LEFT_CURLY) {
								variables.push(this.yep(AST.VariableDeclarator(this.reqDestructuringObject(this.yes()))));
							}
							else if(this._token === Token.LEFT_SQUARE) {
								variables.push(this.yep(AST.VariableDeclarator(this.reqDestructuringArray(this.yes()))));
							}
							else {
								variables.push(this.reqTypedIdentifier());
							}
						}
						while(this.test(Token.COMMA))
						return this.altLetStatementAwait(first, variables, this.reqVariableEquals());
					}
					else {
						return this.altLetStatementEquals(first, variables, this.reqVariableEquals());
					}
				}
				else if(this._token === Token.LEFT_SQUARE) {
					var variables = [];
					variables.push(this.yep(AST.VariableDeclarator(this.reqDestructuringArray(this.yes()))));
					if(this.test(Token.COMMA)) {
						do {
							this.commit();
							if(this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE) === Token.LEFT_CURLY) {
								variables.push(this.yep(AST.VariableDeclarator(this.reqDestructuringObject(this.yes()))));
							}
							else if(this._token === Token.LEFT_SQUARE) {
								variables.push(this.yep(AST.VariableDeclarator(this.reqDestructuringArray(this.yes()))));
							}
							else {
								variables.push(this.reqTypedIdentifier());
							}
						}
						while(this.test(Token.COMMA))
						return this.altLetStatementAwait(first, variables, this.reqVariableEquals());
					}
					else {
						return this.altLetStatementEquals(first, variables, this.reqVariableEquals());
					}
				}
				else {
					var identifier = this.reqTypedIdentifier();
					if(this.test(Token.COMMA)) {
						var variables = [identifier];
						var onlyIdentifiers = true;
						do {
							this.commit();
							if(this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE) === Token.LEFT_CURLY) {
								variables.push(this.yep(AST.VariableDeclarator(this.reqDestructuringObject(this.yes()))));
								onlyIdentifiers = false;
							}
							else if(this._token === Token.LEFT_SQUARE) {
								variables.push(this.yep(AST.VariableDeclarator(this.reqDestructuringArray(this.yes()))));
								onlyIdentifiers = false;
							}
							else {
								variables.push(this.reqTypedIdentifier());
							}
						}
						while(this.test(Token.COMMA))
						if(onlyIdentifiers) {
							var equals = this.tryVariableEquals();
							if(equals.ok) {
								return this.altLetStatementAwait(first, variables, equals);
							}
							else {
								return this.yep(AST.VariableDeclaration(variables, true, first, variables[variables.length - 1]));
							}
						}
						else {
							return this.altLetStatementAwait(first, variables, this.reqVariableEquals());
						}
					}
					else {
						var equals = this.tryVariableEquals();
						if(equals.ok) {
							return this.altLetStatementEquals(first, [identifier], equals);
						}
						else {
							return this.yep(AST.VariableDeclaration([identifier], true, first, identifier));
						}
					}
				}
			},
			reqLetStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqLetStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqMacroElements_0: function(elements, terminator) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(elements === void 0 || elements === null) {
					throw new TypeError("'elements' is not nullable");
				}
				if(terminator === void 0 || terminator === null) {
					throw new TypeError("'terminator' is not nullable");
				}
				var history = [];
				var literal = null;
				var first, last;
				var addLiteral = Helper.vcurry(function() {
					if(literal !== null) {
						elements.push(this.yep(AST.MacroElementLiteral(literal, first, last)));
						literal = null;
					}
				}, this);
				var addToLiteral = Helper.vcurry(function() {
					if(literal === null) {
						literal = this._scanner.value();
						first = last = this.yep();
					}
					else {
						literal += this._scanner.value();
						last = this.yep();
					}
					this.commit();
				}, this);
				var pushToLiteral = function(value, position) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					if(position === void 0 || position === null) {
						throw new TypeError("'position' is not nullable");
					}
					if(literal === null) {
						literal = value;
						first = last = position;
					}
					else {
						literal += value;
						last = position;
					}
				};
				while(true) {
					var __ks_97 = this.matchM(M.MACRO);
					if(__ks_97 === Token.EOF) {
						if((history.length === 0) && ((terminator & MacroTerminator.NEWLINE) === 0)) {
							this.throw();
						}
						break;
					}
					else if(__ks_97 === Token.HASH) {
						var __ks_first_1 = this.yes();
						if(this.testNS(Token.IDENTIFIER)) {
							addLiteral();
							var identifier = this._scanner.value();
							var __ks_last_1 = this.yes();
							var mark = this.mark();
							if((identifier.length === 1) && ((identifier === "a") || (identifier === "b") || (identifier === "e") || (identifier === "i")) && this.test(Token.LEFT_ROUND)) {
								var reification = AST.MacroReification(identifier, __ks_last_1);
								this.commit();
								var expression = this.reqExpression(ExpressionMode.Default);
								if(!this.test(Token.RIGHT_ROUND)) {
									this.throw(")");
								}
								elements.push(this.yep(AST.MacroElementExpression(expression, reification, __ks_first_1, this.yes())));
							}
							else {
								this.rollback(mark);
								var expression = this.yep(AST.Identifier(identifier, __ks_last_1));
								elements.push(this.yep(AST.MacroElementExpression(expression, null, __ks_first_1, expression)));
							}
						}
						else if(this.testNS(Token.LEFT_ROUND)) {
							addLiteral();
							this.commit();
							var expression = this.reqExpression(ExpressionMode.Default);
							if(!this.test(Token.RIGHT_ROUND)) {
								this.throw(")");
							}
							elements.push(this.yep(AST.MacroElementExpression(expression, null, __ks_first_1, this.yes())));
						}
						else {
							pushToLiteral("#", __ks_first_1);
						}
					}
					else if(__ks_97 === Token.INVALID) {
						addToLiteral();
					}
					else if(__ks_97 === Token.LEFT_CURLY) {
						addToLiteral();
						history.unshift(Token.RIGHT_CURLY);
					}
					else if(__ks_97 === Token.LEFT_ROUND) {
						addToLiteral();
						history.unshift(Token.RIGHT_ROUND);
					}
					else if(__ks_97 === Token.NEWLINE) {
						if((history.length === 0) && ((terminator & MacroTerminator.NEWLINE) !== 0)) {
							break;
						}
						else {
							addLiteral();
							elements.push(this.yep(AST.MacroElementNewLine(this.yes())));
							this._scanner.skip();
						}
					}
					else if(__ks_97 === Token.RIGHT_CURLY) {
						if(history.length === 0) {
							if((terminator & MacroTerminator.RIGHT_CURLY) === 0) {
								addToLiteral();
							}
							else {
								break;
							}
						}
						else {
							addToLiteral();
							if(history[0] === Token.RIGHT_CURLY) {
								history.shift();
							}
						}
					}
					else if(__ks_97 === Token.RIGHT_ROUND) {
						if(history.length === 0) {
							if((terminator & MacroTerminator.RIGHT_ROUND) === 0) {
								addToLiteral();
							}
							else {
								break;
							}
						}
						else {
							addToLiteral();
							if(history[0] === Token.RIGHT_ROUND) {
								history.shift();
							}
						}
					}
				}
				if(!(history.length === 0)) {
					this.throw();
				}
				if(literal !== null) {
					elements.push(this.yep(AST.MacroElementLiteral(literal, first, last)));
				}
			},
			reqMacroElements: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqMacroElements_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqMacroExpression_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var __ks__;
				var terminator = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : MacroTerminator.NEWLINE;
				var elements = [];
				if(this.test(Token.LEFT_CURLY)) {
					if(first.ok) {
						this.commit();
					}
					else {
						var __ks_98;
						first = this.yes();
					}
					this.reqNL_1M();
					this.reqMacroElements(elements, MacroTerminator.RIGHT_CURLY);
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					return this.yep(AST.MacroExpression(elements, true, first, this.yes()));
				}
				else {
					if(!first.ok) {
						first = this.yep();
					}
					this.reqMacroElements(elements, terminator);
					return this.yep(AST.MacroExpression(elements, false, first, elements[elements.length - 1]));
				}
			},
			reqMacroExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqMacroExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqMacroParameterList_0: function() {
				if(!this.test(Token.LEFT_ROUND)) {
					this.throw("(");
				}
				var first = this.yes();
				var parameters = [];
				if(!this.test(Token.RIGHT_ROUND)) {
					while(this.reqParameter(parameters, ParameterMode.Macro)) {
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
				}
				return this.yep(parameters, first, this.yes());
			},
			reqMacroParameterList: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqMacroParameterList_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqMacroBody_0: function() {
				if(this.match(Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE) === Token.LEFT_CURLY) {
					this._mode |= ParserMode.MacroExpression;
					var body = this.reqBlock(this.yes());
					this._mode ^= ParserMode.MacroExpression;
					return body;
				}
				else if(this._token === Token.EQUALS_RIGHT_ANGLE) {
					return this.reqMacroExpression(this.yes());
				}
				else {
					this.throw(["{", "=>"]);
				}
			},
			reqMacroBody: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqMacroBody_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqMacroStatement_0: function(attributes) {
				if(attributes === void 0 || attributes === null) {
					attributes = [];
				}
				var name = this.reqIdentifier();
				var parameters = this.reqMacroParameterList();
				var body = this.reqMacroBody();
				this.reqNL_1M();
				return this.yep(AST.MacroDeclaration(attributes, name, parameters, body, name, body));
			},
			__ks_func_reqMacroStatement_1: function() {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				var __ks_i = -1;
				var __ks__;
				var attributes = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : [];
				var name = arguments[++__ks_i];
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var parameters = this.reqMacroParameterList();
				var body = this.reqMacroBody();
				this.reqNL_1M();
				return this.yep(AST.MacroDeclaration(attributes, name, parameters, body, first, body));
			},
			reqMacroStatement: function() {
				if(arguments.length === 0 || arguments.length === 1) {
					return Parser.prototype.__ks_func_reqMacroStatement_0.apply(this, arguments);
				}
				else if(arguments.length === 2 || arguments.length === 3) {
					return Parser.prototype.__ks_func_reqMacroStatement_1.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqModule_0: function() {
				this.NL_0M();
				var attributes = [];
				var body = [];
				var statement, attrs;
				while(!(this._scanner.isEOF())) {
					if(this.test(Token.HASH_EXCLAMATION_LEFT_SQUARE)) {
						attributes.push(this.reqAttributeBlock(this.yes()));
					}
					else {
						if(this.test(Token.HASH_LEFT_SQUARE)) {
							var __ks_100;
							attrs = this.reqAttributeList(this.yes());
						}
						else {
							attrs = null;
						}
						var __ks_99 = this.matchM(M.MODULE_STATEMENT);
						if(__ks_99 === Token.DISCLOSE) {
							var __ks_101;
							statement = this.reqDiscloseStatement(this.yes()).value;
						}
						else if(__ks_99 === Token.EXPORT) {
							var __ks_102;
							statement = this.reqExportStatement(this.yes()).value;
						}
						else if(__ks_99 === Token.EXTERN) {
							var __ks_103;
							statement = this.reqExternStatement(this.yes()).value;
						}
						else if(__ks_99 === Token.EXTERN_REQUIRE) {
							var __ks_104;
							statement = this.reqExternOrRequireStatement(this.yes()).value;
						}
						else if(__ks_99 === Token.INCLUDE) {
							var __ks_105;
							statement = this.reqIncludeStatement(this.yes()).value;
						}
						else if(__ks_99 === Token.INCLUDE_AGAIN) {
							var __ks_106;
							statement = this.reqIncludeAgainStatement(this.yes()).value;
						}
						else if(__ks_99 === Token.REQUIRE) {
							var __ks_107;
							statement = this.reqRequireStatement(this.yes()).value;
						}
						else if(__ks_99 === Token.REQUIRE_EXTERN) {
							var __ks_108;
							statement = this.reqRequireOrExternStatement(this.yes()).value;
						}
						else if(__ks_99 === Token.REQUIRE_IMPORT) {
							var __ks_109;
							statement = this.reqRequireOrImportStatement(this.yes()).value;
						}
						else {
							statement = this.reqStatement().value;
						}
						if(attrs === null) {
							statement.attributes = [];
						}
						else {
							statement.attributes = Helper.mapArray(attrs.value, function(attr) {
								return attr.value;
							});
							statement.start = statement.attributes[0].start;
						}
						body.push(statement);
					}
					this.NL_0M();
				}
				return AST.Module(attributes, body, this);
			},
			reqModule: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqModule_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqNameIST_0: function() {
				if(this.match(Token.IDENTIFIER, Token.STRING, Token.TEMPLATE_BEGIN) === Token.IDENTIFIER) {
					return this.reqIdentifier();
				}
				else if(this._token === Token.STRING) {
					return this.reqString();
				}
				else if(this._token === Token.TEMPLATE_BEGIN) {
					return this.reqTemplateExpression(this.yes());
				}
				else {
					this.throw(["Identifier", "String", "Template"]);
				}
			},
			reqNameIST: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqNameIST_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqNamespaceStatement_0: function(first, name) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				this.NL_0M();
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit();
				this.NL_0M();
				var statements = [];
				var attrs, statement;
				while(!(this.test(Token.RIGHT_CURLY))) {
					if(this.test(Token.HASH_LEFT_SQUARE)) {
						var __ks_110, __ks_111;
						attrs = this.reqAttributeList(this.yes());
					}
					else {
						attrs = null;
					}
					if(this.matchM(M.MODULE_STATEMENT) === Token.EXPORT) {
						var __ks_112;
						statement = this.reqExportStatement(this.yes());
					}
					else if(this._token === Token.EXTERN) {
						var __ks_113;
						statement = this.reqExternStatement(this.yes());
					}
					else if(this._token === Token.IMPORT) {
						var __ks_114;
						statement = this.reqImportStatement(this.yes());
					}
					else if(this._token === Token.INCLUDE) {
						var __ks_115;
						statement = this.reqIncludeStatement(this.yes());
					}
					else if(this._token === Token.INCLUDE_AGAIN) {
						var __ks_116;
						statement = this.reqIncludeAgainStatement(this.yes());
					}
					else {
						statement = this.reqStatement();
					}
					if(attrs === null) {
						statement.value.attributes = [];
					}
					else {
						statement.value.attributes = Helper.mapArray(attrs.value, function(attr) {
							return attr.value;
						});
						statement.value.start = statement.value.attributes[0].start;
					}
					statements.push(statement);
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.NamespaceDeclaration([], name, statements, first, this.yes()));
			},
			reqNamespaceStatement: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqNamespaceStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqNumber_0: function() {
				var value;
				if((value = this.tryNumber()).ok) {
					return value;
				}
				else {
					this.throw("Number");
				}
			},
			reqNumber: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqNumber_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqNL_1M_0: function() {
				if(this.test(Token.NEWLINE)) {
					this.commit();
					this.skipNewLine();
				}
				else {
					this.throw("NewLine");
				}
			},
			reqNL_1M: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqNL_1M_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqNL_EOF_1M_0: function() {
				if(this.match(Token.NEWLINE) === Token.NEWLINE) {
					this.commit();
					this.skipNewLine();
				}
				else if(this._token !== Token.EOF) {
					this.throw(["NewLine", "EOF"]);
				}
			},
			reqNL_EOF_1M: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqNL_EOF_1M_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqObject_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.NL_0M();
				var properties = [];
				while(!(this.test(Token.RIGHT_CURLY))) {
					properties.push(this.reqObjectItem());
					if(this.match(Token.COMMA, Token.NEWLINE) === Token.COMMA) {
						this.commit().NL_0M();
					}
					else if(this._token === Token.NEWLINE) {
						this.commit().NL_0M();
						if(this.test(Token.COMMA)) {
							this.commit().NL_0M();
						}
					}
					else {
						break;
					}
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yep(AST.ObjectExpression(properties, first, this.yes()));
			},
			reqObject: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqObject_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqObjectItem_0: function() {
				var attributes, first;
				if(this.test(Token.HASH_LEFT_SQUARE)) {
					var __ks_117, __ks_118;
					attributes = this.reqAttributeList(this.yes());
					first = attributes.value[0];
				}
				if(this.test(Token.ASYNC)) {
					var marker = this.mark();
					var async = this.yes();
					var name = this.tryNameIST();
					if(name.ok) {
						var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, async))];
						var parameters = this.reqFunctionParameterList();
						var type = this.reqFunctionReturns();
						var __ks_throws_1 = this.reqFunctionThrows();
						var body = this.reqFunctionBody();
						return this.yep(AST.ObjectMember(attributes, name, this.yep(AST.FunctionExpression(parameters, modifiers, type, __ks_throws_1, body, parameters, body)), KSType.isValue(first) ? first : KSType.isValue(async) ? async : name, body));
					}
					else {
						this.rollback(marker);
					}
				}
				var name;
				if(this.match(Token.IDENTIFIER, Token.LEFT_SQUARE, Token.STRING, Token.TEMPLATE_BEGIN) === Token.IDENTIFIER) {
					name = this.reqIdentifier();
				}
				else if(this._token === Token.LEFT_SQUARE) {
					var __ks_119;
					name = this.reqComputedPropertyName(this.yes());
				}
				else if(this._token === Token.STRING) {
					name = this.reqString();
				}
				else if(this._token === Token.TEMPLATE_BEGIN) {
					var __ks_120;
					name = this.reqTemplateExpression(this.yes());
				}
				else {
					this.throw(["Identifier", "String", "Template", "Computed Property Name"]);
				}
				if(this.test(Token.COLON)) {
					this.commit();
					var value = this.reqExpression(null, MacroTerminator.Object);
					return this.yep(AST.ObjectMember(attributes, name, value, KSType.isValue(first) ? first : name, value));
				}
				else if(this.test(Token.LEFT_ROUND)) {
					var parameters = this.reqFunctionParameterList();
					var type = this.reqFunctionReturns();
					var __ks_throws_1 = this.reqFunctionThrows();
					var body = this.reqFunctionBody();
					return this.yep(AST.ObjectMember(attributes, name, this.yep(AST.FunctionExpression(parameters, null, type, __ks_throws_1, body, parameters, body)), KSType.isValue(first) ? first : name, body));
				}
				else {
					return this.yep(AST.ShorthandProperty(attributes, name, KSType.isValue(first) ? first : name, name));
				}
			},
			reqObjectItem: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqObjectItem_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqOperand_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var value;
				if((value = this.tryOperand(mode)).ok) {
					return value;
				}
				else {
					this.throw();
				}
			},
			reqOperand: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqOperation_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var mode = arguments[++__ks_i];
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var __ks__;
				var operand = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
				var __ks_121;
				operand = this.reqBinaryOperand(mode, operand);
				var values = [operand.value];
				var mark, operator;
				while(true) {
					mark = this.mark();
					this.NL_0M();
					if((operator = this.tryBinaryOperator()).ok) {
						values.push(AST.BinaryExpression(operator));
						this.NL_0M();
						values.push(this.reqBinaryOperand(mode).value);
					}
					else if(this.test(Token.QUESTION)) {
						values.push(AST.ConditionalExpression(this.yes()));
						values.push(this.reqExpression(ExpressionMode.Default).value);
						if(!this.test(Token.COLON)) {
							this.throw(":");
						}
						this.commit();
						values.push(this.reqExpression(ExpressionMode.Default).value);
					}
					else {
						this.rollback(mark);
						break;
					}
				}
				if(values.length === 1) {
					return operand;
				}
				else {
					return this.yep(AST.reorderExpression(values));
				}
			},
			reqOperation: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqOperation_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqParameter_0: function(parameters, mode) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var modifiers = [];
				if(this.test(Token.DOT_DOT_DOT)) {
					var first = this.yes();
					if(this.test(Token.LEFT_CURLY)) {
						this.commit();
						var min, max;
						if(this.test(Token.COMMA)) {
							this.commit();
							min = 0;
							var __ks_122;
							max = this.reqNumber().value.value;
						}
						else {
							min = this.reqNumber().value.value;
							if(this.test(Token.COMMA)) {
								this.commit();
								if(this.test(Token.RIGHT_CURLY)) {
									max = Infinity;
								}
								else {
									max = this.reqNumber().value.value;
								}
							}
							else {
								max = min;
							}
						}
						if(!this.test(Token.RIGHT_CURLY)) {
							this.throw("}");
						}
						modifiers.push(AST.RestModifier(min, max, first, this.yes()));
					}
					else {
						modifiers.push(AST.RestModifier(0, Infinity, first, first));
					}
				}
				if(this.test(Token.AT)) {
					var first;
					if(mode === ParameterMode.Macro) {
						modifiers.push(AST.Modifier(ModifierKind.AutoEvaluate, first = this.yes()));
					}
					else if(mode === ParameterMode.Method) {
						var __ks_123;
						modifiers.push(AST.Modifier(ModifierKind.ThisAlias, first = this.yes()));
					}
					else {
						this.throw();
					}
					parameters.push(this.reqParameterIdendifier(modifiers, first));
					if((mode === ParameterMode.Method) && this.test(Token.LEFT_ROUND)) {
						var __ks_first_1 = this.yes();
						if(!this.test(Token.RIGHT_ROUND)) {
							this.throw(")");
						}
						modifiers.push(AST.Modifier(ModifierKind.SetterAlias, __ks_first_1, this.yes()));
					}
					if(this.test(Token.COMMA)) {
						this.commit();
					}
					else {
						return false;
					}
				}
				else {
					var first = (modifiers.length === 0) ? null : modifiers[0];
					if(this.match(Token.COLON, Token.COMMA, Token.IDENTIFIER, Token.RIGHT_ROUND) === Token.COLON) {
						if(first === null) {
							var __ks_124;
							first = this.yes();
						}
						else {
							this.commit();
						}
						var type = this.reqTypeVar();
						parameters.push(this.yep(AST.Parameter(null, type, modifiers, null, first, type)));
						if(this.test(Token.COMMA)) {
							this.commit();
						}
						else {
							return false;
						}
					}
					else if(this._token === Token.COMMA) {
						if(first === null) {
							first = this.yes();
							first.end = first.start;
						}
						else {
							this.commit();
						}
						parameters.push(this.yep(AST.Parameter(null, null, modifiers, null, first, first)));
					}
					else if(this._token === Token.IDENTIFIER) {
						parameters.push(this.reqParameterIdendifier(modifiers, first));
						if(this.test(Token.COMMA)) {
							this.commit();
						}
						else {
							return false;
						}
					}
					else if(this._token === Token.RIGHT_ROUND) {
						var __ks_125;
						first = this.yep(this._scanner.position());
						first.end = first.start;
						parameters.push(this.yep(AST.Parameter(null, null, modifiers, null, first, first)));
						return false;
					}
					else if(modifiers.length !== 0) {
						parameters.push(this.yep(AST.Parameter(null, null, modifiers, null, first, first)));
					}
					else {
						this.throw();
					}
				}
				return true;
			},
			reqParameter: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqParameter_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqParameterIdendifier_0: function(modifiers, first) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				var identifier = this.reqIdentifier();
				if(this.match(Token.COLON, Token.EQUALS, Token.QUESTION) === Token.COLON) {
					this.commit();
					var type = this.reqTypeVar();
					if(this.test(Token.EQUALS)) {
						this.commit();
						var defaultValue = this.reqExpression(ExpressionMode.Default);
						return this.yep(AST.Parameter(identifier, type, modifiers, defaultValue, KSType.isValue(first) ? first : identifier, defaultValue));
					}
					else {
						return this.yep(AST.Parameter(identifier, type, modifiers, null, KSType.isValue(first) ? first : identifier, type));
					}
				}
				else if(this._token === Token.EQUALS) {
					this.commit();
					var defaultValue = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.Parameter(identifier, null, modifiers, defaultValue, KSType.isValue(first) ? first : identifier, defaultValue));
				}
				else if(this._token === Token.QUESTION) {
					var type = this.yep(AST.Nullable(this.yes()));
					if(this.test(Token.EQUALS)) {
						this.commit();
						var defaultValue = this.reqExpression(ExpressionMode.Default);
						return this.yep(AST.Parameter(identifier, type, modifiers, defaultValue, KSType.isValue(first) ? first : identifier, defaultValue));
					}
					else {
						return this.yep(AST.Parameter(identifier, type, modifiers, null, KSType.isValue(first) ? first : identifier, type));
					}
				}
				else {
					return this.yep(AST.Parameter(identifier, null, modifiers, null, KSType.isValue(first) ? first : identifier, identifier));
				}
			},
			reqParameterIdendifier: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqParameterIdendifier_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqParenthesis_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.test(Token.NEWLINE)) {
					this.commit().NL_0M();
					var expression = this.reqExpression(null, MacroTerminator.Parenthesis);
					this.NL_0M();
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
					this.relocate(expression, first, this.yes());
					return expression;
				}
				else {
					var expressions = [this.reqExpression(null, MacroTerminator.List)];
					while(this.test(Token.COMMA)) {
						this.commit();
						expressions.push(this.reqExpression(null, MacroTerminator.List));
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						this.throw(")");
					}
					if(expressions.length === 1) {
						this.relocate(expressions[0], first, this.yes());
						return expressions[0];
					}
					else {
						return this.yep(AST.SequenceExpression(expressions, first, this.yes()));
					}
				}
			},
			reqParenthesis: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqParenthesis_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqPostfixedOperand_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var mode = arguments[++__ks_i];
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var __ks__;
				var operand = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
				operand = this.reqUnaryOperand(mode, operand);
				var operator;
				var __ks_126 = this.matchM(M.POSTFIX_OPERATOR);
				if(__ks_126 === Token.MINUS_MINUS) {
					var __ks_127, __ks_128;
					operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.DecrementPostfix, this.yes()));
				}
				else if(__ks_126 === Token.PLUS_PLUS) {
					var __ks_129, __ks_130;
					operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.IncrementPostfix, this.yes()));
				}
				else if(__ks_126 === Token.QUESTION) {
					var __ks_131, __ks_132;
					operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.Existential, this.yes()));
				}
				else {
					return operand;
				}
				return this.reqPostfixedOperand(mode, this.yep(AST.UnaryExpression(operator, operand, operand, operator)));
			},
			reqPostfixedOperand: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqPostfixedOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqPrefixedOperand_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var mode = arguments[++__ks_i];
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var __ks__;
				var operand = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
				if(operand === null) {
					var __ks_133 = this.matchM(M.PREFIX_OPERATOR);
					if(__ks_133 === Token.DOT_DOT_DOT) {
						var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.Spread, this.yes()));
						var __ks_operand_1 = this.reqPrefixedOperand(mode);
						return this.yep(AST.UnaryExpression(operator, __ks_operand_1, operator, __ks_operand_1));
					}
					else if(__ks_133 === Token.EXCLAMATION) {
						var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.Negation, this.yes()));
						var __ks_operand_2 = this.reqPrefixedOperand(mode);
						return this.yep(AST.UnaryExpression(operator, __ks_operand_2, operator, __ks_operand_2));
					}
					else if(__ks_133 === Token.MINUS) {
						var first = this.yes();
						var __ks_operand_3 = this.reqPrefixedOperand(mode);
						if(__ks_operand_3.value.kind === NodeKind.NumericExpression) {
							__ks_operand_3.value.value = -__ks_operand_3.value.value;
							return this.relocate(__ks_operand_3, first, null);
						}
						else {
							var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.Negative, first));
							return this.yep(AST.UnaryExpression(operator, __ks_operand_3, operator, __ks_operand_3));
						}
					}
					else if(__ks_133 === Token.MINUS_MINUS) {
						var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.DecrementPrefix, this.yes()));
						var __ks_operand_4 = this.reqPrefixedOperand(mode);
						return this.yep(AST.UnaryExpression(operator, __ks_operand_4, operator, __ks_operand_4));
					}
					else if(__ks_133 === Token.PLUS_PLUS) {
						var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.IncrementPrefix, this.yes()));
						var __ks_operand_5 = this.reqPrefixedOperand(mode);
						return this.yep(AST.UnaryExpression(operator, __ks_operand_5, operator, __ks_operand_5));
					}
					else if(__ks_133 === Token.QUESTION) {
						var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.Existential, this.yes()));
						var __ks_operand_6 = this.reqPrefixedOperand(mode);
						return this.yep(AST.UnaryExpression(operator, __ks_operand_6, operator, __ks_operand_6));
					}
					else if(__ks_133 === Token.TILDE) {
						var operator = this.yep(AST.UnaryOperator(UnaryOperatorKind.BitwiseNot, this.yes()));
						var __ks_operand_7 = this.reqPrefixedOperand(mode);
						return this.yep(AST.UnaryExpression(operator, __ks_operand_7, operator, __ks_operand_7));
					}
					else {
						return this.reqPostfixedOperand(mode);
					}
				}
				else {
					return this.reqPostfixedOperand(mode, operand);
				}
			},
			reqPrefixedOperand: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqPrefixedOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqRequireStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var declarations = [];
				var last;
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().NL_0M();
					while(!(this.test(Token.RIGHT_CURLY))) {
						declarations.push(this.reqExternDeclarator());
						this.reqNL_1M();
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					var __ks_134;
					last = this.yes();
				}
				else {
					declarations.push(this.reqExternDeclarator());
					while(this.test(Token.COMMA)) {
						this.commit();
						declarations.push(this.reqExternDeclarator());
					}
					last = declarations[declarations.length - 1];
				}
				this.reqNL_EOF_1M();
				return this.yep(AST.RequireDeclaration(declarations, first, last));
			},
			reqRequireStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqRequireStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqRequireOrExternStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var declarations = [];
				var last;
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().NL_0M();
					while(!(this.test(Token.RIGHT_CURLY))) {
						declarations.push(this.reqExternDeclarator());
						this.reqNL_1M();
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					var __ks_135;
					last = this.yes();
				}
				else {
					declarations.push(this.reqExternDeclarator());
					while(this.test(Token.COMMA)) {
						this.commit();
						declarations.push(this.reqExternDeclarator());
					}
					last = declarations[declarations.length - 1];
				}
				this.reqNL_EOF_1M();
				return this.yep(AST.RequireOrExternDeclaration(declarations, first, last));
			},
			reqRequireOrExternStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqRequireOrExternStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqRequireOrImportStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var declarations = [];
				var last;
				if(this.test(Token.LEFT_CURLY)) {
					this.commit().reqNL_1M();
					while(!(this.test(Token.RIGHT_CURLY))) {
						declarations.push(this.reqImportDeclarator());
						if(this.test(Token.NEWLINE)) {
							this.commit().NL_0M();
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					var __ks_136;
					last = this.yes();
				}
				else {
					declarations.push(last = this.reqImportDeclarator());
				}
				this.reqNL_EOF_1M();
				return this.yep(AST.RequireOrImportDeclaration(declarations, first, last));
			},
			reqRequireOrImportStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqRequireOrImportStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqReturnStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.match(Token.IF, Token.UNLESS, Token.NEWLINE) === Token.IF) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.IfStatement(condition, this.yep(AST.ReturnStatement(first)), null, first, condition));
				}
				else if((this._token === Token.NEWLINE) || (this._token === Token.EOF)) {
					return this.yep(AST.ReturnStatement(first));
				}
				else if(this._token === Token.UNLESS) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.UnlessStatement(condition, this.yep(AST.ReturnStatement(first)), first, condition));
				}
				else {
					var expression = this.reqExpression(ExpressionMode.Default);
					if(this.match(Token.IF, Token.UNLESS, Token.NEWLINE) === Token.IF) {
						this.commit();
						var condition = this.reqExpression(ExpressionMode.Default);
						if(this.match(Token.ELSE, Token.NEWLINE) === Token.ELSE) {
							this.commit();
							var whenFalse = this.reqExpression(ExpressionMode.Default);
							return this.yep(AST.ReturnStatement(this.yep(AST.IfExpression(condition, expression, whenFalse, expression, whenFalse)), first, whenFalse));
						}
						else if((this._token === Token.NEWLINE) || (this._token === Token.EOF)) {
							return this.yep(AST.IfStatement(condition, this.yep(AST.ReturnStatement(expression, first, expression)), null, first, condition));
						}
						else {
							this.throw();
						}
					}
					else if((this._token === Token.NEWLINE) || (this._token === Token.EOF)) {
						return this.yep(AST.ReturnStatement(expression, first, expression));
					}
					else if(this._token === Token.UNLESS) {
						this.commit();
						var condition = this.reqExpression(ExpressionMode.Default);
						return this.yep(AST.UnlessStatement(condition, this.yep(AST.ReturnStatement(expression, first, expression)), first, condition));
					}
					else {
						this.throw();
					}
				}
			},
			reqReturnStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqReturnStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqStatement_0: function() {
				var mark = this.mark();
				var statement = NO;
				var __ks_137 = this.matchM(M.STATEMENT);
				if(__ks_137 === Token.ABSTRACT) {
					var first = this.yes();
					if(this.test(Token.CLASS)) {
						this.commit();
						var modifiers = [this.yep(AST.Modifier(ModifierKind.Abstract, first))];
						statement = this.reqClassStatement(first, modifiers);
					}
					else {
						statement = NO;
					}
				}
				else if(__ks_137 === Token.ASYNC) {
					var first = this.yes();
					if(this.test(Token.FUNC)) {
						this.commit();
						var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, first))];
						statement = this.reqFunctionStatement(first, modifiers);
					}
					else {
						statement = NO;
					}
				}
				else if(__ks_137 === Token.BREAK) {
					var __ks_138;
					statement = this.reqBreakStatement(this.yes());
				}
				else if(__ks_137 === Token.CLASS) {
					var __ks_139;
					statement = this.tryClassStatement(this.yes());
				}
				else if(__ks_137 === Token.CONST) {
					var __ks_140;
					statement = this.reqConstStatement(this.yes());
				}
				else if(__ks_137 === Token.CONTINUE) {
					var __ks_141;
					statement = this.reqContinueStatement(this.yes());
				}
				else if(__ks_137 === Token.DELETE) {
					var __ks_142;
					statement = this.tryDestroyStatement(this.yes());
				}
				else if(__ks_137 === Token.DO) {
					var __ks_143;
					statement = this.reqDoStatement(this.yes());
				}
				else if(__ks_137 === Token.ENUM) {
					var __ks_144;
					statement = this.reqEnumStatement(this.yes());
				}
				else if(__ks_137 === Token.FOR) {
					var __ks_145;
					statement = this.reqForStatement(this.yes());
				}
				else if(__ks_137 === Token.FUNC) {
					var __ks_146;
					statement = this.reqFunctionStatement(this.yes());
				}
				else if(__ks_137 === Token.IF) {
					var __ks_147;
					statement = this.reqIfStatement(this.yes());
				}
				else if(__ks_137 === Token.IMPL) {
					var __ks_148;
					statement = this.reqImplementStatement(this.yes());
				}
				else if(__ks_137 === Token.IMPORT) {
					var __ks_149;
					statement = this.reqImportStatement(this.yes());
				}
				else if(__ks_137 === Token.LET) {
					var __ks_150;
					statement = this.reqLetStatement(this.yes());
				}
				else if(__ks_137 === Token.MACRO) {
					if((this._mode & ParserMode.MacroExpression) === 0) {
						var __ks_151;
						statement = this.tryMacroStatement(this.yes());
					}
					else {
						var __ks_152;
						statement = this.reqMacroExpression(this.yes());
					}
				}
				else if(__ks_137 === Token.NAMESPACE) {
					var __ks_153;
					statement = this.tryNamespaceStatement(this.yes());
				}
				else if(__ks_137 === Token.RETURN) {
					var __ks_154;
					statement = this.reqReturnStatement(this.yes());
				}
				else if(__ks_137 === Token.SEALED) {
					var first = this.yes();
					var modifiers = [this.yep(AST.Modifier(ModifierKind.Sealed, first))];
					if(this.test(Token.CLASS)) {
						this.commit();
						statement = this.reqClassStatement(first, modifiers);
					}
					else if(this.test(Token.ABSTRACT)) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Abstract, this.yes())));
						if(this.test(Token.CLASS)) {
							this.commit();
							statement = this.reqClassStatement(first, modifiers);
						}
						else {
							this.throw("class");
						}
					}
					else {
						statement = NO;
					}
				}
				else if(__ks_137 === Token.SWITCH) {
					var __ks_155;
					statement = this.reqSwitchStatement(this.yes());
				}
				else if(__ks_137 === Token.THROW) {
					var __ks_156;
					statement = this.reqThrowStatement(this.yes());
				}
				else if(__ks_137 === Token.TRY) {
					var __ks_157;
					statement = this.reqTryStatement(this.yes());
				}
				else if(__ks_137 === Token.TYPE) {
					var __ks_158;
					statement = this.tryTypeStatement(this.yes());
				}
				else if(__ks_137 === Token.UNLESS) {
					var __ks_159;
					statement = this.reqUnlessStatement(this.yes());
				}
				else if(__ks_137 === Token.UNTIL) {
					var __ks_160;
					statement = this.tryUntilStatement(this.yes());
				}
				else if(__ks_137 === Token.WHILE) {
					var __ks_161;
					statement = this.tryWhileStatement(this.yes());
				}
				if(!statement.ok) {
					this.rollback(mark);
					if(!(statement = this.tryAssignementStatement()).ok) {
						this.rollback(mark);
						statement = this.reqExpressionStatement();
					}
				}
				this.reqNL_EOF_1M();
				return statement;
			},
			reqStatement: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqStatement_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqString_0: function() {
				if(this.test(Token.STRING)) {
					return this.yep(AST.Literal(this.value(), this.yes()));
				}
				else {
					this.throw("String");
				}
			},
			reqString: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqString_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqSwitchBinding_0: function() {
				var bindings = [this.reqSwitchBindingValue()];
				while(this.test(Token.COMMA)) {
					this.commit();
					bindings.push(this.reqSwitchBindingValue());
				}
				return this.yep(bindings);
			},
			reqSwitchBinding: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqSwitchBinding_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqSwitchBindingValue_0: function() {
				var __ks_162 = this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE);
				if(__ks_162 === Token.LEFT_CURLY) {
					var first = this.yes();
					var elements = [];
					if(!this.test(Token.RIGHT_CURLY)) {
						var alias, name;
						while(true) {
							alias = this.reqIdentifier();
							if(!this.test(Token.COLON)) {
								this.throw(":");
							}
							this.commit();
							name = this.reqIdentifier();
							elements.push(this.yep(AST.BindingElement(name, alias, null, null, alias, name)));
							if(this.test(Token.COMMA)) {
								this.commit();
							}
							else {
								break;
							}
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					return this.yep(AST.ObjectBinding(elements, first, this.yes()));
				}
				else if(__ks_162 === Token.LEFT_SQUARE) {
					var first = this.yes();
					var elements = [];
					while(!(this.test(Token.RIGHT_SQUARE))) {
						if(this.test(Token.COMMA)) {
							elements.push(this.yep(AST.OmittedExpression(false, this.yep())));
						}
						else if(this.test(Token.DOT_DOT_DOT)) {
							var __ks_first_1 = this.yes();
							if(this.test(Token.COMMA) || this.test(Token.RIGHT_SQUARE)) {
								elements.push(this.yep(AST.OmittedExpression(true, __ks_first_1)));
							}
							else {
								var name = this.reqIdentifier();
								elements.push(this.yep(AST.BindingElement(name, null, true, null, __ks_first_1, name)));
								if(this.test(Token.COMMA)) {
									this.commit();
								}
							}
						}
						else {
							elements.push(this.yep(AST.BindingElement(this.reqIdentifier())));
						}
						if(this.test(Token.COMMA)) {
							this.commit();
							if(this.test(Token.RIGHT_SQUARE)) {
								elements.push(this.yep(AST.OmittedExpression(false, this.yep())));
							}
						}
					}
					if(!this.test(Token.RIGHT_SQUARE)) {
						this.throw("]");
					}
					return this.yep(AST.ArrayBinding(elements, first, this.yes()));
				}
				else {
					var name = this.reqIdentifier();
					if(this.test(Token.AS)) {
						this.commit();
						var type = this.reqTypeVar();
						return this.yep(AST.SwitchTypeCasting(name, type));
					}
					else {
						return name;
					}
				}
			},
			reqSwitchBindingValue: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqSwitchBindingValue_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqSwitchCaseExpression_0: function() {
				var __ks_163 = this.match(Token.LEFT_CURLY, Token.RETURN, Token.THROW);
				if(__ks_163 === Token.LEFT_CURLY) {
					return this.reqBlock(this.yes());
				}
				else if(__ks_163 === Token.RETURN) {
					var first = this.yes();
					var expression = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.ReturnStatement(expression, first, expression));
				}
				else if(__ks_163 === Token.THROW) {
					var first = this.yes();
					var expression = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.ThrowStatement(expression, first, expression));
				}
				else {
					return this.reqExpression(ExpressionMode.Default);
				}
			},
			reqSwitchCaseExpression: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqSwitchCaseExpression_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqSwitchCaseList_0: function() {
				this.NL_0M();
				if(!this.test(Token.LEFT_CURLY)) {
					this.throw("{");
				}
				this.commit().NL_0M();
				var clauses = [];
				var conditions, bindings, filter, body, first;
				while(!(this.test(Token.RIGHT_CURLY))) {
					conditions = bindings = filter = null;
					var __ks_164 = this.match(Token.WITH, Token.WHERE, Token.EQUALS_RIGHT_ANGLE);
					if(__ks_164 === Token.EQUALS_RIGHT_ANGLE) {
						first = this.yes();
						body = this.reqSwitchCaseExpression();
					}
					else if(__ks_164 === Token.WHERE) {
						first = this.yes();
						filter = this.reqExpression(ExpressionMode.NoAnonymousFunction);
						this.NL_0M();
						if(!this.test(Token.EQUALS_RIGHT_ANGLE)) {
							this.throw("=>");
						}
						this.commit();
						body = this.reqSwitchCaseExpression();
					}
					else if(__ks_164 === Token.WITH) {
						first = this.yes();
						bindings = this.reqSwitchBinding();
						this.NL_0M();
						var __ks_165 = this.match(Token.WHERE, Token.EQUALS_RIGHT_ANGLE);
						if(__ks_165 === Token.EQUALS_RIGHT_ANGLE) {
							this.commit();
							body = this.reqSwitchCaseExpression();
						}
						else if(__ks_165 === Token.WHERE) {
							this.commit();
							filter = this.reqExpression(ExpressionMode.NoAnonymousFunction);
							this.NL_0M();
							if(!this.test(Token.EQUALS_RIGHT_ANGLE)) {
								this.throw("=>");
							}
							this.commit();
							body = this.reqSwitchCaseExpression();
						}
						else {
							this.throw(["where", "=>"]);
						}
					}
					else {
						first = this.reqSwitchCondition();
						conditions = [first];
						while(this.test(Token.COMMA)) {
							this.commit();
							conditions.push(this.reqSwitchCondition());
						}
						this.NL_0M();
						var __ks_165 = this.match(Token.WITH, Token.WHERE, Token.EQUALS_RIGHT_ANGLE);
						if(__ks_165 === Token.EQUALS_RIGHT_ANGLE) {
							this.commit();
							body = this.reqSwitchCaseExpression();
						}
						else if(__ks_165 === Token.WHERE) {
							this.commit();
							filter = this.reqExpression(ExpressionMode.NoAnonymousFunction);
							this.NL_0M();
							if(!this.test(Token.EQUALS_RIGHT_ANGLE)) {
								this.throw("=>");
							}
							this.commit();
							body = this.reqSwitchCaseExpression();
						}
						else if(__ks_165 === Token.WITH) {
							this.commit();
							bindings = this.reqSwitchBinding();
							this.NL_0M();
							var __ks_166 = this.match(Token.WHERE, Token.EQUALS_RIGHT_ANGLE);
							if(__ks_166 === Token.EQUALS_RIGHT_ANGLE) {
								this.commit();
								body = this.reqSwitchCaseExpression();
							}
							else if(__ks_166 === Token.WHERE) {
								this.commit();
								filter = this.reqExpression(ExpressionMode.NoAnonymousFunction);
								this.NL_0M();
								if(!this.test(Token.EQUALS_RIGHT_ANGLE)) {
									this.throw("=>");
								}
								this.commit();
								body = this.reqSwitchCaseExpression();
							}
							else {
								this.throw(["where", "=>"]);
							}
						}
						else {
							this.throw(["where", "with", "=>"]);
						}
					}
					this.reqNL_1M();
					clauses.push(AST.SwitchClause(conditions, bindings, filter, body, first, body));
				}
				if(!this.test(Token.RIGHT_CURLY)) {
					this.throw("}");
				}
				return this.yes(clauses);
			},
			reqSwitchCaseList: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqSwitchCaseList_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqSwitchCondition_0: function() {
				var __ks_167 = this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE, Token.IS, Token.COLON);
				if(__ks_167 === Token.COLON) {
					throw new Error("Not Implemented");
				}
				else if(__ks_167 === Token.IS) {
					var first = this.yes();
					var type = this.reqTypeVar();
					return this.yep(AST.SwitchConditionType(type, first, type));
				}
				else if(__ks_167 === Token.LEFT_CURLY) {
					var first = this.yes();
					var members = [];
					if(!this.test(Token.RIGHT_CURLY)) {
						var name;
						while(true) {
							name = this.reqIdentifier();
							if(this.test(Token.COLON)) {
								this.commit();
								members.push(this.yep(AST.ObjectMember(name, this.reqSwitchConditionValue())));
							}
							else {
								members.push(this.yep(AST.ObjectMember(name)));
							}
							if(this.test(Token.COMMA)) {
								this.commit();
							}
							else {
								break;
							}
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					return this.yep(AST.SwitchConditionObject(members, first, this.yes()));
				}
				else if(__ks_167 === Token.LEFT_SQUARE) {
					var first = this.yes();
					var values = [];
					while(!(this.test(Token.RIGHT_SQUARE))) {
						if(this.test(Token.COMMA)) {
							values.push(this.yep(AST.OmittedExpression(false, this.yep())));
						}
						else if(this.test(Token.DOT_DOT_DOT)) {
							values.push(this.yep(AST.OmittedExpression(true, this.yes())));
						}
						else {
							values.push(this.reqSwitchConditionValue());
						}
						if(this.test(Token.COMMA)) {
							this.commit();
							if(this.test(Token.RIGHT_SQUARE)) {
								values.push(this.yep(AST.OmittedExpression(false, this.yep())));
							}
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_SQUARE)) {
						this.throw("]");
					}
					return this.yep(AST.SwitchConditionArray(values, first, this.yes()));
				}
				else {
					return this.reqSwitchConditionValue();
				}
			},
			reqSwitchCondition: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqSwitchCondition_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqSwitchConditionValue_0: function() {
				var operand = this.reqPrefixedOperand(ExpressionMode.Default);
				if(this.match(Token.LEFT_ANGLE, Token.DOT_DOT) === Token.DOT_DOT) {
					this.commit();
					if(this.test(Token.LEFT_ANGLE)) {
						this.commit();
						return this.yep(AST.SwitchConditionRangeFI(operand, this.reqPrefixedOperand(ExpressionMode.Default)));
					}
					else {
						return this.yep(AST.SwitchConditionRangeFO(operand, this.reqPrefixedOperand(ExpressionMode.Default)));
					}
				}
				else if(this._token === Token.LEFT_ANGLE) {
					this.commit();
					if(!this.test(Token.DOT_DOT)) {
						this.throw("..");
					}
					this.commit();
					if(this.test(Token.LEFT_ANGLE)) {
						this.commit();
						return this.yep(AST.SwitchConditionRangeTI(operand, this.reqPrefixedOperand(ExpressionMode.Default)));
					}
					else {
						return this.yep(AST.SwitchConditionRangeTO(operand, this.reqPrefixedOperand(ExpressionMode.Default)));
					}
				}
				else {
					return operand;
				}
			},
			reqSwitchConditionValue: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqSwitchConditionValue_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqSwitchStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var expression = this.reqOperation(ExpressionMode.Default);
				var clauses = this.reqSwitchCaseList();
				return this.yep(AST.SwitchStatement(expression, clauses, first, clauses));
			},
			reqSwitchStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqSwitchStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqTemplateExpression_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var elements = [];
				while(true) {
					if(this.matchM(M.TEMPLATE) === Token.TEMPLATE_ELEMENT) {
						this.commit();
						elements.push(this.reqExpression(ExpressionMode.Default));
						if(!this.test(Token.RIGHT_ROUND)) {
							this.throw(")");
						}
						this.commit();
					}
					else if(this._token === Token.TEMPLATE_VALUE) {
						elements.push(this.yep(AST.Literal(this._scanner.value(), this.yes())));
					}
					else {
						break;
					}
				}
				if(!this.test(Token.TEMPLATE_END)) {
					this.throw("`");
				}
				return this.yep(AST.TemplateExpression(elements, first, this.yes()));
			},
			reqTemplateExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqTemplateExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqThisExpression_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var identifier = this.reqIdentifier();
				return this.yep(AST.ThisExpression(identifier, first, identifier));
			},
			reqThisExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqThisExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqThrowStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(this.match(Token.IF, Token.UNLESS, Token.NEWLINE) === Token.IF) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.IfStatement(condition, this.yep(AST.ThrowStatement(first)), null, first, condition));
				}
				else if((this._token === Token.NEWLINE) || (this._token === Token.EOF)) {
					return this.yep(AST.ThrowStatement(first));
				}
				else if(this._token === Token.UNLESS) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					return this.yep(AST.UnlessStatement(condition, this.yep(AST.ThrowStatement(first)), first, condition));
				}
				else {
					var expression = this.reqExpression(ExpressionMode.Default);
					if(this.match(Token.IF, Token.UNLESS, Token.NEWLINE) === Token.IF) {
						this.commit();
						var condition = this.reqExpression(ExpressionMode.Default);
						if(this.match(Token.ELSE, Token.NEWLINE) === Token.ELSE) {
							this.commit();
							var whenFalse = this.reqExpression(ExpressionMode.Default);
							return this.yep(AST.ThrowStatement(this.yep(AST.IfExpression(condition, expression, whenFalse, expression, whenFalse)), first, whenFalse));
						}
						else if((this._token === Token.NEWLINE) || (this._token === Token.EOF)) {
							return this.yep(AST.IfStatement(condition, this.yep(AST.ThrowStatement(expression, first, expression)), null, first, condition));
						}
						else {
							this.throw();
						}
					}
					else if((this._token === Token.NEWLINE) || (this._token === Token.EOF)) {
						return this.yep(AST.ThrowStatement(expression, first, expression));
					}
					else if(this._token === Token.UNLESS) {
						this.commit();
						var condition = this.reqExpression(ExpressionMode.Default);
						return this.yep(AST.UnlessStatement(condition, this.yep(AST.ThrowStatement(expression, first, expression)), first, condition));
					}
					else {
						this.throw();
					}
				}
			},
			reqThrowStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqThrowStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqTryCatchClause_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var binding;
				if(this.test(Token.IDENTIFIER)) {
					var __ks_168;
					binding = this.reqIdentifier();
				}
				this.NL_0M();
				var body = this.reqBlock();
				return this.yep(AST.CatchClause(binding, null, body, first, body));
			},
			reqTryCatchClause: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqTryCatchClause_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqTryStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				this.NL_0M();
				var body = this.reqBlock();
				var last = body;
				var mark = this.mark();
				var catchClauses = [];
				var catchClause, finalizer;
				this.NL_0M();
				if(this.test(Token.ON)) {
					do {
						var __ks_169, __ks_170;
						catchClauses.push(last = this.reqCatchOnClause(this.yes()));
						var __ks_171;
						mark = this.mark();
						this.NL_0M();
					}
					while(this.test(Token.ON))
				}
				else {
					this.rollback(mark);
					this.NL_0M();
				}
				if(this.test(Token.CATCH)) {
					var __ks_172;
					catchClause = last = this.reqTryCatchClause(this.yes());
					mark = this.mark();
				}
				else {
					this.rollback(mark);
				}
				this.NL_0M();
				if(this.test(Token.FINALLY)) {
					this.commit();
					finalizer = last = this.reqBlock();
				}
				else {
					this.rollback(mark);
				}
				return this.yep(AST.TryStatement(body, catchClauses, catchClause, finalizer, first, last));
			},
			reqTryStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqTryStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqTypeEntity_0: function(nullable) {
				if(nullable === void 0) {
					nullable = null;
				}
				var marker = this.mark();
				if(this.match(Token.ASYNC, Token.FUNC, Token.LEFT_ROUND) === Token.ASYNC) {
					var async = this.yes();
					if(this.test(Token.FUNC)) {
						this.commit();
					}
					if(this.test(Token.LEFT_ROUND)) {
						var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, async))];
						var parameters = this.reqFunctionParameterList();
						var type = this.reqFunctionReturns();
						var __ks_throws_1 = this.reqFunctionThrows();
						return this.yep(AST.FunctionExpression(parameters, modifiers, type, __ks_throws_1, null, async, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
					}
					else {
						this.rollback(marker);
					}
				}
				else if(this._token === Token.FUNC) {
					var first = this.yes();
					if(this.test(Token.LEFT_ROUND)) {
						var parameters = this.reqFunctionParameterList();
						var type = this.reqFunctionReturns();
						var __ks_throws_1 = this.reqFunctionThrows();
						return this.yep(AST.FunctionExpression(parameters, null, type, __ks_throws_1, null, first, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
					}
					else {
						this.rollback(marker);
					}
				}
				else if(this._token === Token.LEFT_ROUND) {
					var parameters = this.reqFunctionParameterList();
					var type = this.reqFunctionReturns();
					var __ks_throws_1 = this.reqFunctionThrows();
					return this.yep(AST.FunctionExpression(parameters, null, type, __ks_throws_1, null, parameters, KSType.isValue(__ks_throws_1) ? __ks_throws_1 : KSType.isValue(type) ? type : parameters));
				}
				var name = this.reqIdentifier();
				if(this.testNS(Token.DOT)) {
					var property;
					do {
						this.commit();
						var __ks_173;
						property = this.reqIdentifier();
						var __ks_174;
						name = this.yep(AST.MemberExpression(name, property, false, false));
					}
					while(this.testNS(Token.DOT))
				}
				var last = name;
				var generic;
				if(this.testNS(Token.LEFT_ANGLE)) {
					var __ks_175;
					generic = last = this.reqTypeGeneric(this.yes());
				}
				if((nullable === null) && this.testNS(Token.QUESTION)) {
					nullable = last = this.yes(true);
				}
				return this.yep(AST.TypeReference(name, generic, nullable, name, last));
			},
			reqTypeEntity: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Parser.prototype.__ks_func_reqTypeEntity_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqTypeGeneric_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var entities = [this.reqTypeEntity()];
				while(this.test(Token.COMMA)) {
					this.commit();
					entities.push(this.reqTypeEntity());
				}
				if(!this.test(Token.RIGHT_ANGLE)) {
					this.throw(">");
				}
				return this.yes(entities);
			},
			reqTypeGeneric: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqTypeGeneric_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqTypeStatement_0: function(first, name) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(!this.test(Token.EQUALS)) {
					this.throw("=");
				}
				this.commit();
				var type = this.reqTypeVar(true);
				return this.yep(AST.TypeAliasDeclaration(name, type, first, type));
			},
			reqTypeStatement: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_reqTypeStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqTypeVar_0: function(isMultiLines) {
				if(isMultiLines === void 0 || isMultiLines === null) {
					isMultiLines = false;
				}
				if(isMultiLines) {
					this.NL_0M();
				}
				if(this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE) === Token.LEFT_CURLY) {
					var first = this.yes();
					var properties = [];
					this.NL_0M();
					while(!(this.test(Token.RIGHT_CURLY))) {
						if(this.match(Token.ASYNC, Token.FUNC, Token.IDENTIFIER) === Token.IDENTIFIER) {
							properties.push(this.reqTypeObjectMember());
						}
						else if(this._token === Token.ASYNC) {
							var marker = this.mark();
							var async = this.yes();
							if(this.test(Token.FUNC)) {
								this.commit();
							}
							var identifier = this.reqIdentifier();
							if(this.test(Token.LEFT_ROUND)) {
								var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, async))];
								var parameters = this.reqFunctionParameterList();
								var type = this.reqFunctionReturns();
								var __ks_throws_1 = this.reqFunctionThrows();
								var objectType = this.yep(AST.FunctionExpression(parameters, modifiers, type, null, null, parameters, KSType.isValue(type) ? type : parameters));
								properties.push(this.yep(AST.ObjectMemberReference(identifier, objectType)));
							}
							else {
								this.rollback(marker);
								properties.push(this.reqTypeObjectMember());
							}
						}
						else if(this._token === Token.FUNC) {
							var marker = this.mark();
							var __ks_first_1 = this.yes();
							var identifier = this.reqIdentifier();
							if(this.test(Token.LEFT_ROUND)) {
								var parameters = this.reqFunctionParameterList();
								var type = this.reqFunctionReturns();
								var __ks_throws_1 = this.reqFunctionThrows();
								var objectType = this.yep(AST.FunctionExpression(parameters, null, type, null, null, parameters, KSType.isValue(type) ? type : parameters));
								properties.push(this.yep(AST.ObjectMemberReference(identifier, objectType)));
							}
							else {
								this.rollback(marker);
								properties.push(this.reqTypeObjectMember());
							}
						}
						else {
							this.throw(["async", "func", "Identifier"]);
						}
						if(this.test(Token.COMMA)) {
							this.commit().NL_0M();
						}
						else if(this.test(Token.NEWLINE)) {
							this.commit().NL_0M();
							if(this.test(Token.COMMA)) {
								this.commit().NL_0M();
							}
						}
						else {
							break;
						}
					}
					if(!this.test(Token.RIGHT_CURLY)) {
						this.throw("}");
					}
					return this.yep(AST.ObjectReference(properties, first, this.yes()));
				}
				else if(this._token === Token.LEFT_SQUARE) {
					return this.reqTypeArray();
				}
				else {
					var type = this.reqTypeEntity();
					var mark = this.mark();
					if(isMultiLines) {
						var types = [type];
						this.NL_0M();
						while(this.test(Token.PIPE)) {
							this.commit();
							if(this.test(Token.PIPE)) {
								this.commit();
							}
							this.NL_0M();
							types.push(this.reqTypeEntity());
							var __ks_176;
							mark = this.mark();
							this.NL_0M();
						}
						this.rollback(mark);
						if(types.length === 1) {
							return types[0];
						}
						else {
							return this.yep(AST.UnionType(types, type, types[types.length - 1]));
						}
					}
					else if(this.match(Token.PIPE_PIPE, Token.PIPE) === Token.PIPE) {
						this.commit();
						if(this.test(Token.NEWLINE)) {
							this.rollback(mark);
							return type;
						}
						var types = [type];
						do {
							this.commit();
							types.push(this.reqTypeEntity());
						}
						while(this.test(Token.PIPE))
						return this.yep(AST.UnionType(types, type, types[types.length - 1]));
					}
					else {
						return type;
					}
				}
			},
			reqTypeVar: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Parser.prototype.__ks_func_reqTypeVar_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqTypeObjectMember_0: function() {
				var identifier = this.reqIdentifier();
				var type;
				if(this.test(Token.COLON)) {
					this.commit();
					var __ks_177;
					type = this.reqTypeVar();
				}
				else {
					var parameters = this.reqFunctionParameterList();
					type = this.reqFunctionReturns();
					var __ks_178;
					type = this.yep(AST.FunctionExpression(parameters, null, type, null, null, parameters, KSType.isValue(type) ? type : parameters));
				}
				return this.yep(AST.ObjectMemberReference(identifier, type));
			},
			reqTypeObjectMember: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqTypeObjectMember_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqTypedIdentifier_0: function() {
				var identifier = this.reqIdentifier();
				if(this.test(Token.COLON)) {
					this.commit();
					var type = this.reqTypeVar();
					return this.yep(AST.VariableDeclarator(identifier, type));
				}
				else {
					return this.yep(AST.VariableDeclarator(identifier));
				}
			},
			reqTypedIdentifier: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqTypedIdentifier_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqTypedVariable_0: function() {
				if(this.match(Token.LEFT_CURLY, Token.LEFT_SQUARE) === Token.LEFT_CURLY) {
					return this.yep(AST.VariableDeclarator(this.reqDestructuringObject(this.yes())));
				}
				else if(this._token === Token.LEFT_SQUARE) {
					return this.yep(AST.VariableDeclarator(this.reqDestructuringArray(this.yes())));
				}
				else {
					return this.reqTypedIdentifier();
				}
			},
			reqTypedVariable: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqTypedVariable_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqUnaryOperand_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var mode = arguments[++__ks_i];
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var __ks__;
				var value = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
				if(value === null) {
					value = this.reqOperand(mode);
				}
				var expression, mark, first;
				while(true) {
					var __ks_179 = this.matchM(M.OPERAND_JUNCTION);
					if(__ks_179 === Token.ASTERISK_ASTERISK_LEFT_ROUND) {
						this.commit();
						var __ks_180, __ks_181, __ks_182, __ks_183;
						value = this.yep(AST.CallExpression(AST.Scope(ScopeKind.Null), value, this.reqExpression0CNList(), false, value, this.yes()));
					}
					else if(__ks_179 === Token.ASTERISK_DOLLAR_LEFT_ROUND) {
						this.commit();
						var __ks_arguments_1 = this.reqExpression0CNList();
						var __ks_184, __ks_185, __ks_186, __ks_187;
						value = this.yep(AST.CallExpression(AST.Scope(ScopeKind.Argument, __ks_arguments_1.value.shift()), value, __ks_arguments_1, false, value, this.yes()));
					}
					else if(__ks_179 === Token.CARET_AT_LEFT_ROUND) {
						this.commit();
						var __ks_188, __ks_189, __ks_190, __ks_191;
						value = this.yep(AST.CurryExpression(AST.Scope(ScopeKind.This), value, this.reqExpression0CNList(), value, this.yes()));
					}
					else if(__ks_179 === Token.CARET_CARET_LEFT_ROUND) {
						this.commit();
						var __ks_192, __ks_193, __ks_194, __ks_195;
						value = this.yep(AST.CurryExpression(AST.Scope(ScopeKind.Null), value, this.reqExpression0CNList(), value, this.yes()));
					}
					else if(__ks_179 === Token.CARET_DOLLAR_LEFT_ROUND) {
						this.commit();
						var __ks_arguments_1 = this.reqExpression0CNList();
						var __ks_196, __ks_197, __ks_198, __ks_199;
						value = this.yep(AST.CurryExpression(AST.Scope(ScopeKind.Argument, __ks_arguments_1.value.shift()), value, __ks_arguments_1, value, this.yes()));
					}
					else if(__ks_179 === Token.COLON) {
						first = this.yes();
						expression = this.reqIdentifier();
						var __ks_200, __ks_201, __ks_202, __ks_203, __ks_204;
						value = this.yep(AST.BinaryExpression(value, this.yep(AST.BinaryOperator(BinaryOperatorKind.TypeCasting, first)), this.yep(AST.TypeReference(expression)), value, expression));
					}
					else if(__ks_179 === Token.COLON_COLON) {
						this.commit();
						expression = this.reqIdentifier();
						var __ks_205;
						value = this.yep(AST.EnumExpression(value, expression));
					}
					else if(__ks_179 === Token.DOT) {
						this.commit();
						var __ks_206, __ks_207;
						value = this.yep(AST.MemberExpression(value, this.reqIdentifier(), false, false));
					}
					else if(__ks_179 === Token.EXCLAMATION_LEFT_ROUND) {
						this.commit();
						var __ks_208, __ks_209, __ks_210;
						value = this.yep(AST.CallMacroExpression(value, this.reqExpression0CNList(), value, this.yes()));
					}
					else if(__ks_179 === Token.LEFT_SQUARE) {
						this.commit();
						expression = this.reqExpression(ExpressionMode.Default);
						if(!this.test(Token.RIGHT_SQUARE)) {
							this.throw("]");
						}
						var __ks_211, __ks_212;
						value = this.yep(AST.MemberExpression(value, expression, true, false, value, this.yes()));
					}
					else if(__ks_179 === Token.LEFT_ROUND) {
						this.commit();
						var __ks_213, __ks_214, __ks_215;
						value = this.yep(AST.CallExpression(value, this.reqExpression0CNList(), value, this.yes()));
					}
					else if(__ks_179 === Token.NEWLINE) {
						mark = this.mark();
						this.commit().NL_0M();
						if(this.test(Token.DOT)) {
							this.commit();
							var __ks_216, __ks_217;
							value = this.yep(AST.MemberExpression(value, this.reqIdentifier(), false, false));
						}
						else {
							this.rollback(mark);
							break;
						}
					}
					else if(__ks_179 === Token.QUESTION_DOT) {
						this.commit();
						expression = this.reqIdentifier();
						var __ks_218;
						value = this.yep(AST.MemberExpression(value, expression, false, true, value, expression));
					}
					else if(__ks_179 === Token.QUESTION_LEFT_ROUND) {
						this.commit();
						var __ks_219, __ks_220, __ks_221, __ks_222;
						value = this.yep(AST.CallExpression(AST.Scope(ScopeKind.This), value, this.reqExpression0CNList(), true, value, this.yes()));
					}
					else if(__ks_179 === Token.QUESTION_LEFT_SQUARE) {
						this.commit();
						expression = this.reqExpression(ExpressionMode.Default);
						if(!this.test(Token.RIGHT_SQUARE)) {
							this.throw("]");
						}
						var __ks_223, __ks_224;
						value = this.yep(AST.MemberExpression(value, expression, true, true, value, this.yes()));
					}
					else if(__ks_179 === Token.TEMPLATE_BEGIN) {
						var __ks_225, __ks_226, __ks_227, __ks_228;
						value = this.yep(AST.TaggedTemplateExpression(value, this.reqTemplateExpression(this.yes()), value, this.yes()));
					}
					else {
						break;
					}
				}
				return value;
			},
			reqUnaryOperand: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_reqUnaryOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqUnlessStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var condition = this.reqExpression(ExpressionMode.Default);
				var whenFalse = this.reqBlock();
				return this.yep(AST.UnlessStatement(condition, whenFalse, first, whenFalse));
			},
			reqUnlessStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_reqUnlessStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqVariableEquals_0: function() {
				if(this.match(Token.EQUALS, Token.COLON_EQUALS) === Token.EQUALS) {
					return this.yes(false);
				}
				else if(this._token === Token.COLON_EQUALS) {
					return this.yes(true);
				}
				else {
					this.throw(["=", ":="]);
				}
			},
			reqVariableEquals: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqVariableEquals_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqVariableIdentifier_0: function() {
				if(this.match(Token.IDENTIFIER, Token.LEFT_CURLY, Token.LEFT_SQUARE) === Token.IDENTIFIER) {
					return this.yep(AST.Identifier(this._scanner.value(), this.yes()));
				}
				else if(this._token === Token.LEFT_CURLY) {
					return this.reqDestructuringObject(this.yes());
				}
				else if(this._token === Token.LEFT_SQUARE) {
					return this.reqDestructuringArray(this.yes());
				}
				else {
					this.throw(["Identifier", "{", "["]);
				}
			},
			reqVariableIdentifier: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_reqVariableIdentifier_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_reqVariableName_0: function(object) {
				if(object === void 0 || object === null) {
					object = NO;
				}
				if(!object.ok) {
					if(this.test(Token.AT)) {
						var __ks_229, __ks_230;
						object = this.reqThisExpression(this.yes());
					}
					else {
						object = this.reqIdentifier();
					}
				}
				var property;
				while(true) {
					if(this.match(Token.DOT, Token.LEFT_SQUARE) === Token.DOT) {
						this.commit();
						property = this.reqIdentifier();
						var __ks_231;
						object = this.yep(AST.MemberExpression(object, property, false, false));
					}
					else if(this._token === Token.LEFT_SQUARE) {
						this.commit();
						property = this.reqExpression(ExpressionMode.Default);
						if(!this.test(Token.RIGHT_SQUARE)) {
							this.throw("]");
						}
						var __ks_232, __ks_233;
						object = this.yep(AST.MemberExpression(object, property, true, false, object, this.yes()));
					}
					else {
						break;
					}
				}
				return object;
			},
			reqVariableName: function() {
				if(arguments.length >= 0 && arguments.length <= 1) {
					return Parser.prototype.__ks_func_reqVariableName_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryAssignementStatement_0: function() {
				var identifier = NO;
				if(this.match(Token.IDENTIFIER, Token.LEFT_CURLY, Token.LEFT_SQUARE, Token.AT) === Token.IDENTIFIER) {
					var __ks_234, __ks_235;
					identifier = this.reqUnaryOperand(ExpressionMode.Default, this.reqIdentifier());
				}
				else if(this._token === Token.LEFT_CURLY) {
					var __ks_236;
					identifier = this.tryDestructuringObject(this.yes());
				}
				else if(this._token === Token.LEFT_SQUARE) {
					var __ks_237;
					identifier = this.tryDestructuringArray(this.yes());
				}
				else if(this._token === Token.AT) {
					var __ks_238, __ks_239;
					identifier = this.reqUnaryOperand(ExpressionMode.Default, this.reqThisExpression(this.yes()));
				}
				if(!identifier.ok) {
					return NO;
				}
				var statement;
				if(this.match(Token.COMMA, Token.COLON_EQUALS, Token.EQUALS) === Token.COMMA) {
					if(!((identifier.value.kind === NodeKind.Identifier) || (identifier.value.kind === NodeKind.ArrayBinding) || (identifier.value.kind === NodeKind.ObjectBinding))) {
						return NO;
					}
					var variables = [identifier];
					do {
						this.commit();
						variables.push(this.reqVariableIdentifier());
					}
					while(this.test(Token.COMMA))
					if(this.match(Token.COLON_EQUALS, Token.EQUALS) === Token.COLON_EQUALS) {
						this.commit().NL_0M();
						if(!this.test(Token.AWAIT)) {
							this.throw("await");
						}
						var operand = this.reqPrefixedOperand(ExpressionMode.Default);
						var __ks_240;
						statement = this.yep(AST.AwaitExpression(variables, true, operand, identifier, operand));
					}
					else if(this._token === Token.EQUALS) {
						this.commit().NL_0M();
						if(!this.test(Token.AWAIT)) {
							this.throw("await");
						}
						var operand = this.reqPrefixedOperand(ExpressionMode.Default);
						var __ks_241;
						statement = this.yep(AST.AwaitExpression(variables, false, operand, identifier, operand));
					}
					else {
						this.throw(["=", ":="]);
					}
				}
				else if(this._token === Token.COLON_EQUALS) {
					var operator = AST.AssignmentOperator(AssignmentOperatorKind.Equality, this.yes());
					operator.autotype = true;
					this.NL_0M();
					var expression = this.reqExpression(ExpressionMode.Default);
					var __ks_242, __ks_243;
					statement = this.yep(AST.BinaryExpression(identifier, this.yep(operator), expression, identifier, expression));
				}
				else if(this._token === Token.EQUALS) {
					var equals = this.yes();
					this.NL_0M();
					var expression = this.reqExpression(ExpressionMode.Default);
					var __ks_244, __ks_245, __ks_246;
					statement = this.yep(AST.BinaryExpression(identifier, this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Equality, equals)), expression, identifier, expression));
				}
				else {
					return NO;
				}
				if(this.match(Token.IF, Token.UNLESS) === Token.IF) {
					var first = this.yes();
					var condition = this.reqExpression(ExpressionMode.Default);
					if(this.test(Token.ELSE)) {
						this.commit();
						var whenFalse = this.reqExpression(ExpressionMode.Default);
						var __ks_247;
						statement.value.right = AST.IfExpression(condition, this.yep(statement.value.right), whenFalse, first, whenFalse);
						this.relocate(statement, statement, whenFalse);
					}
					else {
						var __ks_248;
						statement = this.yep(AST.IfExpression(condition, statement, null, statement, condition));
					}
				}
				else if(this._token === Token.UNLESS) {
					this.commit();
					var condition = this.reqExpression(ExpressionMode.Default);
					var __ks_249;
					statement = this.yep(AST.UnlessExpression(condition, statement, statement, condition));
				}
				return statement;
			},
			tryAssignementStatement: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryAssignementStatement_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryBinaryOperator_0: function() {
				var __ks_250 = this.matchM(M.BINARY_OPERATOR);
				if(__ks_250 === Token.AMPERSAND) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.BitwiseAnd, this.yes()));
				}
				else if(__ks_250 === Token.AMPERSAND_AMPERSAND) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.And, this.yes()));
				}
				else if(__ks_250 === Token.AMPERSAND_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseAnd, this.yes()));
				}
				else if(__ks_250 === Token.ASTERISK) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Multiplication, this.yes()));
				}
				else if(__ks_250 === Token.ASTERISK_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Multiplication, this.yes()));
				}
				else if(__ks_250 === Token.CARET) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.BitwiseXor, this.yes()));
				}
				else if(__ks_250 === Token.CARET_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseXor, this.yes()));
				}
				else if(__ks_250 === Token.EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Equality, this.yes()));
				}
				else if(__ks_250 === Token.EQUALS_EQUALS) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Equality, this.yes()));
				}
				else if(__ks_250 === Token.EXCLAMATION_EQUALS) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Inequality, this.yes()));
				}
				else if(__ks_250 === Token.EXCLAMATION_QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.NonExistential, this.yes()));
				}
				else if(__ks_250 === Token.LEFT_ANGLE) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.LessThan, this.yes()));
				}
				else if(__ks_250 === Token.LEFT_ANGLE_EQUALS) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.LessThanOrEqual, this.yes()));
				}
				else if(__ks_250 === Token.LEFT_ANGLE_LEFT_ANGLE) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.BitwiseLeftShift, this.yes()));
				}
				else if(__ks_250 === Token.LEFT_ANGLE_LEFT_ANGLE_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseLeftShift, this.yes()));
				}
				else if(__ks_250 === Token.MINUS) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Subtraction, this.yes()));
				}
				else if(__ks_250 === Token.MINUS_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Subtraction, this.yes()));
				}
				else if(__ks_250 === Token.PERCENT) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Modulo, this.yes()));
				}
				else if(__ks_250 === Token.PERCENT_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Modulo, this.yes()));
				}
				else if(__ks_250 === Token.PIPE) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.BitwiseOr, this.yes()));
				}
				else if(__ks_250 === Token.PIPE_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseOr, this.yes()));
				}
				else if(__ks_250 === Token.PIPE_PIPE) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Or, this.yes()));
				}
				else if(__ks_250 === Token.PLUS) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Addition, this.yes()));
				}
				else if(__ks_250 === Token.PLUS_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Addition, this.yes()));
				}
				else if(__ks_250 === Token.QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Existential, this.yes()));
				}
				else if(__ks_250 === Token.QUESTION_QUESTION) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.NullCoalescing, this.yes()));
				}
				else if(__ks_250 === Token.QUESTION_QUESTION_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.NullCoalescing, this.yes()));
				}
				else if(__ks_250 === Token.RIGHT_ANGLE) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.GreaterThan, this.yes()));
				}
				else if(__ks_250 === Token.RIGHT_ANGLE_EQUALS) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.GreaterThanOrEqual, this.yes()));
				}
				else if(__ks_250 === Token.RIGHT_ANGLE_RIGHT_ANGLE) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.BitwiseRightShift, this.yes()));
				}
				else if(__ks_250 === Token.RIGHT_ANGLE_RIGHT_ANGLE_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.BitwiseRightShift, this.yes()));
				}
				else if(__ks_250 === Token.SLASH) {
					return this.yep(AST.BinaryOperator(BinaryOperatorKind.Division, this.yes()));
				}
				else if(__ks_250 === Token.SLASH_EQUALS) {
					return this.yep(AST.AssignmentOperator(AssignmentOperatorKind.Division, this.yes()));
				}
				else {
					return NO;
				}
			},
			tryBinaryOperator: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryBinaryOperator_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryClassAbstractMethod_0: function(attributes, modifiers, first) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(attributes === void 0) {
					attributes = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				var name;
				if(this.test(Token.ASYNC)) {
					var __ks_first_1 = this.reqIdentifier();
					var __ks_251;
					name = this.tryIdentifier();
					if(name.ok) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Async, __ks_first_1)));
					}
					else {
						name = __ks_first_1;
					}
				}
				else {
					name = this.tryIdentifier();
					if(!name.ok) {
						return NO;
					}
				}
				return this.reqClassAbstractMethodBody(attributes, modifiers, name, KSType.isValue(first) ? first : name);
			},
			tryClassAbstractMethod: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_tryClassAbstractMethod_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryClassMember_0: function(attributes, modifiers, first) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(attributes === void 0) {
					attributes = null;
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				if(first === void 0) {
					first = null;
				}
				var name;
				if(this.test(Token.ASYNC)) {
					var async = this.reqIdentifier();
					var __ks_252;
					name = this.tryIdentifier();
					if(name.ok) {
						modifiers.push(this.yep(AST.Modifier(ModifierKind.Async, async)));
						return this.reqClassMethod(attributes, modifiers, name, null, KSType.isValue(first) ? first : async);
					}
					else {
						name = async;
					}
				}
				else {
					name = this.tryIdentifier();
					if(!name.ok) {
						return NO;
					}
				}
				return this.reqClassMemberBody(attributes, modifiers, name, KSType.isValue(first) ? first : name);
			},
			tryClassMember: function() {
				if(arguments.length === 3) {
					return Parser.prototype.__ks_func_tryClassMember_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryClassStatement_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var first = arguments[++__ks_i];
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var __ks__;
				var modifiers = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : [];
				var name = this.tryIdentifier();
				if(!name.ok) {
					return NO;
				}
				return this.reqClassStatementBody(name, first, modifiers);
			},
			tryClassStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return Parser.prototype.__ks_func_tryClassStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryDestroyStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var variable = this.tryVariableName();
				if(variable.ok) {
					return this.yep(AST.DestroyStatement(variable, first, variable));
				}
				else {
					return NO;
				}
			},
			tryDestroyStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryDestroyStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryDestructuringArray_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				try {
					return this.reqDestructuringArray(first);
				}
				catch(__ks_5) {
					return NO;
				}
			},
			tryDestructuringArray: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryDestructuringArray_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryDestructuringObject_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				try {
					return this.reqDestructuringObject(first);
				}
				catch(__ks_5) {
					return NO;
				}
			},
			tryDestructuringObject: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryDestructuringObject_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryExpression_0: function() {
				try {
					return this.reqExpression(ExpressionMode.Default);
				}
				catch(__ks_5) {
					return NO;
				}
			},
			tryExpression: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryExpression_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryExternFunctionDeclaration_0: function(first, modifiers) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				if(modifiers === void 0 || modifiers === null) {
					throw new TypeError("'modifiers' is not nullable");
				}
				try {
					return this.reqExternFunctionDeclaration(first, modifiers);
				}
				catch(__ks_5) {
					return NO;
				}
			},
			tryExternFunctionDeclaration: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_tryExternFunctionDeclaration_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryFunctionExpression_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				if((mode & ExpressionMode.NoAnonymousFunction) !== 0) {
					return NO;
				}
				if(this.match(Token.ASYNC, Token.FUNC, Token.LEFT_ROUND, Token.IDENTIFIER) === Token.ASYNC) {
					var first = this.yes();
					var modifiers = [this.yep(AST.Modifier(ModifierKind.Async, first))];
					if(this.test(Token.FUNC)) {
						this.commit();
						var parameters = this.reqFunctionParameterList();
						var type = this.reqFunctionReturns();
						var body = this.reqFunctionBody();
						return this.yep(AST.FunctionExpression(parameters, modifiers, type, null, body, first, body));
					}
					else {
						var parameters = this.tryFunctionParameterList();
						if(!parameters.ok) {
							return NO;
						}
						var type = this.reqFunctionReturns();
						var body = this.reqFunctionBody();
						return this.yep(AST.LambdaExpression(parameters, modifiers, type, body, first, body));
					}
				}
				else if(this._token === Token.FUNC) {
					var first = this.yes();
					var parameters = this.tryFunctionParameterList();
					if(!parameters.ok) {
						return NO;
					}
					var type = this.reqFunctionReturns();
					var body = this.reqFunctionBody();
					return this.yep(AST.FunctionExpression(parameters, null, type, null, body, first, body));
				}
				else if(this._token === Token.LEFT_ROUND) {
					var parameters = this.tryFunctionParameterList();
					var type = this.reqFunctionReturns();
					if(!parameters.ok || !this.test(Token.EQUALS_RIGHT_ANGLE)) {
						return NO;
					}
					this.commit();
					if(this.test(Token.LEFT_CURLY)) {
						var body = this.reqBlock();
						return this.yep(AST.LambdaExpression(parameters, null, type, body, parameters, body));
					}
					else {
						var body = this.reqExpression(mode | ExpressionMode.NoObject);
						return this.yep(AST.LambdaExpression(parameters, null, type, body, parameters, body));
					}
				}
				else if(this._token === Token.IDENTIFIER) {
					var name = this.reqIdentifier();
					if(!this.test(Token.EQUALS_RIGHT_ANGLE)) {
						return NO;
					}
					this.commit();
					var parameters = this.yep([this.yep(AST.Parameter(name))], name, name);
					if(this.test(Token.LEFT_CURLY)) {
						var body = this.reqBlock();
						return this.yep(AST.LambdaExpression(parameters, null, null, body, parameters, body));
					}
					else {
						var body = this.reqExpression(mode | ExpressionMode.NoObject);
						return this.yep(AST.LambdaExpression(parameters, null, null, body, parameters, body));
					}
				}
				else {
					return NO;
				}
			},
			tryFunctionExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryFunctionExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryFunctionParameterList_0: function() {
				if(!this.test(Token.LEFT_ROUND)) {
					return NO;
				}
				var first = this.yes();
				var parameters = [];
				if(!this.test(Token.RIGHT_ROUND)) {
					while(this.tryParameter(parameters, ParameterMode.Function)) {
					}
					if(!this.test(Token.RIGHT_ROUND)) {
						return NO;
					}
				}
				return this.yep(parameters, first, this.yes());
			},
			tryFunctionParameterList: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryFunctionParameterList_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryIdentifier_0: function() {
				if(this._scanner.test(Token.IDENTIFIER)) {
					return this.yep(AST.Identifier(this._scanner.value(), this.yes()));
				}
				else {
					return NO;
				}
			},
			tryIdentifier: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryIdentifier_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryMacroStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var name = this.tryIdentifier();
				if(!name.ok) {
					return NO;
				}
				var parameters = this.reqMacroParameterList();
				var body = this.reqMacroBody();
				return this.yep(AST.MacroDeclaration(name, parameters, body, first, body));
			},
			tryMacroStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryMacroStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryNameIST_0: function() {
				if(this.match(Token.IDENTIFIER, Token.STRING, Token.TEMPLATE_BEGIN) === Token.IDENTIFIER) {
					return this.reqIdentifier();
				}
				else if(this._token === Token.STRING) {
					return this.reqString();
				}
				else if(this._token === Token.TEMPLATE_BEGIN) {
					return this.reqTemplateExpression();
				}
				else {
					return NO;
				}
			},
			tryNameIST: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryNameIST_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryNamespaceStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var name = this.tryIdentifier();
				if(!name.ok) {
					return NO;
				}
				return this.reqNamespaceStatement(first, name);
			},
			tryNamespaceStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryNamespaceStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryNumber_0: function() {
				if(this.matchM(M.NUMBER) === Token.BINARY_NUMBER) {
					return this.yep(AST.NumericExpression(parseInt(this._scanner.value().slice(2).replace(/\_/g, ""), 2), this.yes()));
				}
				else if(this._token === Token.OCTAL_NUMBER) {
					return this.yep(AST.NumericExpression(parseInt(this._scanner.value().slice(2).replace(/\_/g, ""), 8), this.yes()));
				}
				else if(this._token === Token.HEX_NUMBER) {
					return this.yep(AST.NumericExpression(parseInt(this._scanner.value().slice(2).replace(/\_/g, ""), 16), this.yes()));
				}
				else if(this._token === Token.RADIX_NUMBER) {
					var data = /^(\d+)r(.*)$/.exec(this._scanner.value());
					return this.yep(AST.NumericExpression(parseInt(data[2].replace(/\_/g, ""), parseInt(data[1])), this.yes()));
				}
				else if(this._token === Token.DECIMAL_NUMBER) {
					return this.yep(AST.NumericExpression(parseFloat(this._scanner.value().replace(/\_/g, ""), 10), this.yes()));
				}
				else {
					return NO;
				}
			},
			tryNumber: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryNumber_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryOperand_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				if(this.matchM(M.OPERAND) === Token.AT) {
					return this.reqThisExpression(this.yes());
				}
				else if(this._token === Token.AWAIT) {
					return this.reqAwaitExpression(this.yes());
				}
				else if(this._token === Token.IDENTIFIER) {
					return this.yep(AST.Identifier(this._scanner.value(), this.yes()));
				}
				else if(this._token === Token.LEFT_CURLY) {
					return this.reqObject(this.yes());
				}
				else if(this._token === Token.LEFT_ROUND) {
					return this.reqParenthesis(this.yes());
				}
				else if(this._token === Token.LEFT_SQUARE) {
					return this.reqArray(this.yes());
				}
				else if(this._token === Token.NEW) {
					return this.reqCreateExpression(this.yes());
				}
				else if(this._token === Token.REGEXP) {
					return this.yep(AST.RegularExpression(this._scanner.value(), this.yes()));
				}
				else if(this._token === Token.STRING) {
					return this.yep(AST.Literal(this.value(), this.yes()));
				}
				else if(this._token === Token.TEMPLATE_BEGIN) {
					return this.reqTemplateExpression(this.yes());
				}
				else {
					return this.tryNumber();
				}
			},
			tryOperand: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryParameter_0: function(parameters, mode) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				try {
					return this.reqParameter(parameters, mode);
				}
				catch(__ks_5) {
					return false;
				}
			},
			tryParameter: function() {
				if(arguments.length === 2) {
					return Parser.prototype.__ks_func_tryParameter_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryPrefixedOperand_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var value = this.tryOperand(mode);
				if(!value.ok) {
					return NO;
				}
				return this.reqPrefixedOperand(mode, value);
			},
			tryPrefixedOperand: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryPrefixedOperand_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_trySwitchExpression_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				if(!this.test(Token.SWITCH)) {
					return NO;
				}
				var first = this.yes();
				var expression = this.reqOperation(mode);
				var clauses = this.reqSwitchCaseList();
				return this.yep(AST.SwitchExpression(expression, clauses, first, clauses));
			},
			trySwitchExpression: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_trySwitchExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryTypeStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var name = this.tryIdentifier();
				if(!name.ok) {
					return NO;
				}
				return this.reqTypeStatement(first, name);
			},
			tryTypeStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryTypeStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryUntilStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var condition = this.tryExpression();
				if(!condition.ok) {
					return NO;
				}
				var body;
				if(this.match(Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE) === Token.LEFT_CURLY) {
					var __ks_253, __ks_254;
					body = this.reqBlock(this.yes());
				}
				else if(this._token === Token.EQUALS_RIGHT_ANGLE) {
					this.commit();
					body = this.reqExpression(ExpressionMode.Default);
				}
				else {
					this.throw(["{", "=>"]);
				}
				return this.yep(AST.UntilStatement(condition, body, first, body));
			},
			tryUntilStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryUntilStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryVariableEquals_0: function() {
				if(this.match(Token.EQUALS, Token.COLON_EQUALS) === Token.EQUALS) {
					return this.yes(false);
				}
				else if(this._token === Token.COLON_EQUALS) {
					return this.yes(true);
				}
				else {
					return NO;
				}
			},
			tryVariableEquals: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryVariableEquals_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryVariableName_0: function() {
				var object;
				if(this.test(Token.AT)) {
					var __ks_255, __ks_256;
					object = this.reqThisExpression(this.yes());
				}
				else {
					object = this.tryIdentifier();
					if(!object.ok) {
						return NO;
					}
				}
				return this.reqVariableName(object);
			},
			tryVariableName: function() {
				if(arguments.length === 0) {
					return Parser.prototype.__ks_func_tryVariableName_0.apply(this);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_tryWhileStatement_0: function(first) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(first === void 0 || first === null) {
					throw new TypeError("'first' is not nullable");
				}
				var condition = this.tryExpression();
				if(!condition.ok) {
					return NO;
				}
				var body;
				if(this.match(Token.LEFT_CURLY, Token.EQUALS_RIGHT_ANGLE) === Token.LEFT_CURLY) {
					var __ks_257, __ks_258;
					body = this.reqBlock(this.yes());
				}
				else if(this._token === Token.EQUALS_RIGHT_ANGLE) {
					this.commit();
					body = this.reqExpression(ExpressionMode.Default);
				}
				else {
					this.throw(["{", "=>"]);
				}
				return this.yep(AST.WhileStatement(condition, body, first, body));
			},
			tryWhileStatement: function() {
				if(arguments.length === 1) {
					return Parser.prototype.__ks_func_tryWhileStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		});
		function parse(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			else if(!KSType.isString(data)) {
				throw new TypeError("'data' is not of type 'String'");
			}
			var parser = new Parser(data);
			return parser.reqModule();
		}
		return {
			parse: parse
		};
	})();
	function $clone(value) {
		if(value === void 0) {
			value = null;
		}
		if(value === null) {
			return null;
		}
		else if(KSType.isArray(value)) {
			return __ks_Array._im_clone(value);
		}
		else if(KSType.isObject(value)) {
			return __ks_Object._cm_clone(value);
		}
		else {
			return value;
		}
	}
	var $merge = {
		merge: function(source, key, value) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(source === void 0 || source === null) {
				throw new TypeError("'source' is not nullable");
			}
			if(key === void 0 || key === null) {
				throw new TypeError("'key' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(KSType.isArray(value)) {
				var __ks_259;
				source[key] = __ks_Array._im_clone(value);
			}
			else if(KSType.isObject(value)) {
				if(KSType.isObject(source[key])) {
					$merge.object(source[key], value);
				}
				else {
					source[key] = $clone(value);
				}
			}
			else {
				source[key] = value;
			}
			return source;
		},
		object: function(source, current) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(source === void 0 || source === null) {
				throw new TypeError("'source' is not nullable");
			}
			if(current === void 0 || current === null) {
				throw new TypeError("'current' is not nullable");
			}
			for(var key in current) {
				if(source[key]) {
					$merge.merge(source, key, current[key]);
				}
				else {
					source[key] = current[key];
				}
			}
		}
	};
	var __ks_Array = {};
	var __ks_Object = {};
	__ks_Array.__ks_func_append_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		var l, i, j, arg;
		for(var k = 0, __ks_260 = args.length; k < __ks_260; ++k) {
			arg = __ks_Array._cm_from(args[k]);
			if((l = arg.length) > 50000) {
				i = 0;
				j = 50000;
				while(i < l) {
					this.push.apply(this, arg.slice(i, j));
					i = j;
					j += 50000;
				}
			}
			else {
				this.push.apply(this, arg);
			}
		}
		return this;
	};
	__ks_Array.__ks_func_appendUniq_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		if(args.length === 1) {
			__ks_Array._im_pushUniq.apply(null, [this].concat(args[0]));
		}
		else {
			for(var i = 0, __ks_261 = args.length; i < __ks_261; ++i) {
				__ks_Array._im_pushUniq.apply(null, [this].concat(args[i]));
			}
		}
		return this;
	};
	__ks_Array.__ks_func_any_0 = function(fn) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(fn === void 0 || fn === null) {
			throw new TypeError("'fn' is not nullable");
		}
		for(var index = 0, __ks_262 = this.length, item; index < __ks_262; ++index) {
			item = this[index];
			if(fn(item, index, this)) {
				return true;
			}
		}
		return false;
	};
	__ks_Array.__ks_func_clear_0 = function() {
		this.length = 0;
		return this;
	};
	__ks_Array.__ks_func_clone_0 = function() {
		var i = this.length;
		var clone = new Array(i);
		while(i) {
			var __ks_263;
			clone[--i] = $clone(this[i]);
		}
		return clone;
	};
	__ks_Array.__ks_func_contains_0 = function() {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		var __ks_i = -1;
		var item = arguments[++__ks_i];
		if(item === void 0 || item === null) {
			throw new TypeError("'item' is not nullable");
		}
		var __ks__;
		var from = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : 0;
		return this.indexOf(item, from) !== -1;
	};
	__ks_Array.__ks_sttc_from_0 = function(item) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(item === void 0 || item === null) {
			throw new TypeError("'item' is not nullable");
		}
		if(KSType.isEnumerable(item) && !KSType.isString(item)) {
			return KSType.isArray(item) ? item : Array.prototype.slice.call(item);
		}
		else {
			return [item];
		}
	};
	__ks_Array.__ks_func_last_0 = function(index) {
		if(index === void 0 || index === null) {
			index = 1;
		}
		return this.length ? this[this.length - index] : null;
	};
	__ks_Array.__ks_func_remove_0 = function() {
		var items = Array.prototype.slice.call(arguments, 0, arguments.length);
		if(items.length === 1) {
			var item = items[0];
			for(var i = this.length - 1; i >= 0; --i) {
				if(this[i] === item) {
					this.splice(i, 1);
				}
			}
		}
		else {
			for(var __ks_264 = 0, __ks_265 = items.length, item; __ks_264 < __ks_265; ++__ks_264) {
				item = items[__ks_264];
				for(var i = this.length - 1; i >= 0; --i) {
					if(this[i] === item) {
						this.splice(i, 1);
					}
				}
			}
		}
		return this;
	};
	__ks_Array.__ks_sttc_merge_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		var source;
		var i = 0;
		var l = args.length;
		while((i < l) && !((KSType.isValue(args[i]) ? (source = args[i], true) : false) && KSType.isArray(source))) {
			++i;
		}
		++i;
		while(i < l) {
			if(KSType.isArray(args[i])) {
				for(var value in args[i]) {
					source.pushUniq(value);
				}
			}
			++i;
		}
		return source;
	};
	__ks_Array.__ks_func_pushUniq_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		if(args.length === 1) {
			if(!__ks_Array._im_contains(this, args[0])) {
				this.push(args[0]);
			}
		}
		else {
			for(var __ks_266 = 0, __ks_267 = args.length, item; __ks_266 < __ks_267; ++__ks_266) {
				item = args[__ks_266];
				if(!__ks_Array._im_contains(this, item)) {
					this.push(item);
				}
			}
		}
		return this;
	};
	__ks_Array.__ks_sttc_same_0 = function(a, b) {
		if(arguments.length < 2) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(a === void 0 || a === null) {
			throw new TypeError("'a' is not nullable");
		}
		if(b === void 0 || b === null) {
			throw new TypeError("'b' is not nullable");
		}
		if(a.length !== b.length) {
			return false;
		}
		for(var i = 0, __ks_268 = a.length; i < __ks_268; ++i) {
			if(a[i] !== b[i]) {
				return false;
			}
		}
		return true;
	};
	__ks_Array._im_append = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		return __ks_Array.__ks_func_append_0.apply(that, args);
	};
	__ks_Array._im_appendUniq = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		return __ks_Array.__ks_func_appendUniq_0.apply(that, args);
	};
	__ks_Array._im_any = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length === 1) {
			return __ks_Array.__ks_func_any_0.apply(that, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Array._im_clear = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length === 0) {
			return __ks_Array.__ks_func_clear_0.apply(that);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Array._im_clone = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length === 0) {
			return __ks_Array.__ks_func_clone_0.apply(that);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Array._im_contains = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length >= 1 && args.length <= 2) {
			return __ks_Array.__ks_func_contains_0.apply(that, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Array._cm_from = function() {
		var args = Array.prototype.slice.call(arguments);
		if(args.length === 1) {
			return __ks_Array.__ks_sttc_from_0.apply(null, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Array._im_last = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		if(args.length >= 0 && args.length <= 1) {
			return __ks_Array.__ks_func_last_0.apply(that, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Array._im_remove = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		return __ks_Array.__ks_func_remove_0.apply(that, args);
	};
	__ks_Array._cm_merge = function() {
		var args = Array.prototype.slice.call(arguments);
		return __ks_Array.__ks_sttc_merge_0.apply(null, args);
	};
	__ks_Array._im_pushUniq = function(that) {
		var args = Array.prototype.slice.call(arguments, 1, arguments.length);
		return __ks_Array.__ks_func_pushUniq_0.apply(that, args);
	};
	__ks_Array._cm_same = function() {
		var args = Array.prototype.slice.call(arguments);
		if(args.length === 2) {
			return __ks_Array.__ks_sttc_same_0.apply(null, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Object.__ks_sttc_clone_0 = function(object) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(object === void 0 || object === null) {
			throw new TypeError("'object' is not nullable");
		}
		if(KSType.isFunction(object.constructor.clone) && (object.constructor.clone !== this)) {
			return object.constructor.clone(object);
		}
		if(KSType.isFunction(object.constructor.prototype.clone)) {
			return object.clone();
		}
		var clone = {};
		for(var key in object) {
			var value = object[key];
			var __ks_269;
			clone[key] = $clone(value);
		}
		return clone;
	};
	__ks_Object.__ks_sttc_defaults_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		return __ks_Object._cm_merge.apply(null, [].concat([{}], args));
	};
	__ks_Object.__ks_sttc_isEmpty_0 = function(item) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(item === void 0 || item === null) {
			throw new TypeError("'item' is not nullable");
		}
		for(var key in item) {
			if(item.hasOwnProperty(key)) {
				return false;
			}
		}
		return true;
	};
	__ks_Object.__ks_sttc_merge_0 = function() {
		var args = Array.prototype.slice.call(arguments, 0, arguments.length);
		var source;
		var i = 0;
		var l = args.length;
		while((i < l) && !((KSType.isValue(args[i]) ? (source = args[i], true) : false) && KSType.isObject(source))) {
			++i;
		}
		++i;
		while(i < l) {
			if(KSType.isObject(args[i])) {
				for(var key in args[i]) {
					var value = args[i][key];
					$merge.merge(source, key, value);
				}
			}
			++i;
		}
		return source;
	};
	__ks_Object._cm_clone = function() {
		var args = Array.prototype.slice.call(arguments);
		if(args.length === 1) {
			return __ks_Object.__ks_sttc_clone_0.apply(null, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Object._cm_defaults = function() {
		var args = Array.prototype.slice.call(arguments);
		return __ks_Object.__ks_sttc_defaults_0.apply(null, args);
	};
	__ks_Object._cm_isEmpty = function() {
		var args = Array.prototype.slice.call(arguments);
		if(args.length === 1) {
			return __ks_Object.__ks_sttc_isEmpty_0.apply(null, args);
		}
		throw new SyntaxError("wrong number of arguments");
	};
	__ks_Object._cm_merge = function() {
		var args = Array.prototype.slice.call(arguments);
		return __ks_Object.__ks_sttc_merge_0.apply(null, args);
	};
	var __ks_Error = {};
	Error.prepareStackTrace = function(error, stack) {
		if(arguments.length < 2) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(error === void 0 || error === null) {
			throw new TypeError("'error' is not nullable");
		}
		else if(!KSType.is(error, Error)) {
			throw new TypeError("'error' is not of type 'Error'");
		}
		if(stack === void 0 || stack === null) {
			throw new TypeError("'stack' is not nullable");
		}
		else if(!KSType.isArray(stack)) {
			throw new TypeError("'stack' is not of type 'Array'");
		}
		var message = error.toString();
		for(var i = 0, __ks_270 = Math.min(36, stack.length); i < __ks_270; ++i) {
			message += "\n    " + stack[i].toString();
		}
		return message;
	};
	var Exception = Helper.class({
		$name: "Exception",
		$extends: Error,
		$static: {
			__ks_sttc_validateReportedError_0: function(error, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(error === void 0 || error === null) {
					throw new TypeError("'error' is not nullable");
				}
				else if(!KSType.is(error, Type)) {
					throw new TypeError("'error' is not of type 'Type'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				while(!(KSType.is(error, NamedType))) {
					if(error.isExtending()) {
						error = error.extends();
					}
					else {
						error = node.scope().getVariable("Error").type();
					}
				}
				var options = node._options.error;
				if(options.level === "fatal") {
					if(!node.parent().isConsumedError(error)) {
						if(options.ignore.length === 0) {
							SyntaxException.throwUnreportedError(error.name(), node);
						}
						else {
							var hierarchy = error.getHierarchy();
							var nf = true;
							for(var __ks_271 = 0, __ks_272 = hierarchy.length, name; nf && __ks_271 < __ks_272; ++__ks_271) {
								name = hierarchy[__ks_271];
								if(__ks_Array._im_contains(options.ignore, name)) {
									nf = false;
								}
							}
							if(nf) {
								SyntaxException.throwUnreportedError(error.name(), node);
							}
							else if(options.raise.length !== 0) {
								for(var __ks_271 = 0, __ks_272 = hierarchy.length, name; __ks_271 < __ks_272; ++__ks_271) {
									name = hierarchy[__ks_271];
									if(__ks_Array._im_contains(options.raise, name)) {
										SyntaxException.throwUnreportedError(error.name(), node);
									}
								}
							}
						}
					}
				}
			},
			validateReportedError: function() {
				if(arguments.length === 2) {
					return Exception.__ks_sttc_validateReportedError_0.apply(this, arguments);
				}
				else if(Error.validateReportedError) {
					return Error.validateReportedError.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this.fileName = null;
			this.lineNumber = 0;
		},
		__ks_init: function() {
			Exception.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(message) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(message === void 0 || message === null) {
				throw new TypeError("'message' is not nullable");
			}
			else if(!KSType.isString(message)) {
				throw new TypeError("'message' is not of type 'String'");
			}
			(1);
			this.message = message;
			this.name = this.constructor.name;
		},
		__ks_cons_1: function(message, fileName, lineNumber) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(message === void 0 || message === null) {
				throw new TypeError("'message' is not nullable");
			}
			else if(!KSType.isString(message)) {
				throw new TypeError("'message' is not of type 'String'");
			}
			if(fileName === void 0 || fileName === null) {
				throw new TypeError("'fileName' is not nullable");
			}
			else if(!KSType.isString(fileName)) {
				throw new TypeError("'fileName' is not of type 'String'");
			}
			if(lineNumber === void 0 || lineNumber === null) {
				throw new TypeError("'lineNumber' is not nullable");
			}
			else if(!KSType.isNumber(lineNumber)) {
				throw new TypeError("'lineNumber' is not of type 'Number'");
			}
			Exception.prototype.__ks_cons.call(this, [message]);
			this.fileName = fileName;
			this.lineNumber = lineNumber;
		},
		__ks_cons_2: function(message, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(message === void 0 || message === null) {
				throw new TypeError("'message' is not nullable");
			}
			else if(!KSType.isString(message)) {
				throw new TypeError("'message' is not of type 'String'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Exception.prototype.__ks_cons.call(this, [message, node.file(), node._data.start.line]);
		},
		__ks_cons_3: function(message, node, data) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(message === void 0 || message === null) {
				throw new TypeError("'message' is not nullable");
			}
			else if(!KSType.isString(message)) {
				throw new TypeError("'message' is not of type 'String'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			Exception.prototype.__ks_cons.call(this, [message, node.file(), data.start.line]);
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				Exception.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 2) {
				Exception.prototype.__ks_cons_2.apply(this, args);
			}
			else if(args.length === 3) {
				if(KSType.isString(args[1])) {
					Exception.prototype.__ks_cons_1.apply(this, args);
				}
				else {
					Exception.prototype.__ks_cons_3.apply(this, args);
				}
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_toString_0: function() {
			if(this.lineNumber === 0) {
				if(this.message.length === 0) {
					return this.name + ": Unexpected error";
				}
				else {
					return this.name + ": " + this.message;
				}
			}
			else {
				if(this.message.length === 0) {
					return this.name + ": line " + this.lineNumber + ", file \"" + this.fileName + "\"";
				}
				else {
					return this.name + ": " + this.message + " (line " + this.lineNumber + ", file \"" + this.fileName + "\")";
				}
			}
		},
		toString: function() {
			if(arguments.length === 0) {
				return Exception.prototype.__ks_func_toString_0.apply(this);
			}
			else if(Error.prototype.toString) {
				return Error.prototype.toString.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var IOException = Helper.class({
		$name: "IOException",
		$extends: Exception,
		$static: {
			__ks_sttc_throwNotFoundFile_0: function(path, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(path === void 0 || path === null) {
					throw new TypeError("'path' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new IOException("The file \"" + path + "\" can't be found", node);
			},
			__ks_sttc_throwNotFoundFile_1: function(path, directory, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(path === void 0 || path === null) {
					throw new TypeError("'path' is not nullable");
				}
				if(directory === void 0 || directory === null) {
					throw new TypeError("'directory' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new IOException("The file \"" + path + "\" can't be found in the directory \"" + directory + "\"", node);
			},
			throwNotFoundFile: function() {
				if(arguments.length === 2) {
					return IOException.__ks_sttc_throwNotFoundFile_0.apply(this, arguments);
				}
				else if(arguments.length === 3) {
					return IOException.__ks_sttc_throwNotFoundFile_1.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotFoundModule_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new IOException("The module \"" + name + "\" can't be found", node);
			},
			__ks_sttc_throwNotFoundModule_1: function(name, directory, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(directory === void 0 || directory === null) {
					throw new TypeError("'directory' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new IOException("The module \"" + name + "\" can't be found in the directory \"" + directory + "\"", node);
			},
			throwNotFoundModule: function() {
				if(arguments.length === 2) {
					return IOException.__ks_sttc_throwNotFoundModule_0.apply(this, arguments);
				}
				else if(arguments.length === 3) {
					return IOException.__ks_sttc_throwNotFoundModule_1.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Exception.prototype.__ks_cons.call(this, args);
		}
	});
	var NotImplementedException = Helper.class({
		$name: "NotImplementedException",
		$extends: Exception,
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(message) {
			if(message === void 0 || message === null) {
				message = "Not Implemented";
			}
			Exception.prototype.__ks_cons.call(this, [message]);
		},
		__ks_cons_1: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var __ks__;
			var message = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : "Not Implemented";
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Exception.prototype.__ks_cons.call(this, [message, node]);
		},
		__ks_cons_2: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var __ks__;
			var message = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : "Not Implemented";
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			Exception.prototype.__ks_cons.call(this, [message, node, data]);
		},
		__ks_cons_3: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var __ks__;
			var message = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : "Not Implemented";
			var fileName = arguments[++__ks_i];
			if(fileName === void 0 || fileName === null) {
				throw new TypeError("'fileName' is not nullable");
			}
			var lineNumber = arguments[++__ks_i];
			if(lineNumber === void 0 || lineNumber === null) {
				throw new TypeError("'lineNumber' is not nullable");
			}
			Exception.prototype.__ks_cons.call(this, [message, fileName, lineNumber]);
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				NotImplementedException.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 1) {
				if(KSType.is(args[0], AbstractNode)) {
					NotImplementedException.prototype.__ks_cons_1.apply(this, args);
				}
				else {
					NotImplementedException.prototype.__ks_cons_0.apply(this, args);
				}
			}
			else if(args.length === 2) {
				if(KSType.is(args[0], AbstractNode)) {
					NotImplementedException.prototype.__ks_cons_2.apply(this, args);
				}
				else {
					if(KSType.is(args[1], AbstractNode)) {
						NotImplementedException.prototype.__ks_cons_1.apply(this, args);
					}
					else {
						NotImplementedException.prototype.__ks_cons_3.apply(this, args);
					}
				}
			}
			else if(args.length === 3) {
				if(KSType.is(args[1], AbstractNode)) {
					NotImplementedException.prototype.__ks_cons_2.apply(this, args);
				}
				else {
					NotImplementedException.prototype.__ks_cons_3.apply(this, args);
				}
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		}
	});
	var NotSupportedException = Helper.class({
		$name: "NotSupportedException",
		$extends: Exception,
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(message) {
			if(message === void 0 || message === null) {
				message = "Not Supported";
			}
			Exception.prototype.__ks_cons.call(this, [message]);
		},
		__ks_cons_1: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var __ks__;
			var message = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : "Not Supported";
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			Exception.prototype.__ks_cons.call(this, [message, node]);
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				NotSupportedException.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 1) {
				if(KSType.is(args[0], AbstractNode)) {
					NotSupportedException.prototype.__ks_cons_1.apply(this, args);
				}
				else {
					NotSupportedException.prototype.__ks_cons_0.apply(this, args);
				}
			}
			else if(args.length === 2) {
				NotSupportedException.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		}
	});
	var ReferenceException = Helper.class({
		$name: "ReferenceException",
		$extends: Exception,
		$static: {
			__ks_sttc_throwAlreadyDefinedField_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Field \"" + name + "\" is already defined by its parent class", node);
			},
			throwAlreadyDefinedField: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwAlreadyDefinedField_0.apply(this, arguments);
				}
				else if(Exception.throwAlreadyDefinedField) {
					return Exception.throwAlreadyDefinedField.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwDefined_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("\"" + name + "\" should not be defined", node);
			},
			throwDefined: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwDefined_0.apply(this, arguments);
				}
				else if(Exception.throwDefined) {
					return Exception.throwDefined.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwImmutable_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Identifier \"" + name + "\" is immutable", node);
			},
			throwImmutable: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwImmutable_0.apply(this, arguments);
				}
				else if(Exception.throwImmutable) {
					return Exception.throwImmutable.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDefined_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("\"" + name + "\" is not defined", node);
			},
			throwNotDefined: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefined_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefined) {
					return Exception.throwNotDefined.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedField_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Field \"" + name + "\" is not defined", node);
			},
			throwNotDefinedField: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefinedField_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedField) {
					return Exception.throwNotDefinedField.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedEnumElement_0: function(element, __ks_enum_1, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(element === void 0 || element === null) {
					throw new TypeError("'element' is not nullable");
				}
				if(__ks_enum_1 === void 0 || __ks_enum_1 === null) {
					throw new TypeError("'enum' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Element \"" + element + "\" is not defined in enum \"" + __ks_enum_1 + "\"", node);
			},
			throwNotDefinedEnumElement: function() {
				if(arguments.length === 3) {
					return ReferenceException.__ks_sttc_throwNotDefinedEnumElement_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedEnumElement) {
					return Exception.throwNotDefinedEnumElement.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedInModule_0: function(name, module, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(module === void 0 || module === null) {
					throw new TypeError("'module' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("\"" + name + "\" is not defined in the module \"" + module + "\"", node);
			},
			throwNotDefinedInModule: function() {
				if(arguments.length === 3) {
					return ReferenceException.__ks_sttc_throwNotDefinedInModule_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedInModule) {
					return Exception.throwNotDefinedInModule.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedMember_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Member \"" + name + "\" is not defined", node);
			},
			throwNotDefinedMember: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefinedMember_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedMember) {
					return Exception.throwNotDefinedMember.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedMethod_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Method \"" + name + "\" is not defined", node);
			},
			throwNotDefinedMethod: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefinedMethod_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedMethod) {
					return Exception.throwNotDefinedMethod.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDefinedProperty_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Property \"" + name + "\" is not defined", node);
			},
			throwNotDefinedProperty: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwNotDefinedProperty_0.apply(this, arguments);
				}
				else if(Exception.throwNotDefinedProperty) {
					return Exception.throwNotDefinedProperty.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotPassed_0: function(name, module, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(module === void 0 || module === null) {
					throw new TypeError("'module' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("To overwrite \"" + name + "\", it needs to be passed to the module \"" + module + "\"", node);
			},
			throwNotPassed: function() {
				if(arguments.length === 3) {
					return ReferenceException.__ks_sttc_throwNotPassed_0.apply(this, arguments);
				}
				else if(Exception.throwNotPassed) {
					return Exception.throwNotPassed.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwSelfDefinedVariable_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new ReferenceException("Variable \"" + name + "\" is being self-defined", node);
			},
			throwSelfDefinedVariable: function() {
				if(arguments.length === 2) {
					return ReferenceException.__ks_sttc_throwSelfDefinedVariable_0.apply(this, arguments);
				}
				else if(Exception.throwSelfDefinedVariable) {
					return Exception.throwSelfDefinedVariable.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Exception.prototype.__ks_cons.call(this, args);
		}
	});
	var SyntaxException = Helper.class({
		$name: "SyntaxException",
		$extends: Exception,
		$static: {
			__ks_sttc_throwAfterDefaultClause_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Clause is must be before the default clause", node);
			},
			throwAfterDefaultClause: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwAfterDefaultClause_0.apply(this, arguments);
				}
				else if(Exception.throwAfterDefaultClause) {
					return Exception.throwAfterDefaultClause.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwAfterRestParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter must be before the rest parameter", node);
			},
			throwAfterRestParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwAfterRestParameter_0.apply(this, arguments);
				}
				else if(Exception.throwAfterRestParameter) {
					return Exception.throwAfterRestParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwAlreadyDeclared_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Identifier \"" + name + "\" has already been declared", node);
			},
			throwAlreadyDeclared: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwAlreadyDeclared_0.apply(this, arguments);
				}
				else if(Exception.throwAlreadyDeclared) {
					return Exception.throwAlreadyDeclared.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwDeadCode_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Dead code", node);
			},
			throwDeadCode: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwDeadCode_0.apply(this, arguments);
				}
				else if(Exception.throwDeadCode) {
					return Exception.throwDeadCode.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwDuplicateKey_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Duplicate key has been found in object", node);
			},
			throwDuplicateKey: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwDuplicateKey_0.apply(this, arguments);
				}
				else if(Exception.throwDuplicateKey) {
					return Exception.throwDuplicateKey.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwDuplicateMethod_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("The method \"" + name + "\" is matching an existing method", node);
			},
			throwDuplicateMethod: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwDuplicateMethod_0.apply(this, arguments);
				}
				else if(Exception.throwDuplicateMethod) {
					return Exception.throwDuplicateMethod.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalidAwait_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("\"await\" can only be used in functions or binary module", node);
			},
			throwInvalidAwait: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwInvalidAwait_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidAwait) {
					return Exception.throwInvalidAwait.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalidEnumAccess_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Accessing an enum can only be done with \"::\"", node);
			},
			throwInvalidEnumAccess: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwInvalidEnumAccess_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidEnumAccess) {
					return Exception.throwInvalidEnumAccess.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalidMethodReturn_0: function(className, methodName, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(className === void 0 || className === null) {
					throw new TypeError("'className' is not nullable");
				}
				if(methodName === void 0 || methodName === null) {
					throw new TypeError("'methodName' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Method \"" + methodName + "\" of the class \"" + className + "\" has an invalid return type", node);
			},
			throwInvalidMethodReturn: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwInvalidMethodReturn_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidMethodReturn) {
					return Exception.throwInvalidMethodReturn.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalidImportAliasArgument_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Aliases arguments can't be used with classic JavaScript module", node);
			},
			throwInvalidImportAliasArgument: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwInvalidImportAliasArgument_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidImportAliasArgument) {
					return Exception.throwInvalidImportAliasArgument.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalidSyncMethods_0: function(className, methodName, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(className === void 0 || className === null) {
					throw new TypeError("'className' is not nullable");
				}
				if(methodName === void 0 || methodName === null) {
					throw new TypeError("'methodName' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Method \"" + methodName + "\" of the class \"" + className + "\" can be neither sync nor async", node);
			},
			throwInvalidSyncMethods: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwInvalidSyncMethods_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidSyncMethods) {
					return Exception.throwInvalidSyncMethods.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwMismatchedInclude_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Inclusions of \"" + name + "\" should have the same version", node);
			},
			throwMismatchedInclude: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwMismatchedInclude_0.apply(this, arguments);
				}
				else if(Exception.throwMismatchedInclude) {
					return Exception.throwMismatchedInclude.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwMissingAbstractMethods_0: function(name, methods, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Class \"" + name + "\" doesn't implement the following abstract methods: \"" + methods.join("\", \"") + "\"", node);
			},
			throwMissingAbstractMethods: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwMissingAbstractMethods_0.apply(this, arguments);
				}
				else if(Exception.throwMissingAbstractMethods) {
					return Exception.throwMissingAbstractMethods.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwMissingRequirement_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("import is missing the argument \"" + name + "\"", node);
			},
			throwMissingRequirement: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwMissingRequirement_0.apply(this, arguments);
				}
				else if(Exception.throwMissingRequirement) {
					return Exception.throwMissingRequirement.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwMixedOverloadedFunction_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Overloaded functions can't mix sync/async", node);
			},
			throwMixedOverloadedFunction: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwMixedOverloadedFunction_0.apply(this, arguments);
				}
				else if(Exception.throwMixedOverloadedFunction) {
					return Exception.throwMixedOverloadedFunction.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNoDefaultParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter can't have a default value", node);
			},
			throwNoDefaultParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNoDefaultParameter_0.apply(this, arguments);
				}
				else if(Exception.throwNoDefaultParameter) {
					return Exception.throwNoDefaultParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNoExport_0: function(module, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(module === void 0 || module === null) {
					throw new TypeError("'module' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("No export can be found in module \"" + module + "\"", node);
			},
			throwNoExport: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwNoExport_0.apply(this, arguments);
				}
				else if(Exception.throwNoExport) {
					return Exception.throwNoExport.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNoNullParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter can't be nullable", node);
			},
			throwNoNullParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNoNullParameter_0.apply(this, arguments);
				}
				else if(Exception.throwNoNullParameter) {
					return Exception.throwNoNullParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNoRestParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter can't be a rest parameter", node);
			},
			throwNoRestParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNoRestParameter_0.apply(this, arguments);
				}
				else if(Exception.throwNoRestParameter) {
					return Exception.throwNoRestParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNoSuperCall_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Call \"super()\" is missing", node);
			},
			throwNoSuperCall: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNoSuperCall_0.apply(this, arguments);
				}
				else if(Exception.throwNoSuperCall) {
					return Exception.throwNoSuperCall.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotAbstractClass_0: function(className, methodName, node) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(className === void 0 || className === null) {
					throw new TypeError("'className' is not nullable");
				}
				if(methodName === void 0 || methodName === null) {
					throw new TypeError("'methodName' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Method \"" + methodName + "\" is abstract but the class \"" + className + "\" is not", node);
			},
			throwNotAbstractClass: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwNotAbstractClass_0.apply(this, arguments);
				}
				else if(Exception.throwNotAbstractClass) {
					return Exception.throwNotAbstractClass.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotBinary_0: function(tag, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(tag === void 0 || tag === null) {
					throw new TypeError("'tag' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Binary file can't use \"" + tag + "\" statement", node);
			},
			throwNotBinary: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwNotBinary_0.apply(this, arguments);
				}
				else if(Exception.throwNotBinary) {
					return Exception.throwNotBinary.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotCompatibleConstructor_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parent's constructor of class \"" + name + "\" can't be called", node);
			},
			throwNotCompatibleConstructor: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwNotCompatibleConstructor_0.apply(this, arguments);
				}
				else if(Exception.throwNotCompatibleConstructor) {
					return Exception.throwNotCompatibleConstructor.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDifferentiableFunction_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Overloaded functions can't be differentiated", node);
			},
			throwNotDifferentiableFunction: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNotDifferentiableFunction_0.apply(this, arguments);
				}
				else if(Exception.throwNotDifferentiableFunction) {
					return Exception.throwNotDifferentiableFunction.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotDifferentiableMethods_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Methods can't be differentiated", node);
			},
			throwNotDifferentiableMethods: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNotDifferentiableMethods_0.apply(this, arguments);
				}
				else if(Exception.throwNotDifferentiableMethods) {
					return Exception.throwNotDifferentiableMethods.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotNamedParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Parameter must be named", node);
			},
			throwNotNamedParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwNotNamedParameter_0.apply(this, arguments);
				}
				else if(Exception.throwNotNamedParameter) {
					return Exception.throwNotNamedParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotOverloadableFunction_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Variable \"" + name + "\" is not an overloadable function", node);
			},
			throwNotOverloadableFunction: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwNotOverloadableFunction_0.apply(this, arguments);
				}
				else if(Exception.throwNotOverloadableFunction) {
					return Exception.throwNotOverloadableFunction.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwReservedClassMethod_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Class method \"" + name + "\" is reserved", node);
			},
			throwReservedClassMethod: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwReservedClassMethod_0.apply(this, arguments);
				}
				else if(Exception.throwReservedClassMethod) {
					return Exception.throwReservedClassMethod.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwReservedClassVariable_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Class variable \"" + name + "\" is reserved", node);
			},
			throwReservedClassVariable: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwReservedClassVariable_0.apply(this, arguments);
				}
				else if(Exception.throwReservedClassVariable) {
					return Exception.throwReservedClassVariable.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwTooMuchAttributesForIfAttribute_0: function() {
				throw new SyntaxException("Expected 1 argument for 'if' attribute");
			},
			throwTooMuchAttributesForIfAttribute: function() {
				if(arguments.length === 0) {
					return SyntaxException.__ks_sttc_throwTooMuchAttributesForIfAttribute_0.apply(this);
				}
				else if(Exception.throwTooMuchAttributesForIfAttribute) {
					return Exception.throwTooMuchAttributesForIfAttribute.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwTooMuchRestParameter_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Rest parameter has already been declared", node);
			},
			throwTooMuchRestParameter: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwTooMuchRestParameter_0.apply(this, arguments);
				}
				else if(Exception.throwTooMuchRestParameter) {
					return Exception.throwTooMuchRestParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwUnexpectedAlias_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Alias \"@" + name + "\" is expected in an instance method/variable", node);
			},
			throwUnexpectedAlias: function() {
				if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwUnexpectedAlias_0.apply(this, arguments);
				}
				else if(Exception.throwUnexpectedAlias) {
					return Exception.throwUnexpectedAlias.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwUnmatchedMacro_0: function(name, node, data) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				throw new SyntaxException("Macro \"" + name + "\" can't be matched", node, data);
			},
			throwUnmatchedMacro: function() {
				if(arguments.length === 3) {
					return SyntaxException.__ks_sttc_throwUnmatchedMacro_0.apply(this, arguments);
				}
				else if(Exception.throwUnmatchedMacro) {
					return Exception.throwUnmatchedMacro.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwUnnamedWildcardImport_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("Wilcard import can't be named", node);
			},
			throwUnnamedWildcardImport: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwUnnamedWildcardImport_0.apply(this, arguments);
				}
				else if(Exception.throwUnnamedWildcardImport) {
					return Exception.throwUnnamedWildcardImport.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwUnreportedError_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("An error is unreported, it must be caught or declared to be thrown", node);
			},
			__ks_sttc_throwUnreportedError_1: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new SyntaxException("An error \"" + name + "\" is unreported, it must be caught or declared to be thrown", node);
			},
			throwUnreportedError: function() {
				if(arguments.length === 1) {
					return SyntaxException.__ks_sttc_throwUnreportedError_0.apply(this, arguments);
				}
				else if(arguments.length === 2) {
					return SyntaxException.__ks_sttc_throwUnreportedError_1.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Exception.prototype.__ks_cons.call(this, args);
		}
	});
	var TypeException = Helper.class({
		$name: "TypeException",
		$extends: Exception,
		$static: {
			__ks_sttc_throwCannotBeInstantiated_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Class \"" + name + "\" is abstract so it can't be instantiated", node);
			},
			throwCannotBeInstantiated: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwCannotBeInstantiated_0.apply(this, arguments);
				}
				else if(Exception.throwCannotBeInstantiated) {
					return Exception.throwCannotBeInstantiated.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwConstructorWithoutNew_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Class constructor \"" + name + "\" cannot be invoked without 'new'", node);
			},
			throwConstructorWithoutNew: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwConstructorWithoutNew_0.apply(this, arguments);
				}
				else if(Exception.throwConstructorWithoutNew) {
					return Exception.throwConstructorWithoutNew.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwImplFieldToSealedType_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("impl can add field to only non-sealed type", node);
			},
			throwImplFieldToSealedType: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwImplFieldToSealedType_0.apply(this, arguments);
				}
				else if(Exception.throwImplFieldToSealedType) {
					return Exception.throwImplFieldToSealedType.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwImplInvalidType_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("impl has an invalid type", node);
			},
			throwImplInvalidType: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwImplInvalidType_0.apply(this, arguments);
				}
				else if(Exception.throwImplInvalidType) {
					return Exception.throwImplInvalidType.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalid_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Invalid type \"" + name + "\"", node);
			},
			throwInvalid: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwInvalid_0.apply(this, arguments);
				}
				else if(Exception.throwInvalid) {
					return Exception.throwInvalid.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalidBinding_0: function(expected, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(expected === void 0 || expected === null) {
					throw new TypeError("'expected' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The binding is expected to be of type \"" + expected + "\"", node);
			},
			throwInvalidBinding: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwInvalidBinding_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidBinding) {
					return Exception.throwInvalidBinding.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalidCasting_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Only variables can be casted", node);
			},
			throwInvalidCasting: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwInvalidCasting_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidCasting) {
					return Exception.throwInvalidCasting.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalidForInExpression_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("\"for..in\" must be used with an array", node);
			},
			throwInvalidForInExpression: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwInvalidForInExpression_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidForInExpression) {
					return Exception.throwInvalidForInExpression.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalidForOfExpression_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("\"for..of\" must be used with an object", node);
			},
			throwInvalidForOfExpression: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwInvalidForOfExpression_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidForOfExpression) {
					return Exception.throwInvalidForOfExpression.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalidSpread_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Spread operator require an array", node);
			},
			throwInvalidSpread: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwInvalidSpread_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidSpread) {
					return Exception.throwInvalidSpread.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwInvalidTypeChecking_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Type checking has incompatible type", node);
			},
			throwInvalidTypeChecking: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwInvalidTypeChecking_0.apply(this, arguments);
				}
				else if(Exception.throwInvalidTypeChecking) {
					return Exception.throwInvalidTypeChecking.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNoMatchingConstructor_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Constructor of class \"" + name + "\" can't be matched to given arguments", node);
			},
			throwNoMatchingConstructor: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNoMatchingConstructor_0.apply(this, arguments);
				}
				else if(Exception.throwNoMatchingConstructor) {
					return Exception.throwNoMatchingConstructor.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNoMatchingFunction_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Function can't be matched to given arguments", node);
			},
			throwNoMatchingFunction: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwNoMatchingFunction_0.apply(this, arguments);
				}
				else if(Exception.throwNoMatchingFunction) {
					return Exception.throwNoMatchingFunction.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotAsyncFunction_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The function \"" + name + "\" is not asynchronous", node);
			},
			throwNotAsyncFunction: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotAsyncFunction_0.apply(this, arguments);
				}
				else if(Exception.throwNotAsyncFunction) {
					return Exception.throwNotAsyncFunction.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotClass_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Identifier \"" + name + "\" is not a class", node);
			},
			throwNotClass: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotClass_0.apply(this, arguments);
				}
				else if(Exception.throwNotClass) {
					return Exception.throwNotClass.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotCompatibleArgument_0: function(varname, argname, modname, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(varname === void 0 || varname === null) {
					throw new TypeError("'varname' is not nullable");
				}
				if(argname === void 0 || argname === null) {
					throw new TypeError("'argname' is not nullable");
				}
				if(modname === void 0 || modname === null) {
					throw new TypeError("'modname' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The variable \"" + varname + "\" and the argument \"" + argname + "\" of the module \"" + modname + "\" aren't compatible", node);
			},
			throwNotCompatibleArgument: function() {
				if(arguments.length === 4) {
					return TypeException.__ks_sttc_throwNotCompatibleArgument_0.apply(this, arguments);
				}
				else if(Exception.throwNotCompatibleArgument) {
					return Exception.throwNotCompatibleArgument.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotCompatibleDefinition_0: function(varname, argname, modname, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(varname === void 0 || varname === null) {
					throw new TypeError("'varname' is not nullable");
				}
				if(argname === void 0 || argname === null) {
					throw new TypeError("'argname' is not nullable");
				}
				if(modname === void 0 || modname === null) {
					throw new TypeError("'modname' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The definition for \"" + varname + "\" and the variable \"" + argname + "\" of the module \"" + modname + "\" aren't compatible", node);
			},
			throwNotCompatibleDefinition: function() {
				if(arguments.length === 4) {
					return TypeException.__ks_sttc_throwNotCompatibleDefinition_0.apply(this, arguments);
				}
				else if(Exception.throwNotCompatibleDefinition) {
					return Exception.throwNotCompatibleDefinition.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotNamespace_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Identifier \"" + name + "\" is not a namespace", node);
			},
			throwNotNamespace: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotNamespace_0.apply(this, arguments);
				}
				else if(Exception.throwNotNamespace) {
					return Exception.throwNotNamespace.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwNotSyncFunction_0: function(name, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("The function \"" + name + "\" is not synchronous", node);
			},
			throwNotSyncFunction: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwNotSyncFunction_0.apply(this, arguments);
				}
				else if(Exception.throwNotSyncFunction) {
					return Exception.throwNotSyncFunction.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwRequireClass_0: function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("An instance is required", node);
			},
			throwRequireClass: function() {
				if(arguments.length === 1) {
					return TypeException.__ks_sttc_throwRequireClass_0.apply(this, arguments);
				}
				else if(Exception.throwRequireClass) {
					return Exception.throwRequireClass.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_throwUnexpectedReturnedType_0: function(type, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				throw new TypeException("Expected returned type " + type.toQuote(), node);
			},
			throwUnexpectedReturnedType: function() {
				if(arguments.length === 2) {
					return TypeException.__ks_sttc_throwUnexpectedReturnedType_0.apply(this, arguments);
				}
				else if(Exception.throwUnexpectedReturnedType) {
					return Exception.throwUnexpectedReturnedType.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Exception.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Exception.prototype.__ks_cons.call(this, args);
		}
	});
	var $extensions = {
		binary: ".ksb",
		hash: ".ksh",
		metadata: ".ksm",
		source: ".ks"
	};
	var $targetRegex = /^(\w+)-v(\d+)(?:\.\d+)?(?:\.\d+)?$/;
	var $typeofs = {
		Any: true,
		Array: true,
		Boolean: true,
		Class: true,
		Function: true,
		NaN: true,
		Number: true,
		Object: true,
		RegExp: true,
		String: true
	};
	var $ast = {
		block: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(data.kind === NodeKind.Block) {
				return data;
			}
			return {
				kind: NodeKind.Block,
				statements: [data]
			};
		},
		body: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0) {
				data = null;
			}
			if(!KSType.isValue(data)) {
				return [];
			}
			else if(data.kind === NodeKind.Block) {
				return data.statements;
			}
			else {
				return [{
					kind: NodeKind.ReturnStatement,
					value: data,
					start: data.start,
					end: data.end
				}];
			}
		},
		identifier: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isString(name)) {
				return {
					kind: NodeKind.Identifier,
					name: name
				};
			}
			else {
				return name;
			}
		}
	};
	var $runtime = {
		helper: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			KSType.isFunction(node.module) ? node.module().flag("Helper") : undefined;
			return node._options.runtime.helper.alias;
		},
		isDefined: function(name, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(node._options.runtime.helper.alias === name) {
				KSType.isFunction(node.module) ? node.module().flag("Helper") : undefined;
				return true;
			}
			else if(node._options.runtime.type.alias === name) {
				KSType.isFunction(node.module) ? node.module().flag("Type") : undefined;
				return true;
			}
			else {
				return false;
			}
		},
		scope: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return (node._options.format.variables === "es5") ? "var " : "let ";
		},
		type: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			KSType.isFunction(node.module) ? node.module().flag("Type") : undefined;
			return node._options.runtime.type.alias;
		},
		typeof: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var type = arguments[++__ks_i];
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			var __ks__;
			var node = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			if(KSType.isValue(node)) {
				if($typeofs[type]) {
					return $runtime.type(node) + ".is" + type;
				}
				else {
					return null;
				}
			}
			else {
				return $typeofs[type];
			}
		}
	};
	var AbstractNode = Helper.class({
		$name: "AbstractNode",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._parent = null;
			this._scope = null;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
		},
		__ks_cons_1: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			var scope;
			if(arguments.length > 2 && (scope = arguments[++__ks_i]) !== void 0 && scope !== null) {
				if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
			}
			else {
				scope = parent.scope();
			}
			this._data = data;
			this._parent = parent;
			this._scope = scope;
			this._options = parent._options;
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				AbstractNode.prototype.__ks_cons_0.apply(this);
			}
			else if(args.length === 2 || args.length === 3) {
				AbstractNode.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_bindingScope_0: function() {
			return KSType.isValue(this._parent) ? this._parent.bindingScope() : undefined;
		},
		bindingScope: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_bindingScope_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_data_0: function() {
			return this._data;
		},
		data: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_data_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._parent.directory();
		},
		directory: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_directory_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_file_0: function() {
			return this._parent.file();
		},
		file: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_file_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_greatParent_0: function() {
			return KSType.isValue(this._parent) ? this._parent._parent : undefined;
		},
		greatParent: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_greatParent_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_greatScope_0: function() {
			return KSType.isValue(this._parent) ? this._parent._scope : undefined;
		},
		greatScope: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_greatScope_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._parent.isConsumedError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return AbstractNode.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_module_0: function() {
			return this._parent.module();
		},
		module: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_module_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newScope_0: function(scope) {
			if(scope === void 0 || scope === null) {
				scope = this._scope;
			}
			if(this._options.format.variables === "es6") {
				return new Scope(scope);
			}
			else {
				return new XScope(scope);
			}
		},
		newScope: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return AbstractNode.prototype.__ks_func_newScope_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parent_0: function() {
			return this._parent;
		},
		parent: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_parent_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reference_0: function() {
			if(KSType.isValue(this._parent) && KSType.isValue(this._parent.reference())) {
				return this._parent.reference() + this._reference;
			}
			else {
				return this._reference;
			}
		},
		__ks_func_reference_1: function(reference) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(reference === void 0 || reference === null) {
				throw new TypeError("'reference' is not nullable");
			}
			this._reference = reference;
		},
		reference: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_reference_0.apply(this);
			}
			else if(arguments.length === 1) {
				return AbstractNode.prototype.__ks_func_reference_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_scope_0: function() {
			return this._scope;
		},
		scope: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_scope_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_statement_0: function() {
			return KSType.isValue(this._parent) ? this._parent.statement() : undefined;
		},
		statement: function() {
			if(arguments.length === 0) {
				return AbstractNode.prototype.__ks_func_statement_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AttributeTarget = {
		Class: 0,
		Conditional: 1,
		Constructor: 2,
		Field: 4,
		Global: 8,
		Method: 16,
		Property: 32,
		Statement: 64
	};
	var $attributes = {};
	var $semverRegex = /(\w+)(?:\-v(0|[1-9]\d*))?$/;
	var Attribute = Helper.class({
		$name: "Attribute",
		$static: {
			__ks_sttc_conditional_0: function(data, target) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(target === void 0 || target === null) {
					throw new TypeError("'target' is not nullable");
				}
				if(KSType.isValue(data.attributes) ? data.attributes.length > 0 : false) {
					var attribute;
					for(var __ks_273 = 0, __ks_274 = data.attributes.length, attr; __ks_273 < __ks_274; ++__ks_273) {
						attr = data.attributes[__ks_273];
						var __ks_275;
						if((attr.declaration.kind === NodeKind.AttributeExpression) && (KSType.isValue(__ks_275 = Attribute.get(attr.declaration, AttributeTarget.Conditional)) ? (attribute = __ks_275, true) : false)) {
							return attribute.evaluate(target);
						}
					}
				}
				return true;
			},
			conditional: function() {
				if(arguments.length === 2) {
					return Attribute.__ks_sttc_conditional_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_configure_0: function(data, options, clone, targets) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(options === void 0 || options === null) {
					throw new TypeError("'options' is not nullable");
				}
				if(clone === void 0 || clone === null) {
					throw new TypeError("'clone' is not nullable");
				}
				if(targets === void 0 || targets === null) {
					throw new TypeError("'targets' is not nullable");
				}
				if(KSType.isValue(data.attributes) ? data.attributes.length > 0 : false) {
					var attribute;
					for(var __ks_276 = 0, __ks_277 = data.attributes.length, attr; __ks_276 < __ks_277; ++__ks_276) {
						attr = data.attributes[__ks_276];
						var __ks_278;
						if((attr.declaration.kind === NodeKind.AttributeExpression) && (KSType.isValue(__ks_278 = Attribute.get(attr.declaration, targets)) ? (attribute = __ks_278, true) : false)) {
							if(clone) {
								options = __ks_Object._cm_clone(options);
								clone = false;
							}
							attribute.configure(options);
						}
					}
				}
				return options;
			},
			configure: function() {
				if(arguments.length === 4) {
					return Attribute.__ks_sttc_configure_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_get_0: function(data, targets) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(targets === void 0 || targets === null) {
					throw new TypeError("'targets' is not nullable");
				}
				var clazz;
				if((KSType.isValue($attributes[data.name.name]) ? (clazz = $attributes[data.name.name], true) : false) && ((clazz.target() & targets) > 0)) {
					return new clazz(data);
				}
				else {
					return null;
				}
			},
			get: function() {
				if(arguments.length === 2) {
					return Attribute.__ks_sttc_get_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_register_0: function(__ks_class_1) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(__ks_class_1 === void 0 || __ks_class_1 === null) {
					throw new TypeError("'class' is not nullable");
				}
				else if(!KSType.isClass(__ks_class_1)) {
					throw new TypeError("'class' is not of type 'Class'");
				}
				var name = __ks_class_1.name.toLowerCase();
				if((name.length > 9) && (name.substr(-9) === "attribute")) {
					var __ks_279;
					name = name.substr(0, name.length - 9);
				}
				$attributes[name] = __ks_class_1;
			},
			register: function() {
				if(arguments.length === 1) {
					return Attribute.__ks_sttc_register_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons: function(args) {
			if(args.length !== 0) {
				throw new SyntaxError("wrong number of arguments");
			}
		}
	});
	var ErrorAttribute = Helper.class({
		$name: "ErrorAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global | AttributeTarget.Property | AttributeTarget.Statement;
			},
			target: function() {
				if(arguments.length === 0) {
					return ErrorAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				ErrorAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_280 = 0, __ks_281 = this._data.arguments.length, arg; __ks_280 < __ks_281; ++__ks_280) {
				arg = this._data.arguments[__ks_280];
				var __ks_282 = arg.kind;
				if(__ks_282 === NodeKind.AttributeExpression) {
					if(arg.name.name === "ignore") {
						for(var __ks_283 = 0, __ks_284 = arg.arguments.length, a; __ks_283 < __ks_284; ++__ks_283) {
							a = arg.arguments[__ks_283];
							options.error.ignore.push(a.name);
						}
					}
					else if(arg.name.name === "raise") {
						for(var __ks_283 = 0, __ks_284 = arg.arguments.length, a; __ks_283 < __ks_284; ++__ks_283) {
							a = arg.arguments[__ks_283];
							options.error.raise.push(a.name);
						}
					}
				}
				else if(__ks_282 === NodeKind.Identifier) {
					var __ks_283 = arg.name;
					if(__ks_283 === "off") {
						options.error.level = "off";
					}
				}
			}
		},
		configure: function() {
			if(arguments.length === 1) {
				return ErrorAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var FormatAttribute = Helper.class({
		$name: "FormatAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global | AttributeTarget.Statement;
			},
			target: function() {
				if(arguments.length === 0) {
					return FormatAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				FormatAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_285 = 0, __ks_286 = this._data.arguments.length, arg; __ks_285 < __ks_286; ++__ks_285) {
				arg = this._data.arguments[__ks_285];
				if(arg.kind === NodeKind.AttributeOperation) {
					options.format[arg.name.name] = arg.value.value;
				}
			}
		},
		configure: function() {
			if(arguments.length === 1) {
				return FormatAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var IfAttribute = Helper.class({
		$name: "IfAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Conditional;
			},
			target: function() {
				if(arguments.length === 0) {
					return IfAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				IfAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_evaluate_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			if(this._data.arguments.length !== 1) {
				SyntaxException.throwTooMuchAttributesForIfAttribute();
			}
			return this.evaluate(this._data.arguments[0], target);
		},
		__ks_func_evaluate_1: function(data, target) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			if(data.kind === NodeKind.AttributeExpression) {
				if(data.name.name === "all") {
					for(var __ks_287 = 0, __ks_288 = data.arguments.length, arg; __ks_287 < __ks_288; ++__ks_287) {
						arg = data.arguments[__ks_287];
						if(!this.evaluate(arg, target)) {
							return false;
						}
					}
					return true;
				}
				else if(data.name.name === "any") {
					for(var __ks_287 = 0, __ks_288 = data.arguments.length, arg; __ks_287 < __ks_288; ++__ks_287) {
						arg = data.arguments[__ks_287];
						if(this.evaluate(arg, target)) {
							return true;
						}
					}
					return false;
				}
			}
			else if(data.kind === NodeKind.Identifier) {
				var match;
				if(KSType.isValue(__ks_287 = $semverRegex.exec(data.name)) ? (match = __ks_287, true) : false) {
					if(KSType.isValue(match[2])) {
						return (target.name === match[1]) && (target.version === match[2]);
					}
					else {
						return target.name === match[1];
					}
				}
				else {
					return false;
				}
			}
		},
		evaluate: function() {
			if(arguments.length === 1) {
				return IfAttribute.prototype.__ks_func_evaluate_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return IfAttribute.prototype.__ks_func_evaluate_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ParseAttribute = Helper.class({
		$name: "ParseAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global | AttributeTarget.Statement;
			},
			target: function() {
				if(arguments.length === 0) {
					return ParseAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				ParseAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_289 = 0, __ks_290 = this._data.arguments.length, arg; __ks_289 < __ks_290; ++__ks_289) {
				arg = this._data.arguments[__ks_289];
				if(arg.kind === NodeKind.AttributeOperation) {
					options.parse[arg.name.name] = arg.value.value;
				}
			}
		},
		configure: function() {
			if(arguments.length === 1) {
				return ParseAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var RuntimeAttribute = Helper.class({
		$name: "RuntimeAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global;
			},
			target: function() {
				if(arguments.length === 0) {
					return RuntimeAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				RuntimeAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_291 = 0, __ks_292 = this._data.arguments.length, arg; __ks_291 < __ks_292; ++__ks_291) {
				arg = this._data.arguments[__ks_291];
				if(arg.kind === NodeKind.AttributeOperation) {
					if(arg.name.name === "package") {
						options.runtime.helper.package = options.runtime.type.package = arg.value.value;
					}
				}
				else if(arg.kind === NodeKind.AttributeExpression) {
					if(arg.name.name === "helper") {
						for(var __ks_293 = 0, __ks_294 = arg.arguments.length, __ks_arg_1; __ks_293 < __ks_294; ++__ks_293) {
							__ks_arg_1 = arg.arguments[__ks_293];
							if(__ks_arg_1.kind === NodeKind.AttributeOperation) {
								var __ks_295 = __ks_arg_1.name.name;
								if(__ks_295 === "alias") {
									options.runtime.helper.alias = __ks_arg_1.value.value;
								}
								else if(__ks_295 === "member") {
									options.runtime.helper.member = __ks_arg_1.value.value;
								}
								else if(__ks_295 === "package") {
									options.runtime.helper.package = __ks_arg_1.value.value;
								}
							}
						}
					}
					else if(arg.name.name === "type") {
						for(var __ks_293 = 0, __ks_294 = arg.arguments.length, __ks_arg_2; __ks_293 < __ks_294; ++__ks_293) {
							__ks_arg_2 = arg.arguments[__ks_293];
							if(__ks_arg_2.kind === NodeKind.AttributeOperation) {
								var __ks_295 = __ks_arg_2.name.name;
								if(__ks_295 === "alias") {
									options.runtime.type.alias = __ks_arg_2.value.value;
								}
								else if(__ks_295 === "member") {
									options.runtime.type.member = __ks_arg_2.value.value;
								}
								else if(__ks_295 === "package") {
									options.runtime.type.package = __ks_arg_2.value.value;
								}
							}
						}
					}
				}
			}
		},
		configure: function() {
			if(arguments.length === 1) {
				return RuntimeAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var TargetAttribute = Helper.class({
		$name: "TargetAttribute",
		$extends: Attribute,
		$static: {
			__ks_sttc_target_0: function() {
				return AttributeTarget.Global | AttributeTarget.Statement;
			},
			target: function() {
				if(arguments.length === 0) {
					return TargetAttribute.__ks_sttc_target_0.apply(this);
				}
				else if(Attribute.target) {
					return Attribute.target.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Attribute.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			this._data = data;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				TargetAttribute.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_configure_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			for(var __ks_296 = 0, __ks_297 = this._data.arguments.length, argument; __ks_296 < __ks_297; ++__ks_296) {
				argument = this._data.arguments[__ks_296];
				if(argument.kind === NodeKind.Identifier) {
					var match, __ks_298;
					if(KSType.isValue(__ks_298 = $targetRegex.exec(argument.name)) ? (match = __ks_298, false) : true) {
						throw new Error("Invalid target syntax: " + argument.name);
					}
					var target = {
						name: match[1],
						version: match[2]
					};
					if(!KSType.isValue($targets[target.name])) {
						throw new Error("Undefined target '" + target.name + "'");
					}
					else if(!KSType.isValue($targets[target.name][target.version])) {
						throw new Error("Undefined target's version '" + target.version + "'");
					}
					options.format = __ks_Object._cm_defaults(options, $targets[target.name][target.version].format);
				}
			}
		},
		configure: function() {
			if(arguments.length === 1) {
				return TargetAttribute.prototype.__ks_func_configure_0.apply(this, arguments);
			}
			else if(Attribute.prototype.configure) {
				return Attribute.prototype.configure.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	Attribute.register(ErrorAttribute);
	Attribute.register(FormatAttribute);
	Attribute.register(IfAttribute);
	Attribute.register(ParseAttribute);
	Attribute.register(RuntimeAttribute);
	Attribute.register(TargetAttribute);
	var Writer = Helper.class({
		$name: "Writer",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._cache = {
				array: {},
				block: {},
				comment: {},
				expression: {},
				indent: {},
				line: {},
				object: {}
			};
			this._fragments = [];
		},
		__ks_init: function() {
			Writer.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(options) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(options === void 0 || options === null) {
				throw new TypeError("'options' is not nullable");
			}
			var __ks_299;
			this._options = __ks_Object._cm_merge({
				indent: {
					level: 0,
					style: "tab",
					size: 4
				},
				terminators: {
					line: ";",
					list: ","
				},
				classes: {
					array: ArrayWriter,
					block: BlockWriter,
					comment: CommentWriter,
					control: ControlWriter,
					expression: ExpressionWriter,
					fragment: Fragment,
					line: LineWriter,
					mark: MarkWriter,
					object: ObjectWriter
				}
			}, options);
			this._indent = this._options.indent.level;
			this.Array = this._options.classes.array;
			this.Block = this._options.classes.block;
			this.Comment = this._options.classes.comment;
			this.Control = this._options.classes.control;
			this.Expression = this._options.classes.expression;
			this.Fragment = this._options.classes.fragment;
			this.Line = this._options.classes.line;
			this.Mark = this._options.classes.mark;
			this.Object = this._options.classes.object;
			this.breakTerminator = this.newFragment("\n");
			this.lineTerminator = this.newFragment("" + this._options.terminators.line + "\n");
			this.listTerminator = this.newFragment("" + this._options.terminators.list + "\n");
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				Writer.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_comment_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_300;
			(__ks_300 = this.newComment(this._indent), __ks_300.code).apply(__ks_300, args).done();
			return this;
		},
		comment: function() {
			return Writer.prototype.__ks_func_comment_0.apply(this, arguments);
		},
		__ks_func_insertAt_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			var args = Array.prototype.slice.call(arguments, 1, arguments.length);
			var l = this._fragments.length;
			this._fragments.splice.apply(this._fragments, [].concat([index, 0], args));
			return this._fragments.length - l;
		},
		insertAt: function() {
			return Writer.prototype.__ks_func_insertAt_0.apply(this, arguments);
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_301;
			(__ks_301 = this.newLine(this._indent), __ks_301.code).apply(__ks_301, args).done();
			return this;
		},
		line: function() {
			return Writer.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_mark_0: function() {
			return new this.Mark(this, this._indent, this._fragments.length);
		},
		mark: function() {
			if(arguments.length === 0) {
				return Writer.prototype.__ks_func_mark_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newArray_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.array[indent])) {
				this._cache.array[indent] = new this.Array(this, indent);
			}
			return this._cache.array[indent].init();
		},
		newArray: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Writer.prototype.__ks_func_newArray_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newBlock_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.block[indent])) {
				this._cache.block[indent] = new this.Block(this, indent);
			}
			return this._cache.block[indent].init();
		},
		newBlock: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Writer.prototype.__ks_func_newBlock_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newComment_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.comment[indent])) {
				this._cache.comment[indent] = new this.Comment(this, indent);
			}
			return this._cache.comment[indent].init();
		},
		newComment: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Writer.prototype.__ks_func_newComment_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newControl_0: function(indent, addFinalNewLine) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(addFinalNewLine === void 0 || addFinalNewLine === null) {
				addFinalNewLine = true;
			}
			return new this.Control(this, indent, addFinalNewLine);
		},
		newControl: function() {
			if(arguments.length >= 0 && arguments.length <= 2) {
				return Writer.prototype.__ks_func_newControl_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newExpression_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.expression[indent])) {
				this._cache.expression[indent] = new this.Expression(this, indent);
			}
			return this._cache.expression[indent].init();
		},
		newExpression: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Writer.prototype.__ks_func_newExpression_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newFragment_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			return Helper.create(this.Fragment, args);
		},
		newFragment: function() {
			return Writer.prototype.__ks_func_newFragment_0.apply(this, arguments);
		},
		__ks_func_newIndent_0: function(indent) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			return KSType.isValue(this._cache.indent[indent]) ? this._cache.indent[indent] : (this._cache.indent[indent] = new this.Fragment("\t".repeat(indent)));
		},
		newIndent: function() {
			if(arguments.length === 1) {
				return Writer.prototype.__ks_func_newIndent_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newLine_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.line[indent])) {
				this._cache.line[indent] = new this.Line(this, indent);
			}
			return this._cache.line[indent].init();
		},
		newLine: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Writer.prototype.__ks_func_newLine_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newObject_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			if(!KSType.isValue(this._cache.object[indent])) {
				this._cache.object[indent] = new this.Object(this, indent);
			}
			return this._cache.object[indent].init();
		},
		newObject: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Writer.prototype.__ks_func_newObject_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_push_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			this._fragments.push.apply(this._fragments, args);
			return this;
		},
		push: function() {
			return Writer.prototype.__ks_func_push_0.apply(this, arguments);
		},
		__ks_func_toArray_0: function() {
			return this._fragments;
		},
		toArray: function() {
			if(arguments.length === 0) {
				return Writer.prototype.__ks_func_toArray_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Fragment = Helper.class({
		$name: "Fragment",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(code) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(code === void 0 || code === null) {
				throw new TypeError("'code' is not nullable");
			}
			this.code = code;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				Fragment.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_toString_0: function() {
			return this.code;
		},
		toString: function() {
			if(arguments.length === 0) {
				return Fragment.prototype.__ks_func_toString_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayWriter = Helper.class({
		$name: "ArrayWriter",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._line = null;
		},
		__ks_init: function() {
			ArrayWriter.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(writer, indent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			this._writer = writer;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ArrayWriter.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_done_0: function() {
			if(this._line !== null) {
				this._line.done();
				this._line = null;
				this._writer.push(this._writer.newFragment("\n"), this._writer.newIndent(this._indent), this._writer.newFragment("]"));
			}
			else {
				this._writer.push(this._writer.newFragment("]"));
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ArrayWriter.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._line = null;
			this._writer.push(this._writer.newFragment("["));
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ArrayWriter.prototype.__ks_func_init_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_302;
			(__ks_302 = this.newLine(), __ks_302.code).apply(__ks_302, args);
			return this;
		},
		line: function() {
			return ArrayWriter.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			if(this._line !== null) {
				this._line.done();
				this._writer.push(this._writer.newFragment(",\n"));
			}
			else {
				this._writer.push(this._writer.newFragment("\n"));
			}
			var __ks_303;
			return this._line = this._writer.newControl(this._indent + 1, false);
		},
		newControl: function() {
			if(arguments.length === 0) {
				return ArrayWriter.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			if(this._line !== null) {
				this._line.done();
				this._writer.push(this._writer.newFragment(this._writer.listTerminator));
			}
			else {
				this._writer.push(this._writer.newFragment("\n"));
			}
			var __ks_304;
			return this._line = this._writer.newExpression(this._indent + 1);
		},
		newLine: function() {
			if(arguments.length === 0) {
				return ArrayWriter.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BlockWriter = Helper.class({
		$name: "BlockWriter",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._undone = true;
		},
		__ks_init: function() {
			BlockWriter.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(writer, indent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			this._writer = writer;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				BlockWriter.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_done_0: function() {
			if(this._undone) {
				this._writer.push(this._writer.newIndent(this._indent), this._writer.newFragment("}"));
				this._undone = false;
				return true;
			}
			else {
				return false;
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return BlockWriter.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._writer.push(this._writer.newFragment(" {\n"));
			this._undone = true;
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return BlockWriter.prototype.__ks_func_init_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_305;
			(__ks_305 = this._writer.newLine(this._indent + 1), __ks_305.code).apply(__ks_305, args).done();
			return this;
		},
		line: function() {
			return BlockWriter.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return this._writer.newControl(indent);
		},
		newControl: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return BlockWriter.prototype.__ks_func_newControl_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newLine_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return this._writer.newLine(indent);
		},
		newLine: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return BlockWriter.prototype.__ks_func_newLine_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ControlWriter = Helper.class({
		$name: "ControlWriter",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._firstStep = true;
		},
		__ks_init: function() {
			ControlWriter.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var writer = arguments[++__ks_i];
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			var indent = arguments[++__ks_i];
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			var addFinalNewLine;
			if(arguments.length > 2 && (addFinalNewLine = arguments[++__ks_i]) !== void 0 && addFinalNewLine !== null) {
				if(!KSType.isBoolean(addFinalNewLine)) {
					throw new TypeError("'addFinalNewLine' is not of type 'Boolean'");
				}
			}
			else {
				addFinalNewLine = true;
			}
			this._writer = writer;
			this._indent = indent;
			this._addFinalNewLine = addFinalNewLine;
			var __ks_306;
			this._step = this._writer.newExpression(this._indent);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				ControlWriter.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_code_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			this._step.code.apply(this._step, args);
			return this;
		},
		code: function() {
			return ControlWriter.prototype.__ks_func_code_0.apply(this, arguments);
		},
		__ks_func_done_0: function() {
			if(this._step.done() && this._addFinalNewLine) {
				this._writer.push(this._writer.breakTerminator);
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ControlWriter.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isFirstStep_0: function() {
			return this._firstStep;
		},
		isFirstStep: function() {
			if(arguments.length === 0) {
				return ControlWriter.prototype.__ks_func_isFirstStep_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			this._step.line.apply(this._step, args);
			return this;
		},
		line: function() {
			return ControlWriter.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			return this._step.newControl();
		},
		newControl: function() {
			if(arguments.length === 0) {
				return ControlWriter.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			return this._step.newLine();
		},
		newLine: function() {
			if(arguments.length === 0) {
				return ControlWriter.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_step_0: function() {
			this._step.done();
			if(KSType.is(this._step, ExpressionWriter)) {
				var __ks_307;
				this._step = this._writer.newBlock(this._indent);
			}
			else {
				if(this._addFinalNewLine) {
					this._writer.push(this._writer.newFragment("\n"));
				}
				this._step = this._writer.newExpression(this._indent);
			}
			if(this._firstStep) {
				this._firstStep = false;
			}
			return this;
		},
		step: function() {
			if(arguments.length === 0) {
				return ControlWriter.prototype.__ks_func_step_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExpressionWriter = Helper.class({
		$name: "ExpressionWriter",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._undone = true;
		},
		__ks_init: function() {
			ExpressionWriter.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(writer, indent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			this._writer = writer;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ExpressionWriter.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_code_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			for(var __ks_308 = 0, __ks_309 = args.length, arg; __ks_308 < __ks_309; ++__ks_308) {
				arg = args[__ks_308];
				if(KSType.isArray(arg)) {
					this.code.apply(this, [].concat(arg));
				}
				else if(KSType.isObject(arg)) {
					this._writer.push(arg);
				}
				else {
					this._writer.push(this._writer.newFragment(arg));
				}
			}
			return this;
		},
		code: function() {
			return ExpressionWriter.prototype.__ks_func_code_0.apply(this, arguments);
		},
		__ks_func_done_0: function() {
			if(this._undone) {
				this._undone = false;
				return true;
			}
			else {
				return false;
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ExpressionWriter.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._writer.push(this._writer.newIndent(this._indent));
			this._undone = true;
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ExpressionWriter.prototype.__ks_func_init_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newArray_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			return this._writer.newArray(indent);
		},
		newArray: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionWriter.prototype.__ks_func_newArray_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newBlock_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			return this._writer.newBlock(indent);
		},
		newBlock: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionWriter.prototype.__ks_func_newBlock_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newControl_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return this._writer.newControl(indent);
		},
		newControl: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionWriter.prototype.__ks_func_newControl_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newLine_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent + 1;
			}
			return this._writer.newLine(indent);
		},
		newLine: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionWriter.prototype.__ks_func_newLine_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newObject_0: function(indent) {
			if(indent === void 0 || indent === null) {
				indent = this._indent;
			}
			return this._writer.newObject(indent);
		},
		newObject: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ExpressionWriter.prototype.__ks_func_newObject_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CommentWriter = Helper.class({
		$name: "CommentWriter",
		$extends: ExpressionWriter,
		__ks_init: function() {
			ExpressionWriter.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ExpressionWriter.prototype.__ks_cons.call(this, args);
		},
		__ks_func_done_0: function() {
			if(this._undone) {
				this._writer.push(this._writer.breakTerminator);
				this._undone = false;
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return CommentWriter.prototype.__ks_func_done_0.apply(this);
			}
			return ExpressionWriter.prototype.done.apply(this, arguments);
		},
		__ks_func_newLine_0: function() {
			return this;
		},
		newLine: function() {
			if(arguments.length === 0) {
				return CommentWriter.prototype.__ks_func_newLine_0.apply(this);
			}
			return ExpressionWriter.prototype.newLine.apply(this, arguments);
		}
	});
	var LineWriter = Helper.class({
		$name: "LineWriter",
		$extends: ExpressionWriter,
		__ks_init: function() {
			ExpressionWriter.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ExpressionWriter.prototype.__ks_cons.call(this, args);
		},
		__ks_func_done_0: function() {
			if(this._undone) {
				this._writer.push(this._writer.lineTerminator);
				this._undone = false;
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return LineWriter.prototype.__ks_func_done_0.apply(this);
			}
			return ExpressionWriter.prototype.done.apply(this, arguments);
		},
		__ks_func_newLine_0: function() {
			return this;
		},
		newLine: function() {
			if(arguments.length === 0) {
				return LineWriter.prototype.__ks_func_newLine_0.apply(this);
			}
			return ExpressionWriter.prototype.newLine.apply(this, arguments);
		}
	});
	var ObjectWriter = Helper.class({
		$name: "ObjectWriter",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._line = null;
		},
		__ks_init: function() {
			ObjectWriter.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(writer, indent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			this._writer = writer;
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ObjectWriter.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_done_0: function() {
			if(this._line !== null) {
				this._line.done();
				this._line = null;
				this._writer.push(this._writer.newFragment("\n"), this._writer.newIndent(this._indent), this._writer.newFragment("}"));
			}
			else {
				this._writer.push(this._writer.newFragment("}"));
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return ObjectWriter.prototype.__ks_func_done_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_init_0: function() {
			this._line = null;
			this._writer.push(this._writer.newFragment("{"));
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ObjectWriter.prototype.__ks_func_init_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_310;
			(__ks_310 = this.newLine(), __ks_310.code).apply(__ks_310, args);
			return this;
		},
		line: function() {
			return ObjectWriter.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			if(this._line !== null) {
				this._line.done();
				this._writer.push(this._writer.newFragment(this._writer.listTerminator));
			}
			else {
				this._writer.push(this._writer.newFragment("\n"));
			}
			var __ks_311;
			return this._line = this._writer.newControl(this._indent + 1, false);
		},
		newControl: function() {
			if(arguments.length === 0) {
				return ObjectWriter.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newLine_0: function() {
			if(this._line !== null) {
				this._line.done();
				this._writer.push(this._writer.newFragment(this._writer.listTerminator));
			}
			else {
				this._writer.push(this._writer.newFragment("\n"));
			}
			var __ks_312;
			return this._line = this._writer.newExpression(this._indent + 1);
		},
		newLine: function() {
			if(arguments.length === 0) {
				return ObjectWriter.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var MarkWriter = Helper.class({
		$name: "MarkWriter",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(writer, indent, index) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			this._writer = writer;
			this._indent = indent;
			this._index = index;
			this.breakTerminator = this._writer.breakTerminator;
			this.lineTerminator = this._writer.lineTerminator;
			this.listTerminator = this._writer.listTerminator;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				MarkWriter.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var __ks_313;
			(__ks_313 = this.newLine(), __ks_313.code).apply(__ks_313, args).done();
			return this;
		},
		line: function() {
			return MarkWriter.prototype.__ks_func_line_0.apply(this, arguments);
		},
		__ks_func_newControl_0: function() {
			return new this._writer.Control(this, this._indent);
		},
		newControl: function() {
			if(arguments.length === 0) {
				return MarkWriter.prototype.__ks_func_newControl_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newFragment_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			return this._writer.newFragment.apply(this._writer, args);
		},
		newFragment: function() {
			return MarkWriter.prototype.__ks_func_newFragment_0.apply(this, arguments);
		},
		__ks_func_newLine_0: function() {
			return new this._writer.Line(this, this._indent);
		},
		newLine: function() {
			if(arguments.length === 0) {
				return MarkWriter.prototype.__ks_func_newLine_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_push_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			this._index += this._writer.insertAt.apply(this._writer, [].concat([this._index], args));
			return this;
		},
		push: function() {
			return MarkWriter.prototype.__ks_func_push_0.apply(this, arguments);
		}
	});
	var Generator = (function() {
		var __ks_4;
		var AssignmentOperatorSymbol = (__ks_4 = {}, __ks_4[AssignmentOperatorKind.Addition] = " += ", __ks_4[AssignmentOperatorKind.BitwiseAnd] = " &= ", __ks_4[AssignmentOperatorKind.BitwiseLeftShift] = " <<= ", __ks_4[AssignmentOperatorKind.BitwiseOr] = " |= ", __ks_4[AssignmentOperatorKind.BitwiseRightShift] = " >>= ", __ks_4[AssignmentOperatorKind.BitwiseXor] = " ^= ", __ks_4[AssignmentOperatorKind.Division] = " /= ", __ks_4[AssignmentOperatorKind.Equality] = " = ", __ks_4[AssignmentOperatorKind.Existential] = " ?= ", __ks_4[AssignmentOperatorKind.Modulo] = " %= ", __ks_4[AssignmentOperatorKind.Multiplication] = " *= ", __ks_4[AssignmentOperatorKind.NonExistential] = " !?= ", __ks_4[AssignmentOperatorKind.NullCoalescing] = " ??= ", __ks_4[AssignmentOperatorKind.Subtraction] = " -= ", __ks_4);
		var BinaryOperatorSymbol = (__ks_4 = {}, __ks_4[BinaryOperatorKind.Addition] = " + ", __ks_4[BinaryOperatorKind.And] = " && ", __ks_4[BinaryOperatorKind.BitwiseAnd] = " & ", __ks_4[BinaryOperatorKind.BitwiseLeftShift] = " << ", __ks_4[BinaryOperatorKind.BitwiseOr] = " | ", __ks_4[BinaryOperatorKind.BitwiseRightShift] = " >> ", __ks_4[BinaryOperatorKind.BitwiseXor] = " ^ ", __ks_4[BinaryOperatorKind.Division] = " / ", __ks_4[BinaryOperatorKind.Equality] = " == ", __ks_4[BinaryOperatorKind.GreaterThan] = " > ", __ks_4[BinaryOperatorKind.GreaterThanOrEqual] = " >= ", __ks_4[BinaryOperatorKind.Inequality] = " != ", __ks_4[BinaryOperatorKind.LessThan] = " < ", __ks_4[BinaryOperatorKind.LessThanOrEqual] = " <= ", __ks_4[BinaryOperatorKind.Modulo] = " % ", __ks_4[BinaryOperatorKind.Multiplication] = " * ", __ks_4[BinaryOperatorKind.NullCoalescing] = " ?? ", __ks_4[BinaryOperatorKind.Or] = " || ", __ks_4[BinaryOperatorKind.Subtraction] = " - ", __ks_4[BinaryOperatorKind.TypeCasting] = ":", __ks_4[BinaryOperatorKind.TypeEquality] = " is ", __ks_4[BinaryOperatorKind.TypeInequality] = " is not ", __ks_4);
		var UnaryPrefixOperatorSymbol = (__ks_4 = {}, __ks_4[UnaryOperatorKind.BitwiseNot] = "~", __ks_4[UnaryOperatorKind.DecrementPrefix] = "--", __ks_4[UnaryOperatorKind.Existential] = "?", __ks_4[UnaryOperatorKind.IncrementPrefix] = "++", __ks_4[UnaryOperatorKind.Negation] = "!", __ks_4[UnaryOperatorKind.Negative] = "-", __ks_4[UnaryOperatorKind.Spread] = "...", __ks_4);
		var UnaryPostfixOperatorSymbol = (__ks_4 = {}, __ks_4[UnaryOperatorKind.DecrementPostfix] = "--", __ks_4[UnaryOperatorKind.IncrementPostfix] = "++", __ks_4);
		var KSWriterMode = {
			Default: 0,
			Extern: 1,
			Property: 2
		};
		function $nilFilter() {
			var __ks_0 = Array.prototype.slice.call(arguments, 0, arguments.length);
			return false;
		}
		function $nilTransformer() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			return args[0];
		}
		var KSWriter = Helper.class({
			$name: "KSWriter",
			$extends: Writer,
			__ks_init_1: function() {
				this._stack = [];
			},
			__ks_init: function() {
				Writer.prototype.__ks_init.call(this);
				KSWriter.prototype.__ks_init_1.call(this);
			},
			__ks_cons_0: function(options) {
				if(options === void 0) {
					options = null;
				}
				Writer.prototype.__ks_cons.call(this, [__ks_Object._cm_merge({
					mode: KSWriterMode.Default,
					classes: {
						block: KSBlockWriter,
						control: KSControlWriter,
						expression: KSExpressionWriter,
						line: KSLineWriter,
						object: KSObjectWriter
					},
					filters: {
						expression: $nilFilter,
						statement: $nilFilter
					},
					terminators: {
						line: "",
						list: ""
					},
					transformers: {
						expression: $nilTransformer,
						statement: $nilTransformer
					}
				}, options)]);
				this._mode = this._options.mode;
			},
			__ks_cons: function(args) {
				if(args.length >= 0 && args.length <= 1) {
					KSWriter.prototype.__ks_cons_0.apply(this, args);
				}
				else {
					throw new SyntaxError("wrong number of arguments");
				}
			},
			__ks_func_filterExpression_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var data = arguments[++__ks_i];
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks__;
				var writer = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this;
				return this._options.filters.expression(data, writer);
			},
			filterExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSWriter.prototype.__ks_func_filterExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_filterStatement_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var data = arguments[++__ks_i];
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks__;
				var writer = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this;
				return this._options.filters.statement(data, writer);
			},
			filterStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSWriter.prototype.__ks_func_filterStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_mode_0: function() {
				return this._mode;
			},
			mode: function() {
				if(arguments.length === 0) {
					return KSWriter.prototype.__ks_func_mode_0.apply(this);
				}
				else if(Writer.prototype.mode) {
					return Writer.prototype.mode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_popMode_0: function() {
				this._mode = this._stack.pop();
			},
			popMode: function() {
				if(arguments.length === 0) {
					return KSWriter.prototype.__ks_func_popMode_0.apply(this);
				}
				else if(Writer.prototype.popMode) {
					return Writer.prototype.popMode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_pushMode_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.is(mode, KSWriterMode)) {
					throw new TypeError("'mode' is not of type 'KSWriterMode'");
				}
				this._stack.push(this._mode);
				this._mode = mode;
			},
			pushMode: function() {
				if(arguments.length === 1) {
					return KSWriter.prototype.__ks_func_pushMode_0.apply(this, arguments);
				}
				else if(Writer.prototype.pushMode) {
					return Writer.prototype.pushMode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_statement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!this.filterStatement(data)) {
					toAttributes(data, false, this);
					toStatement(this.transformStatement(data), this);
				}
				return this;
			},
			statement: function() {
				if(arguments.length === 1) {
					return KSWriter.prototype.__ks_func_statement_0.apply(this, arguments);
				}
				else if(Writer.prototype.statement) {
					return Writer.prototype.statement.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_toSource_0: function() {
				var source = "";
				var __ks_4 = this.toArray();
				for(var __ks_314 = 0, __ks_315 = __ks_4.length, fragment; __ks_314 < __ks_315; ++__ks_314) {
					fragment = __ks_4[__ks_314];
					source += fragment.code;
				}
				if(source.length !== 0) {
					return source.substr(0, source.length - 1);
				}
				else {
					return source;
				}
			},
			toSource: function() {
				if(arguments.length === 0) {
					return KSWriter.prototype.__ks_func_toSource_0.apply(this);
				}
				else if(Writer.prototype.toSource) {
					return Writer.prototype.toSource.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_transformExpression_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var data = arguments[++__ks_i];
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks__;
				var writer = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this;
				return this._options.transformers.expression(data, writer);
			},
			transformExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSWriter.prototype.__ks_func_transformExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_transformStatement_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var data = arguments[++__ks_i];
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks__;
				var writer = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this;
				return this._options.transformers.statement(data, writer);
			},
			transformStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSWriter.prototype.__ks_func_transformStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		});
		var KSBlockWriter = Helper.class({
			$name: "KSBlockWriter",
			$extends: BlockWriter,
			__ks_init: function() {
				BlockWriter.prototype.__ks_init.call(this);
			},
			__ks_cons: function(args) {
				BlockWriter.prototype.__ks_cons.call(this, args);
			},
			__ks_func_expression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!this.filterExpression(data)) {
					toExpression(this.transformExpression(data), this);
				}
				return this;
			},
			expression: function() {
				if(arguments.length === 1) {
					return KSBlockWriter.prototype.__ks_func_expression_0.apply(this, arguments);
				}
				else if(BlockWriter.prototype.expression) {
					return BlockWriter.prototype.expression.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_filterExpression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterExpression(data, this);
			},
			filterExpression: function() {
				if(arguments.length === 1) {
					return KSBlockWriter.prototype.__ks_func_filterExpression_0.apply(this, arguments);
				}
				else if(BlockWriter.prototype.filterExpression) {
					return BlockWriter.prototype.filterExpression.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_filterStatement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterStatement(data, this);
			},
			filterStatement: function() {
				if(arguments.length === 1) {
					return KSBlockWriter.prototype.__ks_func_filterStatement_0.apply(this, arguments);
				}
				else if(BlockWriter.prototype.filterStatement) {
					return BlockWriter.prototype.filterStatement.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_mode_0: function() {
				return this._writer.mode();
			},
			mode: function() {
				if(arguments.length === 0) {
					return KSBlockWriter.prototype.__ks_func_mode_0.apply(this);
				}
				else if(BlockWriter.prototype.mode) {
					return BlockWriter.prototype.mode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_popMode_0: function() {
				return this._writer.popMode();
			},
			popMode: function() {
				if(arguments.length === 0) {
					return KSBlockWriter.prototype.__ks_func_popMode_0.apply(this);
				}
				else if(BlockWriter.prototype.popMode) {
					return BlockWriter.prototype.popMode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_pushMode_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.is(mode, KSWriterMode)) {
					throw new TypeError("'mode' is not of type 'KSWriterMode'");
				}
				return this._writer.pushMode(mode);
			},
			pushMode: function() {
				if(arguments.length === 1) {
					return KSBlockWriter.prototype.__ks_func_pushMode_0.apply(this, arguments);
				}
				else if(BlockWriter.prototype.pushMode) {
					return BlockWriter.prototype.pushMode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_statement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!this.filterStatement(data)) {
					toAttributes(data, false, this);
					toStatement(this.transformStatement(data), this);
				}
				return this;
			},
			statement: function() {
				if(arguments.length === 1) {
					return KSBlockWriter.prototype.__ks_func_statement_0.apply(this, arguments);
				}
				else if(BlockWriter.prototype.statement) {
					return BlockWriter.prototype.statement.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_transformExpression_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var data = arguments[++__ks_i];
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks__;
				var writer = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this;
				return this._writer.transformExpression(data, this);
			},
			transformExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSBlockWriter.prototype.__ks_func_transformExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_transformStatement_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var data = arguments[++__ks_i];
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks__;
				var writer = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this;
				return this._writer.transformStatement(data, this);
			},
			transformStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSBlockWriter.prototype.__ks_func_transformStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		});
		var KSControlWriter = Helper.class({
			$name: "KSControlWriter",
			$extends: ControlWriter,
			__ks_init: function() {
				ControlWriter.prototype.__ks_init.call(this);
			},
			__ks_cons: function(args) {
				ControlWriter.prototype.__ks_cons.call(this, args);
			},
			__ks_func_expression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!this.filterExpression(data)) {
					toExpression(this.transformExpression(data), this);
				}
				return this;
			},
			expression: function() {
				if(arguments.length === 1) {
					return KSControlWriter.prototype.__ks_func_expression_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.expression) {
					return ControlWriter.prototype.expression.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_filterExpression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterExpression(data, this);
			},
			filterExpression: function() {
				if(arguments.length === 1) {
					return KSControlWriter.prototype.__ks_func_filterExpression_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.filterExpression) {
					return ControlWriter.prototype.filterExpression.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_filterStatement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterStatement(data, this);
			},
			filterStatement: function() {
				if(arguments.length === 1) {
					return KSControlWriter.prototype.__ks_func_filterStatement_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.filterStatement) {
					return ControlWriter.prototype.filterStatement.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_mode_0: function() {
				return this._writer.mode();
			},
			mode: function() {
				if(arguments.length === 0) {
					return KSControlWriter.prototype.__ks_func_mode_0.apply(this);
				}
				else if(ControlWriter.prototype.mode) {
					return ControlWriter.prototype.mode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_popMode_0: function() {
				return this._writer.popMode();
			},
			popMode: function() {
				if(arguments.length === 0) {
					return KSControlWriter.prototype.__ks_func_popMode_0.apply(this);
				}
				else if(ControlWriter.prototype.popMode) {
					return ControlWriter.prototype.popMode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_pushMode_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.is(mode, KSWriterMode)) {
					throw new TypeError("'mode' is not of type 'KSWriterMode'");
				}
				return this._writer.pushMode(mode);
			},
			pushMode: function() {
				if(arguments.length === 1) {
					return KSControlWriter.prototype.__ks_func_pushMode_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.pushMode) {
					return ControlWriter.prototype.pushMode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_statement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!this.filterStatement(data)) {
					toAttributes(data, false, this);
					toStatement(this.transformStatement(data), this);
				}
				return this;
			},
			statement: function() {
				if(arguments.length === 1) {
					return KSControlWriter.prototype.__ks_func_statement_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.statement) {
					return ControlWriter.prototype.statement.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_transformExpression_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var data = arguments[++__ks_i];
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks__;
				var writer = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this;
				return this._writer.transformExpression(data, this);
			},
			transformExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSControlWriter.prototype.__ks_func_transformExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_transformStatement_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var data = arguments[++__ks_i];
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks__;
				var writer = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this;
				return this._writer.transformStatement(data, this);
			},
			transformStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSControlWriter.prototype.__ks_func_transformStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_wrap_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!this.filterExpression(data)) {
					toWrap(this.transformExpression(data), this);
				}
				return this;
			},
			wrap: function() {
				if(arguments.length === 1) {
					return KSControlWriter.prototype.__ks_func_wrap_0.apply(this, arguments);
				}
				else if(ControlWriter.prototype.wrap) {
					return ControlWriter.prototype.wrap.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		});
		var KSExpressionWriter = Helper.class({
			$name: "KSExpressionWriter",
			$extends: ExpressionWriter,
			__ks_init: function() {
				ExpressionWriter.prototype.__ks_init.call(this);
			},
			__ks_cons: function(args) {
				ExpressionWriter.prototype.__ks_cons.call(this, args);
			},
			__ks_func_expression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!this.filterExpression(data)) {
					toExpression(this.transformExpression(data), this);
				}
				return this;
			},
			expression: function() {
				if(arguments.length === 1) {
					return KSExpressionWriter.prototype.__ks_func_expression_0.apply(this, arguments);
				}
				else if(ExpressionWriter.prototype.expression) {
					return ExpressionWriter.prototype.expression.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_filterExpression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterExpression(data, this);
			},
			filterExpression: function() {
				if(arguments.length === 1) {
					return KSExpressionWriter.prototype.__ks_func_filterExpression_0.apply(this, arguments);
				}
				else if(ExpressionWriter.prototype.filterExpression) {
					return ExpressionWriter.prototype.filterExpression.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_mode_0: function() {
				return this._writer.mode();
			},
			mode: function() {
				if(arguments.length === 0) {
					return KSExpressionWriter.prototype.__ks_func_mode_0.apply(this);
				}
				else if(ExpressionWriter.prototype.mode) {
					return ExpressionWriter.prototype.mode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_popMode_0: function() {
				return this._writer.popMode();
			},
			popMode: function() {
				if(arguments.length === 0) {
					return KSExpressionWriter.prototype.__ks_func_popMode_0.apply(this);
				}
				else if(ExpressionWriter.prototype.popMode) {
					return ExpressionWriter.prototype.popMode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_pushMode_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.is(mode, KSWriterMode)) {
					throw new TypeError("'mode' is not of type 'KSWriterMode'");
				}
				return this._writer.pushMode(mode);
			},
			pushMode: function() {
				if(arguments.length === 1) {
					return KSExpressionWriter.prototype.__ks_func_pushMode_0.apply(this, arguments);
				}
				else if(ExpressionWriter.prototype.pushMode) {
					return ExpressionWriter.prototype.pushMode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_transformExpression_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var data = arguments[++__ks_i];
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks__;
				var writer = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this;
				return this._writer.transformExpression(data, this);
			},
			transformExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSExpressionWriter.prototype.__ks_func_transformExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_wrap_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!this.filterExpression(data)) {
					toWrap(this.transformExpression(data), this);
				}
				return this;
			},
			wrap: function() {
				if(arguments.length === 1) {
					return KSExpressionWriter.prototype.__ks_func_wrap_0.apply(this, arguments);
				}
				else if(ExpressionWriter.prototype.wrap) {
					return ExpressionWriter.prototype.wrap.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		});
		var KSLineWriter = Helper.class({
			$name: "KSLineWriter",
			$extends: LineWriter,
			__ks_init: function() {
				LineWriter.prototype.__ks_init.call(this);
			},
			__ks_cons: function(args) {
				LineWriter.prototype.__ks_cons.call(this, args);
			},
			__ks_func_expression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!this.filterExpression(data)) {
					toExpression(this.transformExpression(data), this);
				}
				return this;
			},
			expression: function() {
				if(arguments.length === 1) {
					return KSLineWriter.prototype.__ks_func_expression_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.expression) {
					return LineWriter.prototype.expression.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_filterExpression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterExpression(data, this);
			},
			filterExpression: function() {
				if(arguments.length === 1) {
					return KSLineWriter.prototype.__ks_func_filterExpression_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.filterExpression) {
					return LineWriter.prototype.filterExpression.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_filterStatement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterStatement(data, this);
			},
			filterStatement: function() {
				if(arguments.length === 1) {
					return KSLineWriter.prototype.__ks_func_filterStatement_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.filterStatement) {
					return LineWriter.prototype.filterStatement.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_mode_0: function() {
				return this._writer.mode();
			},
			mode: function() {
				if(arguments.length === 0) {
					return KSLineWriter.prototype.__ks_func_mode_0.apply(this);
				}
				else if(LineWriter.prototype.mode) {
					return LineWriter.prototype.mode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_popMode_0: function() {
				return this._writer.popMode();
			},
			popMode: function() {
				if(arguments.length === 0) {
					return KSLineWriter.prototype.__ks_func_popMode_0.apply(this);
				}
				else if(LineWriter.prototype.popMode) {
					return LineWriter.prototype.popMode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_pushMode_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.is(mode, KSWriterMode)) {
					throw new TypeError("'mode' is not of type 'KSWriterMode'");
				}
				return this._writer.pushMode(mode);
			},
			pushMode: function() {
				if(arguments.length === 1) {
					return KSLineWriter.prototype.__ks_func_pushMode_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.pushMode) {
					return LineWriter.prototype.pushMode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_run_0: function(data, fn) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				fn(data, this);
				return this;
			},
			run: function() {
				if(arguments.length === 2) {
					return KSLineWriter.prototype.__ks_func_run_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.run) {
					return LineWriter.prototype.run.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_statement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!this.filterStatement(data)) {
					toAttributes(data, false, this);
					toStatement(this.transformStatement(data), this);
				}
				return this;
			},
			statement: function() {
				if(arguments.length === 1) {
					return KSLineWriter.prototype.__ks_func_statement_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.statement) {
					return LineWriter.prototype.statement.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_transformExpression_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var data = arguments[++__ks_i];
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks__;
				var writer = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this;
				return this._writer.transformExpression(data, this);
			},
			transformExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSLineWriter.prototype.__ks_func_transformExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_transformStatement_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var data = arguments[++__ks_i];
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks__;
				var writer = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this;
				return this._writer.transformStatement(data, this);
			},
			transformStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSLineWriter.prototype.__ks_func_transformStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_wrap_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!this.filterExpression(data)) {
					toWrap(this.transformExpression(data), this);
				}
				return this;
			},
			wrap: function() {
				if(arguments.length === 1) {
					return KSLineWriter.prototype.__ks_func_wrap_0.apply(this, arguments);
				}
				else if(LineWriter.prototype.wrap) {
					return LineWriter.prototype.wrap.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		});
		var KSObjectWriter = Helper.class({
			$name: "KSObjectWriter",
			$extends: ObjectWriter,
			__ks_init: function() {
				ObjectWriter.prototype.__ks_init.call(this);
			},
			__ks_cons: function(args) {
				ObjectWriter.prototype.__ks_cons.call(this, args);
			},
			__ks_func_filterExpression_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterExpression(data, this);
			},
			filterExpression: function() {
				if(arguments.length === 1) {
					return KSObjectWriter.prototype.__ks_func_filterExpression_0.apply(this, arguments);
				}
				else if(ObjectWriter.prototype.filterExpression) {
					return ObjectWriter.prototype.filterExpression.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_filterStatement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				return this._writer.filterStatement(data, this);
			},
			filterStatement: function() {
				if(arguments.length === 1) {
					return KSObjectWriter.prototype.__ks_func_filterStatement_0.apply(this, arguments);
				}
				else if(ObjectWriter.prototype.filterStatement) {
					return ObjectWriter.prototype.filterStatement.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_mode_0: function() {
				return this._writer.mode();
			},
			mode: function() {
				if(arguments.length === 0) {
					return KSObjectWriter.prototype.__ks_func_mode_0.apply(this);
				}
				else if(ObjectWriter.prototype.mode) {
					return ObjectWriter.prototype.mode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_popMode_0: function() {
				return this._writer.popMode();
			},
			popMode: function() {
				if(arguments.length === 0) {
					return KSObjectWriter.prototype.__ks_func_popMode_0.apply(this);
				}
				else if(ObjectWriter.prototype.popMode) {
					return ObjectWriter.prototype.popMode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_pushMode_0: function(mode) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.is(mode, KSWriterMode)) {
					throw new TypeError("'mode' is not of type 'KSWriterMode'");
				}
				return this._writer.pushMode(mode);
			},
			pushMode: function() {
				if(arguments.length === 1) {
					return KSObjectWriter.prototype.__ks_func_pushMode_0.apply(this, arguments);
				}
				else if(ObjectWriter.prototype.pushMode) {
					return ObjectWriter.prototype.pushMode.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_statement_0: function(data) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(!this.filterStatement(data)) {
					toAttributes(data, false, this);
					toStatement(this.transformStatement(data), this);
				}
				return this;
			},
			statement: function() {
				if(arguments.length === 1) {
					return KSObjectWriter.prototype.__ks_func_statement_0.apply(this, arguments);
				}
				else if(ObjectWriter.prototype.statement) {
					return ObjectWriter.prototype.statement.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_transformExpression_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var data = arguments[++__ks_i];
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks__;
				var writer = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this;
				return this._writer.transformExpression(data, this);
			},
			transformExpression: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSObjectWriter.prototype.__ks_func_transformExpression_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_func_transformStatement_0: function() {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				var __ks_i = -1;
				var data = arguments[++__ks_i];
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				var __ks__;
				var writer = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this;
				return this._writer.transformStatement(data, this);
			},
			transformStatement: function() {
				if(arguments.length >= 1 && arguments.length <= 2) {
					return KSObjectWriter.prototype.__ks_func_transformStatement_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		});
		function generate() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var __ks__;
			var options = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var writer = new KSWriter(options);
			toStatement(data, writer);
			return writer.toSource();
		}
		function toAttribute(data, global, writer) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(global === void 0 || global === null) {
				throw new TypeError("'global' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			return writer.code(global ? "#![" : "#[").expression(data.declaration).code("]");
		}
		function toAttributes(data, global, writer) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(global === void 0 || global === null) {
				throw new TypeError("'global' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(KSType.isValue(data.attributes) ? data.attributes.length > 0 : false) {
				for(var __ks_4 = 0, __ks_316 = data.attributes.length, attribute; __ks_4 < __ks_316; ++__ks_4) {
					attribute = data.attributes[__ks_4];
					toAttribute(attribute, global, writer.newLine()).done();
				}
				if(global) {
					writer.newLine().done();
				}
			}
		}
		function toExpression() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var writer = arguments[++__ks_i];
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			var __ks__;
			var header = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var __ks_4 = data.kind;
			if(__ks_4 === NodeKind.ArrayBinding) {
				writer.code("[");
				for(var index = 0, __ks_317 = data.elements.length, element; index < __ks_317; ++index) {
					element = data.elements[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(element);
				}
				writer.code("]");
			}
			else if(__ks_4 === NodeKind.ArrayComprehension) {
				writer.code("[").expression(data.body).run(data.loop, toLoopHeader).code("]");
			}
			else if(__ks_4 === NodeKind.ArrayExpression) {
				writer.code("[");
				for(var index = 0, __ks_317 = data.values.length, value; index < __ks_317; ++index) {
					value = data.values[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(value);
				}
				writer.code("]");
			}
			else if(__ks_4 === NodeKind.ArrayRange) {
				writer.code("[");
				if(KSType.isValue(data.from)) {
					writer.expression(data.from);
				}
				else {
					writer.expression(data.then).code("<");
				}
				if(KSType.isValue(data.to)) {
					writer.code("..").expression(data.to);
				}
				else {
					writer.code("..<").expression(data.til);
				}
				if(KSType.isValue(data.by)) {
					writer.code("..").expression(data.by);
				}
				writer.code("]");
			}
			else if(__ks_4 === NodeKind.AttributeExpression) {
				writer.expression(data.name).code("(");
				for(var index = 0, __ks_317 = data.arguments.length, argument; index < __ks_317; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_4 === NodeKind.AttributeOperation) {
				writer.expression(data.name).code(" = ").expression(data.value);
			}
			else if(__ks_4 === NodeKind.AwaitExpression) {
				writer.code("await ").expression(data.operation);
			}
			else if(__ks_4 === NodeKind.BinaryExpression) {
				writer.wrap(data.left);
				if(data.operator.kind === BinaryOperatorKind.Assignment) {
					writer.code(AssignmentOperatorSymbol[data.operator.assignment]);
				}
				else {
					writer.code(BinaryOperatorSymbol[data.operator.kind]);
				}
				writer.wrap(data.right);
			}
			else if(__ks_4 === NodeKind.BindingElement) {
				if(data.spread) {
					writer.code("...");
				}
				else if(KSType.isValue(data.alias)) {
					if(data.alias.computed) {
						writer.code("[").expression(data.alias).code("]: ");
					}
					else {
						writer.expression(data.alias).code(": ");
					}
				}
				writer.expression(data.name);
				if(KSType.isValue(data.defaultValue)) {
					writer.code(" = ").expression(data.defaultValue);
				}
			}
			else if(__ks_4 === NodeKind.Block) {
				toAttributes(data, true, writer);
				for(var __ks_317 = 0, __ks_318 = data.statements.length, statement; __ks_317 < __ks_318; ++__ks_317) {
					statement = data.statements[__ks_317];
					writer.statement(statement);
				}
			}
			else if(__ks_4 === NodeKind.CallExpression) {
				writer.expression(data.callee);
				if(data.nullable) {
					writer.code("?");
				}
				var __ks_317 = data.scope.kind;
				if(__ks_317 === ScopeKind.Argument) {
					writer.code("*$(").expression(data.scope.value);
					if(data.arguments.length) {
						writer.code(", ");
					}
				}
				else if(__ks_317 === ScopeKind.Null) {
					writer.code("**(");
				}
				else if(__ks_317 === ScopeKind.This) {
					writer.code("(");
				}
				for(var index = 0, __ks_317 = data.arguments.length, argument; index < __ks_317; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_4 === NodeKind.CallMacroExpression) {
				writer.expression(data.callee).code("!(");
				for(var index = 0, __ks_317 = data.arguments.length, argument; index < __ks_317; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_4 === NodeKind.ClassDeclaration) {
				for(var __ks_317 = 0, __ks_318 = data.modifiers.length, modifier; __ks_317 < __ks_318; ++__ks_317) {
					modifier = data.modifiers[__ks_317];
					var __ks_319 = modifier.kind;
					if(__ks_319 === ModifierKind.Abstract) {
						writer.code("abstract ");
					}
					else if(__ks_319 === ModifierKind.Sealed) {
						writer.code("sealed ");
					}
				}
				writer.code("class ").expression(data.name);
			}
			else if(__ks_4 === NodeKind.ComputedPropertyName) {
				writer.code("[").expression(data.expression).code("]");
			}
			else if(__ks_4 === NodeKind.ConditionalExpression) {
				writer.wrap(data.condition).code(" ? ").wrap(data.whenTrue).code(" : ").wrap(data.whenFalse);
			}
			else if(__ks_4 === NodeKind.CreateExpression) {
				writer.code("new ");
				if((data.class.kind === NodeKind.Identifier) || (data.class.kind === NodeKind.MemberExpression) || (data.class.kind === NodeKind.ThisExpression)) {
					writer.expression(data.class);
				}
				else {
					writer.code("(").expression(data.class).code(")");
				}
				writer.code("(");
				for(var index = 0, __ks_317 = data.arguments.length, argument; index < __ks_317; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_4 === NodeKind.CurryExpression) {
				writer.expression(data.callee);
				var __ks_317 = data.scope.kind;
				if(__ks_317 === ScopeKind.Argument) {
					writer.code("^$(").expression(data.scope.value);
					if(data.arguments.length) {
						writer.code(", ");
					}
				}
				else if(__ks_317 === ScopeKind.Null) {
					writer.code("^^(");
				}
				else if(__ks_317 === ScopeKind.This) {
					writer.code("^@(");
				}
				for(var index = 0, __ks_317 = data.arguments.length, argument; index < __ks_317; ++index) {
					argument = data.arguments[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(argument);
				}
				writer.code(")");
			}
			else if(__ks_4 === NodeKind.EnumExpression) {
				writer.expression(data.enum).code("::").expression(data.member);
			}
			else if(__ks_4 === NodeKind.FunctionDeclaration) {
				toFunctionHeader(data, function(writer) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(writer === void 0 || writer === null) {
						throw new TypeError("'writer' is not nullable");
					}
					return writer.code("func ");
				}, writer);
			}
			else if(__ks_4 === NodeKind.FunctionExpression) {
				toFunctionHeader(data, function(writer) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(writer === void 0 || writer === null) {
						throw new TypeError("'writer' is not nullable");
					}
					if(writer.mode() === KSWriterMode.Property) {
						if(KSType.isValue(header)) {
							header(writer);
						}
					}
					else {
						writer.code("func");
					}
				}, writer);
				if(KSType.isValue(data.body)) {
					if(data.body.kind === NodeKind.Block) {
						writer.newBlock().expression(data.body).done();
					}
					else {
						writer.code(" => ").expression(data.body);
					}
				}
			}
			else if(__ks_4 === NodeKind.Identifier) {
				writer.code(data.name);
			}
			else if(__ks_4 === NodeKind.IfExpression) {
				writer.expression(data.whenTrue).code(" if ").expression(data.condition);
				if(KSType.isValue(data.whenFalse)) {
					writer.code(" else ").expression(data.whenFalse);
				}
			}
			else if(__ks_4 === NodeKind.ImportArgument) {
				if(data.seeped) {
					writer.code("seep ");
				}
				if(data.imported.start.column === data.local.start.column) {
					writer.expression(data.local);
				}
				else {
					writer.expression(data.imported).code(": ").expression(data.local);
				}
			}
			else if(__ks_4 === NodeKind.ImportDeclarator) {
				writer.expression(data.source);
				if(KSType.isValue(data.arguments) ? data.arguments.length !== 0 : false) {
					writer.code("(");
					for(var index = 0, __ks_317 = data.arguments.length, argument; index < __ks_317; ++index) {
						argument = data.arguments[index];
						if(index !== 0) {
							writer.code(", ");
						}
						writer.expression(argument);
					}
					writer.code(")");
				}
				if(data.specifiers.length === 1) {
					var specifier = data.specifiers[0];
					var __ks_317 = specifier.kind;
					if(__ks_317 === NodeKind.ImportSpecifier) {
						writer.code(" for ").expression(specifier);
					}
					else if(__ks_317 === NodeKind.ImportNamespaceSpecifier) {
						writer.code(" => ").expression(specifier);
					}
				}
				else if(data.specifiers.length !== 0) {
					var block = writer.newBlock();
					for(var __ks_317 = 0, __ks_318 = data.specifiers.length, specifier; __ks_317 < __ks_318; ++__ks_317) {
						specifier = data.specifiers[__ks_317];
						block.newLine().expression(specifier).done();
					}
					block.done();
				}
			}
			else if(__ks_4 === NodeKind.ImportNamespaceSpecifier) {
				writer.expression(data.local);
				if(KSType.isValue(data.specifiers) ? data.specifiers.length !== 0 : false) {
					var block = writer.newBlock();
					for(var __ks_317 = 0, __ks_318 = data.specifiers.length, specifier; __ks_317 < __ks_318; ++__ks_317) {
						specifier = data.specifiers[__ks_317];
						block.newLine().expression(specifier).done();
					}
					block.done();
				}
			}
			else if(__ks_4 === NodeKind.ImportSpecifier) {
				writer.expression(data.imported);
				if(!((data.imported.kind === NodeKind.ClassDeclaration) || (data.imported.kind === NodeKind.FunctionDeclaration) || (data.imported.kind === NodeKind.VariableDeclarator)) || (data.local.name !== data.imported.name.name)) {
					writer.code(" => ").expression(data.local);
				}
			}
			else if(__ks_4 === NodeKind.LambdaExpression) {
				toFunctionHeader(data, function(writer) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(writer === void 0 || writer === null) {
						throw new TypeError("'writer' is not nullable");
					}
				}, writer);
				if(data.body.kind === NodeKind.Block) {
					writer.code(" =>").newBlock().expression(data.body).done();
				}
				else {
					writer.code(" => ").expression(data.body);
				}
			}
			else if(__ks_4 === NodeKind.Literal) {
				writer.code(toQuote(data.value));
			}
			else if(__ks_4 === NodeKind.MacroExpression) {
				writer.code("macro ");
				if(data.multilines) {
					var o = writer.newObject();
					var line = o.newLine();
					toMacroElements(data.elements, line, o);
					o.done();
				}
				else {
					toMacroElements(data.elements, writer);
				}
			}
			else if(__ks_4 === NodeKind.MemberExpression) {
				writer.wrap(data.object);
				if(data.nullable) {
					writer.code("?");
				}
				if(data.computed) {
					writer.code("[").expression(data.property).code("]");
				}
				else {
					writer.code(".").expression(data.property);
				}
			}
			else if(__ks_4 === NodeKind.NumericExpression) {
				writer.code(data.value);
			}
			else if(__ks_4 === NodeKind.ObjectBinding) {
				writer.code("{");
				for(var index = 0, __ks_317 = data.elements.length, element; index < __ks_317; ++index) {
					element = data.elements[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(element);
				}
				writer.code("}");
			}
			else if(__ks_4 === NodeKind.ObjectExpression) {
				var o = writer.newObject();
				o.pushMode(KSWriterMode.Property);
				for(var __ks_317 = 0, __ks_318 = data.properties.length, property; __ks_317 < __ks_318; ++__ks_317) {
					property = data.properties[__ks_317];
					toAttributes(property, false, o);
					o.newLine().expression(property).done();
				}
				o.popMode();
				o.done();
			}
			else if(__ks_4 === NodeKind.ObjectMember) {
				var value = KSType.isValue(data.value) ? data.value : data.type;
				if(KSType.isValue(value)) {
					var element = writer.transformExpression(value);
					if(element.kind === NodeKind.FunctionExpression) {
						toExpression(element, writer, function(writer) {
							if(arguments.length < 1) {
								throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
							}
							if(writer === void 0 || writer === null) {
								throw new TypeError("'writer' is not nullable");
							}
							return writer.expression(data.name);
						});
					}
					else {
						writer.expression(data.name).code(": ").expression(element);
					}
				}
				else {
					writer.expression(data.name);
				}
			}
			else if(__ks_4 === NodeKind.OmittedExpression) {
				if(data.spread) {
					writer.code("...");
				}
			}
			else if(__ks_4 === NodeKind.Parameter) {
				for(var __ks_317 = 0, __ks_318 = data.modifiers.length, modifier; __ks_317 < __ks_318; ++__ks_317) {
					modifier = data.modifiers[__ks_317];
					var __ks_319 = modifier.kind;
					if(__ks_319 === ModifierKind.AutoEvaluate) {
						writer.code("@");
					}
					else if(__ks_319 === ModifierKind.Rest) {
						writer.code("...");
						if((modifier.arity.min !== 0) || (modifier.arity.max !== Infinity)) {
							writer.code("{");
							if(modifier.arity.min === modifier.arity.max) {
								writer.code(modifier.arity.min);
							}
							else {
								if(modifier.arity.min !== 0) {
									writer.code(modifier.arity.min);
								}
								writer.code(",");
								if(modifier.arity.max !== Infinity) {
									writer.code(modifier.arity.max);
								}
							}
							writer.code("}");
						}
					}
					else if(__ks_319 === ModifierKind.ThisAlias) {
						writer.code("@");
					}
				}
				if(KSType.isValue(data.name)) {
					writer.expression(data.name);
					for(var __ks_317 = 0, __ks_318 = data.modifiers.length, modifier; __ks_317 < __ks_318; ++__ks_317) {
						modifier = data.modifiers[__ks_317];
						var __ks_319 = modifier.kind;
						if(__ks_319 === ModifierKind.SetterAlias) {
							writer.code("()");
						}
					}
				}
				if(KSType.isValue(data.type)) {
					writer.code(": ").expression(data.type);
				}
				if(KSType.isValue(data.defaultValue)) {
					writer.code(" = ").expression(data.defaultValue);
				}
			}
			else if(__ks_4 === NodeKind.PolyadicExpression) {
				writer.wrap(data.operands[0]);
				for(var __ks_317 = 1, __ks_318 = data.operands.length, operand; __ks_317 < __ks_318; ++__ks_317) {
					operand = data.operands[__ks_317];
					writer.code(BinaryOperatorSymbol[data.operator.kind]).wrap(operand);
				}
			}
			else if(__ks_4 === NodeKind.RegularExpression) {
				writer.code(data.value);
			}
			else if(__ks_4 === NodeKind.SequenceExpression) {
				writer.code("(");
				for(var index = 0, __ks_317 = data.expressions.length, expression; index < __ks_317; ++index) {
					expression = data.expressions[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(expression);
				}
				writer.code(")");
			}
			else if(__ks_4 === NodeKind.ShorthandProperty) {
				writer.expression(data.name);
			}
			else if(__ks_4 === NodeKind.SwitchConditionArray) {
				writer.code("[");
				for(var index = 0, __ks_317 = data.values.length, value; index < __ks_317; ++index) {
					value = data.values[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(value);
				}
				writer.code("]");
			}
			else if(__ks_4 === NodeKind.SwitchConditionObject) {
				writer.code("{");
				for(var index = 0, __ks_317 = data.members.length, member; index < __ks_317; ++index) {
					member = data.members[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(member);
				}
				writer.code("}");
			}
			else if(__ks_4 === NodeKind.SwitchConditionRange) {
				if(KSType.isValue(data.from)) {
					writer.expression(data.from);
				}
				else {
					writer.expression(data.then).code("<");
				}
				if(KSType.isValue(data.to)) {
					writer.code("..").expression(data.to);
				}
				else {
					writer.code("..<").expression(data.til);
				}
				if(KSType.isValue(data.by)) {
					writer.code("..").expression(data.by);
				}
			}
			else if(__ks_4 === NodeKind.SwitchConditionType) {
				writer.code("is ").expression(data.type);
			}
			else if(__ks_4 === NodeKind.SwitchExpression) {
				writer.code("switch ").expression(data.expression);
				var block = writer.newBlock();
				for(var __ks_317 = 0, __ks_318 = data.clauses.length, clause; __ks_317 < __ks_318; ++__ks_317) {
					clause = data.clauses[__ks_317];
					block.statement(clause);
				}
				block.done();
			}
			else if(__ks_4 === NodeKind.SwitchTypeCasting) {
				writer.expression(data.name).code(" as ").expression(data.type);
			}
			else if(__ks_4 === NodeKind.TaggedTemplateExpression) {
				writer.expression(data.tag).expression(data.template);
			}
			else if(__ks_4 === NodeKind.TemplateExpression) {
				writer.code("`");
				for(var __ks_317 = 0, __ks_318 = data.elements.length, element; __ks_317 < __ks_318; ++__ks_317) {
					element = data.elements[__ks_317];
					if(element.kind === NodeKind.Literal) {
						writer.code(element.value);
					}
					else {
						writer.code("\\(").expression(element).code(")");
					}
				}
				writer.code("`");
			}
			else if(__ks_4 === NodeKind.ThisExpression) {
				writer.code("@").expression(data.name);
			}
			else if(__ks_4 === NodeKind.TypeReference) {
				if(KSType.isValue(data.properties)) {
					var o = writer.newObject();
					o.pushMode(KSWriterMode.Property);
					for(var __ks_317 = 0, __ks_318 = data.properties.length, property; __ks_317 < __ks_318; ++__ks_317) {
						property = data.properties[__ks_317];
						o.statement(property);
					}
					o.popMode();
					o.done();
				}
				else {
					writer.expression(data.typeName);
					if(KSType.isValue(data.typeParameters)) {
						writer.code("<");
						for(var index = 0, __ks_317 = data.typeParameters.length, parameter; index < __ks_317; ++index) {
							parameter = data.typeParameters[index];
							if(index !== 0) {
								writer.code(", ");
							}
							writer.expression(parameter);
						}
						writer.code(">");
					}
					if(data.nullable) {
						writer.code("?");
					}
				}
			}
			else if(__ks_4 === NodeKind.UnaryExpression) {
				if(KSType.isValue(UnaryPrefixOperatorSymbol[data.operator.kind])) {
					writer.code(UnaryPrefixOperatorSymbol[data.operator.kind]).wrap(data.argument);
				}
				else {
					writer.wrap(data.argument).code(UnaryPostfixOperatorSymbol[data.operator.kind]);
				}
			}
			else if(__ks_4 === NodeKind.UnionType) {
				for(var index = 0, __ks_317 = data.types.length, type; index < __ks_317; ++index) {
					type = data.types[index];
					if(index !== 0) {
						writer.code((type.kind === NodeKind.FunctionExpression) ? " || " : " | ");
					}
					writer.expression(type);
				}
			}
			else if(__ks_4 === NodeKind.UnlessExpression) {
				writer.expression(data.whenFalse).code(" unless ").expression(data.condition);
			}
			else if(__ks_4 === NodeKind.VariableDeclarator) {
				if(data.sealed) {
					writer.code("const ");
				}
				writer.expression(data.name);
				if(KSType.isValue(data.type)) {
					writer.code(": ").expression(data.type);
				}
			}
			else {
				console.error(data);
				throw new Error("Not Implemented");
			}
		}
		function toFunctionHeader(data, header, writer) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(header === void 0 || header === null) {
				throw new TypeError("'header' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			if(KSType.isValue(data.modifiers)) {
				for(var __ks_4 = 0, __ks_320 = data.modifiers.length, modifier; __ks_4 < __ks_320; ++__ks_4) {
					modifier = data.modifiers[__ks_4];
					var __ks_321 = modifier.kind;
					if(__ks_321 === ModifierKind.Abstract) {
						writer.code("abstract ");
					}
					else if(__ks_321 === ModifierKind.Async) {
						writer.code("async ");
					}
					else if(__ks_321 === ModifierKind.Override) {
						writer.code("override ");
					}
					else if(__ks_321 === ModifierKind.Private) {
						writer.code("private ");
					}
					else if(__ks_321 === ModifierKind.Protected) {
						writer.code("protected ");
					}
					else if(__ks_321 === ModifierKind.Public) {
						writer.code("public ");
					}
					else if(__ks_321 === ModifierKind.Static) {
						writer.code("static ");
					}
				}
			}
			header(writer);
			if(KSType.isValue(data.name)) {
				writer.expression(data.name);
			}
			if(KSType.isValue(data.parameters)) {
				writer.code("(");
				for(var i = 0, __ks_4 = data.parameters.length, parameter; i < __ks_4; ++i) {
					parameter = data.parameters[i];
					if(i !== 0) {
						writer.code(", ");
					}
					writer.expression(parameter);
				}
				writer.code(")");
			}
			if(KSType.isValue(data.type)) {
				writer.code(": ").expression(data.type);
			}
			if(KSType.isValue(data.throws) ? data.throws.length > 0 : false) {
				writer.code(" ~ ");
				for(var index = 0, __ks_4 = data.throws.length, __ks_throw_1; index < __ks_4; ++index) {
					__ks_throw_1 = data.throws[index];
					if(index !== 0) {
						writer.code(", ");
					}
					writer.expression(__ks_throw_1);
				}
			}
		}
		function toLoopHeader(data, writer) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			var __ks_4 = data.kind;
			if(__ks_4 === NodeKind.ForInStatement) {
				writer.code(" for ");
				if(KSType.isValue(data.value)) {
					writer.expression(data.value);
					if(KSType.isValue(data.index)) {
						writer.code(", ").expression(data.index);
					}
				}
				else {
					writer.code(":").expression(data.index);
				}
				writer.code(" in ").expression(data.expression);
				if(KSType.isValue(data.when)) {
					writer.code(" when ").expression(data.when);
				}
			}
			else {
				console.error(data);
				throw new Error("Not Implemented");
			}
		}
		function toMacroElements() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var elements = arguments[++__ks_i];
			if(elements === void 0 || elements === null) {
				throw new TypeError("'elements' is not nullable");
			}
			var writer = arguments[++__ks_i];
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			var __ks__;
			var parent = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var last = elements.length - 1;
			for(var index = 0, __ks_4 = elements.length, element; index < __ks_4; ++index) {
				element = elements[index];
				var __ks_322 = element.kind;
				if(__ks_322 === MacroElementKind.Expression) {
					writer.code("#");
					if((element.reification.kind === ReificationKind.Expression) && (element.expression.kind === NodeKind.Identifier)) {
						writer.expression(element.expression);
					}
					else {
						var __ks_323 = element.reification.kind;
						if(__ks_323 === ReificationKind.Arguments) {
							writer.code("a");
						}
						else if(__ks_323 === ReificationKind.Block) {
							writer.code("b");
						}
						else if(__ks_323 === ReificationKind.Expression) {
							writer.code("e");
						}
						else if(__ks_323 === ReificationKind.Identifier) {
							writer.code("i");
						}
						writer.code("(").expression(element.expression).code(")");
					}
				}
				else if(__ks_322 === MacroElementKind.Literal) {
					writer.code(element.value);
				}
				else if(__ks_322 === MacroElementKind.NewLine) {
					if((index !== 0) && (index !== last) && (elements[index - 1].kind !== MacroElementKind.NewLine)) {
						parent.newLine();
					}
				}
			}
		}
		function toQuote(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			return "\"" + value.replace(/"/g, "\\\"").replace(/\n/g, "\\n") + "\"";
		}
		function toStatement(data, writer) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			var __ks_4 = data.kind;
			if(__ks_4 === NodeKind.AccessorDeclaration) {
				var line = writer.newLine().code("get");
				if(KSType.isValue(data.body)) {
					if(data.body.kind === NodeKind.Block) {
						line.newBlock().expression(data.body).done();
					}
					else {
						line.code(" => ").expression(data.body);
					}
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.BreakStatement) {
				writer.newLine().code("break").done();
			}
			else if(__ks_4 === NodeKind.CatchClause) {
				if(KSType.isValue(data.type)) {
					writer.code("on ").expression(data.type);
					if(KSType.isValue(data.binding)) {
						writer.code(" catch ").expression(data.binding);
					}
				}
				else {
					writer.code("catch");
					if(KSType.isValue(data.binding)) {
						writer.code(" ").expression(data.binding);
					}
				}
				writer.step().expression(data.body);
			}
			else if(__ks_4 === NodeKind.ClassDeclaration) {
				var line = writer.newLine();
				for(var __ks_324 = 0, __ks_325 = data.modifiers.length, modifier; __ks_324 < __ks_325; ++__ks_324) {
					modifier = data.modifiers[__ks_324];
					var __ks_326 = modifier.kind;
					if(__ks_326 === ModifierKind.Abstract) {
						line.code("abstract ");
					}
					else if(__ks_326 === ModifierKind.Sealed) {
						line.code("sealed ");
					}
				}
				line.code("class ").expression(data.name);
				if(KSType.isValue(data.version)) {
					line.code("@" + data.version.major + "." + data.version.minor + "." + data.version.patch);
				}
				if(KSType.isValue(data.extends)) {
					line.code(" extends ").expression(data.extends);
				}
				if(data.members.length !== 0) {
					var block = line.newBlock();
					for(var __ks_324 = 0, __ks_325 = data.members.length, member; __ks_324 < __ks_325; ++__ks_324) {
						member = data.members[__ks_324];
						block.statement(member);
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.ContinueStatement) {
				writer.newLine().code("continue").done();
			}
			else if(__ks_4 === NodeKind.DestroyStatement) {
				writer.newLine().code("delete ").expression(data.variable).done();
			}
			else if(__ks_4 === NodeKind.DoUntilStatement) {
				writer.newControl().code("do").step().expression(data.body).step().code("until ").expression(data.condition).done();
			}
			else if(__ks_4 === NodeKind.DoWhileStatement) {
				writer.newControl().code("do").step().expression(data.body).step().code("while ").expression(data.condition).done();
			}
			else if(__ks_4 === NodeKind.EnumDeclaration) {
				var line = writer.newLine().code("enum ").expression(data.name);
				if(KSType.isValue(data.type)) {
					line.code("<").expression(data.type).code(">");
				}
				var block = line.newBlock();
				for(var __ks_324 = 0, __ks_325 = data.members.length, member; __ks_324 < __ks_325; ++__ks_324) {
					member = data.members[__ks_324];
					block.statement(member);
				}
				block.done();
				line.done();
			}
			else if(__ks_4 === NodeKind.EnumMember) {
				var line = writer.newLine().expression(data.name);
				if(KSType.isValue(data.value)) {
					line.code(" = ").expression(data.value);
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.ExportDeclaration) {
				var line = writer.newLine();
				if(data.declarations.length === 1) {
					line.code("export ").statement(data.declarations[0]);
				}
				else {
					var block = line.code("export").newBlock();
					for(var __ks_324 = 0, __ks_325 = data.declarations.length, declaration; __ks_324 < __ks_325; ++__ks_324) {
						declaration = data.declarations[__ks_324];
						block.statement(declaration);
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.ExportDeclarationSpecifier) {
				writer.newLine().statement(data.declaration).done();
			}
			else if(__ks_4 === NodeKind.ExportNamedSpecifier) {
				if((data.local.kind === data.exported.kind) && (data.local.name === data.exported.name)) {
					writer.newLine().code(data.local.name).done();
				}
				else {
					writer.newLine().expression(data.local).code(" => " + data.exported.name).done();
				}
			}
			else if(__ks_4 === NodeKind.ExportPropertiesSpecifier) {
				var line = writer.newLine();
				line.expression(data.object);
				if(data.properties.length === 1) {
					line.code(" for ").statement(data.dpropertieseclarations[0]);
				}
				else {
					var block = line.code(" for").newBlock();
					for(var __ks_324 = 0, __ks_325 = data.properties.length, property; __ks_324 < __ks_325; ++__ks_324) {
						property = data.properties[__ks_324];
						block.statement(property);
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.ExportWildcardSpecifier) {
				writer.newLine().expression(data.local).code(" for *").done();
			}
			else if(__ks_4 === NodeKind.ExternDeclaration) {
				var line = writer.newLine();
				if(data.declarations.length === 1) {
					line.code("extern ").statement(data.declarations[0]);
				}
				else {
					writer.pushMode(KSWriterMode.Extern);
					var block = line.code("extern").newBlock();
					for(var __ks_324 = 0, __ks_325 = data.declarations.length, declaration; __ks_324 < __ks_325; ++__ks_324) {
						declaration = data.declarations[__ks_324];
						block.statement(declaration);
					}
					block.done();
					writer.popMode();
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.ExternOrRequireDeclaration) {
				var line = writer.newLine();
				if(data.declarations.length === 1) {
					line.code("extern|require ").statement(data.declarations[0]);
				}
				else {
					writer.pushMode(KSWriterMode.Extern);
					var block = line.code("extern|require").newBlock();
					for(var __ks_324 = 0, __ks_325 = data.declarations.length, declaration; __ks_324 < __ks_325; ++__ks_324) {
						declaration = data.declarations[__ks_324];
						block.statement(declaration);
					}
					block.done();
					writer.popMode();
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.FieldDeclaration) {
				var line = writer.newLine();
				for(var __ks_324 = 0, __ks_325 = data.modifiers.length, modifier; __ks_324 < __ks_325; ++__ks_324) {
					modifier = data.modifiers[__ks_324];
					var __ks_326 = modifier.kind;
					if(__ks_326 === ModifierKind.Private) {
						line.code("private ");
					}
					else if(__ks_326 === ModifierKind.Protected) {
						line.code("protected ");
					}
					else if(__ks_326 === ModifierKind.Public) {
						line.code("public ");
					}
					else if(__ks_326 === ModifierKind.Static) {
						line.code("static ");
					}
				}
				line.expression(data.name);
				if(KSType.isValue(data.type)) {
					line.code(": ").expression(data.type);
				}
				if(KSType.isValue(data.defaultValue)) {
					line.code(" = ").expression(data.defaultValue);
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.ForFromStatement) {
				var ctrl = writer.newControl().code("for ");
				if(data.declaration) {
					if(data.rebindable) {
						ctrl.code("let ");
					}
					else {
						ctrl.code("const ");
					}
				}
				ctrl.expression(data.variable).code(" from ").expression(data.from);
				if(KSType.isValue(data.til)) {
					ctrl.code(" til ").expression(data.til);
				}
				else {
					ctrl.code(" to ").expression(data.to);
				}
				if(KSType.isValue(data.by)) {
					ctrl.code(" by ").expression(data.by);
				}
				if(KSType.isValue(data.until)) {
					ctrl.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					ctrl.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					ctrl.code(" when ").expression(data.when);
				}
				ctrl.step().expression(data.body).done();
			}
			else if(__ks_4 === NodeKind.ForInStatement) {
				var ctrl;
				if(data.body.kind === NodeKind.Block) {
					ctrl = writer.newControl().code("for ");
				}
				else {
					ctrl = writer.newLine().expression(data.body).code(" for ");
				}
				if(data.declaration) {
					if(data.rebindable) {
						ctrl.code("let ");
					}
					else {
						ctrl.code("const ");
					}
				}
				if(KSType.isValue(data.value)) {
					ctrl.expression(data.value);
					if(KSType.isValue(data.index)) {
						ctrl.code(", ").expression(data.index);
					}
				}
				else {
					ctrl.code(":").expression(data.index);
				}
				ctrl.code(" in ").expression(data.expression);
				if(data.desc) {
					ctrl.code(" desc");
				}
				if(KSType.isValue(data.from)) {
					ctrl.code(" from ").expression(data.from);
				}
				if(KSType.isValue(data.til)) {
					ctrl.code(" til ").expression(data.til);
				}
				else if(KSType.isValue(data.to)) {
					ctrl.code(" to ").expression(data.to);
				}
				if(KSType.isValue(data.until)) {
					ctrl.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					ctrl.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					ctrl.code(" when ").expression(data.when);
				}
				if(data.body.kind === NodeKind.Block) {
					ctrl.step().expression(data.body);
				}
				ctrl.done();
			}
			else if(__ks_4 === NodeKind.ForRangeStatement) {
				var ctrl = writer.newControl().code("for ");
				if(data.declaration) {
					if(data.rebindable) {
						ctrl.code("let ");
					}
					else {
						ctrl.code("const ");
					}
				}
				ctrl.expression(data.value).code(" in ");
				if(KSType.isValue(data.from)) {
					ctrl.expression(data.from);
				}
				else {
					ctrl.expression(data.then).code("<");
				}
				if(KSType.isValue(data.to)) {
					ctrl.code("..").expression(data.to);
				}
				else {
					ctrl.code("..<").expression(data.til);
				}
				if(KSType.isValue(data.by)) {
					ctrl.code("..").expression(data.by);
				}
				if(KSType.isValue(data.until)) {
					ctrl.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					ctrl.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					ctrl.code(" when ").expression(data.when);
				}
				ctrl.step().expression(data.body);
				ctrl.done();
			}
			else if(__ks_4 === NodeKind.ForOfStatement) {
				var ctrl;
				if(data.body.kind === NodeKind.Block) {
					ctrl = writer.newControl().code("for ");
				}
				else {
					ctrl = writer.newLine().expression(data.body).code(" for ");
				}
				if(data.declaration) {
					if(data.rebindable) {
						ctrl.code("let ");
					}
					else {
						ctrl.code("const ");
					}
				}
				if(KSType.isValue(data.key)) {
					ctrl.expression(data.key);
					if(KSType.isValue(data.value)) {
						ctrl.code(", ").expression(data.value);
					}
				}
				else {
					ctrl.code(":").expression(data.value);
				}
				ctrl.code(" of ").expression(data.expression);
				if(KSType.isValue(data.until)) {
					ctrl.code(" until ").expression(data.until);
				}
				else if(KSType.isValue(data.while)) {
					ctrl.code(" while ").expression(data.while);
				}
				if(KSType.isValue(data.when)) {
					ctrl.code(" when ").expression(data.when);
				}
				if(data.body.kind === NodeKind.Block) {
					ctrl.step().expression(data.body);
				}
				ctrl.done();
			}
			else if(__ks_4 === NodeKind.FunctionDeclaration) {
				var line = writer.newLine();
				toFunctionHeader(data, function(writer) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(writer === void 0 || writer === null) {
						throw new TypeError("'writer' is not nullable");
					}
					if(writer.mode() !== KSWriterMode.Extern) {
						writer.code("func ");
					}
				}, line);
				if(KSType.isValue(data.body)) {
					if(data.body.kind === NodeKind.Block) {
						line.newBlock().expression(data.body).done();
					}
					else {
						line.code(" => ").expression(data.body);
					}
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.IfStatement) {
				var __ks_324 = data.whenTrue.kind;
				if(__ks_324 === NodeKind.Block) {
					var ctrl = writer.newControl().code("if ").expression(data.condition).step().expression(data.whenTrue);
					while(KSType.isValue(data) && KSType.isValue(data.whenFalse)) {
						if(data.whenFalse.kind === NodeKind.IfStatement) {
							data = data.whenFalse;
							ctrl.step().code("else if ").expression(data.condition).step().expression(data.whenTrue);
						}
						else {
							ctrl.step().code("else").step().expression(data.whenFalse);
							data = null;
						}
					}
					ctrl.done();
				}
				else if(__ks_324 === NodeKind.ThrowStatement) {
					writer.newLine().code("throw ").expression(data.whenTrue.value).code(" if ").expression(data.condition).done();
				}
				else {
					writer.newLine().expression(data.whenTrue).code(" if ").expression(data.condition).done();
				}
			}
			else if(__ks_4 === NodeKind.ImplementDeclaration) {
				var line = writer.newLine().code("impl ").expression(data.variable);
				var block = line.newBlock();
				for(var __ks_324 = 0, __ks_325 = data.properties.length, property; __ks_324 < __ks_325; ++__ks_324) {
					property = data.properties[__ks_324];
					block.statement(property);
				}
				block.done();
				line.done();
			}
			else if(__ks_4 === NodeKind.ImportDeclaration) {
				var line = writer.newLine();
				if(data.declarations.length === 1) {
					line.code("import ").expression(data.declarations[0]);
				}
				else {
					var block = line.code("import").newBlock();
					for(var __ks_324 = 0, __ks_325 = data.declarations.length, declaration; __ks_324 < __ks_325; ++__ks_324) {
						declaration = data.declarations[__ks_324];
						block.newLine().expression(declaration).done();
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.IncludeAgainDeclaration) {
				var line = writer.newLine();
				if(data.files.length === 1) {
					line.code("include again ").code(toQuote(data.files[0]));
				}
				else {
					var block = line.code("include again").newBlock();
					for(var __ks_324 = 0, __ks_325 = data.files.length, file; __ks_324 < __ks_325; ++__ks_324) {
						file = data.files[__ks_324];
						block.newLine().code(toQuote(file)).done();
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.IncludeDeclaration) {
				var line = writer.newLine();
				if(data.files.length === 1) {
					line.code("include ").code(toQuote(data.files[0]));
				}
				else {
					var block = line.code("include").newBlock();
					for(var __ks_324 = 0, __ks_325 = data.files.length, file; __ks_324 < __ks_325; ++__ks_324) {
						file = data.files[__ks_324];
						block.newLine().code(toQuote(file)).done();
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.MacroDeclaration) {
				var line = writer.newLine();
				toFunctionHeader(data, function(writer) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(writer === void 0 || writer === null) {
						throw new TypeError("'writer' is not nullable");
					}
					writer.code("macro ");
				}, line);
				if(data.body.kind === NodeKind.MacroExpression) {
					line.code(" => ");
					toMacroElements(data.body.elements, line);
				}
				else {
					line.newBlock().expression(data.body).done();
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.MethodDeclaration) {
				var line = writer.newLine();
				toFunctionHeader(data, function(writer) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(writer === void 0 || writer === null) {
						throw new TypeError("'writer' is not nullable");
					}
				}, line);
				if(KSType.isValue(data.body)) {
					if(data.body.kind === NodeKind.Block) {
						line.newBlock().expression(data.body).done();
					}
					else {
						line.code(" => ").expression(data.body);
					}
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.Module) {
				toAttributes(data, true, writer);
				for(var __ks_324 = 0, __ks_325 = data.body.length, node; __ks_324 < __ks_325; ++__ks_324) {
					node = data.body[__ks_324];
					writer.statement(node);
				}
			}
			else if(__ks_4 === NodeKind.MutatorDeclaration) {
				var line = writer.newLine().code("set");
				if(KSType.isValue(data.body)) {
					if(data.body.kind === NodeKind.Block) {
						line.newBlock().expression(data.body).done();
					}
					else {
						line.code(" => ").expression(data.body);
					}
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.NamespaceDeclaration) {
				var line = writer.newLine();
				for(var __ks_324 = 0, __ks_325 = data.modifiers.length, modifier; __ks_324 < __ks_325; ++__ks_324) {
					modifier = data.modifiers[__ks_324];
					var __ks_326 = modifier.kind;
					if(__ks_326 === ModifierKind.Sealed) {
						line.code("sealed ");
					}
				}
				line.code("namespace ").expression(data.name);
				if(data.statements.length !== 0) {
					var block = line.newBlock();
					for(var __ks_324 = 0, __ks_325 = data.statements.length, statement; __ks_324 < __ks_325; ++__ks_324) {
						statement = data.statements[__ks_324];
						block.statement(statement);
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.PropertyDeclaration) {
				var line = writer.newLine();
				for(var __ks_324 = 0, __ks_325 = data.modifiers.length, modifier; __ks_324 < __ks_325; ++__ks_324) {
					modifier = data.modifiers[__ks_324];
					var __ks_326 = modifier.kind;
					if(__ks_326 === ModifierKind.Private) {
						line.code("private ");
					}
					else if(__ks_326 === ModifierKind.Protected) {
						line.code("protected ");
					}
					else if(__ks_326 === ModifierKind.Public) {
						line.code("public ");
					}
				}
				line.expression(data.name);
				if(KSType.isValue(data.type)) {
					line.code(": ").expression(data.type);
				}
				var block = line.newBlock();
				if(KSType.isValue(data.accessor)) {
					block.statement(data.accessor);
				}
				if(KSType.isValue(data.mutator)) {
					block.statement(data.mutator);
				}
				block.done();
				if(KSType.isValue(data.defaultValue)) {
					line.code(" = ");
					line.expression(data.defaultValue);
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.RequireDeclaration) {
				var line = writer.newLine();
				if(data.declarations.length === 1) {
					line.code("require ").statement(data.declarations[0]);
				}
				else {
					writer.pushMode(KSWriterMode.Extern);
					var block = line.code("require").newBlock();
					for(var __ks_324 = 0, __ks_325 = data.declarations.length, declaration; __ks_324 < __ks_325; ++__ks_324) {
						declaration = data.declarations[__ks_324];
						block.statement(declaration);
					}
					block.done();
					writer.popMode();
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.RequireOrExternDeclaration) {
				var line = writer.newLine();
				if(data.declarations.length === 1) {
					line.code("require|extern ").statement(data.declarations[0]);
				}
				else {
					writer.pushMode(KSWriterMode.Extern);
					var block = line.code("require|extern").newBlock();
					for(var __ks_324 = 0, __ks_325 = data.declarations.length, declaration; __ks_324 < __ks_325; ++__ks_324) {
						declaration = data.declarations[__ks_324];
						block.statement(declaration);
					}
					block.done();
					writer.popMode();
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.RequireOrImportDeclaration) {
				var line = writer.newLine();
				if(data.declarations.length === 1) {
					line.code("require|import ").expression(data.declarations[0]);
				}
				else {
					var block = line.code("require|import").newBlock();
					for(var __ks_324 = 0, __ks_325 = data.declarations.length, declaration; __ks_324 < __ks_325; ++__ks_324) {
						declaration = data.declarations[__ks_324];
						block.newLine().expression(declaration).done();
					}
					block.done();
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.ReturnStatement) {
				if(KSType.isValue(data.value)) {
					writer.newLine().code("return ").expression(data.value).done();
				}
				else {
					writer.newLine().code("return").done();
				}
			}
			else if(__ks_4 === NodeKind.SwitchClause) {
				var line = writer.newLine();
				if(data.conditions.length !== 0) {
					for(var index = 0, __ks_324 = data.conditions.length, condition; index < __ks_324; ++index) {
						condition = data.conditions[index];
						if(index !== 0) {
							line.code(", ");
						}
						line.expression(condition);
					}
					line.code(" ");
				}
				if(data.bindings.length !== 0) {
					line.code("with ");
					for(var index = 0, __ks_324 = data.bindings.length, binding; index < __ks_324; ++index) {
						binding = data.bindings[index];
						if(index !== 0) {
							line.code(", ");
						}
						line.expression(binding);
					}
					line.code(" ");
				}
				if(KSType.isValue(data.filter)) {
					line.code("where ").expression(data.filter).code(" ");
				}
				if(data.body.kind === NodeKind.Block) {
					line.code("=>").newBlock().expression(data.body).done();
				}
				else {
					line.code("=> ").statement(data.body);
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.SwitchStatement) {
				var ctrl = writer.newControl().code("switch ").expression(data.expression).step();
				for(var __ks_324 = 0, __ks_325 = data.clauses.length, clause; __ks_324 < __ks_325; ++__ks_324) {
					clause = data.clauses[__ks_324];
					ctrl.statement(clause);
				}
				ctrl.done();
			}
			else if(__ks_4 === NodeKind.ThrowStatement) {
				writer.newLine().code("throw ").expression(data.value).done();
			}
			else if(__ks_4 === NodeKind.TryStatement) {
				var ctrl = writer.newControl().code("try").step().expression(data.body);
				for(var __ks_324 = 0, __ks_325 = data.catchClauses.length, clause; __ks_324 < __ks_325; ++__ks_324) {
					clause = data.catchClauses[__ks_324];
					ctrl.step().statement(clause);
				}
				if(KSType.isValue(data.catchClause)) {
					ctrl.step().statement(data.catchClause);
				}
				if(KSType.isValue(data.finalizer)) {
					ctrl.step().code("finally").step().expression(data.finalizer);
				}
				ctrl.done();
			}
			else if(__ks_4 === NodeKind.TypeAliasDeclaration) {
				writer.newLine().code("type ").expression(data.name).code(" = ").expression(data.type).done();
			}
			else if(__ks_4 === NodeKind.UnlessStatement) {
				var __ks_324 = data.whenFalse.kind;
				if(__ks_324 === NodeKind.Block) {
					var ctrl = writer.newControl().code("unless ").expression(data.condition).step().expression(data.whenFalse);
					ctrl.done();
				}
				else if(__ks_324 === NodeKind.ReturnStatement) {
					writer.newLine().code("return ").expression(data.whenFalse.value).code(" unless ").expression(data.condition).done();
				}
				else if(__ks_324 === NodeKind.ThrowStatement) {
					writer.newLine().code("throw ").expression(data.whenFalse.value).code(" unless ").expression(data.condition).done();
				}
				else {
					writer.newLine().expression(data.whenFalse).code(" unless ").expression(data.condition).done();
				}
			}
			else if(__ks_4 === NodeKind.UntilStatement) {
				writer.newControl().code("until ").expression(data.condition).step().expression(data.body).done();
			}
			else if(__ks_4 === NodeKind.VariableDeclaration) {
				var line = writer.newLine().code(data.rebindable ? "let " : "const ");
				for(var index = 0, __ks_324 = data.variables.length, variable; index < __ks_324; ++index) {
					variable = data.variables[index];
					if(index !== 0) {
						line.code(", ");
					}
					line.expression(variable);
				}
				if(KSType.isValue(data.init)) {
					line.code(data.autotype ? " := " : " = ");
					if(data.await) {
						line.code("await ");
					}
					line.expression(data.init);
				}
				line.done();
			}
			else if(__ks_4 === NodeKind.WhileStatement) {
				writer.newControl().code("while ").expression(data.condition).step().expression(data.body).done();
			}
			else {
				writer.newLine().expression(data).done();
			}
		}
		function toWrap(data, writer) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(writer === void 0 || writer === null) {
				throw new TypeError("'writer' is not nullable");
			}
			var __ks_4 = data.kind;
			if(__ks_4 === NodeKind.BinaryExpression && data.operator.kind !== BinaryOperatorKind.TypeCasting) {
				writer.code("(").expression(data).code(")");
			}
			else if(__ks_4 === NodeKind.ConditionalExpression || __ks_4 === NodeKind.PolyadicExpression) {
				writer.code("(").expression(data).code(")");
			}
			else {
				writer.expression(data);
			}
		}
		return {
			generate: generate,
			KSWriter: KSWriter,
			KSWriterMode: KSWriterMode
		};
	})();
	var Mode = {
		None: 0,
		Async: 1
	};
	var CodeFragment = Helper.class({
		$name: "CodeFragment",
		$extends: Fragment,
		__ks_init_1: function() {
			this.end = null;
			this.start = null;
		},
		__ks_init: function() {
			Fragment.prototype.__ks_init.call(this);
			CodeFragment.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(code) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(code === void 0 || code === null) {
				throw new TypeError("'code' is not nullable");
			}
			Fragment.prototype.__ks_cons.call(this, [code]);
		},
		__ks_cons_1: function(code, start, end) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(code === void 0 || code === null) {
				throw new TypeError("'code' is not nullable");
			}
			if(start === void 0 || start === null) {
				throw new TypeError("'start' is not nullable");
			}
			if(end === void 0 || end === null) {
				throw new TypeError("'end' is not nullable");
			}
			Fragment.prototype.__ks_cons.call(this, [code]);
			this.start = start;
			this.end = end;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				CodeFragment.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 3) {
				CodeFragment.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		}
	});
	function $code(code) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(code === void 0 || code === null) {
			throw new TypeError("'code' is not nullable");
		}
		return new CodeFragment(code);
	}
	function $const(node) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(node === void 0 || node === null) {
			throw new TypeError("'node' is not nullable");
		}
		return (node._options.format.variables === "es5") ? "var " : "const ";
	}
	function $quote(value) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(value === void 0 || value === null) {
			throw new TypeError("'value' is not nullable");
		}
		return "\"" + value.replace(/"/g, "\\\"").replace(/\n/g, "\\n") + "\"";
	}
	var $comma = $code(", ");
	var $dot = $code(".");
	var $equals = $code(" = ");
	var $space = $code(" ");
	var FragmentBuilder = Helper.class({
		$name: "FragmentBuilder",
		$extends: Writer,
		__ks_init: function() {
			Writer.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(indent) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(indent === void 0 || indent === null) {
				throw new TypeError("'indent' is not nullable");
			}
			else if(!KSType.isNumber(indent)) {
				throw new TypeError("'indent' is not of type 'Number'");
			}
			Writer.prototype.__ks_cons.call(this, [{
				indent: {
					level: indent
				},
				classes: {
					array: ArrayWriter,
					block: BlockBuilder,
					control: ControlBuilder,
					expression: ExpressionBuilder,
					fragment: CodeFragment,
					line: LineBuilder,
					object: ObjectWriter
				}
			}]);
			this._indent = indent;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				FragmentBuilder.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var line = this.newLine(this._indent);
			if((args.length === 1) && KSType.isObject(args[0])) {
				line.compile(args[0]);
			}
			else {
				line.code.apply(line, args);
			}
			line.done();
			return this;
		},
		line: function() {
			return FragmentBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		}
	});
	var BlockBuilder = Helper.class({
		$name: "BlockBuilder",
		$extends: BlockWriter,
		__ks_init: function() {
			BlockWriter.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BlockWriter.prototype.__ks_cons.call(this, args);
		},
		__ks_func_compile_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			if(KSType.isObject(node)) {
				node.toFragments(this, mode);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		},
		compile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return BlockBuilder.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_line_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var line = this._writer.newLine(this._indent + 1);
			if((args.length === 1) && KSType.isObject(args[0])) {
				line.compile(args[0]);
			}
			else {
				line.code.apply(line, args);
			}
			line.done();
			return this;
		},
		line: function() {
			return BlockBuilder.prototype.__ks_func_line_0.apply(this, arguments);
		}
	});
	var ControlBuilder = Helper.class({
		$name: "ControlBuilder",
		$extends: ControlWriter,
		__ks_init: function() {
			ControlWriter.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ControlWriter.prototype.__ks_cons.call(this, args);
		},
		__ks_func_compile_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			this._step.compile(node, mode);
			return this;
		},
		compile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ControlBuilder.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compileBoolean_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._step.compileBoolean(node);
			return this;
		},
		compileBoolean: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_compileBoolean_0.apply(this, arguments);
			}
			else if(ControlWriter.prototype.compileBoolean) {
				return ControlWriter.prototype.compileBoolean.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compileNullable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._step.compileNullable(node);
			return this;
		},
		compileNullable: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_compileNullable_0.apply(this, arguments);
			}
			else if(ControlWriter.prototype.compileNullable) {
				return ControlWriter.prototype.compileNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_wrap_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			this._step.wrap(node, mode);
			return this;
		},
		wrap: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ControlBuilder.prototype.__ks_func_wrap_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_wrapBoolean_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._step.wrapBoolean(node);
			return this;
		},
		wrapBoolean: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_wrapBoolean_0.apply(this, arguments);
			}
			else if(ControlWriter.prototype.wrapBoolean) {
				return ControlWriter.prototype.wrapBoolean.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_wrapNullable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._step.wrapNullable(node);
			return this;
		},
		wrapNullable: function() {
			if(arguments.length === 1) {
				return ControlBuilder.prototype.__ks_func_wrapNullable_0.apply(this, arguments);
			}
			else if(ControlWriter.prototype.wrapNullable) {
				return ControlWriter.prototype.wrapNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExpressionBuilder = Helper.class({
		$name: "ExpressionBuilder",
		$extends: ExpressionWriter,
		__ks_init: function() {
			ExpressionWriter.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ExpressionWriter.prototype.__ks_cons.call(this, args);
		},
		__ks_func_code_0: function() {
			var args = Array.prototype.slice.call(arguments, 0, arguments.length);
			var data;
			for(var i = 0, __ks_327 = args.length, arg; i < __ks_327; ++i) {
				arg = args[i];
				if(KSType.isArray(arg)) {
					this.code.apply(this, [].concat(arg));
				}
				else if(KSType.isObject(arg)) {
					this._writer.push(arg);
				}
				else {
					if(((i + 1) < args.length) && KSType.isObject(data = args[i + 1]) && KSType.isValue(data.kind)) {
						if(KSType.isValue(data.start)) {
							this._writer.push(this._writer.newFragment(arg, data.start, data.end));
						}
						else {
							this._writer.push(this._writer.newFragment(arg));
						}
						i++;
					}
					else {
						this._writer.push(this._writer.newFragment(arg));
					}
				}
			}
			return this;
		},
		code: function() {
			return ExpressionBuilder.prototype.__ks_func_code_0.apply(this, arguments);
		},
		__ks_func_compile_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			if(KSType.isObject(node)) {
				node.toFragments(this, mode);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		},
		compile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compileBoolean_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			if(KSType.isObject(node)) {
				node.toBooleanFragments(this, mode);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		},
		compileBoolean: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_compileBoolean_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compileNullable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(KSType.isObject(node)) {
				node.toNullableFragments(this);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		},
		compileNullable: function() {
			if(arguments.length === 1) {
				return ExpressionBuilder.prototype.__ks_func_compileNullable_0.apply(this, arguments);
			}
			else if(ExpressionWriter.prototype.compileNullable) {
				return ExpressionWriter.prototype.compileNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compileReusable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(KSType.isObject(node)) {
				node.toReusableFragments(this);
			}
			else {
				this._writer.push(this._writer.newFragment(node));
			}
			return this;
		},
		compileReusable: function() {
			if(arguments.length === 1) {
				return ExpressionBuilder.prototype.__ks_func_compileReusable_0.apply(this, arguments);
			}
			else if(ExpressionWriter.prototype.compileReusable) {
				return ExpressionWriter.prototype.compileReusable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_wrap_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			if(node.isComputed()) {
				this.code("(");
				node.toFragments(this, mode);
				this.code(")");
			}
			else {
				node.toFragments(this, mode);
			}
			return this;
		},
		wrap: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_wrap_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_wrapBoolean_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			if(node.isBooleanComputed()) {
				this.code("(");
				node.toBooleanFragments(this, mode);
				this.code(")");
			}
			else {
				node.toBooleanFragments(this, mode);
			}
			return this;
		},
		wrapBoolean: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return ExpressionBuilder.prototype.__ks_func_wrapBoolean_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_wrapNullable_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(node.isNullableComputed()) {
				this.code("(");
				node.toNullableFragments(this);
				this.code(")");
			}
			else {
				node.toNullableFragments(this);
			}
			return this;
		},
		wrapNullable: function() {
			if(arguments.length === 1) {
				return ExpressionBuilder.prototype.__ks_func_wrapNullable_0.apply(this, arguments);
			}
			else if(ExpressionWriter.prototype.wrapNullable) {
				return ExpressionWriter.prototype.wrapNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var LineBuilder = Helper.class({
		$name: "LineBuilder",
		$extends: ExpressionBuilder,
		__ks_init: function() {
			ExpressionBuilder.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ExpressionBuilder.prototype.__ks_cons.call(this, args);
		},
		__ks_func_done_0: function() {
			if(this._undone) {
				this._writer.push(this._writer.lineTerminator);
				this._undone = false;
			}
		},
		done: function() {
			if(arguments.length === 0) {
				return LineBuilder.prototype.__ks_func_done_0.apply(this);
			}
			return ExpressionBuilder.prototype.done.apply(this, arguments);
		}
	});
	var $natives = {
		Any: true,
		any: true,
		Array: true,
		array: true,
		Boolean: true,
		bool: true,
		Class: true,
		class: true,
		Date: true,
		date: true,
		Enum: true,
		enum: true,
		Error: true,
		Function: true,
		func: true,
		Number: true,
		number: true,
		Object: true,
		object: true,
		RegExp: true,
		regex: true,
		String: true,
		string: true,
		Void: true,
		void: true
	};
	var $types = {
		any: "Any",
		array: "Array",
		bool: "Boolean",
		class: "Class",
		date: "Date",
		enum: "Enum",
		func: "Function",
		number: "Number",
		object: "Object",
		string: "String",
		void: "Void"
	};
	var TypeKind = {
		Alias: "alias",
		Class: "class",
		Enum: "enum",
		Function: "function",
		Namespace: "namespace",
		Object: "object",
		OverloadedFunction: "overloadedfunction",
		Reference: "reference",
		Sealable: "sealable"
	};
	var Type = Helper.class({
		$name: "Type",
		$static: {
			__ks_sttc_arrayOf_0: function(parameter, scope) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(parameter === void 0 || parameter === null) {
					throw new TypeError("'parameter' is not nullable");
				}
				else if(!KSType.is(parameter, Type)) {
					throw new TypeError("'parameter' is not of type 'Type'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				return new ReferenceType(scope, "Array", false, [parameter]);
			},
			arrayOf: function() {
				if(arguments.length === 2) {
					return Type.__ks_sttc_arrayOf_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0) {
					data = null;
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				return Type.fromAST(data, node.scope(), true, node);
			},
			__ks_sttc_fromAST_1: function(data, scope, defined, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(data === void 0) {
					data = null;
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(defined === void 0 || defined === null) {
					throw new TypeError("'defined' is not nullable");
				}
				else if(!KSType.isBoolean(defined)) {
					throw new TypeError("'defined' is not of type 'Boolean'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				if(!KSType.isValue(data)) {
					return Type.Any;
				}
				else if(KSType.is(data, Type)) {
					return data;
				}
				var __ks_331 = data.kind;
				if(__ks_331 === NodeKind.ClassDeclaration) {
					var type = new ClassType(scope);
					for(var __ks_332 = 0, __ks_333 = data.modifiers.length, modifier; __ks_332 < __ks_333; ++__ks_332) {
						modifier = data.modifiers[__ks_332];
						if(modifier.kind === ModifierKind.Abstract) {
							type._abstract = data.abstract;
						}
						else if(modifier.kind === ModifierKind.Sealed) {
							type.flagSealed();
						}
					}
					return new NamedType(data.name.name, type);
				}
				else if(__ks_331 === NodeKind.FunctionDeclaration || __ks_331 === NodeKind.MethodDeclaration) {
					if(KSType.isValue(data.parameters)) {
						return new FunctionType(Helper.mapArray(data.parameters, function(parameter) {
							return Type.fromAST(parameter, scope, defined, node);
						}), data, node);
					}
					else {
						return new FunctionType([new ParameterType(scope, Type.Any, 0, Infinity)], data, node);
					}
				}
				else if(__ks_331 === NodeKind.FunctionExpression) {
					return new FunctionType(Helper.mapArray(data.parameters, function(parameter) {
						return Type.fromAST(parameter, scope, defined, node);
					}), data, node);
				}
				else if(__ks_331 === NodeKind.Identifier) {
					var type;
					if(KSType.isValue(__ks_332 = scope.getVariable(data.name)) ? (type = __ks_332, true) : false) {
						return type.type();
					}
					else if($runtime.isDefined(data.name, node)) {
						return Type.Any;
					}
					else {
						ReferenceException.throwNotDefined(data.name, node);
					}
				}
				else if(__ks_331 === NodeKind.MemberExpression) {
					var object = Type.fromAST(data.object, scope, defined, node);
					if(object.isAny()) {
						return Type.Any;
					}
					else {
						return object.getProperty(data.property.name);
					}
				}
				else if(__ks_331 === NodeKind.NumericExpression) {
					return scope.reference("Number");
				}
				else if(__ks_331 === NodeKind.Parameter) {
					var type = Type.fromAST(data.type, scope, defined, node);
					var min = KSType.isValue(data.defaultValue) ? 0 : 1;
					var max = 1;
					var nf = true;
					for(var __ks_332 = 0, __ks_333 = data.modifiers.length, modifier; nf && __ks_332 < __ks_333; ++__ks_332) {
						modifier = data.modifiers[__ks_332];
						if(modifier.kind === ModifierKind.Rest) {
							if(modifier.arity) {
								min = modifier.arity.min;
								max = modifier.arity.max;
							}
							else {
								min = 0;
								max = Infinity;
							}
							nf = true;
						}
					}
					return new ParameterType(scope, type, min, max);
				}
				else if(__ks_331 === NodeKind.TypeReference) {
					if(KSType.isValue(data.properties)) {
						var type = new ObjectType(scope);
						for(var __ks_332 = 0, __ks_333 = data.properties.length, property; __ks_332 < __ks_333; ++__ks_332) {
							property = data.properties[__ks_332];
							type.addProperty(property.name.name, Type.fromAST(property.type, scope, defined, node));
						}
						return type;
					}
					else if(KSType.isValue(data.typeName)) {
						if(data.typeName.kind === NodeKind.Identifier) {
							if(!defined || scope.hasVariable(data.typeName.name)) {
								var type = new ReferenceType(scope, data.typeName.name, data.nullable);
								if(KSType.isValue(data.typeParameters)) {
									for(var __ks_332 = 0, __ks_333 = data.typeParameters.length, parameter; __ks_332 < __ks_333; ++__ks_332) {
										parameter = data.typeParameters[__ks_332];
										type._parameters.push(Type.fromAST(parameter, scope, defined, node));
									}
								}
								return type;
							}
							else {
								ReferenceException.throwNotDefined(data.typeName.name, node);
							}
						}
						else if((data.typeName.kind === NodeKind.MemberExpression) && !data.typeName.computed) {
							var namespace = Type.fromAST(data.typeName.object, scope, defined, node);
							var type = new ReferenceType(namespace.scope(), data.typeName.property.name, data.nullable);
							if(KSType.isValue(data.typeParameters)) {
								for(var __ks_332 = 0, __ks_333 = data.typeParameters.length, parameter; __ks_332 < __ks_333; ++__ks_332) {
									parameter = data.typeParameters[__ks_332];
									type._parameters.push(Type.fromAST(parameter, scope, defined, node));
								}
							}
							return type;
						}
					}
				}
				else if(__ks_331 === NodeKind.UnionType) {
					return new UnionType(scope, Helper.mapArray(data.types, function(type) {
						return Type.fromAST(type, scope, defined, node);
					}));
				}
				else if(__ks_331 === NodeKind.VariableDeclarator) {
					return Type.fromAST(data.type, scope, defined, node);
				}
				console.log(data);
				throw new NotImplementedException(node);
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return Type.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				else if(arguments.length === 4) {
					return Type.__ks_sttc_fromAST_1.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				if(KSType.isNumber(data)) {
					var index = data;
					while(KSType.isValue(alterations[index])) {
						index = alterations[index];
					}
					var type;
					if(KSType.isValue(references[index]) ? (type = references[index], true) : false) {
						return type;
					}
					else {
						var __ks_type_1 = Type.import(index, metadata, references, alterations, queue, scope, node);
						if(KSType.is(__ks_type_1, AliasType) || KSType.is(__ks_type_1, ClassType) || KSType.is(__ks_type_1, EnumType)) {
							__ks_type_1 = new NamedType(scope.acquireTempName(), __ks_type_1);
							scope.define(__ks_type_1.name(), true, __ks_type_1, node);
						}
						else if(KSType.is(__ks_type_1, NamespaceType)) {
							type = new NamedContainerType(scope.acquireTempName(), type);
							scope.define(type.name(), true, type, node);
						}
						references[index] = __ks_type_1;
						return __ks_type_1;
					}
				}
				else if(KSType.isString(data)) {
					return (data === "Any") ? Type.Any : scope.reference(data);
				}
				else if(KSType.isArray(data)) {
					if(KSType.isNumber(data[0])) {
						var type = references[data[0]];
						if(!KSType.is(type, NamedType)) {
							type = new NamedType(data[1], type);
						}
						return type;
					}
					else {
						return UnionType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
				}
				else if(KSType.isValue(data.kind)) {
					var __ks_334 = data.kind;
					if(__ks_334 === TypeKind.Class) {
						return ClassType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_334 === TypeKind.Enum) {
						return EnumType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_334 === TypeKind.Function) {
						return FunctionType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_334 === TypeKind.OverloadedFunction) {
						return OverloadedFunctionType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_334 === TypeKind.Reference) {
						return ReferenceType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_334 === TypeKind.Sealable) {
						return SealableType.fromMetadata(data, metadata, references, alterations, queue, scope, node);
					}
				}
				else if(KSType.isValue(data.reference)) {
					var type = Type.fromMetadata(data.reference, metadata, references, alterations, queue, scope, node);
					if(KSType.is(type, NamedType)) {
						return scope.reference(type);
					}
					else {
						return type;
					}
				}
				else if(KSType.isValue(data.type)) {
					return Type.fromMetadata(data.type, metadata, references, alterations, queue, scope, node);
				}
				console.log(data);
				throw new NotImplementedException(node);
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return Type.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_import_0: function(index, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var data = metadata.references[index];
				if(!KSType.isValue(data)) {
					return Type.Any;
				}
				else if(KSType.isString(data)) {
					return (data === "Any") ? Type.Any : scope.reference(data);
				}
				else if(KSType.isArray(data)) {
					if(KSType.isNumber(data[0])) {
						if(data[0] === -1) {
							throw new NotImplementedException(node);
						}
						else {
							return references[data[0]].name(data[1]);
						}
					}
					else {
						return UnionType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
				}
				else if(KSType.isValue(data.reference)) {
					if(KSType.isValue(references[data.reference])) {
						return scope.reference(references[data.reference]);
					}
					else {
						var type = Type.import(data.reference, metadata, references, alterations, queue, scope, node);
						if(KSType.is(type, AliasType) || KSType.is(type, ClassType) || KSType.is(type, EnumType)) {
							type = new NamedType(scope.acquireTempName(), type);
							scope.define(type.name(), true, type, node);
						}
						else if(KSType.is(type, NamespaceType)) {
							type = new NamedContainerType(scope.acquireTempName(), type);
							scope.define(type.name(), true, type, node);
						}
						references[data.reference] = type;
						return scope.reference(type);
					}
				}
				else if(KSType.isValue(data.kind)) {
					var __ks_335 = data.kind;
					if(__ks_335 === TypeKind.Alias) {
						return AliasType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_335 === TypeKind.Class) {
						return ClassType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_335 === TypeKind.Enum) {
						return EnumType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_335 === TypeKind.Function) {
						return FunctionType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_335 === TypeKind.Namespace) {
						return NamespaceType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_335 === TypeKind.Object) {
						return ObjectType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
					else if(__ks_335 === TypeKind.OverloadedFunction) {
						return OverloadedFunctionType.import(index, data, metadata, references, alterations, queue, scope, node);
					}
				}
				console.log(data);
				throw new NotImplementedException(node);
			},
			import: function() {
				if(arguments.length === 7) {
					return Type.__ks_sttc_import_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_toNamedType_0: function(name, type) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				else if(!KSType.isString(name)) {
					throw new TypeError("'name' is not of type 'String'");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				else if(!KSType.is(type, Type)) {
					throw new TypeError("'type' is not of type 'Type'");
				}
				if(KSType.is(type, AliasType) || KSType.is(type, ClassType) || KSType.is(type, EnumType)) {
					return new NamedType(name, type);
				}
				else if(KSType.is(type, NamespaceType)) {
					return new NamedContainerType(name, type);
				}
				else {
					return type;
				}
			},
			toNamedType: function() {
				if(arguments.length === 2) {
					return Type.__ks_sttc_toNamedType_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_union_0: function(scope) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				var types = Array.prototype.slice.call(arguments, 1, arguments.length);
				for(var __ks_336 = 0, __ks_337 = types.length, type; __ks_336 < __ks_337; ++__ks_336) {
					type = types[__ks_336];
					if(type.isAny()) {
						return Type.Any;
					}
				}
				return new UnionType(scope, types);
			},
			union: function() {
				return Type.__ks_sttc_union_0.apply(this, arguments);
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._alien = false;
			this._exported = false;
			this._referenced = false;
			this._referenceIndex = -1;
			this._required = false;
			this._sealed = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			this._scope = scope;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				Type.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_condense_0: function() {
			return this;
		},
		condense: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_condense_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_discardAlias_0: function() {
			return this;
		},
		discardAlias: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_discardAlias_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_discardName_0: function() {
			return this;
		},
		discardName: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_discardName_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_discardReference_0: function() {
			return this;
		},
		discardReference: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_discardReference_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_discardVariable_0: function() {
			return this;
		},
		discardVariable: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_discardVariable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagAlien_0: function() {
			this._alien = true;
			return this;
		},
		flagAlien: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_flagAlien_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagExported_0: function() {
			this._exported = true;
			return this;
		},
		flagExported: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_flagExported_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagReferenced_0: function() {
			this._referenced = true;
			return this;
		},
		flagReferenced: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_flagReferenced_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagRequired_0: function() {
			this._required = true;
			return this;
		},
		flagRequired: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_flagRequired_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagSealed_0: function() {
			this._sealed = true;
			return this;
		},
		flagSealed: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_flagSealed_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAlias_0: function() {
			return false;
		},
		isAlias: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isAlias_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAlien_0: function() {
			return this._alien;
		},
		isAlien: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isAlien_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAlteration_0: function() {
			return false;
		},
		isAlteration: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isAlteration_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAny_0: function() {
			return false;
		},
		isAny: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isAny_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAnonymous_0: function() {
			return false;
		},
		isAnonymous: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isAnonymous_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isArray_0: function() {
			return false;
		},
		isArray: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isArray_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isClass_0: function() {
			return false;
		},
		isClass: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isClass_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isContainedIn_0: function(types) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(types === void 0 || types === null) {
				throw new TypeError("'types' is not nullable");
			}
			for(var __ks_328 = 0, __ks_329 = types.length, type; __ks_328 < __ks_329; ++__ks_328) {
				type = types[__ks_328];
				if(this.equals(type)) {
					return true;
				}
			}
			return false;
		},
		isContainedIn: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_isContainedIn_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isEnum_0: function() {
			return false;
		},
		isEnum: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isEnum_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExported_0: function() {
			return this._exported;
		},
		isExported: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isExported_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExtendable_0: function() {
			return false;
		},
		isExtendable: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isExtendable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isFlexible_0: function() {
			return false;
		},
		isFlexible: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isFlexible_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isFunction_0: function() {
			return false;
		},
		isFunction: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isFunction_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isMergeable_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			return false;
		},
		isMergeable: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_isMergeable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNamed_0: function() {
			return false;
		},
		isNamed: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isNamed_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNamespace_0: function() {
			return false;
		},
		isNamespace: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isNamespace_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNumber_0: function() {
			return false;
		},
		isNumber: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isNumber_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isObject_0: function() {
			return false;
		},
		isObject: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isObject_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isPredefined_0: function() {
			return false;
		},
		isPredefined: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isPredefined_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isReferenced_0: function() {
			return this._referenced;
		},
		isReferenced: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isReferenced_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isRequired_0: function() {
			return this._required;
		},
		isRequired: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isRequired_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isSealable_0: function() {
			return false;
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isSealable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isSealed_0: function() {
			return this._sealed;
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isSealed_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isSealedAlien_0: function() {
			return this._alien && this._sealed;
		},
		isSealedAlien: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isSealedAlien_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isString_0: function() {
			return false;
		},
		isString: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_isString_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchContentOf_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.is(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			return this.equals(that);
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchContentTo_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.is(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			return that.matchContentOf(this);
		},
		matchContentTo: function() {
			if(arguments.length === 1) {
				return Type.prototype.__ks_func_matchContentTo_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchSignatureOf_0: function(that, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.is(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			return false;
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				return Type.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reference_0: function(scope) {
			if(scope === void 0 || scope === null) {
				scope = this._scope;
			}
			return scope.reference(this);
		},
		reference: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Type.prototype.__ks_func_reference_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_referenceIndex_0: function() {
			return this._referenceIndex;
		},
		referenceIndex: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_referenceIndex_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_scope_0: function() {
			return this._scope;
		},
		scope: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_scope_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toExportOrIndex_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			if(this._referenceIndex !== -1) {
				return this._referenceIndex;
			}
			else if(this.isReferenced()) {
				return this.toMetadata(references, ignoreAlteration);
			}
			else {
				return this.export(references, ignoreAlteration);
			}
		},
		toExportOrIndex: function() {
			if(arguments.length === 2) {
				return Type.prototype.__ks_func_toExportOrIndex_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toExportOrReference_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			if(this._referenceIndex === -1) {
				return this.export(references, ignoreAlteration);
			}
			else {
				return {
					reference: this._referenceIndex
				};
			}
		},
		toExportOrReference: function() {
			if(arguments.length === 2) {
				return Type.prototype.__ks_func_toExportOrReference_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toMetadata_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			if(this._referenceIndex === -1) {
				this._referenceIndex = references.length;
				references.push(null);
				var __ks_330;
				references[this._referenceIndex] = this.export(references, ignoreAlteration);
			}
			return this._referenceIndex;
		},
		toMetadata: function() {
			if(arguments.length === 2) {
				return Type.prototype.__ks_func_toMetadata_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toReference_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return {
				reference: this.toMetadata(references, ignoreAlteration)
			};
		},
		toReference: function() {
			if(arguments.length === 2) {
				return Type.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this;
		},
		type: function() {
			if(arguments.length === 0) {
				return Type.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var FunctionType = Helper.class({
		$name: "FunctionType",
		$extends: Type,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				return FunctionType.fromAST(data, node.scope(), true, node);
			},
			__ks_sttc_fromAST_1: function(data, scope, defined, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(defined === void 0 || defined === null) {
					throw new TypeError("'defined' is not nullable");
				}
				else if(!KSType.isBoolean(defined)) {
					throw new TypeError("'defined' is not of type 'Boolean'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				if(KSType.isValue(data.parameters)) {
					return new FunctionType(Helper.mapArray(data.parameters, function(parameter) {
						return Type.fromAST(parameter, scope, defined, node);
					}), data, node);
				}
				else {
					return new FunctionType([new ParameterType(scope, Type.Any, 0, Infinity)], data, node);
				}
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return FunctionType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				else if(arguments.length === 4) {
					return FunctionType.__ks_sttc_fromAST_1.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new FunctionType(scope);
				type._async = data.async;
				type._min = data.min;
				type._max = data.max;
				type._throws = Helper.mapArray(data.throws, function(__ks_throw_1) {
					return Type.fromMetadata(__ks_throw_1, metadata, references, alterations, queue, scope, node);
				});
				if(KSType.isValue(data.returns)) {
					var __ks_352;
					type._returnType = Type.fromMetadata(data.returns, metadata, references, alterations, queue, scope, node);
					type._missingReturn = false;
				}
				type._parameters = Helper.mapArray(data.parameters, function(parameter) {
					return ParameterType.fromMetadata(parameter, metadata, references, alterations, queue, scope, node);
				});
				type.updateArguments();
				if(data.sealed === true) {
					type.flagSealed();
				}
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return FunctionType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			},
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new FunctionType(scope);
				type._async = data.async;
				type._min = data.min;
				type._max = data.max;
				queue.push(function() {
					type._throws = Helper.mapArray(data.throws, function(__ks_throw_1) {
						return Type.fromMetadata(__ks_throw_1, metadata, references, alterations, queue, scope, node);
					});
					if(KSType.isValue(data.returns)) {
						var __ks_353;
						type._returnType = Type.fromMetadata(data.returns, metadata, references, alterations, queue, scope, node);
						type._missingReturn = false;
					}
					type._parameters = Helper.mapArray(data.parameters, function(parameter) {
						return ParameterType.fromMetadata(parameter, metadata, references, alterations, queue, scope, node);
					});
					type.updateArguments();
				});
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return FunctionType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._async = false;
			this._hasRest = false;
			this._max = 0;
			this._maxBefore = 0;
			this._maxAfter = 0;
			this._min = 0;
			this._minBefore = 0;
			this._minAfter = 0;
			this._missingParameters = false;
			this._missingReturn = true;
			this._parameters = [];
			this._restIndex = -1;
			this._returnType = Type.Any;
			this._throws = [];
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			FunctionType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
		},
		__ks_cons_1: function(parameters, data, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			else if(!KSType.isArray(parameters, ParameterType)) {
				throw new TypeError("'parameters' is not of type 'Array'");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Type.prototype.__ks_cons.call(this, [node.scope()]);
			if(KSType.isValue(data.type)) {
				this._returnType = Type.fromAST(data.type, node);
				this._missingReturn = false;
			}
			var last = null;
			for(var __ks_338 = 0, __ks_339 = parameters.length, parameter; __ks_338 < __ks_339; ++__ks_338) {
				parameter = parameters[__ks_338];
				if(last === null) {
					this._parameters.push(last = parameter.clone());
				}
				else if(!parameter._type.equals(last._type)) {
					if(last._max === Infinity) {
						if(this._max === Infinity) {
							SyntaxException.throwTooMuchRestParameter(node);
						}
						else {
							this._max = Infinity;
						}
					}
					else {
						this._max += last._max;
					}
					this._min += last._min;
					this._parameters.push(last = parameter.clone());
				}
				else {
					if(parameter._max === Infinity) {
						last._max = Infinity;
					}
					else {
						last._max += parameter._max;
					}
					last._min += parameter._min;
				}
			}
			if(last !== null) {
				if(last._max === Infinity) {
					if(this._max === Infinity) {
						SyntaxException.throwTooMuchRestParameter(node);
					}
					else {
						this._max = Infinity;
					}
				}
				else {
					this._max += last._max;
				}
				this._min += last._min;
			}
			if(KSType.isValue(data.modifiers)) {
				this.processModifiers(data.modifiers);
			}
			if(KSType.isValue(data.throws)) {
				var type;
				for(var __ks_338 = 0, __ks_339 = data.throws.length, __ks_throw_1; __ks_338 < __ks_339; ++__ks_338) {
					__ks_throw_1 = data.throws[__ks_338];
					var __ks_340;
					if((KSType.isValue(__ks_340 = Type.fromAST(__ks_throw_1, node).discardReference()) ? (type = __ks_340, true) : false) && type.isNamed() && type.isClass()) {
						this._throws.push(type);
					}
					else {
						TypeException.throwNotClass(__ks_throw_1.name, node);
					}
				}
			}
			this.updateArguments();
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				FunctionType.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 3) {
				FunctionType.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_absoluteMax_0: function() {
			return this._async ? this._max + 1 : this._max;
		},
		absoluteMax: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_absoluteMax_0.apply(this);
			}
			else if(Type.prototype.absoluteMax) {
				return Type.prototype.absoluteMax.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_absoluteMin_0: function() {
			return this._async ? this._min + 1 : this._min;
		},
		absoluteMin: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_absoluteMin_0.apply(this);
			}
			else if(Type.prototype.absoluteMin) {
				return Type.prototype.absoluteMin.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addParameter_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var type = arguments[++__ks_i];
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			var __ks__;
			var min = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : 1;
			var max = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : 1;
			var last;
			if(this._parameters.length === 0) {
				this._parameters.push(new ParameterType(this._scope, type, min, max));
			}
			else if(type.equals((last = this._parameters[this._parameters.length - 1])._type)) {
				if(max === Infinity) {
					last._max = Infinity;
				}
				else {
					last._max += max;
				}
				last._min += min;
			}
			if(this._hasRest) {
				this._max += max;
				this._minAfter += min;
				this._maxAfter += max;
			}
			else if(max === Infinity) {
				this._max = Infinity;
				this._restIndex = this._parameters.length - 1;
				this._hasRest = true;
			}
			else {
				this._max += max;
				this._minBefore += min;
				this._maxBefore += max;
			}
			this._min += min;
		},
		addParameter: function() {
			if(arguments.length >= 1 && arguments.length <= 3) {
				return FunctionType.prototype.__ks_func_addParameter_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_async_0: function() {
			this._async = true;
		},
		async: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_async_0.apply(this);
			}
			else if(Type.prototype.async) {
				return Type.prototype.async.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			if(KSType.is(b, ReferenceType)) {
				return b.name() === "Function";
			}
			else if(!KSType.is(b, FunctionType)) {
				return false;
			}
			if((this._async !== b._async) || (this._hasRest !== b._hasRest) || (this._max !== b._max) || (this._min !== b._min) || (this._restIndex !== b._restIndex) || (this._parameters.length !== b._parameters.length)) {
				return false;
			}
			for(var index = 0, __ks_341 = this._parameters.length, parameter; index < __ks_341; ++index) {
				parameter = this._parameters[index];
				if(!parameter.equals(b._parameters[index])) {
					return false;
				}
			}
			return true;
		},
		equals: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return {
				kind: TypeKind.Function,
				async: this._async,
				min: this._min,
				max: this._max,
				parameters: Helper.mapArray(this._parameters, function(parameter) {
					return parameter.export(references, ignoreAlteration);
				}),
				returns: this._returnType.toReference(references, ignoreAlteration),
				throws: Helper.mapArray(this._throws, function(__ks_throw_1) {
					return __ks_throw_1.toReference(references, ignoreAlteration);
				})
			};
		},
		export: function() {
			if(arguments.length === 2) {
				return FunctionType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagExported_0: function() {
			if(this._exported) {
				return this;
			}
			else {
				this._exported = true;
			}
			for(var __ks_342 = 0, __ks_343 = this._parameters.length, parameter; __ks_342 < __ks_343; ++__ks_342) {
				parameter = this._parameters[__ks_342];
				parameter.type().flagExported();
			}
			for(var __ks_342 = 0, __ks_343 = this._throws.length, error; __ks_342 < __ks_343; ++__ks_342) {
				error = this._throws[__ks_342];
				error.type().flagExported();
			}
			this._returnType.flagExported();
			return this;
		},
		flagExported: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_flagExported_0.apply(this);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return Type.Any;
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_index_0: function() {
			return this._index;
		},
		__ks_func_index_1: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			this._index = index;
			return this;
		},
		index: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_index_0.apply(this);
			}
			else if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_index_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAsync_0: function() {
			return this._async;
		},
		isAsync: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_isAsync_0.apply(this);
			}
			else if(Type.prototype.isAsync) {
				return Type.prototype.isAsync.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isCatchingError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			for(var __ks_344 = 0, __ks_345 = this._throws.length, type; __ks_344 < __ks_345; ++__ks_344) {
				type = this._throws[__ks_344];
				if(error.matchInheritanceOf(type)) {
					return true;
				}
			}
			return false;
		},
		isCatchingError: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_isCatchingError_0.apply(this, arguments);
			}
			else if(Type.prototype.isCatchingError) {
				return Type.prototype.isCatchingError.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isFunction_0: function() {
			return true;
		},
		isFunction: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_isFunction_0.apply(this);
			}
			return Type.prototype.isFunction.apply(this, arguments);
		},
		__ks_func_isInstanceOf_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.is(target, ReferenceType)) {
				throw new TypeError("'target' is not of type 'ReferenceType'");
			}
			return target.name() === "Function";
		},
		isInstanceOf: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_isInstanceOf_0.apply(this, arguments);
			}
			else if(Type.prototype.isInstanceOf) {
				return Type.prototype.isInstanceOf.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchSignatureOf_0: function(value, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.is(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			if(KSType.is(value, ReferenceType)) {
				return value.isFunction();
			}
			else if(KSType.is(value, FunctionType)) {
				return (this._missingParameters || this.matchArguments(value._parameters)) && (this._missingReturn || this._returnType.matchSignatureOf(value._returnType, matchables));
			}
			else if(KSType.is(value, OverloadedFunctionType)) {
				throw new NotImplementedException();
			}
			return false;
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				return FunctionType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
			}
			return Type.prototype.matchSignatureOf.apply(this, arguments);
		},
		__ks_func_matchArguments_0: function(__ks_arguments_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1, Type)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if(__ks_arguments_1.length === 0) {
				return this._min === 0;
			}
			else if(KSType.is(__ks_arguments_1[0], ParameterType)) {
				if(this._parameters.length !== __ks_arguments_1.length) {
					return false;
				}
				for(var i = 0, __ks_346 = this._parameters.length, parameter; i < __ks_346; ++i) {
					parameter = this._parameters[i];
					if(!parameter.matchContentTo(__ks_arguments_1[i])) {
						return false;
					}
				}
				return true;
			}
			else {
				if(!(this._min <= __ks_arguments_1.length && __ks_arguments_1.length <= this._max)) {
					return false;
				}
				if(__ks_arguments_1.length === 0) {
					return true;
				}
				else if(this._parameters.length === 1) {
					var parameter = this._parameters[0];
					for(var __ks_346 = 0, __ks_347 = __ks_arguments_1.length, argument; __ks_346 < __ks_347; ++__ks_346) {
						argument = __ks_arguments_1[__ks_346];
						if(!parameter.matchContentTo(argument)) {
							return false;
						}
					}
					return true;
				}
				else if(this._hasRest) {
					var a = 0;
					var b = __ks_arguments_1.length - 1;
					for(var i = this._parameters.length - 1, __ks_346 = this._restIndex; i > __ks_346; --i) {
						var parameter = this._parameters[i];
						for(var j = 0, __ks_347 = parameter.min(); j < __ks_347; ++j) {
							if(!parameter.matchContentTo(__ks_arguments_1[b])) {
								return false;
							}
							--b;
						}
					}
					var optional = this._maxBefore - this._minBefore;
					for(var i = 0, __ks_346 = this._restIndex; i < __ks_346; ++i) {
						var parameter = this._parameters[i];
						for(var j = 0, __ks_347 = parameter.min(); j < __ks_347; ++j) {
							if(!parameter.matchContentTo(__ks_arguments_1[a])) {
								return false;
							}
							++a;
						}
						for(var j = parameter.min(), __ks_347 = parameter.max(); optional !== 0 && j < __ks_347; ++j) {
							if(parameter.matchContentTo(__ks_arguments_1[a])) {
								++a;
								--optional;
							}
						}
					}
					var parameter = this._parameters[this._restIndex];
					for(var j = 0, __ks_346 = parameter.min(); j < __ks_346; ++j) {
						if(!parameter.matchContentTo(__ks_arguments_1[a])) {
							return false;
						}
						++a;
					}
					return true;
				}
				else if(__ks_arguments_1.length === this._parameters.length) {
					for(var i = 0, __ks_346 = this._parameters.length, parameter; i < __ks_346; ++i) {
						parameter = this._parameters[i];
						if(!parameter.matchContentTo(__ks_arguments_1[i])) {
							return false;
						}
					}
					return true;
				}
				else if(__ks_arguments_1.length === this._max) {
					var a = -1;
					var p;
					for(var __ks_346 = 0, __ks_347 = this._parameters.length, parameter; __ks_346 < __ks_347; ++__ks_346) {
						parameter = this._parameters[__ks_346];
						var __ks_348;
						for(p = 0, __ks_348 = parameter.max(); p < __ks_348; ++p) {
							if(!parameter.matchContentTo(__ks_arguments_1[++a])) {
								return false;
							}
						}
					}
					return true;
				}
				else {
					var a = 0;
					var optional = __ks_arguments_1.length - this._min;
					for(var __ks_346 = 0, __ks_347 = this._parameters.length, parameter; __ks_346 < __ks_347; ++__ks_346) {
						parameter = this._parameters[__ks_346];
						for(var i = 0, __ks_348 = parameter.min(); i < __ks_348; ++i) {
							if(!parameter.matchContentTo(__ks_arguments_1[a])) {
								return false;
							}
							++a;
						}
						for(var i = parameter.min(), __ks_348 = parameter.max(); optional > 0 && i < __ks_348; ++i) {
							if(parameter.matchContentTo(__ks_arguments_1[a])) {
								++a;
								--optional;
							}
						}
					}
					return optional === 0;
				}
			}
		},
		matchArguments: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_matchArguments_0.apply(this, arguments);
			}
			else if(Type.prototype.matchArguments) {
				return Type.prototype.matchArguments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_max_0: function() {
			return this._max;
		},
		max: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_max_0.apply(this);
			}
			else if(Type.prototype.max) {
				return Type.prototype.max.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_min_0: function() {
			return this._min;
		},
		min: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_min_0.apply(this);
			}
			else if(Type.prototype.min) {
				return Type.prototype.min.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameter_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			return this._parameters[index];
		},
		parameter: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_parameter_0.apply(this, arguments);
			}
			else if(Type.prototype.parameter) {
				return Type.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Type.prototype.parameters) {
				return Type.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_processModifiers_0: function(modifiers) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			for(var __ks_349 = 0, __ks_350 = modifiers.length, modifier; __ks_349 < __ks_350; ++__ks_349) {
				modifier = modifiers[__ks_349];
				if(modifier.kind === ModifierKind.Async) {
					this._async = true;
				}
			}
		},
		processModifiers: function() {
			if(arguments.length === 1) {
				return FunctionType.prototype.__ks_func_processModifiers_0.apply(this, arguments);
			}
			else if(Type.prototype.processModifiers) {
				return Type.prototype.processModifiers.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_returnType_0: function() {
			return this._returnType;
		},
		returnType: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_returnType_0.apply(this);
			}
			else if(Type.prototype.returnType) {
				return Type.prototype.returnType.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_throws_0: function() {
			return this._throws;
		},
		throws: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_throws_0.apply(this);
			}
			else if(Type.prototype.throws) {
				return Type.prototype.throws.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FunctionType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			throw new NotImplementedException();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return FunctionType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_updateArguments_0: function() {
			for(var i = 0, __ks_351 = this._parameters.length, parameter; i < __ks_351; ++i) {
				parameter = this._parameters[i];
				if(this._hasRest) {
					this._minAfter += parameter.min();
					this._maxAfter += parameter.max();
				}
				else if(parameter.max() === Infinity) {
					this._restIndex = i;
					this._hasRest = true;
				}
				else {
					this._minBefore += parameter.min();
					this._maxBefore += parameter.max();
				}
			}
		},
		updateArguments: function() {
			if(arguments.length === 0) {
				return FunctionType.prototype.__ks_func_updateArguments_0.apply(this);
			}
			else if(Type.prototype.updateArguments) {
				return Type.prototype.updateArguments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var OverloadedFunctionType = Helper.class({
		$name: "OverloadedFunctionType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new OverloadedFunctionType(scope);
				for(var __ks_371 = 0, __ks_372 = data.functions.length, __ks_function_1; __ks_371 < __ks_372; ++__ks_371) {
					__ks_function_1 = data.functions[__ks_371];
					type.addFunction(Type.fromMetadata(__ks_function_1, metadata, references, alterations, queue, scope, node));
				}
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return OverloadedFunctionType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			},
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new OverloadedFunctionType(scope);
				queue.push(function() {
					for(var __ks_373 = 0, __ks_374 = data.functions.length, __ks_function_1; __ks_373 < __ks_374; ++__ks_373) {
						__ks_function_1 = data.functions[__ks_373];
						type.addFunction(Type.fromMetadata(__ks_function_1, metadata, references, alterations, queue, scope, node));
					}
				});
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return OverloadedFunctionType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._async = false;
			this._functions = [];
			this._references = [];
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			OverloadedFunctionType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Type.prototype.__ks_cons.call(this, args);
		},
		__ks_func_addFunction_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, FunctionType)) {
				throw new TypeError("'type' is not of type 'FunctionType'");
			}
			if(this._functions.length === 0) {
				var __ks_354;
				this._async = type.isAsync();
			}
			this._functions.push(type);
			__ks_Array._im_pushUniq(this._references, type);
		},
		__ks_func_addFunction_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, OverloadedFunctionType)) {
				throw new TypeError("'type' is not of type 'OverloadedFunctionType'");
			}
			if(this._functions.length === 0) {
				this._async = type.isAsync();
			}
			var __ks_355 = type.functions();
			for(var __ks_356 = 0, __ks_357 = __ks_355.length, fn; __ks_356 < __ks_357; ++__ks_356) {
				fn = __ks_355[__ks_356];
				this._functions.push(fn);
				__ks_Array._im_pushUniq(this._references, type);
			}
		},
		__ks_func_addFunction_2: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ReferenceType)) {
				throw new TypeError("'type' is not of type 'ReferenceType'");
			}
			if(this._functions.length === 0) {
				var __ks_358;
				this._async = type.isAsync();
			}
			var fn = new FunctionType(this._scope);
			fn.addParameter(Type.Any, 0, Infinity);
			fn._missingParameters = true;
			this._functions.push(fn);
			__ks_Array._im_pushUniq(this._references, type);
		},
		addFunction: function() {
			if(arguments.length === 1) {
				if(KSType.is(arguments[0], FunctionType)) {
					return OverloadedFunctionType.prototype.__ks_func_addFunction_0.apply(this, arguments);
				}
				else if(KSType.is(arguments[0], OverloadedFunctionType)) {
					return OverloadedFunctionType.prototype.__ks_func_addFunction_1.apply(this, arguments);
				}
				else {
					return OverloadedFunctionType.prototype.__ks_func_addFunction_2.apply(this, arguments);
				}
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			throw new NotImplementedException();
		},
		equals: function() {
			if(arguments.length === 1) {
				return OverloadedFunctionType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			var functions = [];
			for(var __ks_359 = 0, __ks_360 = this._references.length, reference; __ks_359 < __ks_360; ++__ks_359) {
				reference = this._references[__ks_359];
				if((reference._referenceIndex === -1) && KSType.is(reference, OverloadedFunctionType)) {
					var __ks_361 = reference.functions();
					for(var __ks_362 = 0, __ks_363 = __ks_361.length, fn; __ks_362 < __ks_363; ++__ks_362) {
						fn = __ks_361[__ks_362];
						functions.push(fn.toExportOrReference(references, ignoreAlteration));
					}
				}
				else {
					functions.push(reference.toExportOrReference(references, ignoreAlteration));
				}
			}
			return {
				kind: TypeKind.OverloadedFunction,
				functions: functions
			};
		},
		export: function() {
			if(arguments.length === 2) {
				return OverloadedFunctionType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_functions_0: function() {
			return this._functions;
		},
		functions: function() {
			if(arguments.length === 0) {
				return OverloadedFunctionType.prototype.__ks_func_functions_0.apply(this);
			}
			else if(Type.prototype.functions) {
				return Type.prototype.functions.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasFunction_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, FunctionType)) {
				throw new TypeError("'type' is not of type 'FunctionType'");
			}
			for(var __ks_364 = 0, __ks_365 = this._functions.length, __ks_function_1; __ks_364 < __ks_365; ++__ks_364) {
				__ks_function_1 = this._functions[__ks_364];
				if(__ks_function_1.equals(type)) {
					return true;
				}
			}
			return false;
		},
		hasFunction: function() {
			if(arguments.length === 1) {
				return OverloadedFunctionType.prototype.__ks_func_hasFunction_0.apply(this, arguments);
			}
			else if(Type.prototype.hasFunction) {
				return Type.prototype.hasFunction.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAsync_0: function() {
			return this._async;
		},
		isAsync: function() {
			if(arguments.length === 0) {
				return OverloadedFunctionType.prototype.__ks_func_isAsync_0.apply(this);
			}
			else if(Type.prototype.isAsync) {
				return Type.prototype.isAsync.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isFunction_0: function() {
			return true;
		},
		isFunction: function() {
			if(arguments.length === 0) {
				return OverloadedFunctionType.prototype.__ks_func_isFunction_0.apply(this);
			}
			return Type.prototype.isFunction.apply(this, arguments);
		},
		__ks_func_isMergeable_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			return KSType.is(type, OverloadedFunctionType) && (this._async === type.isAsync());
		},
		isMergeable: function() {
			if(arguments.length === 1) {
				return OverloadedFunctionType.prototype.__ks_func_isMergeable_0.apply(this, arguments);
			}
			return Type.prototype.isMergeable.apply(this, arguments);
		},
		__ks_func_matchSignatureOf_0: function(value, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.is(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			if(KSType.is(value, ReferenceType)) {
				return value.isFunction();
			}
			else if(KSType.is(value, FunctionType)) {
				for(var __ks_366 = 0, __ks_367 = this._functions.length, fn; __ks_366 < __ks_367; ++__ks_366) {
					fn = this._functions[__ks_366];
					if(fn.matchSignatureOf(value, matchables)) {
						return true;
					}
				}
			}
			else if(KSType.is(value, OverloadedFunctionType)) {
				var nf;
				var __ks_366 = value.functions();
				for(var __ks_367 = 0, __ks_368 = __ks_366.length, fb; __ks_367 < __ks_368; ++__ks_367) {
					fb = __ks_366[__ks_367];
					nf = true;
					for(var __ks_369 = 0, __ks_370 = this._functions.length, fn; nf && __ks_369 < __ks_370; ++__ks_369) {
						fn = this._functions[__ks_369];
						if(fn.matchSignatureOf(fb, matchables)) {
							nf = false;
						}
					}
					if(nf) {
						return false;
					}
				}
				return true;
			}
			else if(KSType.is(value, NamedType)) {
				return this.matchSignatureOf(value.type(), matchables);
			}
			return false;
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				return OverloadedFunctionType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
			}
			return Type.prototype.matchSignatureOf.apply(this, arguments);
		},
		__ks_func_toQuote_0: function() {
			throw new NotImplementedException();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return OverloadedFunctionType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return OverloadedFunctionType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return OverloadedFunctionType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var NamedType = Helper.class({
		$name: "NamedType",
		$extends: Type,
		__ks_init_1: function() {
			this._container = null;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			NamedType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			Type.prototype.__ks_cons.call(this, [type.scope()]);
			this._name = name;
			this._type = type;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				NamedType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			return new NamedType(this._name, this._type.clone());
		},
		clone: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_condense_0: function() {
			this._type.condense();
			return this;
		},
		condense: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_condense_0.apply(this);
			}
			return Type.prototype.condense.apply(this, arguments);
		},
		__ks_func_container_0: function() {
			return this._container;
		},
		__ks_func_container_1: function(container) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(container === void 0 || container === null) {
				throw new TypeError("'container' is not nullable");
			}
			else if(!KSType.is(container, NamedContainerType)) {
				throw new TypeError("'container' is not of type 'NamedContainerType'");
			}
			this._container = container;
			return this;
		},
		container: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_container_0.apply(this);
			}
			else if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_container_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_discardAlias_0: function() {
			return this._type.discardAlias();
		},
		discardAlias: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_discardAlias_0.apply(this);
			}
			return Type.prototype.discardAlias.apply(this, arguments);
		},
		__ks_func_discardName_0: function() {
			return this._type;
		},
		discardName: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_discardName_0.apply(this);
			}
			return Type.prototype.discardName.apply(this, arguments);
		},
		__ks_func_duplicate_0: function() {
			return new NamedType(this._name, this._type);
		},
		duplicate: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_duplicate_0.apply(this);
			}
			else if(Type.prototype.duplicate) {
				return Type.prototype.duplicate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			return this._type.equals(b);
		},
		equals: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			if(KSType.is(this._type, ClassType) && (this._type.isPredefined() || !(this._type.isExported() || this._type.isAlien()))) {
				return this._name;
			}
			else {
				return this._type.export(references, ignoreAlteration);
			}
		},
		export: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagAlien_0: function() {
			this._type.flagAlien();
			return this;
		},
		flagAlien: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_flagAlien_0.apply(this);
			}
			return Type.prototype.flagAlien.apply(this, arguments);
		},
		__ks_func_flagExported_0: function() {
			this._type.flagExported();
			return this;
		},
		flagExported: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_flagExported_0.apply(this);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_flagReferenced_0: function() {
			this._type.flagReferenced();
			return this;
		},
		flagReferenced: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_flagReferenced_0.apply(this);
			}
			return Type.prototype.flagReferenced.apply(this, arguments);
		},
		__ks_func_flagRequired_0: function() {
			this._type.flagRequired();
			return this;
		},
		flagRequired: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_flagRequired_0.apply(this);
			}
			return Type.prototype.flagRequired.apply(this, arguments);
		},
		__ks_func_flagSealable_0: function() {
			this._type.flagSealable();
			return this;
		},
		flagSealable: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_flagSealable_0.apply(this);
			}
			else if(Type.prototype.flagSealable) {
				return Type.prototype.flagSealable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagSealed_0: function() {
			this._type.flagSealed();
			return this;
		},
		flagSealed: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_flagSealed_0.apply(this);
			}
			return Type.prototype.flagSealed.apply(this, arguments);
		},
		__ks_func_getHierarchy_0: function() {
			if(KSType.is(this._type, ClassType)) {
				return this._type.getHierarchy(this._name);
			}
			else {
				return [this._name];
			}
		},
		getHierarchy: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_getHierarchy_0.apply(this);
			}
			else if(Type.prototype.getHierarchy) {
				return Type.prototype.getHierarchy.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._type.getProperty(name);
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getSealedName_0: function() {
			return "__ks_" + this._name;
		},
		getSealedName: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_getSealedName_0.apply(this);
			}
			else if(Type.prototype.getSealedName) {
				return Type.prototype.getSealedName.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getSealedPath_0: function() {
			if(KSType.isValue(this._container)) {
				return "" + this._container.path() + "." + this.getSealedName();
			}
			else {
				return this.getSealedName();
			}
		},
		getSealedPath: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_getSealedPath_0.apply(this);
			}
			else if(Type.prototype.getSealedPath) {
				return Type.prototype.getSealedPath.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasContainer_0: function() {
			return KSType.isValue(this._container);
		},
		hasContainer: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_hasContainer_0.apply(this);
			}
			else if(Type.prototype.hasContainer) {
				return Type.prototype.hasContainer.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._type.hasProperty(name);
		},
		hasProperty: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_hasProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.hasProperty) {
				return Type.prototype.hasProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAlias_0: function() {
			return this._type.isAlias();
		},
		isAlias: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isAlias_0.apply(this);
			}
			return Type.prototype.isAlias.apply(this, arguments);
		},
		__ks_func_isAlien_0: function() {
			return this._type.isAlien();
		},
		isAlien: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isAlien_0.apply(this);
			}
			return Type.prototype.isAlien.apply(this, arguments);
		},
		__ks_func_isClass_0: function() {
			return this._type.isClass();
		},
		isClass: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isClass_0.apply(this);
			}
			return Type.prototype.isClass.apply(this, arguments);
		},
		__ks_func_isEnum_0: function() {
			return this._type.isEnum();
		},
		isEnum: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isEnum_0.apply(this);
			}
			return Type.prototype.isEnum.apply(this, arguments);
		},
		__ks_func_isExported_0: function() {
			return this._type.isExported();
		},
		isExported: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isExported_0.apply(this);
			}
			return Type.prototype.isExported.apply(this, arguments);
		},
		__ks_func_isExtendable_0: function() {
			return this._type.isExtendable();
		},
		isExtendable: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isExtendable_0.apply(this);
			}
			return Type.prototype.isExtendable.apply(this, arguments);
		},
		__ks_func_isFlexible_0: function() {
			return this._type.isFlexible();
		},
		isFlexible: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isFlexible_0.apply(this);
			}
			return Type.prototype.isFlexible.apply(this, arguments);
		},
		__ks_func_isPredefined_0: function() {
			return this._type.isPredefined();
		},
		isPredefined: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isPredefined_0.apply(this);
			}
			return Type.prototype.isPredefined.apply(this, arguments);
		},
		__ks_func_isReferenced_0: function() {
			return this._type.isReferenced();
		},
		isReferenced: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isReferenced_0.apply(this);
			}
			return Type.prototype.isReferenced.apply(this, arguments);
		},
		__ks_func_isRequired_0: function() {
			return this._type.isRequired();
		},
		isRequired: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isRequired_0.apply(this);
			}
			return Type.prototype.isRequired.apply(this, arguments);
		},
		__ks_func_isSealable_0: function() {
			return this._type.isSealable();
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isSealable_0.apply(this);
			}
			return Type.prototype.isSealable.apply(this, arguments);
		},
		__ks_func_isSealed_0: function() {
			return this._type.isSealed();
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isSealed_0.apply(this);
			}
			return Type.prototype.isSealed.apply(this, arguments);
		},
		__ks_func_isSealedAlien_0: function() {
			return this._type.isSealedAlien();
		},
		isSealedAlien: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isSealedAlien_0.apply(this);
			}
			return Type.prototype.isSealedAlien.apply(this, arguments);
		},
		__ks_func_isNamed_0: function() {
			return true;
		},
		isNamed: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isNamed_0.apply(this);
			}
			return Type.prototype.isNamed.apply(this, arguments);
		},
		__ks_func_isNamespace_0: function() {
			return this._type.isNamespace();
		},
		isNamespace: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_isNamespace_0.apply(this);
			}
			return Type.prototype.isNamespace.apply(this, arguments);
		},
		__ks_func_matchContentOf_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.is(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			if(KSType.is(that, NamedType)) {
				if(KSType.is(this._type, ClassType) && KSType.is(that.type(), ClassType)) {
					return this.matchInheritanceOf(that);
				}
				else {
					return this._type.matchContentOf(that.type());
				}
			}
			else {
				return this._type.matchContentOf(that);
			}
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_matchContentTo_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.is(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			if(KSType.is(that, NamedType)) {
				if(KSType.is(this._type, ClassType) && KSType.is(that.type(), ClassType)) {
					return that.matchInheritanceOf(this);
				}
				else {
					return this._type.matchContentTo(that.type());
				}
			}
			else {
				return this._type.matchContentTo(that);
			}
		},
		matchContentTo: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_matchContentTo_0.apply(this, arguments);
			}
			return Type.prototype.matchContentTo.apply(this, arguments);
		},
		__ks_func_matchInheritanceOf_0: function(base) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(base === void 0 || base === null) {
				throw new TypeError("'base' is not nullable");
			}
			else if(!KSType.is(base, Type)) {
				throw new TypeError("'base' is not of type 'Type'");
			}
			if(!(KSType.is(base, NamedType) || !this.isClass() || !base.isClass())) {
				return false;
			}
			if(this._name === base.name()) {
				return true;
			}
			var that = this;
			while(that.type().isExtending()) {
				var __ks_375;
				that = that.type().extends();
				if(that.name() === base.name()) {
					return true;
				}
			}
			return false;
		},
		matchInheritanceOf: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_matchInheritanceOf_0.apply(this, arguments);
			}
			else if(Type.prototype.matchInheritanceOf) {
				return Type.prototype.matchInheritanceOf.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchSignatureOf_0: function(that, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			return this._type.matchSignatureOf(that.discardName(), matchables);
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
			}
			return Type.prototype.matchSignatureOf.apply(this, arguments);
		},
		__ks_func_metaReference_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return this._type.metaReference(references, this._name, ignoreAlteration);
		},
		metaReference: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_metaReference_0.apply(this, arguments);
			}
			else if(Type.prototype.metaReference) {
				return Type.prototype.metaReference.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		__ks_func_name_1: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			this._name = name;
			return this;
		},
		name: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_name_0.apply(this);
			}
			else if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_name_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_path_0: function() {
			if(KSType.isValue(this._container)) {
				return "" + this._container.path() + "." + this._name;
			}
			else {
				return this._name;
			}
		},
		path: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_path_0.apply(this);
			}
			else if(Type.prototype.path) {
				return Type.prototype.path.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reckonReferenceIndex_0: function(references) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			return this._type.reckonReferenceIndex(references);
		},
		reckonReferenceIndex: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_reckonReferenceIndex_0.apply(this, arguments);
			}
			else if(Type.prototype.reckonReferenceIndex) {
				return Type.prototype.reckonReferenceIndex.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_referenceIndex_0: function() {
			return this._type.referenceIndex();
		},
		referenceIndex: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_referenceIndex_0.apply(this);
			}
			return Type.prototype.referenceIndex.apply(this, arguments);
		},
		__ks_func_toQuote_0: function() {
			return this._name;
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toExportOrIndex_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return this._type.toExportOrIndex(references, ignoreAlteration);
		},
		toExportOrIndex: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_toExportOrIndex_0.apply(this, arguments);
			}
			return Type.prototype.toExportOrIndex.apply(this, arguments);
		},
		__ks_func_toMetadata_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return this._type.toMetadata(references, ignoreAlteration);
		},
		toMetadata: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_toMetadata_0.apply(this, arguments);
			}
			return Type.prototype.toMetadata.apply(this, arguments);
		},
		__ks_func_toReference_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			if(KSType.is(this._type, ClassType) && this._type.isPredefined()) {
				return this._name;
			}
			else {
				return this._type.toReference(references, ignoreAlteration);
			}
		},
		toReference: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			return Type.prototype.toReference.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toTestFragments(fragments, node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return NamedType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return NamedType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			return this._type.walk(fn);
		},
		walk: function() {
			if(arguments.length === 1) {
				return NamedType.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Type.prototype.walk) {
				return Type.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var NamedContainerType = Helper.class({
		$name: "NamedContainerType",
		$extends: NamedType,
		__ks_init_1: function() {
			this._properties = {};
		},
		__ks_init: function() {
			NamedType.prototype.__ks_init.call(this);
			NamedContainerType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			NamedType.prototype.__ks_cons.call(this, [name, type]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				NamedContainerType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_addProperty_0: function(name, property) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			else if(!KSType.is(property, Type)) {
				throw new TypeError("'property' is not of type 'Type'");
			}
			if(KSType.is(property, NamedType)) {
				var __ks_376;
				property = property.duplicate().container(this);
			}
			this._type.addProperty(name, property);
			this._properties[name] = property;
		},
		addProperty: function() {
			if(arguments.length === 2) {
				return NamedContainerType.prototype.__ks_func_addProperty_0.apply(this, arguments);
			}
			else if(NamedType.prototype.addProperty) {
				return NamedType.prototype.addProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var property, __ks_377;
			if(KSType.is(this._properties[name], Type)) {
				return this._properties[name];
			}
			else if(KSType.isValue(__ks_377 = this._type.getProperty(name)) ? (property = __ks_377, true) : false) {
				if(KSType.is(property, NamedType)) {
					property = property.duplicate().container(this);
				}
				this._properties[name] = property;
				return property;
			}
			else {
				return null;
			}
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return NamedContainerType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			return NamedType.prototype.getProperty.apply(this, arguments);
		},
		__ks_func_hasProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._type.hasProperty(name);
		},
		hasProperty: function() {
			if(arguments.length === 1) {
				return NamedContainerType.prototype.__ks_func_hasProperty_0.apply(this, arguments);
			}
			return NamedType.prototype.hasProperty.apply(this, arguments);
		}
	});
	var ReferenceType = Helper.class({
		$name: "ReferenceType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				return new ReferenceType(scope, data.name, data.nullable);
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return ReferenceType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._nullable = false;
			this._predefined = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			ReferenceType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var scope = arguments[++__ks_i];
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var nullable;
			if(arguments.length > 2 && (nullable = arguments[++__ks_i]) !== void 0 && nullable !== null) {
				if(!KSType.isBoolean(nullable)) {
					throw new TypeError("'nullable' is not of type 'Boolean'");
				}
			}
			else {
				nullable = false;
			}
			var parameters;
			if(arguments.length > 3 && (parameters = arguments[++__ks_i]) !== void 0 && parameters !== null) {
				if(!KSType.isArray(parameters)) {
					throw new TypeError("'parameters' is not of type 'Array'");
				}
			}
			else {
				parameters = [];
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._nullable = nullable;
			this._parameters = parameters;
			this._name = KSType.isValue($types[name]) ? $types[name] : name;
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 4) {
				ReferenceType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_discardAlias_0: function() {
			var variable, __ks_378;
			if(this._name === "Any") {
				return Type.Any;
			}
			else if((KSType.isValue(__ks_378 = this._scope.getVariable(this._name)) ? (variable = __ks_378, true) : false) && (!KSType.is(variable.type(), ReferenceType) || (variable.name() !== this._name) || (variable.scope() !== this._scope))) {
				return variable.type().discardAlias();
			}
			else {
				return this;
			}
		},
		discardAlias: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_discardAlias_0.apply(this);
			}
			return Type.prototype.discardAlias.apply(this, arguments);
		},
		__ks_func_discardReference_0: function() {
			var variable, type, __ks_379;
			if(this._name === "Any") {
				return Type.Any;
			}
			else if((KSType.isValue(__ks_379 = this._scope.getVariable(this._name)) ? (variable = __ks_379, true) : false) && (KSType.isValue(__ks_379 = variable.type()) ? (type = __ks_379, true) : false) && (!KSType.is(type, ReferenceType) || (variable.name() !== this._name) || (type.scope() !== this._scope))) {
				return type.discardReference();
			}
			else {
				return null;
			}
		},
		discardReference: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_discardReference_0.apply(this);
			}
			return Type.prototype.discardReference.apply(this, arguments);
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			if(!KSType.is(b, ReferenceType)) {
				return b.equals(this);
			}
			if((this._name !== b._name) || (this._nullable !== b._nullable) || (this._parameters.length !== b._parameters.length)) {
				return false;
			}
			return true;
		},
		equals: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			if(this._nullable) {
				return {
					kind: TypeKind.Reference,
					name: this._name,
					nullable: this._nullable
				};
			}
			else {
				return this._name;
			}
		},
		export: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagExported_0: function() {
			if(!this.isAny() && !this.isEnum() && !this.isVoid()) {
				this.type().flagReferenced();
			}
			return Type.prototype.flagExported.apply(this, []);
		},
		flagExported: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_flagExported_0.apply(this);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(this.isAny()) {
				return Type.Any;
			}
			var type = this.type();
			if(KSType.is(type, NamedType)) {
				var __ks_380;
				type = type.type();
			}
			if(KSType.is(type, ClassType)) {
				return type.getInstanceProperty(name);
			}
			else {
				return type.getProperty(name);
			}
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hashCode_0: function() {
			var hash = this._name;
			if(this._parameters.length !== 0) {
				hash += "<";
				for(var i = 0, __ks_381 = this._parameters.length, parameter; i < __ks_381; ++i) {
					parameter = this._parameters[i];
					if(i) {
						hash += ",";
					}
					hash += parameter.hashCode();
				}
				hash += ">";
			}
			if(this._nullable) {
				hash += "?";
			}
			return hash;
		},
		hashCode: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_hashCode_0.apply(this);
			}
			else if(Type.prototype.hashCode) {
				return Type.prototype.hashCode.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAny_0: function() {
			return (this._name === "Any") || (this._name === "any");
		},
		isAny: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isAny_0.apply(this);
			}
			return Type.prototype.isAny.apply(this, arguments);
		},
		__ks_func_isArray_0: function() {
			return (this._name === "Array") || (this._name === "array");
		},
		isArray: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isArray_0.apply(this);
			}
			return Type.prototype.isArray.apply(this, arguments);
		},
		__ks_func_isAsync_0: function() {
			return false;
		},
		isAsync: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isAsync_0.apply(this);
			}
			else if(Type.prototype.isAsync) {
				return Type.prototype.isAsync.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isClass_0: function() {
			return (this._name === "Class") || (this._name === "class");
		},
		isClass: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isClass_0.apply(this);
			}
			return Type.prototype.isClass.apply(this, arguments);
		},
		__ks_func_isEnum_0: function() {
			return (this._name === "Enum") || (this._name === "enum");
		},
		isEnum: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isEnum_0.apply(this);
			}
			return Type.prototype.isEnum.apply(this, arguments);
		},
		__ks_func_isFunction_0: function() {
			return (this._name === "Function") || (this._name === "function");
		},
		isFunction: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isFunction_0.apply(this);
			}
			return Type.prototype.isFunction.apply(this, arguments);
		},
		__ks_func_isInstanceOf_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.is(target, AnyType)) {
				throw new TypeError("'target' is not of type 'AnyType'");
			}
			return true;
		},
		__ks_func_isInstanceOf_1: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.is(target, ReferenceType)) {
				throw new TypeError("'target' is not of type 'ReferenceType'");
			}
			if((this._name === target.name()) || target.isAny()) {
				return true;
			}
			var thisClass, targetClass, __ks_382;
			if((KSType.isValue(__ks_382 = this.discardAlias()) ? (thisClass = __ks_382, true) : false) && KSType.is(thisClass, ClassType) && (KSType.isValue(__ks_382 = target.discardAlias()) ? (targetClass = __ks_382, true) : false) && KSType.is(targetClass, ClassType)) {
				return thisClass.isInstanceOf(targetClass);
			}
			return false;
		},
		isInstanceOf: function() {
			if(arguments.length === 1) {
				if(KSType.is(arguments[0], AnyType)) {
					return ReferenceType.prototype.__ks_func_isInstanceOf_0.apply(this, arguments);
				}
				else {
					return ReferenceType.prototype.__ks_func_isInstanceOf_1.apply(this, arguments);
				}
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Type.prototype.isNullable) {
				return Type.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNumber_0: function() {
			return (this._name === "Number") || (this._name === "number");
		},
		isNumber: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isNumber_0.apply(this);
			}
			return Type.prototype.isNumber.apply(this, arguments);
		},
		__ks_func_isObject_0: function() {
			return (this._name === "Object") || (this._name === "object");
		},
		isObject: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isObject_0.apply(this);
			}
			return Type.prototype.isObject.apply(this, arguments);
		},
		__ks_func_isString_0: function() {
			return (this._name === "String") || (this._name === "string");
		},
		isString: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isString_0.apply(this);
			}
			return Type.prototype.isString.apply(this, arguments);
		},
		__ks_func_isVoid_0: function() {
			return (this._name === "Void") || (this._name === "void");
		},
		isVoid: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_isVoid_0.apply(this);
			}
			else if(Type.prototype.isVoid) {
				return Type.prototype.isVoid.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchContentOf_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			if(this.isAny()) {
				return b.isAny();
			}
			else if(this.isEnum()) {
				return b.isEnum();
			}
			else if(this.isFunction()) {
				return b.isFunction();
			}
			else {
				var __ks_383;
				var a = this.discardReference();
				b = b.discardReference();
				if(KSType.is(a, ReferenceType)) {
					if(KSType.is(b, ReferenceType)) {
						return a._name === b._name;
					}
					else {
						return false;
					}
				}
				else {
					return a.matchContentOf(b);
				}
			}
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_matchContentTo_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			if(this.isAny()) {
				return b.isAny();
			}
			else if(this.isEnum()) {
				return b.isEnum();
			}
			else if(this.isFunction()) {
				return b.isFunction();
			}
			else {
				var __ks_384;
				var a = this.discardReference();
				b = b.discardReference();
				if(KSType.is(a, ReferenceType)) {
					if(KSType.is(b, ReferenceType)) {
						return a._name === b._name;
					}
					else {
						return false;
					}
				}
				else {
					return a.matchContentTo(b);
				}
			}
		},
		matchContentTo: function() {
			if(arguments.length === 1) {
				return ReferenceType.prototype.__ks_func_matchContentTo_0.apply(this, arguments);
			}
			return Type.prototype.matchContentTo.apply(this, arguments);
		},
		__ks_func_matchSignatureOf_0: function(value, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			if(KSType.is(value, ReferenceType)) {
				if(this.isEnum()) {
					return KSType.is(value.discardReference(), EnumType);
				}
				else if(value.isEnum()) {
					return KSType.is(this.discardReference(), EnumType);
				}
				else {
					return this.discardReference().matchSignatureOf(value.discardReference(), matchables);
				}
			}
			else if(value.isObject() && this.type().isClass()) {
				return this._type.type().matchInstanceWith(value, matchables);
			}
			else {
				return false;
			}
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
			}
			return Type.prototype.matchSignatureOf.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_name_0.apply(this);
			}
			else if(Type.prototype.name) {
				return Type.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameter_0: function(index) {
			if(index === void 0 || index === null) {
				index = 0;
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			if(index >= this._parameters.length) {
				return Type.Any;
			}
			else {
				return this._parameters[index];
			}
		},
		parameter: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return ReferenceType.prototype.__ks_func_parameter_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Type.prototype.parameters) {
				return Type.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reassign_0: function(name, scope) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			this._name = name;
			this._scope = scope;
			return this;
		},
		reassign: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_reassign_0.apply(this, arguments);
			}
			else if(Type.prototype.reassign) {
				return Type.prototype.reassign.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_resolveType_0: function() {
			if(!KSType.isValue(this._type)) {
				var __ks_385;
				if(this.isAny()) {
					this._type = Type.Any;
					this._predefined = true;
				}
				else if(this.isEnum()) {
					this._predefined = true;
				}
				else if(this.isVoid()) {
					this._type = Type.Void;
					this._predefined = true;
				}
				else if(KSType.isValue(__ks_385 = this._scope.getVariable(this._name)) ? (this._variable = __ks_385, true) : false) {
					this._type = this._variable.type();
					this._predefined = this._type.isPredefined();
					if(KSType.is(this._type, AliasType)) {
						this._type = this._type.type();
					}
					if(KSType.is(this._type, ReferenceType)) {
						this._type = this._type.type();
					}
				}
				else {
					console.log(this);
					throw new NotImplementedException();
				}
			}
		},
		resolveType: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_resolveType_0.apply(this);
			}
			else if(Type.prototype.resolveType) {
				return Type.prototype.resolveType.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code(this._name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toMetadata_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			this.resolveType();
			if(this._referenceIndex !== -1) {
				return this._referenceIndex;
			}
			else if(this._predefined) {
				return Type.prototype.toMetadata.apply(this, [references, ignoreAlteration]);
			}
			else if(!this._variable.type().isClass()) {
				var __ks_386;
				this._referenceIndex = this._variable.type().toMetadata(references, ignoreAlteration);
			}
			else if(this._type.isAlien() && this._type.isPredefined()) {
				return Type.prototype.toMetadata.apply(this, [references, ignoreAlteration]);
			}
			else {
				var reference = this._variable.type().toReference(references, ignoreAlteration);
				this._referenceIndex = references.length;
				references.push(reference);
			}
			return this._referenceIndex;
		},
		toMetadata: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_toMetadata_0.apply(this, arguments);
			}
			return Type.prototype.toMetadata.apply(this, arguments);
		},
		__ks_func_toQuote_0: function() {
			return "'" + this._name + "'";
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toReference_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			this.resolveType();
			if(this._predefined) {
				return this.export(references, ignoreAlteration);
			}
			else if(!this._variable.type().isClass()) {
				return Type.prototype.toReference.apply(this, [references, ignoreAlteration]);
			}
			else if(this._type.isExported()) {
				if(ignoreAlteration && this._type.type().isAlteration()) {
					return this._type.type().toAlterationReference(references, ignoreAlteration);
				}
				else {
					return this._type.toReference(references, ignoreAlteration);
				}
			}
			else if(this._type.isAlien()) {
				return this.export(references, ignoreAlteration);
			}
			else {
				return this.export(references, ignoreAlteration);
			}
		},
		toReference: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			return Type.prototype.toReference.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this.resolveType();
			if(this._variable.type().isAlias()) {
				this._variable.type().toTestFragments(fragments, node);
			}
			else {
				var tof, __ks_387;
				if(KSType.isValue(__ks_387 = $runtime.typeof(this._name, node)) ? (tof = __ks_387, true) : false) {
					fragments.code("" + tof + "(").compile(node);
				}
				else {
					fragments.code("" + $runtime.type(node) + ".is(").compile(node).code(", ");
					if(KSType.is(this._type, NamedType)) {
						fragments.code(this._type.path());
					}
					else {
						fragments.code(this._name);
					}
				}
				for(var __ks_387 = 0, __ks_388 = this._parameters.length, parameter; __ks_387 < __ks_388; ++__ks_387) {
					parameter = this._parameters[__ks_387];
					fragments.code($comma);
					parameter.toFragments(fragments, node);
				}
				fragments.code(")");
			}
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ReferenceType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			this.resolveType();
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ReferenceType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		}
	});
	var SealableType = Helper.class({
		$name: "SealableType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new SealableType(scope, Type.fromMetadata(data.type, metadata, references, alterations, queue, scope, node));
				if(data.sealed) {
					type.flagSealed();
				}
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return SealableType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			}
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(scope, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._type = type;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				SealableType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			if(KSType.is(b, SealableType)) {
				return this._type.equals(b.type());
			}
			else {
				return false;
			}
		},
		equals: function() {
			if(arguments.length === 1) {
				return SealableType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return {
				kind: TypeKind.Sealable,
				sealed: this.isSealed(),
				type: this._type.toReference(references, ignoreAlteration)
			};
		},
		export: function() {
			if(arguments.length === 2) {
				return SealableType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagExported_0: function() {
			this._type.flagExported();
			return this;
		},
		flagExported: function() {
			if(arguments.length === 0) {
				return SealableType.prototype.__ks_func_flagExported_0.apply(this);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_flagReferenced_0: function() {
			this._type.flagReferenced();
			return this;
		},
		flagReferenced: function() {
			if(arguments.length === 0) {
				return SealableType.prototype.__ks_func_flagReferenced_0.apply(this);
			}
			return Type.prototype.flagReferenced.apply(this, arguments);
		},
		__ks_func_isSealable_0: function() {
			return true;
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return SealableType.prototype.__ks_func_isSealable_0.apply(this);
			}
			return Type.prototype.isSealable.apply(this, arguments);
		},
		__ks_func_isSealed_0: function() {
			return this._sealed || this._type.isSealed();
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return SealableType.prototype.__ks_func_isSealed_0.apply(this);
			}
			return Type.prototype.isSealed.apply(this, arguments);
		},
		__ks_func_matchSignatureOf_0: function(that, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			if(KSType.is(that, SealableType)) {
				return this._type.matchSignatureOf(that.type(), matchables);
			}
			else {
				return this._type.matchSignatureOf(that, matchables);
			}
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				return SealableType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
			}
			return Type.prototype.matchSignatureOf.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toFragments(fragments, node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return SealableType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return this._type.toQuote();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return SealableType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toTestFragments(fragments, node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return SealableType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return SealableType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		}
	});
	var AliasType = Helper.class({
		$name: "AliasType",
		$extends: Type,
		$static: {
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new AliasType(scope);
				queue.push(function() {
					type.type(Type.fromMetadata(data.of, metadata, references, alterations, queue, scope, node));
				});
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return AliasType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
		},
		__ks_cons_1: function(scope, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._type = type;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				AliasType.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 2) {
				AliasType.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_discardAlias_0: function() {
			return this._type.discardAlias();
		},
		discardAlias: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_discardAlias_0.apply(this);
			}
			return Type.prototype.discardAlias.apply(this, arguments);
		},
		__ks_func_discardReference_0: function() {
			return this._type.discardAlias();
		},
		discardReference: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_discardReference_0.apply(this);
			}
			return Type.prototype.discardReference.apply(this, arguments);
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			throw new NotImplementedException();
		},
		equals: function() {
			if(arguments.length === 1) {
				return AliasType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return {
				kind: TypeKind.Alias,
				of: this._type.export(references, ignoreAlteration)
			};
		},
		export: function() {
			if(arguments.length === 2) {
				return AliasType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._type.getProperty(name);
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return AliasType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAlias_0: function() {
			return true;
		},
		isAlias: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_isAlias_0.apply(this);
			}
			return Type.prototype.isAlias.apply(this, arguments);
		},
		__ks_func_matchContentOf_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.is(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			return this._type.matchContentOf(that);
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return AliasType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_matchContentTo_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.is(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			return this._type.matchContentTo(that);
		},
		matchContentTo: function() {
			if(arguments.length === 1) {
				return AliasType.prototype.__ks_func_matchContentTo_0.apply(this, arguments);
			}
			return Type.prototype.matchContentTo.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		__ks_func_type_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._type = type;
			return this;
		},
		type: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_type_0.apply(this);
			}
			else if(arguments.length === 1) {
				return AliasType.prototype.__ks_func_type_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AliasType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			throw new NotImplementedException();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return AliasType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._type.toTestFragments(fragments, node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return AliasType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AnyType = Helper.class({
		$name: "AnyType",
		$extends: Type,
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Type.prototype.__ks_cons.call(this, args);
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			return KSType.is(b, AnyType);
		},
		equals: function() {
			if(arguments.length === 1) {
				return AnyType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return "Any";
		},
		export: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagAlien_0: function() {
			var type = new AnyType(null);
			type._alien = true;
			return type;
		},
		flagAlien: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_flagAlien_0.apply(this);
			}
			return Type.prototype.flagAlien.apply(this, arguments);
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return Type.Any;
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return AnyType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hashCode_0: function() {
			return "Any";
		},
		hashCode: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_hashCode_0.apply(this);
			}
			else if(Type.prototype.hashCode) {
				return Type.prototype.hashCode.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAny_0: function() {
			return true;
		},
		isAny: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_isAny_0.apply(this);
			}
			return Type.prototype.isAny.apply(this, arguments);
		},
		__ks_func_isInstanceOf_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.is(target, Type)) {
				throw new TypeError("'target' is not of type 'Type'");
			}
			return true;
		},
		isInstanceOf: function() {
			if(arguments.length === 1) {
				return AnyType.prototype.__ks_func_isInstanceOf_0.apply(this, arguments);
			}
			else if(Type.prototype.isInstanceOf) {
				return Type.prototype.isInstanceOf.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Type.prototype.isNullable) {
				return Type.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchContentOf_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			return true;
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return AnyType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_matchSignatureOf_0: function(b, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			return b.isAny();
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
			}
			return Type.prototype.matchSignatureOf.apply(this, arguments);
		},
		__ks_func_parameter_0: function() {
			return Type.Any;
		},
		parameter: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_parameter_0.apply(this);
			}
			else if(Type.prototype.parameter) {
				return Type.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagRequired_0: function() {
			return this;
		},
		flagRequired: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_flagRequired_0.apply(this);
			}
			return Type.prototype.flagRequired.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code("Any");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toMetadata_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return -1;
		},
		toMetadata: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_toMetadata_0.apply(this, arguments);
			}
			return Type.prototype.toMetadata.apply(this, arguments);
		},
		__ks_func_toQuote_0: function() {
			return "'Any'";
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return AnyType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toReference_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return "Any";
		},
		toReference: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			return Type.prototype.toReference.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return AnyType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Accessibility = {
		Private: 1,
		Protected: 2,
		Public: 3
	};
	var ClassType = Helper.class({
		$name: "ClassType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ClassType(scope);
				type._abstract = data.abstract;
				type._alien = data.alien;
				type._hybrid = data.hybrid;
				type._init = data.init;
				if(data.sealed) {
					type.flagSealed();
				}
				if(KSType.isValue(data.extends)) {
					type.extends(Type.fromMetadata(data.extends, metadata, references, alterations, queue, scope, node).discardReference());
				}
				for(var __ks_419 = 0, __ks_420 = data.constructors.length, method; __ks_419 < __ks_420; ++__ks_419) {
					method = data.constructors[__ks_419];
					type.addConstructor(ClassConstructorType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
				}
				for(var name in data.instanceVariables) {
					var vtype = data.instanceVariables[name];
					type.addInstanceVariable(name, ClassVariableType.fromMetadata(vtype, metadata, references, alterations, queue, scope, node));
				}
				for(var name in data.classVariables) {
					var vtype = data.classVariables[name];
					type.addClassVariable(name, ClassVariableType.fromMetadata(vtype, metadata, references, alterations, queue, scope, node));
				}
				for(var name in data.instanceMethods) {
					var methods = data.instanceMethods[name];
					for(var __ks_419 = 0, __ks_420 = methods.length, method; __ks_419 < __ks_420; ++__ks_419) {
						method = methods[__ks_419];
						type.addInstanceMethod(name, ClassMethodType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
					}
				}
				for(var name in data.classMethods) {
					var methods = data.classMethods[name];
					for(var __ks_419 = 0, __ks_420 = methods.length, method; __ks_419 < __ks_420; ++__ks_419) {
						method = methods[__ks_419];
						type.addClassMethod(name, ClassMethodType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
					}
				}
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return ClassType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			},
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ClassType(scope);
				if(KSType.isValue(data.class)) {
					alterations[data.class.reference] = index;
					queue.push(function() {
						var source = references[data.class.reference];
						type.copyFrom(source.type());
						for(var name in data.instanceVariables) {
							var vtype = data.instanceVariables[name];
							type.addInstanceVariable(name, ClassVariableType.fromMetadata(vtype, metadata, references, alterations, queue, scope, node).flagAlteration());
						}
						for(var name in data.classVariables) {
							var vtype = data.classVariables[name];
							type.addClassVariable(name, ClassVariableType.fromMetadata(vtype, metadata, references, alterations, queue, scope, node).flagAlteration());
						}
						for(var name in data.instanceMethods) {
							var methods = data.instanceMethods[name];
							for(var __ks_421 = 0, __ks_422 = methods.length, method; __ks_421 < __ks_422; ++__ks_421) {
								method = methods[__ks_421];
								type.addInstanceMethod(name, ClassMethodType.fromMetadata(method, metadata, references, alterations, queue, scope, node).flagAlteration());
							}
						}
						for(var name in data.classMethods) {
							var methods = data.classMethods[name];
							for(var __ks_421 = 0, __ks_422 = methods.length, method; __ks_421 < __ks_422; ++__ks_421) {
								method = methods[__ks_421];
								type.addClassMethod(name, ClassMethodType.fromMetadata(method, metadata, references, alterations, queue, scope, node).flagAlteration());
							}
						}
					});
				}
				else {
					type._abstract = data.abstract;
					type._alien = data.alien;
					type._hybrid = data.hybrid;
					type._init = data.init;
					if(data.sealed) {
						type.flagSealed();
					}
					queue.push(function() {
						if(KSType.isValue(data.extends)) {
							type.extends(Type.fromMetadata(data.extends, metadata, references, alterations, queue, scope, node).discardReference());
						}
						for(var __ks_423 = 0, __ks_424 = data.constructors.length, method; __ks_423 < __ks_424; ++__ks_423) {
							method = data.constructors[__ks_423];
							type.addConstructor(ClassConstructorType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
						}
						for(var name in data.instanceVariables) {
							var vtype = data.instanceVariables[name];
							type.addInstanceVariable(name, ClassVariableType.fromMetadata(vtype, metadata, references, alterations, queue, scope, node));
						}
						for(var name in data.classVariables) {
							var vtype = data.classVariables[name];
							type.addClassVariable(name, ClassVariableType.fromMetadata(vtype, metadata, references, alterations, queue, scope, node));
						}
						for(var name in data.instanceMethods) {
							var methods = data.instanceMethods[name];
							for(var __ks_423 = 0, __ks_424 = methods.length, method; __ks_423 < __ks_424; ++__ks_423) {
								method = methods[__ks_423];
								type.addInstanceMethod(name, ClassMethodType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
							}
						}
						for(var name in data.classMethods) {
							var methods = data.classMethods[name];
							for(var __ks_423 = 0, __ks_424 = methods.length, method; __ks_423 < __ks_424; ++__ks_423) {
								method = methods[__ks_423];
								type.addClassMethod(name, ClassMethodType.fromMetadata(method, metadata, references, alterations, queue, scope, node));
							}
						}
					});
				}
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return ClassType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._abstract = false;
			this._abstractMethods = {};
			this._classMethods = {};
			this._classVariables = {};
			this._constructors = [];
			this._destructors = 0;
			this._extending = false;
			this._hybrid = false;
			this._init = 0;
			this._instanceMethods = {};
			this._instanceVariables = {};
			this._predefined = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			ClassType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Type.prototype.__ks_cons.call(this, args);
		},
		__ks_func_addAbstractMethod_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassMethodType)) {
				throw new TypeError("'type' is not of type 'ClassMethodType'");
			}
			var index = 0;
			if(KSType.isArray(this._abstractMethods[name])) {
				index = this._abstractMethods[name].length;
				this._abstractMethods[name].push(type);
			}
			else {
				this._abstractMethods[name] = [type];
			}
			return index;
		},
		addAbstractMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addAbstractMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.addAbstractMethod) {
				return Type.prototype.addAbstractMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addClassMethod_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassMethodType)) {
				throw new TypeError("'type' is not of type 'ClassMethodType'");
			}
			var index = 0;
			if(KSType.isArray(this._classMethods[name])) {
				index = 0;
				for(var __ks_389 = this._classMethods[name].length, method; index < __ks_389; ++index) {
					method = this._classMethods[name][index];
					if(method.matchSignatureOf(type, [])) {
						return null;
					}
				}
				index = this._classMethods[name].length;
				this._classMethods[name].push(type);
			}
			else {
				this._classMethods[name] = [type];
			}
			if(type.isSealed()) {
				this._seal.classMethods[name] = true;
			}
			return index;
		},
		addClassMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addClassMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.addClassMethod) {
				return Type.prototype.addClassMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addClassVariable_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassVariableType)) {
				throw new TypeError("'type' is not of type 'ClassVariableType'");
			}
			this._classVariables[name] = type;
		},
		addClassVariable: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addClassVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.addClassVariable) {
				return Type.prototype.addClassVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addConstructor_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassConstructorType)) {
				throw new TypeError("'type' is not of type 'ClassConstructorType'");
			}
			this._constructors.push(type);
		},
		addConstructor: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_addConstructor_0.apply(this, arguments);
			}
			else if(Type.prototype.addConstructor) {
				return Type.prototype.addConstructor.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addDestructor_0: function() {
			this._destructors++;
		},
		addDestructor: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_addDestructor_0.apply(this);
			}
			else if(Type.prototype.addDestructor) {
				return Type.prototype.addDestructor.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addInstanceMethod_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassMethodType)) {
				throw new TypeError("'type' is not of type 'ClassMethodType'");
			}
			var index = 0;
			if(KSType.isArray(this._instanceMethods[name])) {
				index = 0;
				for(var __ks_390 = this._instanceMethods[name].length, method; index < __ks_390; ++index) {
					method = this._instanceMethods[name][index];
					if(method.matchSignatureOf(type, [])) {
						return null;
					}
				}
				index = this._instanceMethods[name].length;
				this._instanceMethods[name].push(type);
			}
			else {
				this._instanceMethods[name] = [type];
			}
			if(type.isSealed()) {
				this._seal.instanceMethods[name] = true;
			}
			return index;
		},
		addInstanceMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.addInstanceMethod) {
				return Type.prototype.addInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addInstanceVariable_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassVariableType)) {
				throw new TypeError("'type' is not of type 'ClassVariableType'");
			}
			this._instanceVariables[name] = type;
		},
		addInstanceVariable: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addInstanceVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.addInstanceVariable) {
				return Type.prototype.addInstanceVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addPropertyFromAST_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks_391 = data.kind;
			if(__ks_391 === NodeKind.FieldDeclaration) {
				throw new NotImplementedException(node);
			}
			else if(__ks_391 === NodeKind.MethodDeclaration) {
				if(this.isConstructor(data.name.name)) {
					throw new NotImplementedException(node);
				}
				else if(this.isDestructor(data.name.name)) {
					throw new NotImplementedException(node);
				}
				else {
					var instance = true;
					for(var i = 0, __ks_392 = data.modifiers.length; instance && i < __ks_392; ++i) {
						if(data.modifiers[i].kind === ModifierKind.Static) {
							instance = false;
						}
					}
					var type = ClassMethodType.fromAST(data, node);
					if(instance) {
						this.addInstanceMethod(data.name.name, type);
					}
					else {
						this.addClassMethod(data.name.name, type);
					}
				}
			}
			else {
				throw new NotSupportedException("Unexpected kind " + data.kind, node);
			}
		},
		addPropertyFromAST: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_addPropertyFromAST_0.apply(this, arguments);
			}
			else if(Type.prototype.addPropertyFromAST) {
				return Type.prototype.addPropertyFromAST.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_clone_0: function() {
			var that = new ClassType(this._scope);
			return that.copyFrom(this);
		},
		clone: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_condense_0: function() {
			for(var __ks_393 in this._abstractMethods) {
				var methods = this._abstractMethods[__ks_393];
				for(var __ks_394 = 0, __ks_395 = methods.length, method; __ks_394 < __ks_395; ++__ks_394) {
					method = methods[__ks_394];
					method.unflagAlteration();
				}
			}
			for(var __ks_393 in this._classMethods) {
				var methods = this._classMethods[__ks_393];
				for(var __ks_394 = 0, __ks_395 = methods.length, method; __ks_394 < __ks_395; ++__ks_394) {
					method = methods[__ks_394];
					method.unflagAlteration();
				}
			}
			for(var __ks_393 in this._instanceMethods) {
				var methods = this._instanceMethods[__ks_393];
				for(var __ks_394 = 0, __ks_395 = methods.length, method; __ks_394 < __ks_395; ++__ks_394) {
					method = methods[__ks_394];
					method.unflagAlteration();
				}
			}
			for(var __ks_393 in this._classVariables) {
				var variable = this._classVariables[__ks_393];
				variable.unflagAlteration();
			}
			for(var __ks_393 in this._instanceVariables) {
				var variable = this._instanceVariables[__ks_393];
				variable.unflagAlteration();
			}
			this._alterationReference = null;
			return this;
		},
		condense: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_condense_0.apply(this);
			}
			return Type.prototype.condense.apply(this, arguments);
		},
		__ks_func_copyFrom_0: function(src) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(src === void 0 || src === null) {
				throw new TypeError("'src' is not nullable");
			}
			else if(!KSType.is(src, ClassType)) {
				throw new TypeError("'src' is not of type 'ClassType'");
			}
			this._abstract = src._abstract;
			this._alien = src._alien;
			this._destructors = src._destructors;
			this._extending = src._extending;
			this._extends = src._extends;
			this._hybrid = src._hybrid;
			this._init = src._init;
			this._sealed = src._sealed;
			for(var name in src._abstractMethods) {
				var methods = src._abstractMethods[name];
				var __ks_396;
				this._abstractMethods[name] = [].concat(methods);
			}
			for(var name in src._classMethods) {
				var methods = src._classMethods[name];
				this._classMethods[name] = [].concat(methods);
			}
			for(var name in src._instanceMethods) {
				var methods = src._instanceMethods[name];
				this._instanceMethods[name] = [].concat(methods);
			}
			for(var name in src._classVariables) {
				var variable = src._classVariables[name];
				this._classVariables[name] = variable;
			}
			for(var name in src._instanceVariables) {
				var variable = src._instanceVariables[name];
				this._instanceVariables[name] = variable;
			}
			this._constructors.concat(src._constructors);
			if(src._sealed) {
				this._seal = __ks_Object._cm_clone(src._seal);
			}
			if(src.isRequired() || src.isAlien()) {
				this.setAlterationReference(src);
			}
			return this;
		},
		copyFrom: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_copyFrom_0.apply(this, arguments);
			}
			else if(Type.prototype.copyFrom) {
				return Type.prototype.copyFrom.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_destructors_0: function() {
			return this._destructors;
		},
		destructors: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_destructors_0.apply(this);
			}
			else if(Type.prototype.destructors) {
				return Type.prototype.destructors.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			return this === b;
		},
		equals: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			if(this.hasExportableAlteration()) {
				var __ks_export_1 = {
					kind: TypeKind.Class,
					class: this._alterationReference.toAlterationReference(references, ignoreAlteration),
					init: this._init,
					instanceVariables: {},
					classVariables: {},
					instanceMethods: {},
					classMethods: {}
				};
				for(var name in this._instanceVariables) {
					var variable = this._instanceVariables[name];
					if(variable.isAlteration()) {
						var __ks_397;
						__ks_export_1.instanceVariables[name] = variable.export(references, ignoreAlteration);
					}
				}
				for(var name in this._classVariables) {
					var variable = this._classVariables[name];
					if(variable.isAlteration()) {
						__ks_export_1.classVariables[name] = variable.export(references, ignoreAlteration);
					}
				}
				for(var name in this._instanceMethods) {
					var methods = this._instanceMethods[name];
					var exportedMethods = Helper.mapArray(methods, function(method) {
						return method.export(references, ignoreAlteration);
					}, function(method) {
						return method.isAlteration();
					});
					if(exportedMethods.length > 0) {
						__ks_export_1.instanceMethods[name] = exportedMethods;
					}
				}
				for(var name in this._classMethods) {
					var methods = this._classMethods[name];
					var exportedMethods = Helper.mapArray(methods, function(method) {
						return method.export(references, ignoreAlteration);
					}, function(method) {
						return method.isAlteration();
					});
					if(exportedMethods.length > 0) {
						__ks_export_1.classMethods[name] = exportedMethods;
					}
				}
				return __ks_export_1;
			}
			else {
				var __ks_export_1 = {
					kind: TypeKind.Class,
					abstract: this._abstract,
					alien: this._alien,
					hybrid: this._hybrid,
					sealed: this._sealed,
					init: this._init,
					constructors: Helper.mapArray(this._constructors, function(__ks_constructor_1) {
						return __ks_constructor_1.export(references, ignoreAlteration);
					}),
					destructors: this._destructors,
					instanceVariables: {},
					classVariables: {},
					instanceMethods: {},
					classMethods: {}
				};
				for(var name in this._instanceVariables) {
					var variable = this._instanceVariables[name];
					__ks_export_1.instanceVariables[name] = variable.export(references, ignoreAlteration);
				}
				for(var name in this._classVariables) {
					var variable = this._classVariables[name];
					__ks_export_1.classVariables[name] = variable.export(references, ignoreAlteration);
				}
				for(var name in this._instanceMethods) {
					var methods = this._instanceMethods[name];
					__ks_export_1.instanceMethods[name] = Helper.mapArray(methods, function(method) {
						return method.export(references, ignoreAlteration);
					});
				}
				for(var name in this._classMethods) {
					var methods = this._classMethods[name];
					__ks_export_1.classMethods[name] = Helper.mapArray(methods, function(method) {
						return method.export(references, ignoreAlteration);
					});
				}
				if(this._abstract) {
					__ks_export_1.abstractMethods = {};
					for(var name in this._abstractMethods) {
						var methods = this._abstractMethods[name];
						__ks_export_1.abstractMethods[name] = Helper.mapArray(methods, function(method) {
							return method.export(references, ignoreAlteration);
						});
					}
				}
				if(this._extending) {
					__ks_export_1.extends = this._extends.metaReference(references, ignoreAlteration);
				}
				return __ks_export_1;
			}
		},
		export: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagAbstract_0: function() {
			this._abstract = true;
		},
		flagAbstract: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_flagAbstract_0.apply(this);
			}
			else if(Type.prototype.flagAbstract) {
				return Type.prototype.flagAbstract.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagExported_0: function() {
			if(this._exported) {
				return this;
			}
			else {
				this._exported = true;
			}
			for(var __ks_398 = 0, __ks_399 = this._constructors.length, method; __ks_398 < __ks_399; ++__ks_398) {
				method = this._constructors[__ks_398];
				method.flagExported();
			}
			for(var __ks_398 in this._instanceVariables) {
				var variable = this._instanceVariables[__ks_398];
				variable.type().flagExported();
			}
			for(var __ks_398 in this._classVariables) {
				var variable = this._classVariables[__ks_398];
				variable.type().flagExported();
			}
			for(var __ks_398 in this._instanceMethods) {
				var methods = this._instanceMethods[__ks_398];
				if(KSType.isArray(methods)) {
					for(var __ks_399 = 0, __ks_400 = methods.length, method; __ks_399 < __ks_400; ++__ks_399) {
						method = methods[__ks_399];
						method.flagExported();
					}
				}
			}
			for(var __ks_398 in this._classMethods) {
				var methods = this._classMethods[__ks_398];
				if(KSType.isArray(methods)) {
					for(var __ks_399 = 0, __ks_400 = methods.length, method; __ks_399 < __ks_400; ++__ks_399) {
						method = methods[__ks_399];
						method.flagExported();
					}
				}
			}
			if(this._extending) {
				this._extends.flagExported();
			}
			return this;
		},
		flagExported: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_flagExported_0.apply(this);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_hasExportableAlteration_0: function() {
			if(KSType.isValue(this._alterationReference)) {
				return (this._alterationReference._referenceIndex !== -1) || this._alterationReference.hasExportableAlteration();
			}
			else {
				return false;
			}
		},
		hasExportableAlteration: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_hasExportableAlteration_0.apply(this);
			}
			else if(Type.prototype.hasExportableAlteration) {
				return Type.prototype.hasExportableAlteration.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_extends_0: function() {
			return this._extends;
		},
		__ks_func_extends_1: function(__ks_extends_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_extends_1 === void 0 || __ks_extends_1 === null) {
				throw new TypeError("'extends' is not nullable");
			}
			else if(!KSType.is(__ks_extends_1, NamedType)) {
				throw new TypeError("'extends' is not of type 'NamedType'");
			}
			this._extends = __ks_extends_1;
			this._extending = true;
			var type = this._extends.type();
			if(type.isAlien() || type.isHybrid()) {
				this._hybrid = true;
			}
		},
		extends: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_extends_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_extends_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_filterAbstractMethods_0: function(abstractMethods) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(abstractMethods === void 0 || abstractMethods === null) {
				throw new TypeError("'abstractMethods' is not nullable");
			}
			if(this._extending) {
				this._extends.type().filterAbstractMethods(abstractMethods);
			}
			if(this._abstract) {
				for(var name in this._abstractMethods) {
					var methods = this._abstractMethods[name];
					if(!KSType.isArray(abstractMethods[name])) {
						abstractMethods[name] = [];
					}
					__ks_Array._im_append(abstractMethods[name], methods);
				}
			}
			var matchables = [];
			var method, index;
			for(var name in abstractMethods) {
				var methods = abstractMethods[name];
				if(KSType.isArray(this._instanceMethods[name])) {
					index = methods.length - 1;
					for(var __ks_401 = 0; index >= __ks_401; --index) {
						method = methods[index];
						if(method.isMatched(this._instanceMethods[name], matchables)) {
							methods.splice(index, 1);
						}
					}
					if(methods.length === 0) {
						delete abstractMethods[name];
					}
				}
			}
		},
		filterAbstractMethods: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_filterAbstractMethods_0.apply(this, arguments);
			}
			else if(Type.prototype.filterAbstractMethods) {
				return Type.prototype.filterAbstractMethods.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagPredefined_0: function() {
			this._predefined = true;
		},
		flagPredefined: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_flagPredefined_0.apply(this);
			}
			else if(Type.prototype.flagPredefined) {
				return Type.prototype.flagPredefined.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagSealed_0: function() {
			this._sealed = true;
			this._seal = {
				constructors: false,
				instanceMethods: {},
				classMethods: {}
			};
			return this;
		},
		flagSealed: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_flagSealed_0.apply(this);
			}
			return Type.prototype.flagSealed.apply(this, arguments);
		},
		__ks_func_getAsbtractMethod_0: function(name, __ks_arguments_1) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if(KSType.isArray(this._abstractMethods[name])) {
				for(var __ks_402 = 0, __ks_403 = this._abstractMethods[name].length, method; __ks_402 < __ks_403; ++__ks_402) {
					method = this._abstractMethods[name][__ks_402];
					if(method.matchArguments(__ks_arguments_1)) {
						return method;
					}
				}
			}
			if(this._extending) {
				return this._extends.type().getAsbtractMethod(name, __ks_arguments_1);
			}
			else {
				return null;
			}
		},
		getAsbtractMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_getAsbtractMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.getAsbtractMethod) {
				return Type.prototype.getAsbtractMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getClassMethods_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._classMethods[name])) {
				return this._classMethods[name];
			}
			return null;
		},
		getClassMethods: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getClassMethods_0.apply(this, arguments);
			}
			else if(Type.prototype.getClassMethods) {
				return Type.prototype.getClassMethods.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getClassProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._classMethods[name])) {
				return this._scope.reference("Function");
			}
			else {
				return KSType.isValue(this._classVariables[name]) ? this._classVariables[name] : Type.Any;
			}
		},
		getClassProperty: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getClassProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getClassProperty) {
				return Type.prototype.getClassProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getHierarchy_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._extending) {
				var __ks_class_1 = this.extends();
				var hierarchy = [name, __ks_class_1.name()];
				while(__ks_class_1.type().isExtending()) {
					hierarchy.push((__ks_class_1 = __ks_class_1.type().extends()).name());
				}
				return hierarchy;
			}
			else {
				return [name];
			}
		},
		getHierarchy: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getHierarchy_0.apply(this, arguments);
			}
			else if(Type.prototype.getHierarchy) {
				return Type.prototype.getHierarchy.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getInstanceMethod_0: function(name, __ks_arguments_1) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				for(var __ks_404 = 0, __ks_405 = this._instanceMethods[name].length, method; __ks_404 < __ks_405; ++__ks_404) {
					method = this._instanceMethods[name][__ks_404];
					if(method.matchArguments(__ks_arguments_1)) {
						return method;
					}
				}
			}
			if(this._extending) {
				return this._extends.type().getInstanceMethod(name, __ks_arguments_1);
			}
			else {
				return null;
			}
		},
		getInstanceMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_getInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.getInstanceMethod) {
				return Type.prototype.getInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getInstanceMethods_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				return this._instanceMethods[name];
			}
			return null;
		},
		getInstanceMethods: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getInstanceMethods_0.apply(this, arguments);
			}
			else if(Type.prototype.getInstanceMethods) {
				return Type.prototype.getInstanceMethods.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getInstanceProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				return new ClassMethodSetType(this._scope, this._instanceMethods[name]);
			}
			else if(KSType.is(this._instanceVariables[name], ClassVariableType)) {
				return this._instanceVariables[name];
			}
			else {
				return Type.Any;
			}
		},
		getInstanceProperty: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getInstanceProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getInstanceProperty) {
				return Type.prototype.getInstanceProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getInstanceVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isValue(this._instanceVariables[name])) {
				return this._instanceVariables[name];
			}
			else if(this._extending) {
				return this._extends.type().getInstanceVariable(name);
			}
			return null;
		},
		getInstanceVariable: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getInstanceVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.getInstanceVariable) {
				return Type.prototype.getInstanceVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getMissingAbstractMethods_0: function() {
			var abstractMethods = {};
			if(this._extending) {
				this._extends.type().filterAbstractMethods(abstractMethods);
			}
			var matchables = [];
			var method, index;
			for(var name in abstractMethods) {
				var methods = abstractMethods[name];
				if(KSType.isArray(this._instanceMethods[name])) {
					index = methods.length - 1;
					for(var __ks_406 = 0; index >= __ks_406; --index) {
						method = methods[index];
						if(method.isMatched(this._instanceMethods[name], matchables)) {
							methods.splice(index, 1);
						}
					}
					if(methods.length === 0) {
						delete abstractMethods[name];
					}
				}
			}
			return Object.keys(abstractMethods);
		},
		getMissingAbstractMethods: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_getMissingAbstractMethods_0.apply(this);
			}
			else if(Type.prototype.getMissingAbstractMethods) {
				return Type.prototype.getMissingAbstractMethods.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this.getClassProperty(name);
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getPropertyGetter_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				for(var __ks_407 = 0, __ks_408 = this._instanceMethods[name].length, method; __ks_407 < __ks_408; ++__ks_407) {
					method = this._instanceMethods[name][__ks_407];
					if((method.min() === 0) && (method.max() === 0)) {
						return method.returnType();
					}
				}
			}
			else if(this._extending) {
				return this._extends.type().getPropertyGetter(name);
			}
			return null;
		},
		getPropertyGetter: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getPropertyGetter_0.apply(this, arguments);
			}
			else if(Type.prototype.getPropertyGetter) {
				return Type.prototype.getPropertyGetter.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getPropertySetter_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				for(var __ks_409 = 0, __ks_410 = this._instanceMethods[name].length, method; __ks_409 < __ks_410; ++__ks_409) {
					method = this._instanceMethods[name][__ks_409];
					if((method.min() === 1) && (method.max() === 1)) {
						return method.parameter(0).type();
					}
				}
			}
			else if(this._extending) {
				return this._extends.type().getPropertySetter(name);
			}
			return null;
		},
		getPropertySetter: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_getPropertySetter_0.apply(this, arguments);
			}
			else if(Type.prototype.getPropertySetter) {
				return Type.prototype.getPropertySetter.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasClassMethod_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isArray(this._classMethods[name])) {
				return true;
			}
			if(this._extending) {
				return this._extends.type().hasClassMethod(name);
			}
			else {
				return false;
			}
		},
		hasClassMethod: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_hasClassMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.hasClassMethod) {
				return Type.prototype.hasClassMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasClassVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.is(this._classVariables[name], ClassVariableType)) {
				return true;
			}
			if(this._extending) {
				return this._extends.type().hasClassVariable(name);
			}
			else {
				return false;
			}
		},
		hasClassVariable: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_hasClassVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.hasClassVariable) {
				return Type.prototype.hasClassVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasConstructors_0: function() {
			return this._constructors.length !== 0;
		},
		hasConstructors: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_hasConstructors_0.apply(this);
			}
			else if(Type.prototype.hasConstructors) {
				return Type.prototype.hasConstructors.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasDestructors_0: function() {
			return this._destructors !== 0;
		},
		hasDestructors: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_hasDestructors_0.apply(this);
			}
			else if(Type.prototype.hasDestructors) {
				return Type.prototype.hasDestructors.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasInstanceMethod_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				return true;
			}
			if(this._extending) {
				return this._extends.type().hasInstanceMethod(name);
			}
			else {
				return false;
			}
		},
		hasInstanceMethod: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_hasInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.hasInstanceMethod) {
				return Type.prototype.hasInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasInstanceVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.is(this._instanceVariables[name], ClassVariableType)) {
				return true;
			}
			if(this._extending) {
				return this._extends.type().hasInstanceVariable(name);
			}
			else {
				return false;
			}
		},
		hasInstanceVariable: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_hasInstanceVariable_0.apply(this, arguments);
			}
			else if(Type.prototype.hasInstanceVariable) {
				return Type.prototype.hasInstanceVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_init_0: function() {
			return this._init;
		},
		__ks_func_init_1: function(init) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(init === void 0 || init === null) {
				throw new TypeError("'init' is not nullable");
			}
			else if(!KSType.isNumber(init)) {
				throw new TypeError("'init' is not of type 'Number'");
			}
			this._init = init;
			return this;
		},
		init: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_init_0.apply(this);
			}
			else if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_init_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAbstract_0: function() {
			return this._abstract;
		},
		isAbstract: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isAbstract_0.apply(this);
			}
			else if(Type.prototype.isAbstract) {
				return Type.prototype.isAbstract.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAlteration_0: function() {
			return KSType.isValue(this._alterationReference);
		},
		isAlteration: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isAlteration_0.apply(this);
			}
			return Type.prototype.isAlteration.apply(this, arguments);
		},
		__ks_func_isClass_0: function() {
			return true;
		},
		isClass: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isClass_0.apply(this);
			}
			return Type.prototype.isClass.apply(this, arguments);
		},
		__ks_func_isConstructor_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return name === "constructor";
		},
		isConstructor: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isConstructor_0.apply(this, arguments);
			}
			else if(Type.prototype.isConstructor) {
				return Type.prototype.isConstructor.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isDestructor_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return name === "destructor";
		},
		isDestructor: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isDestructor_0.apply(this, arguments);
			}
			else if(Type.prototype.isDestructor) {
				return Type.prototype.isDestructor.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExtendable_0: function() {
			return true;
		},
		isExtendable: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isExtendable_0.apply(this);
			}
			return Type.prototype.isExtendable.apply(this, arguments);
		},
		__ks_func_isExtending_0: function() {
			return this._extending;
		},
		isExtending: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isExtending_0.apply(this);
			}
			else if(Type.prototype.isExtending) {
				return Type.prototype.isExtending.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isFlexible_0: function() {
			return this._sealed;
		},
		isFlexible: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isFlexible_0.apply(this);
			}
			return Type.prototype.isFlexible.apply(this, arguments);
		},
		__ks_func_isHybrid_0: function() {
			return this._hybrid;
		},
		isHybrid: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isHybrid_0.apply(this);
			}
			else if(Type.prototype.isHybrid) {
				return Type.prototype.isHybrid.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isInstanceOf_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			else if(!KSType.is(target, ClassType)) {
				throw new TypeError("'target' is not of type 'ClassType'");
			}
			if(this.equals(target)) {
				return true;
			}
			else if(this._extending) {
				return this._extends.type().isInstanceOf(target);
			}
			else {
				return false;
			}
		},
		isInstanceOf: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isInstanceOf_0.apply(this, arguments);
			}
			else if(Type.prototype.isInstanceOf) {
				return Type.prototype.isInstanceOf.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isMergeable_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			return type.isClass();
		},
		isMergeable: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_isMergeable_0.apply(this, arguments);
			}
			return Type.prototype.isMergeable.apply(this, arguments);
		},
		__ks_func_isPredefined_0: function() {
			return this._predefined;
		},
		isPredefined: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isPredefined_0.apply(this);
			}
			return Type.prototype.isPredefined.apply(this, arguments);
		},
		__ks_func_isSealable_0: function() {
			return true;
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_isSealable_0.apply(this);
			}
			return Type.prototype.isSealable.apply(this, arguments);
		},
		__ks_func_matchArguments_0: function(__ks_arguments_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1, Type)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if(this._constructors.length === 0) {
				if(this._extending) {
					return this._extends.type().matchArguments(__ks_arguments_1);
				}
				else {
					return this._alien || (__ks_arguments_1.length === 0);
				}
			}
			else {
				for(var __ks_411 = 0, __ks_412 = this._constructors.length, __ks_constructor_1; __ks_411 < __ks_412; ++__ks_411) {
					__ks_constructor_1 = this._constructors[__ks_411];
					if(__ks_constructor_1.matchArguments(__ks_arguments_1)) {
						return true;
					}
				}
				return false;
			}
		},
		matchArguments: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_matchArguments_0.apply(this, arguments);
			}
			else if(Type.prototype.matchArguments) {
				return Type.prototype.matchArguments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchClassMethod_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassMethodType)) {
				throw new TypeError("'type' is not of type 'ClassMethodType'");
			}
			if(KSType.isArray(this._classMethods[name])) {
				for(var index = 0, __ks_413 = this._classMethods[name].length, method; index < __ks_413; ++index) {
					method = this._classMethods[name][index];
					if(method.matchSignatureOf(type, [])) {
						return index;
					}
				}
			}
			if(this._extending) {
				return this._extends.type().matchClassMethod(name, type);
			}
			else {
				return null;
			}
		},
		matchClassMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_matchClassMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.matchClassMethod) {
				return Type.prototype.matchClassMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchInstanceMethod_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, ClassMethodType)) {
				throw new TypeError("'type' is not of type 'ClassMethodType'");
			}
			if(KSType.isArray(this._instanceMethods[name])) {
				for(var index = 0, __ks_414 = this._instanceMethods[name].length, method; index < __ks_414; ++index) {
					method = this._instanceMethods[name][index];
					if(method.matchSignatureOf(type, [])) {
						return index;
					}
				}
			}
			if(this._extending) {
				return this._extends.type().matchInstanceMethod(name, type);
			}
			else {
				return null;
			}
		},
		matchInstanceMethod: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_matchInstanceMethod_0.apply(this, arguments);
			}
			else if(Type.prototype.matchInstanceMethod) {
				return Type.prototype.matchInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchInstanceWith_0: function(object, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(object === void 0 || object === null) {
				throw new TypeError("'object' is not nullable");
			}
			else if(!KSType.is(object, ObjectType)) {
				throw new TypeError("'object' is not of type 'ObjectType'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			for(var name in object._properties) {
				var property = object._properties[name];
				if(KSType.isValue(this._instanceVariables[name]) ? this._instanceVariables[name].matchSignatureOf(property, matchables) : false) {
				}
				else if(KSType.isArray(this._instanceMethods[name])) {
					var nf = true;
					for(var __ks_415 = 0, __ks_416 = this._instanceMethods[name].length, method; nf && __ks_415 < __ks_416; ++__ks_415) {
						method = this._instanceMethods[name][__ks_415];
						if(method.matchSignatureOf(property, matchables)) {
							nf = false;
						}
					}
					if(nf) {
						return false;
					}
				}
				else {
					return false;
				}
			}
			return true;
		},
		matchInstanceWith: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_matchInstanceWith_0.apply(this, arguments);
			}
			else if(Type.prototype.matchInstanceWith) {
				return Type.prototype.matchInstanceWith.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchSignatureOf_0: function(that, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			return false;
		},
		__ks_func_matchSignatureOf_1: function(that, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.is(that, ClassType)) {
				throw new TypeError("'that' is not of type 'ClassType'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			for(var i = 0, __ks_417 = matchables.length; i < __ks_417; i += 3) {
				if((matchables[i] === this) && (matchables[i + 1] === that)) {
					return matchables[i + 2];
				}
			}
			var index = matchables.length;
			matchables.push(this, that, true);
			for(var name in that._instanceVariables) {
				var variable = that._instanceVariables[name];
				if(!(KSType.isValue(this._instanceVariables[name]) ? this._instanceVariables[name].matchSignatureOf(variable, matchables) : false)) {
					matchables[index + 2] = false;
					return false;
				}
			}
			for(var name in that._classVariables) {
				var variable = that._classVariables[name];
				if(!(KSType.isValue(this._classVariables[name]) ? this._classVariables[name].matchSignatureOf(variable, matchables) : false)) {
					matchables[index + 2] = false;
					return false;
				}
			}
			for(var name in that._instanceMethods) {
				var methods = that._instanceMethods[name];
				if(!KSType.isArray(this._instanceMethods[name])) {
					matchables[index + 2] = false;
					return false;
				}
				for(var __ks_417 = 0, __ks_418 = methods.length, method; __ks_417 < __ks_418; ++__ks_417) {
					method = methods[__ks_417];
					if(!method.isMatched(this._instanceMethods[name], matchables)) {
						matchables[index + 2] = false;
						return false;
					}
				}
			}
			for(var name in that._classMethods) {
				var methods = that._classMethods[name];
				if(!KSType.isArray(this._classMethods[name])) {
					matchables[index + 2] = false;
					return false;
				}
				for(var __ks_417 = 0, __ks_418 = methods.length, method; __ks_417 < __ks_418; ++__ks_417) {
					method = methods[__ks_417];
					if(!method.isMatched(this._classMethods[name], matchables)) {
						matchables[index + 2] = false;
						return false;
					}
				}
			}
			return true;
		},
		__ks_func_matchSignatureOf_2: function(that, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.is(that, NamedType)) {
				throw new TypeError("'that' is not of type 'NamedType'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			return this.matchSignatureOf(that.type(), matchables);
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				if(KSType.is(arguments[0], ClassType)) {
					return ClassType.prototype.__ks_func_matchSignatureOf_1.apply(this, arguments);
				}
				else if(KSType.is(arguments[0], NamedType)) {
					return ClassType.prototype.__ks_func_matchSignatureOf_2.apply(this, arguments);
				}
				else {
					return ClassType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
				}
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_metaReference_0: function(references, name, ignoreAlteration) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			if(this._predefined) {
				return name;
			}
			else {
				return [this.toMetadata(references, ignoreAlteration), name];
			}
		},
		metaReference: function() {
			if(arguments.length === 3) {
				return ClassType.prototype.__ks_func_metaReference_0.apply(this, arguments);
			}
			else if(Type.prototype.metaReference) {
				return Type.prototype.metaReference.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_setAlterationReference_0: function(alterationReference) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(alterationReference === void 0 || alterationReference === null) {
				throw new TypeError("'alterationReference' is not nullable");
			}
			else if(!KSType.is(alterationReference, ClassType)) {
				throw new TypeError("'alterationReference' is not of type 'ClassType'");
			}
			this._alterationReference = alterationReference;
		},
		setAlterationReference: function() {
			if(arguments.length === 1) {
				return ClassType.prototype.__ks_func_setAlterationReference_0.apply(this, arguments);
			}
			else if(Type.prototype.setAlterationReference) {
				return Type.prototype.setAlterationReference.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAlterationReference_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			if(this._referenceIndex !== -1) {
				return {
					reference: this._referenceIndex
				};
			}
			else if(KSType.isValue(this._alterationReference)) {
				return this._alterationReference.toAlterationReference(references, ignoreAlteration);
			}
			else {
				return this.toReference(references, ignoreAlteration);
			}
		},
		toAlterationReference: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_toAlterationReference_0.apply(this, arguments);
			}
			else if(Type.prototype.toAlterationReference) {
				return Type.prototype.toAlterationReference.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			throw new NotImplementedException();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return ClassType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toReference_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			if(!this.isExported() && this.isAlteration()) {
				return this._alterationReference.toReference(references, ignoreAlteration);
			}
			else {
				return Type.prototype.toReference.apply(this, [references, ignoreAlteration]);
			}
		},
		toReference: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			return Type.prototype.toReference.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ClassType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassVariableType = Helper.class({
		$name: "ClassVariableType",
		$extends: Type,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var scope = node.scope();
				var type;
				if(KSType.isValue(data.type)) {
					type = new ClassVariableType(scope, Type.fromAST(data.type, node));
				}
				else {
					type = new ClassVariableType(scope, new ReferenceType(scope, "Any"));
				}
				if(KSType.isValue(data.modifiers)) {
					for(var __ks_425 = 0, __ks_426 = data.modifiers.length, modifier; __ks_425 < __ks_426; ++__ks_425) {
						modifier = data.modifiers[__ks_425];
						if(modifier.kind === ModifierKind.Private) {
							type.access(Accessibility.Private);
						}
						else if(modifier.kind === ModifierKind.Protected) {
							type.access(Accessibility.Protected);
						}
					}
				}
				return type;
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return ClassVariableType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return Type.fromAST.apply(null, arguments);
			},
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ClassVariableType(scope, Type.fromMetadata(data.type, metadata, references, alterations, queue, scope, node));
				type._access = data.access;
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return ClassVariableType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._access = Accessibility.Public;
			this._alteration = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			ClassVariableType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._type = type;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassVariableType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_discardVariable_0: function() {
			return this._type;
		},
		discardVariable: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_discardVariable_0.apply(this);
			}
			return Type.prototype.discardVariable.apply(this, arguments);
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			if(KSType.is(b, ClassVariableType)) {
				return this._type.equals(b.type());
			}
			else {
				return false;
			}
		},
		equals: function() {
			if(arguments.length === 1) {
				return ClassVariableType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_access_0: function(access) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(access === void 0 || access === null) {
				throw new TypeError("'access' is not nullable");
			}
			else if(!KSType.is(access, Accessibility)) {
				throw new TypeError("'access' is not of type 'Accessibility'");
			}
			this._access = access;
			return this;
		},
		access: function() {
			if(arguments.length === 1) {
				return ClassVariableType.prototype.__ks_func_access_0.apply(this, arguments);
			}
			else if(Type.prototype.access) {
				return Type.prototype.access.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return {
				access: this._access,
				type: this._type.toReference(references, ignoreAlteration)
			};
		},
		export: function() {
			if(arguments.length === 2) {
				return ClassVariableType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagAlteration_0: function() {
			this._alteration = true;
			return this;
		},
		flagAlteration: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_flagAlteration_0.apply(this);
			}
			else if(Type.prototype.flagAlteration) {
				return Type.prototype.flagAlteration.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAlteration_0: function() {
			return this._alteration;
		},
		isAlteration: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_isAlteration_0.apply(this);
			}
			return Type.prototype.isAlteration.apply(this, arguments);
		},
		__ks_func_matchSignatureOf_0: function(b, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			else if(!KSType.is(b, Type)) {
				throw new TypeError("'b' is not of type 'Type'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			if(KSType.is(b, ClassVariableType)) {
				return true;
			}
			return false;
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				return ClassVariableType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
			}
			return Type.prototype.matchSignatureOf.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toFragments(fragments, node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ClassVariableType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return this._type.toQuote();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toTestFragments(fragments, node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ClassVariableType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		},
		__ks_func_unflagAlteration_0: function() {
			this._alteration = false;
		},
		unflagAlteration: function() {
			if(arguments.length === 0) {
				return ClassVariableType.prototype.__ks_func_unflagAlteration_0.apply(this);
			}
			else if(Type.prototype.unflagAlteration) {
				return Type.prototype.unflagAlteration.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassMethodType = Helper.class({
		$name: "ClassMethodType",
		$extends: FunctionType,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var scope = node.scope();
				return new ClassMethodType(Helper.mapArray(data.parameters, function(parameter) {
					return Type.fromAST(parameter, scope, false, node);
				}), data, node);
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return ClassMethodType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return FunctionType.fromAST.apply(null, arguments);
			},
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ClassMethodType(scope);
				type._access = data.access;
				type._async = data.async;
				type._min = data.min;
				type._max = data.max;
				type._sealed = data.sealed;
				type._throws = Helper.mapArray(data.throws, function(__ks_throw_1) {
					return Type.fromMetadata(__ks_throw_1, metadata, references, alterations, queue, scope, node);
				});
				var __ks_433;
				type._returnType = Type.fromMetadata(data.returns, metadata, references, alterations, queue, scope, node);
				type._parameters = Helper.mapArray(data.parameters, function(parameter) {
					return ParameterType.fromMetadata(parameter, metadata, references, alterations, queue, scope, node);
				});
				type.updateArguments();
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return ClassMethodType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return FunctionType.fromMetadata.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._access = Accessibility.Public;
			this._alteration = false;
		},
		__ks_init: function() {
			FunctionType.prototype.__ks_init.call(this);
			ClassMethodType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			FunctionType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_access_0: function(access) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(access === void 0 || access === null) {
				throw new TypeError("'access' is not nullable");
			}
			else if(!KSType.is(access, Accessibility)) {
				throw new TypeError("'access' is not of type 'Accessibility'");
			}
			this._access = access;
			return this;
		},
		access: function() {
			if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_access_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.access) {
				return FunctionType.prototype.access.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return {
				access: this._access,
				async: this._async,
				min: this._min,
				max: this._max,
				parameters: Helper.mapArray(this._parameters, function(parameter) {
					return parameter.export(references, ignoreAlteration);
				}),
				returns: this._returnType.toReference(references, ignoreAlteration),
				sealed: this._sealed,
				throws: Helper.mapArray(this._throws, function(__ks_throw_1) {
					return __ks_throw_1.toReference(references, ignoreAlteration);
				})
			};
		},
		export: function() {
			if(arguments.length === 2) {
				return ClassMethodType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return FunctionType.prototype.export.apply(this, arguments);
		},
		__ks_func_flagAlteration_0: function() {
			this._alteration = true;
			return this;
		},
		flagAlteration: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_flagAlteration_0.apply(this);
			}
			else if(FunctionType.prototype.flagAlteration) {
				return FunctionType.prototype.flagAlteration.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAlteration_0: function() {
			return this._alteration;
		},
		isAlteration: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_isAlteration_0.apply(this);
			}
			return FunctionType.prototype.isAlteration.apply(this, arguments);
		},
		__ks_func_isMatched_0: function(methods, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			else if(!KSType.isArray(methods, ClassMethodType)) {
				throw new TypeError("'methods' is not of type 'Array'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			for(var __ks_427 = 0, __ks_428 = methods.length, method; __ks_427 < __ks_428; ++__ks_427) {
				method = methods[__ks_427];
				if(method.matchSignatureOf(this, matchables)) {
					return true;
				}
			}
			return false;
		},
		isMatched: function() {
			if(arguments.length === 2) {
				return ClassMethodType.prototype.__ks_func_isMatched_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.isMatched) {
				return FunctionType.prototype.isMatched.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isSealable_0: function() {
			return true;
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_isSealable_0.apply(this);
			}
			return FunctionType.prototype.isSealable.apply(this, arguments);
		},
		__ks_func_matchSignatureOf_0: function(b, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			else if(!KSType.is(b, ClassMethodType)) {
				throw new TypeError("'b' is not of type 'ClassMethodType'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			if((this._min !== b._min) || (this._max !== b._max) || (this._async !== b._async) || (this._parameters.length !== b._parameters.length)) {
				return false;
			}
			for(var i = 0, __ks_429 = this._parameters.length, parameter; i < __ks_429; ++i) {
				parameter = this._parameters[i];
				if(!parameter.matchSignatureOf(b._parameters[i], matchables)) {
					return false;
				}
			}
			return true;
		},
		__ks_func_matchSignatureOf_1: function(b, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			else if(!KSType.is(b, FunctionType)) {
				throw new TypeError("'b' is not of type 'FunctionType'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			if((this._min !== b._min) || (this._max !== b._max) || (this._async !== b._async) || (this._parameters.length !== b._parameters.length)) {
				return false;
			}
			for(var i = 0, __ks_430 = this._parameters.length, parameter; i < __ks_430; ++i) {
				parameter = this._parameters[i];
				if(!parameter.matchSignatureOf(b._parameters[i], matchables)) {
					return false;
				}
			}
			return true;
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				if(KSType.is(arguments[0], ClassMethodType)) {
					return ClassMethodType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
				}
				else {
					return ClassMethodType.prototype.__ks_func_matchSignatureOf_1.apply(this, arguments);
				}
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_processModifiers_0: function(modifiers) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			for(var __ks_431 = 0, __ks_432 = modifiers.length, modifier; __ks_431 < __ks_432; ++__ks_431) {
				modifier = modifiers[__ks_431];
				if(modifier.kind === ModifierKind.Async) {
					this.async();
				}
				else if(modifier.kind === ModifierKind.Private) {
					this._access = Accessibility.Private;
				}
				else if(modifier.kind === ModifierKind.Protected) {
					this._access = Accessibility.Protected;
				}
				else if(modifier.kind === ModifierKind.Sealed) {
					this._sealed = true;
				}
			}
		},
		processModifiers: function() {
			if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_processModifiers_0.apply(this, arguments);
			}
			return FunctionType.prototype.processModifiers.apply(this, arguments);
		},
		__ks_func_returnType_0: function(returnType) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(returnType === void 0 || returnType === null) {
				throw new TypeError("'returnType' is not nullable");
			}
			else if(!KSType.is(returnType, Type)) {
				throw new TypeError("'returnType' is not of type 'Type'");
			}
			this._returnType = returnType;
		},
		returnType: function() {
			if(arguments.length === 1) {
				return ClassMethodType.prototype.__ks_func_returnType_0.apply(this, arguments);
			}
			return FunctionType.prototype.returnType.apply(this, arguments);
		},
		__ks_func_unflagAlteration_0: function() {
			this._alteration = false;
		},
		unflagAlteration: function() {
			if(arguments.length === 0) {
				return ClassMethodType.prototype.__ks_func_unflagAlteration_0.apply(this);
			}
			else if(FunctionType.prototype.unflagAlteration) {
				return FunctionType.prototype.unflagAlteration.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassMethodSetType = Helper.class({
		$name: "ClassMethodSetType",
		$extends: OverloadedFunctionType,
		__ks_init: function() {
			OverloadedFunctionType.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(scope, functions) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			if(functions === void 0 || functions === null) {
				throw new TypeError("'functions' is not nullable");
			}
			else if(!KSType.isArray(functions)) {
				throw new TypeError("'functions' is not of type 'Array'");
			}
			OverloadedFunctionType.prototype.__ks_cons.call(this, [scope]);
			this._functions = functions;
			for(var __ks_434 = 0, __ks_435 = functions.length, __ks_function_1; __ks_434 < __ks_435; ++__ks_434) {
				__ks_function_1 = functions[__ks_434];
				if(__ks_function_1.isAsync()) {
					this._async = true;
					break;
				}
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassMethodSetType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		}
	});
	var ClassConstructorType = Helper.class({
		$name: "ClassConstructorType",
		$extends: FunctionType,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ClassConstructorType(scope);
				type._access = data.access;
				type._min = data.min;
				type._max = data.max;
				type._throws = Helper.mapArray(data.throws, function(__ks_throw_1) {
					return Type.fromMetadata(__ks_throw_1, metadata, references, alterations, queue, scope, node);
				});
				type._parameters = Helper.mapArray(data.parameters, function(parameter) {
					return ParameterType.fromMetadata(parameter, metadata, references, alterations, queue, scope, node);
				});
				type.updateArguments();
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return ClassConstructorType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return FunctionType.fromMetadata.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._access = Accessibility.Public;
		},
		__ks_init: function() {
			FunctionType.prototype.__ks_init.call(this);
			ClassConstructorType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			FunctionType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_access_0: function(access) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(access === void 0 || access === null) {
				throw new TypeError("'access' is not nullable");
			}
			else if(!KSType.is(access, Accessibility)) {
				throw new TypeError("'access' is not of type 'Accessibility'");
			}
			this._access = access;
			return this;
		},
		access: function() {
			if(arguments.length === 1) {
				return ClassConstructorType.prototype.__ks_func_access_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.access) {
				return FunctionType.prototype.access.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return {
				access: this._access,
				min: this._min,
				max: this._max,
				parameters: Helper.mapArray(this._parameters, function(parameter) {
					return parameter.export(references, ignoreAlteration);
				}),
				throws: Helper.mapArray(this._throws, function(__ks_throw_1) {
					return __ks_throw_1.toReference(references, ignoreAlteration);
				})
			};
		},
		export: function() {
			if(arguments.length === 2) {
				return ClassConstructorType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return FunctionType.prototype.export.apply(this, arguments);
		},
		__ks_func_processModifiers_0: function(modifiers) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			for(var __ks_436 = 0, __ks_437 = modifiers.length, modifier; __ks_436 < __ks_437; ++__ks_436) {
				modifier = modifiers[__ks_436];
				if(modifier.kind === ModifierKind.Async) {
					throw new NotImplementedException();
				}
				else if(modifier.kind === ModifierKind.Private) {
					this._access = Accessibility.Private;
				}
				else if(modifier.kind === ModifierKind.Protected) {
					this._access = Accessibility.Protected;
				}
			}
		},
		processModifiers: function() {
			if(arguments.length === 1) {
				return ClassConstructorType.prototype.__ks_func_processModifiers_0.apply(this, arguments);
			}
			return FunctionType.prototype.processModifiers.apply(this, arguments);
		}
	});
	var ClassDestructorType = Helper.class({
		$name: "ClassDestructorType",
		$extends: FunctionType,
		__ks_init_1: function() {
			this._access = Accessibility.Public;
		},
		__ks_init: function() {
			FunctionType.prototype.__ks_init.call(this);
			ClassDestructorType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			FunctionType.prototype.__ks_cons.call(this, [[], data, node]);
			this._min = 1;
			this._max = 1;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassDestructorType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_access_0: function(access) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(access === void 0 || access === null) {
				throw new TypeError("'access' is not nullable");
			}
			else if(!KSType.is(access, Accessibility)) {
				throw new TypeError("'access' is not of type 'Accessibility'");
			}
			this._access = access;
			return this;
		},
		access: function() {
			if(arguments.length === 1) {
				return ClassDestructorType.prototype.__ks_func_access_0.apply(this, arguments);
			}
			else if(FunctionType.prototype.access) {
				return FunctionType.prototype.access.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return {
				access: this._access,
				throws: Helper.mapArray(this._throws, function(__ks_throw_1) {
					return __ks_throw_1.toReference(references, ignoreAlteration);
				})
			};
		},
		export: function() {
			if(arguments.length === 2) {
				return ClassDestructorType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return FunctionType.prototype.export.apply(this, arguments);
		},
		__ks_func_processModifiers_0: function(modifiers) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(modifiers === void 0 || modifiers === null) {
				throw new TypeError("'modifiers' is not nullable");
			}
			for(var __ks_438 = 0, __ks_439 = modifiers.length, modifier; __ks_438 < __ks_439; ++__ks_438) {
				modifier = modifiers[__ks_438];
				if(modifier.kind === ModifierKind.Async) {
					throw new NotImplementedException();
				}
				else if(modifier.kind === ModifierKind.Private) {
					this._access = Accessibility.Private;
				}
				else if(modifier.kind === ModifierKind.Protected) {
					this._access = Accessibility.Protected;
				}
			}
		},
		processModifiers: function() {
			if(arguments.length === 1) {
				return ClassDestructorType.prototype.__ks_func_processModifiers_0.apply(this, arguments);
			}
			return FunctionType.prototype.processModifiers.apply(this, arguments);
		}
	});
	var EnumTypeKind = {
		Flags: "flags",
		Number: "number",
		String: "string"
	};
	var EnumType = Helper.class({
		$name: "EnumType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new EnumType(scope, data.type);
				type._elements = data.elements;
				type._index = data.index;
				return type;
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return EnumType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			},
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new EnumType(scope, data.type);
				type._elements = data.elements;
				type._index = data.index;
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return EnumType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._elements = [];
			this._index = -1;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			EnumType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var scope = arguments[++__ks_i];
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			var kind;
			if(arguments.length > 1 && (kind = arguments[++__ks_i]) !== void 0 && kind !== null) {
				if(!KSType.is(kind, EnumTypeKind)) {
					throw new TypeError("'kind' is not of type 'EnumTypeKind'");
				}
			}
			else {
				kind = EnumTypeKind.Number;
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._kind = kind;
			if(this._kind === EnumTypeKind.String) {
				var __ks_440;
				this._type = scope.reference("String");
			}
			else {
				this._type = scope.reference("Number");
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 1 && args.length <= 2) {
				EnumType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_addElement_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			this._elements.push(name);
		},
		addElement: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_addElement_0.apply(this, arguments);
			}
			else if(Type.prototype.addElement) {
				return Type.prototype.addElement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			throw new NotImplementedException();
		},
		equals: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return {
				kind: TypeKind.Enum,
				elements: this._elements,
				index: this._index,
				type: this._kind
			};
		},
		export: function() {
			if(arguments.length === 2) {
				return EnumType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return null;
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasElement_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			for(var __ks_441 = 0, __ks_442 = this._elements.length, element; __ks_441 < __ks_442; ++__ks_441) {
				element = this._elements[__ks_441];
				if(element === name) {
					return true;
				}
			}
			return false;
		},
		hasElement: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_hasElement_0.apply(this, arguments);
			}
			else if(Type.prototype.hasElement) {
				return Type.prototype.hasElement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_index_0: function() {
			return this._index;
		},
		__ks_func_index_1: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			this._index = index;
		},
		index: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_index_0.apply(this);
			}
			else if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_index_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isEnum_0: function() {
			return true;
		},
		isEnum: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_isEnum_0.apply(this);
			}
			return Type.prototype.isEnum.apply(this, arguments);
		},
		__ks_func_isMergeable_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			return type.isEnum();
		},
		isMergeable: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_isMergeable_0.apply(this, arguments);
			}
			return Type.prototype.isMergeable.apply(this, arguments);
		},
		__ks_func_matchContentTo_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.is(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			return this._type.matchContentTo(value);
		},
		matchContentTo: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_matchContentTo_0.apply(this, arguments);
			}
			return Type.prototype.matchContentTo.apply(this, arguments);
		},
		__ks_func_matchSignatureOf_0: function(value, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.is(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			if(KSType.is(value, EnumType)) {
				return true;
			}
			else if(KSType.is(value, ReferenceType) && (value.name() === "Enum")) {
				return true;
			}
			return false;
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				return EnumType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
			}
			return Type.prototype.matchSignatureOf.apply(this, arguments);
		},
		__ks_func_kind_0: function() {
			return this._kind;
		},
		kind: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_kind_0.apply(this);
			}
			else if(Type.prototype.kind) {
				return Type.prototype.kind.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchContentOf_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.is(that, Type)) {
				throw new TypeError("'that' is not of type 'Type'");
			}
			return this._type.matchContentOf(that);
		},
		matchContentOf: function() {
			if(arguments.length === 1) {
				return EnumType.prototype.__ks_func_matchContentOf_0.apply(this, arguments);
			}
			return Type.prototype.matchContentOf.apply(this, arguments);
		},
		__ks_func_step_0: function() {
			this._index++;
			return this;
		},
		step: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_step_0.apply(this);
			}
			else if(Type.prototype.step) {
				return Type.prototype.step.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			throw new NotImplementedException();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return EnumType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return EnumType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return EnumType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		}
	});
	var NamespaceType = Helper.class({
		$name: "NamespaceType",
		$extends: Type,
		$static: {
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new NamespaceType(scope);
				if(KSType.isValue(data.namespace)) {
					alterations[data.namespace.reference] = index;
					queue.push(function() {
						var source = references[data.namespace.reference];
						type.copyFrom(source.type());
						for(var name in data.properties) {
							var property = data.properties[name];
							type.addPropertyFromMetadata(name, property, metadata, references, alterations, queue, node);
						}
					});
				}
				else {
					if(data.sealed) {
						type.flagSealed();
					}
					queue.push(function() {
						for(var name in data.properties) {
							var property = data.properties[name];
							type.addPropertyFromMetadata(name, property, metadata, references, alterations, queue, node);
						}
					});
				}
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return NamespaceType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._properties = {};
			this._sealProperties = {};
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			NamespaceType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			Type.prototype.__ks_cons.call(this, [new NamespaceScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				NamespaceType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_addProperty_0: function(name, property) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			else if(!KSType.is(property, Type)) {
				throw new TypeError("'property' is not of type 'Type'");
			}
			if(!KSType.is(property, NamespacePropertyType)) {
				property = new NamespacePropertyType(property.scope(), property);
			}
			var variable = new Variable(name, false, false, property.type());
			this._scope.addVariable(name, variable);
			this._properties[name] = property;
			if(property.type().isSealed()) {
				this._sealProperties[name] = true;
			}
			return variable.type();
		},
		addProperty: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_addProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.addProperty) {
				return Type.prototype.addProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addPropertyFromAST_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this.addProperty(data.name.name, Type.fromAST(data, node));
		},
		addPropertyFromAST: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_addPropertyFromAST_0.apply(this, arguments);
			}
			else if(Type.prototype.addPropertyFromAST) {
				return Type.prototype.addPropertyFromAST.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addPropertyFromMetadata_0: function(name, data, metadata, references, alterations, queue, node) {
			if(arguments.length < 7) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(metadata === void 0 || metadata === null) {
				throw new TypeError("'metadata' is not nullable");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(alterations === void 0 || alterations === null) {
				throw new TypeError("'alterations' is not nullable");
			}
			if(queue === void 0 || queue === null) {
				throw new TypeError("'queue' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var type = Type.fromMetadata(data, metadata, references, alterations, queue, this._scope, node);
			if(type._scope !== this._scope) {
				type._scope = this._scope;
			}
			var variable = new Variable(name, false, false, type);
			this._scope.addVariable(name, variable);
			var property = new NamespacePropertyType(this._scope, variable.type());
			this._properties[name] = property;
			if(data.sealed) {
				property.flagSealed();
			}
			if(property.type().isSealed()) {
				this._sealProperties[name] = true;
			}
			return variable.type();
		},
		addPropertyFromMetadata: function() {
			if(arguments.length === 7) {
				return NamespaceType.prototype.__ks_func_addPropertyFromMetadata_0.apply(this, arguments);
			}
			else if(Type.prototype.addPropertyFromMetadata) {
				return Type.prototype.addPropertyFromMetadata.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_clone_0: function() {
			var that = new NamespaceType(this._scope);
			return that.copyFrom(this);
		},
		clone: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_copyFrom_0: function(src) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(src === void 0 || src === null) {
				throw new TypeError("'src' is not nullable");
			}
			else if(!KSType.is(src, NamespaceType)) {
				throw new TypeError("'src' is not of type 'NamespaceType'");
			}
			this._sealed = src._sealed;
			for(var name in src._properties) {
				var property = src._properties[name];
				this._properties[name] = property;
			}
			for(var name in src._sealProperties) {
				var property = src._sealProperties[name];
				this._sealProperties[name] = property;
			}
			if(src.isRequired() || src.isAlien()) {
				this.setAlterationReference(src);
			}
			return this;
		},
		copyFrom: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_copyFrom_0.apply(this, arguments);
			}
			else if(Type.prototype.copyFrom) {
				return Type.prototype.copyFrom.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			throw new NotImplementedException();
		},
		equals: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			if(KSType.isValue(this._alterationReference)) {
				var __ks_export_1 = {
					kind: TypeKind.Namespace,
					namespace: this._alterationReference.toReference(references, ignoreAlteration),
					properties: {}
				};
				for(var name in this._properties) {
					var property = this._properties[name];
					if(property.isAlteration()) {
						var __ks_443;
						__ks_export_1.properties[name] = property.toExportOrIndex(references, ignoreAlteration);
					}
				}
				return __ks_export_1;
			}
			else {
				var __ks_export_1 = {
					kind: TypeKind.Namespace,
					sealed: this._sealed,
					properties: {}
				};
				for(var name in this._properties) {
					var property = this._properties[name];
					__ks_export_1.properties[name] = property.toExportOrIndex(references, ignoreAlteration);
				}
				return __ks_export_1;
			}
		},
		export: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagExported_0: function() {
			if(this._exported) {
				return this;
			}
			else {
				this._exported = true;
			}
			for(var __ks_444 in this._properties) {
				var value = this._properties[__ks_444];
				value.flagExported();
			}
			return this;
		},
		flagExported: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_flagExported_0.apply(this);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(KSType.is(this._properties[name], Type)) {
				return this._properties[name].type();
			}
			else {
				return null;
			}
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.is(this._properties[name], Type);
		},
		hasProperty: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_hasProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.hasProperty) {
				return Type.prototype.hasProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExtendable_0: function() {
			return true;
		},
		isExtendable: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_isExtendable_0.apply(this);
			}
			return Type.prototype.isExtendable.apply(this, arguments);
		},
		__ks_func_isFlexible_0: function() {
			return this._sealed;
		},
		isFlexible: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_isFlexible_0.apply(this);
			}
			return Type.prototype.isFlexible.apply(this, arguments);
		},
		__ks_func_isNamespace_0: function() {
			return true;
		},
		isNamespace: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_isNamespace_0.apply(this);
			}
			return Type.prototype.isNamespace.apply(this, arguments);
		},
		__ks_func_isSealable_0: function() {
			return true;
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_isSealable_0.apply(this);
			}
			return Type.prototype.isSealable.apply(this, arguments);
		},
		__ks_func_isSealedProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._sealed && (this._sealProperties[name] === true);
		},
		isSealedProperty: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_isSealedProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.isSealedProperty) {
				return Type.prototype.isSealedProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchSignatureOf_0: function(that, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			if(KSType.is(that, NamespaceType)) {
				for(var name in that._properties) {
					var property = that._properties[name];
					if(!(KSType.isValue(this._properties[name]) ? this._properties[name].matchSignatureOf(property, matchables) : false)) {
						return false;
					}
				}
				return true;
			}
			return false;
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
			}
			return Type.prototype.matchSignatureOf.apply(this, arguments);
		},
		__ks_func_setAlterationReference_0: function(alterationReference) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(alterationReference === void 0 || alterationReference === null) {
				throw new TypeError("'alterationReference' is not nullable");
			}
			else if(!KSType.is(alterationReference, NamespaceType)) {
				throw new TypeError("'alterationReference' is not of type 'NamespaceType'");
			}
			this._alterationReference = alterationReference;
		},
		setAlterationReference: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_setAlterationReference_0.apply(this, arguments);
			}
			else if(Type.prototype.setAlterationReference) {
				return Type.prototype.setAlterationReference.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			throw new NotImplementedException();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return NamespaceType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return NamespaceType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var name in this._properties) {
				var type = this._properties[name];
				fn(name, type);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return NamespaceType.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Type.prototype.walk) {
				return Type.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var NamespacePropertyType = Helper.class({
		$name: "NamespacePropertyType",
		$extends: Type,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				return new NamespacePropertyType(node.scope(), Type.fromAST(data, node));
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return NamespacePropertyType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return Type.fromAST.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._alteration = false;
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			NamespacePropertyType.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._type = type;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				NamespacePropertyType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			if(KSType.is(b, NamespacePropertyType)) {
				return this._type.equals(b.type());
			}
			else {
				return false;
			}
		},
		equals: function() {
			if(arguments.length === 1) {
				return NamespacePropertyType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			var __ks_export_1;
			if(KSType.is(this._type, ReferenceType)) {
				var __ks_445;
				__ks_export_1 = this._type.toReference(references, ignoreAlteration);
				if(KSType.isString(__ks_export_1)) {
					__ks_export_1 = {
						type: __ks_export_1
					};
				}
			}
			else {
				__ks_export_1 = this._type.export(references, ignoreAlteration);
			}
			__ks_export_1.sealed = this.isSealed();
			return __ks_export_1;
		},
		export: function() {
			if(arguments.length === 2) {
				return NamespacePropertyType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagAlteration_0: function() {
			this._alteration = true;
			return this;
		},
		flagAlteration: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_flagAlteration_0.apply(this);
			}
			else if(Type.prototype.flagAlteration) {
				return Type.prototype.flagAlteration.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagExported_0: function() {
			this._type.flagExported();
			return this;
		},
		flagExported: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_flagExported_0.apply(this);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_flagReferenced_0: function() {
			this._type.flagReferenced();
			return this;
		},
		flagReferenced: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_flagReferenced_0.apply(this);
			}
			return Type.prototype.flagReferenced.apply(this, arguments);
		},
		__ks_func_flagSealed_0: function() {
			var __ks_446;
			this._type = this._type.flagSealed();
			return this;
		},
		flagSealed: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_flagSealed_0.apply(this);
			}
			return Type.prototype.flagSealed.apply(this, arguments);
		},
		__ks_func_isAlteration_0: function() {
			return this._alteration;
		},
		isAlteration: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_isAlteration_0.apply(this);
			}
			return Type.prototype.isAlteration.apply(this, arguments);
		},
		__ks_func_isSealed_0: function() {
			return this._type.isSealed();
		},
		isSealed: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_isSealed_0.apply(this);
			}
			return Type.prototype.isSealed.apply(this, arguments);
		},
		__ks_func_matchSignatureOf_0: function(b, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(b === void 0 || b === null) {
				throw new TypeError("'b' is not nullable");
			}
			else if(!KSType.is(b, Type)) {
				throw new TypeError("'b' is not of type 'Type'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			if(KSType.is(b, NamespacePropertyType)) {
				return true;
			}
			return false;
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				return NamespacePropertyType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
			}
			return Type.prototype.matchSignatureOf.apply(this, arguments);
		},
		__ks_func_toExportOrIndex_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			if(this._type.isSealable()) {
				return this._type.toExportOrIndex(references, ignoreAlteration);
			}
			else if(this._type.referenceIndex() !== -1) {
				return {
					sealed: this._type.isSealed(),
					type: this._type.referenceIndex()
				};
			}
			else if(this._type.isReferenced()) {
				return {
					sealed: this.isSealed(),
					type: this._type.toMetadata(references, ignoreAlteration)
				};
			}
			else {
				return this.export(references, ignoreAlteration);
			}
		},
		toExportOrIndex: function() {
			if(arguments.length === 2) {
				return NamespacePropertyType.prototype.__ks_func_toExportOrIndex_0.apply(this, arguments);
			}
			return Type.prototype.toExportOrIndex.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toFragments(fragments, node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return NamespacePropertyType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return this._type.toQuote();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			return this._type.toTestFragments(fragments, node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return NamespacePropertyType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return NamespacePropertyType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		}
	});
	var ObjectType = Helper.class({
		$name: "ObjectType",
		$extends: Type,
		$static: {
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new ObjectType(scope);
				if(data.sealed === true) {
					type.flagSealed();
				}
				queue.push(function() {
					for(var name in data.properties) {
						var property = data.properties[name];
						if(KSType.isValue(property.parameters)) {
							type.addProperty(name, FunctionType.fromMetadata(property, metadata, references, alterations, queue, scope, node));
						}
						else {
							type.addProperty(name, Type.fromMetadata(property, metadata, references, alterations, queue, scope, node));
						}
					}
				});
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return ObjectType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init_1: function() {
			this._properties = {};
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
			ObjectType.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Type.prototype.__ks_cons.call(this, args);
		},
		__ks_func_addProperty_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._properties[name] = type;
		},
		addProperty: function() {
			if(arguments.length === 2) {
				return ObjectType.prototype.__ks_func_addProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.addProperty) {
				return Type.prototype.addProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			throw new NotImplementedException();
		},
		equals: function() {
			if(arguments.length === 1) {
				return ObjectType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			var __ks_export_1 = {
				kind: TypeKind.Object
			};
			if(this._sealed) {
				__ks_export_1.sealed = this._sealed;
			}
			__ks_export_1.properties = {};
			for(var name in this._properties) {
				var value = this._properties[name];
				var __ks_447;
				__ks_export_1.properties[name] = value.export(references, ignoreAlteration);
			}
			return __ks_export_1;
		},
		export: function() {
			if(arguments.length === 2) {
				return ObjectType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getProperty_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return KSType.isValue(this._properties[name]) ? this._properties[name] : null;
		},
		getProperty: function() {
			if(arguments.length === 1) {
				return ObjectType.prototype.__ks_func_getProperty_0.apply(this, arguments);
			}
			else if(Type.prototype.getProperty) {
				return Type.prototype.getProperty.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isObject_0: function() {
			return true;
		},
		isObject: function() {
			if(arguments.length === 0) {
				return ObjectType.prototype.__ks_func_isObject_0.apply(this);
			}
			return Type.prototype.isObject.apply(this, arguments);
		},
		__ks_func_isSealable_0: function() {
			return true;
		},
		isSealable: function() {
			if(arguments.length === 0) {
				return ObjectType.prototype.__ks_func_isSealable_0.apply(this);
			}
			return Type.prototype.isSealable.apply(this, arguments);
		},
		__ks_func_matchSignatureOf_0: function(value, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			if(!KSType.is(value, ObjectType)) {
				return false;
			}
			if(this.isSealed() !== value.isSealed()) {
				return false;
			}
			var nf;
			for(var __ks_448 in value._properties) {
				var property = value._properties[__ks_448];
				nf = true;
				for(var __ks_449 in this._properties) {
					var prop = this._properties[__ks_449];
					if(!(nf)) {
						break;
					}
					if(prop.matchSignatureOf(property, matchables)) {
						nf = false;
					}
				}
				if(nf) {
					return false;
				}
			}
			return true;
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				return ObjectType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
			}
			return Type.prototype.matchSignatureOf.apply(this, arguments);
		},
		__ks_func_toQuote_0: function() {
			throw new NotImplementedException();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return ObjectType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ObjectType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException();
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ObjectType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var name in this._properties) {
				var type = this._properties[name];
				fn(name, type);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ObjectType.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Type.prototype.walk) {
				return Type.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ParameterType = Helper.class({
		$name: "ParameterType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				return new ParameterType(scope, Type.fromMetadata(data.type, metadata, references, alterations, queue, scope, node), data.min, data.max);
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return ParameterType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			}
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var scope = arguments[++__ks_i];
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			var type = arguments[++__ks_i];
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			var min;
			if(arguments.length > 2 && (min = arguments[++__ks_i]) !== void 0 && min !== null) {
				if(!KSType.isNumber(min)) {
					throw new TypeError("'min' is not of type 'Number'");
				}
			}
			else {
				min = 1;
			}
			var max;
			if(arguments.length > 3 && (max = arguments[++__ks_i]) !== void 0 && max !== null) {
				if(!KSType.isNumber(max)) {
					throw new TypeError("'max' is not of type 'Number'");
				}
			}
			else {
				max = 1;
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._type = type;
			this._min = min;
			this._max = max;
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 4) {
				ParameterType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_clone_0: function() {
			return new ParameterType(this._scope, this._type, this._min, this._max);
		},
		clone: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_clone_0.apply(this);
			}
			else if(Type.prototype.clone) {
				return Type.prototype.clone.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			if(!KSType.is(b, ParameterType)) {
				return false;
			}
			return (this._min === b.min()) && (this._max === b.max()) && this._type.equals(b.type());
		},
		equals: function() {
			if(arguments.length === 1) {
				return ParameterType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return {
				type: this._type.toReference(references, ignoreAlteration),
				min: this._min,
				max: this._max
			};
		},
		export: function() {
			if(arguments.length === 2) {
				return ParameterType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAny_0: function() {
			return this._type.isAny();
		},
		isAny: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_isAny_0.apply(this);
			}
			return Type.prototype.isAny.apply(this, arguments);
		},
		__ks_func_matchContentTo_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.is(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			if(KSType.is(value, ParameterType)) {
				if((this._min !== value._min) || (this._max !== value._max)) {
					return false;
				}
				return this._type.matchContentTo(value.type());
			}
			else {
				if(this._type.isAny() || value.isAny()) {
					return true;
				}
				return this._type.matchContentTo(value);
			}
		},
		matchContentTo: function() {
			if(arguments.length === 1) {
				return ParameterType.prototype.__ks_func_matchContentTo_0.apply(this, arguments);
			}
			return Type.prototype.matchContentTo.apply(this, arguments);
		},
		__ks_func_matchSignatureOf_0: function(value, matchables) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.is(value, ParameterType)) {
				throw new TypeError("'value' is not of type 'ParameterType'");
			}
			if(matchables === void 0 || matchables === null) {
				throw new TypeError("'matchables' is not nullable");
			}
			if((this._min !== value._min) || (this._max !== value._max)) {
				return false;
			}
			if(this._type.isAny()) {
				return true;
			}
			return this._type.matchSignatureOf(value.type(), matchables);
		},
		matchSignatureOf: function() {
			if(arguments.length === 2) {
				return ParameterType.prototype.__ks_func_matchSignatureOf_0.apply(this, arguments);
			}
			return Type.prototype.matchSignatureOf.apply(this, arguments);
		},
		__ks_func_max_0: function() {
			return this._max;
		},
		max: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_max_0.apply(this);
			}
			else if(Type.prototype.max) {
				return Type.prototype.max.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_min_0: function() {
			return this._min;
		},
		min: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_min_0.apply(this);
			}
			else if(Type.prototype.min) {
				return Type.prototype.min.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ParameterType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return this._type.toQuote();
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._type.toTestFragments(fragments, node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return ParameterType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ParameterType.prototype.__ks_func_type_0.apply(this);
			}
			return Type.prototype.type.apply(this, arguments);
		}
	});
	var UnionType = Helper.class({
		$name: "UnionType",
		$extends: Type,
		$static: {
			__ks_sttc_fromMetadata_0: function(data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				return new UnionType(scope, Helper.mapArray(data, function(type) {
					return Type.fromMetadata(type, metadata, references, alterations, queue, scope, node);
				}));
			},
			fromMetadata: function() {
				if(arguments.length === 7) {
					return UnionType.__ks_sttc_fromMetadata_0.apply(this, arguments);
				}
				return Type.fromMetadata.apply(null, arguments);
			},
			__ks_sttc_import_0: function(index, data, metadata, references, alterations, queue, scope, node) {
				if(arguments.length < 8) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(metadata === void 0 || metadata === null) {
					throw new TypeError("'metadata' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				else if(!KSType.isArray(references)) {
					throw new TypeError("'references' is not of type 'Array'");
				}
				if(alterations === void 0 || alterations === null) {
					throw new TypeError("'alterations' is not nullable");
				}
				if(queue === void 0 || queue === null) {
					throw new TypeError("'queue' is not nullable");
				}
				else if(!KSType.isArray(queue)) {
					throw new TypeError("'queue' is not of type 'Array'");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new UnionType(scope);
				queue.push(function() {
					for(var __ks_463 = 0, __ks_464 = data.length, item; __ks_463 < __ks_464; ++__ks_463) {
						item = data[__ks_463];
						type.addType(Type.fromMetadata(item, metadata, references, alterations, queue, scope, node));
					}
				});
				return type;
			},
			import: function() {
				if(arguments.length === 8) {
					return UnionType.__ks_sttc_import_0.apply(this, arguments);
				}
				return Type.import.apply(null, arguments);
			}
		},
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var scope = arguments[++__ks_i];
			if(scope === void 0) {
				scope = null;
			}
			else if(scope !== null && !KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			var types;
			if(arguments.length > 1 && (types = arguments[++__ks_i]) !== void 0 && types !== null) {
				if(!KSType.isArray(types)) {
					throw new TypeError("'types' is not of type 'Array'");
				}
			}
			else {
				types = [];
			}
			Type.prototype.__ks_cons.call(this, [scope]);
			this._types = types;
		},
		__ks_cons: function(args) {
			if(args.length >= 1 && args.length <= 2) {
				UnionType.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_addType_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._types.push(type);
		},
		addType: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_addType_0.apply(this, arguments);
			}
			else if(Type.prototype.addType) {
				return Type.prototype.addType.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			if(!KSType.isValue(b) || !KSType.is(b, UnionType) || (this._types.length !== b._types.length)) {
				return false;
			}
			var match = 0;
			for(var __ks_450 = 0, __ks_451 = this._types.length, aType; __ks_450 < __ks_451; ++__ks_450) {
				aType = this._types[__ks_450];
				for(var __ks_452 = 0, __ks_453 = b._types.length, bType; __ks_452 < __ks_453; ++__ks_452) {
					bType = b._types[__ks_452];
					if(aType.equals(bType)) {
						match++;
						break;
					}
				}
			}
			return match === this._types.length;
		},
		equals: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return Helper.mapArray(this._types, function(type) {
				return type.toReference(references, ignoreAlteration);
			});
		},
		export: function() {
			if(arguments.length === 2) {
				return UnionType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagExported_0: function() {
			if(this._exported) {
				return this;
			}
			else {
				this._exported = true;
			}
			for(var __ks_454 = 0, __ks_455 = this._types.length, type; __ks_454 < __ks_455; ++__ks_454) {
				type = this._types[__ks_454];
				type.flagExported();
			}
			return this;
		},
		flagExported: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_flagExported_0.apply(this);
			}
			return Type.prototype.flagExported.apply(this, arguments);
		},
		__ks_func_isInstanceOf_0: function(target) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			for(var __ks_456 = 0, __ks_457 = this._types.length, type; __ks_456 < __ks_457; ++__ks_456) {
				type = this._types[__ks_456];
				if(type.isInstanceOf(target)) {
					return true;
				}
			}
			return false;
		},
		isInstanceOf: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_isInstanceOf_0.apply(this, arguments);
			}
			else if(Type.prototype.isInstanceOf) {
				return Type.prototype.isInstanceOf.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			for(var __ks_458 = 0, __ks_459 = this._types.length, type; __ks_458 < __ks_459; ++__ks_458) {
				type = this._types[__ks_458];
				if(type.isNullable()) {
					return true;
				}
			}
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Type.prototype.isNullable) {
				return Type.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchContentTo_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			else if(!KSType.is(value, Type)) {
				throw new TypeError("'value' is not of type 'Type'");
			}
			for(var __ks_460 = 0, __ks_461 = this._types.length, type; __ks_460 < __ks_461; ++__ks_460) {
				type = this._types[__ks_460];
				if(type.matchContentOf(value)) {
					return true;
				}
			}
			return false;
		},
		matchContentTo: function() {
			if(arguments.length === 1) {
				return UnionType.prototype.__ks_func_matchContentTo_0.apply(this, arguments);
			}
			return Type.prototype.matchContentTo.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotImplementedException(node);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnionType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			var elements = Helper.mapArray(this._types, function(type) {
				return type.toQuote();
			});
			var last = elements.pop();
			return "" + elements.join(", ") + " or " + last;
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toReference_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return this.export(references, ignoreAlteration);
		},
		toReference: function() {
			if(arguments.length === 2) {
				return UnionType.prototype.__ks_func_toReference_0.apply(this, arguments);
			}
			return Type.prototype.toReference.apply(this, arguments);
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code("(");
			for(var i = 0, __ks_462 = this._types.length, type; i < __ks_462; ++i) {
				type = this._types[i];
				if(i) {
					fragments.code(" || ");
				}
				type.toTestFragments(fragments, node);
			}
			fragments.code(")");
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return UnionType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_types_0: function() {
			return this._types;
		},
		types: function() {
			if(arguments.length === 0) {
				return UnionType.prototype.__ks_func_types_0.apply(this);
			}
			else if(Type.prototype.types) {
				return Type.prototype.types.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var VoidType = Helper.class({
		$name: "VoidType",
		$extends: Type,
		__ks_init: function() {
			Type.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Type.prototype.__ks_cons.call(this, args);
		},
		__ks_func_equals_0: function(b) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(b === void 0) {
				b = null;
			}
			return KSType.is(b, VoidType);
		},
		equals: function() {
			if(arguments.length === 1) {
				return VoidType.prototype.__ks_func_equals_0.apply(this, arguments);
			}
			else if(Type.prototype.equals) {
				return Type.prototype.equals.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(references, ignoreAlteration) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(references === void 0 || references === null) {
				throw new TypeError("'references' is not nullable");
			}
			if(ignoreAlteration === void 0 || ignoreAlteration === null) {
				throw new TypeError("'ignoreAlteration' is not nullable");
			}
			return "Void";
		},
		export: function() {
			if(arguments.length === 2) {
				return VoidType.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Type.prototype.export) {
				return Type.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			fragments.code("Void");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return VoidType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toFragments) {
				return Type.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toQuote_0: function() {
			return "'Void'";
		},
		toQuote: function() {
			if(arguments.length === 0) {
				return VoidType.prototype.__ks_func_toQuote_0.apply(this);
			}
			else if(Type.prototype.toQuote) {
				return Type.prototype.toQuote.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			throw new NotSupportedException(node);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return VoidType.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Type.prototype.toTestFragments) {
				return Type.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	Type.Any = new AnyType(null);
	Type.Void = new VoidType(null);
	ParameterType.Any = new ParameterType(null, Type.Any);
	var Variable = Helper.class({
		$name: "Variable",
		$static: {
			__ks_sttc_createPredefinedClass_0: function(name, scope) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				var fn = new ClassConstructorType(scope);
				fn.addParameter(Type.Any, 0, Infinity);
				var type = new ClassType(scope);
				type.flagAlien();
				type.flagPredefined();
				type.flagSealed();
				type.addConstructor(fn);
				return new Variable(name, true, true, type);
			},
			createPredefinedClass: function() {
				if(arguments.length === 2) {
					return Variable.__ks_sttc_createPredefinedClass_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_fromAST_0: function(data, scope) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				var __ks_468 = data.kind;
				if(__ks_468 === NodeKind.Identifier) {
					return scope.getVariable(data.name);
				}
				else {
					console.error(data);
					throw new NotImplementedException();
				}
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return Variable.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._altereable = false;
			this._immutable = true;
			this._new = true;
			this._predefined = false;
			this._type = Type.Any;
		},
		__ks_init: function() {
			Variable.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
		},
		__ks_cons_1: function() {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var immutable = arguments[++__ks_i];
			if(immutable === void 0 || immutable === null) {
				throw new TypeError("'immutable' is not nullable");
			}
			else if(!KSType.isBoolean(immutable)) {
				throw new TypeError("'immutable' is not of type 'Boolean'");
			}
			var predefined = arguments[++__ks_i];
			if(predefined === void 0 || predefined === null) {
				throw new TypeError("'predefined' is not nullable");
			}
			else if(!KSType.isBoolean(predefined)) {
				throw new TypeError("'predefined' is not of type 'Boolean'");
			}
			var type;
			if(arguments.length > 3 && (type = arguments[++__ks_i]) !== void 0 && type !== null) {
				if(!KSType.is(type, Type)) {
					throw new TypeError("'type' is not of type 'Type'");
				}
			}
			else {
				type = Type.Any;
			}
			this._name = name;
			this._immutable = immutable;
			this._predefined = predefined;
			var __ks_465;
			this._type = Type.toNamedType(this._name, type);
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				Variable.prototype.__ks_cons_0.apply(this);
			}
			else if(args.length === 3 || args.length === 4) {
				Variable.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isImmutable_0: function() {
			return this._immutable;
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_isImmutable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isPredefined_0: function() {
			return this._predefined;
		},
		isPredefined: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_isPredefined_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_name_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepareAlteration_0: function() {
			if((this._type.isRequired() || this._type.isAlien()) && !this._altereable) {
				var __ks_466;
				this._type = this._type.clone();
				this._altereable = true;
			}
		},
		prepareAlteration: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_prepareAlteration_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this._name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Variable.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		__ks_func_type_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			var __ks_467;
			this._type = Type.toNamedType(this._name, type);
			return this;
		},
		type: function() {
			if(arguments.length === 0) {
				return Variable.prototype.__ks_func_type_0.apply(this);
			}
			else if(arguments.length === 1) {
				return Variable.prototype.__ks_func_type_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var $keywords = {
		abstract: true,
		arguments: true,
		boolean: true,
		break: true,
		byte: true,
		case: true,
		catch: true,
		char: true,
		class: true,
		const: true,
		constructor: true,
		continue: true,
		debugger: true,
		default: true,
		delete: true,
		destructor: true,
		do: true,
		double: true,
		else: true,
		enum: true,
		export: true,
		extends: true,
		finally: true,
		float: true,
		for: true,
		function: true,
		goto: true,
		if: true,
		implements: true,
		import: true,
		in: true,
		instanceof: true,
		int: true,
		interface: true,
		long: true,
		native: true,
		new: true,
		package: true,
		private: true,
		protected: true,
		public: true,
		return: true,
		sealed: true,
		short: true,
		static: true,
		switch: true,
		synchronized: true,
		throw: true,
		throws: true,
		transient: true,
		try: true,
		typeof: true,
		var: true,
		void: true,
		volatile: true,
		while: true,
		with: true
	};
	var AbstractScope = Helper.class({
		$name: "AbstractScope",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._body = [];
			this._macros = {};
			this._natives = {};
			this._parent = null;
			this._prepared = false;
			this._references = {};
			this._renamedIndexes = {};
			this._renamedVariables = {};
			this._scopeParent = null;
			this._variables = {};
		},
		__ks_init: function() {
			AbstractScope.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(parent) {
			if(parent === void 0) {
				parent = null;
			}
			this._parent = parent;
			if(KSType.isValue(parent)) {
				while(KSType.isValue(parent) && !KSType.is(parent, Scope)) {
					parent = parent._parent;
				}
				if(KSType.isValue(parent)) {
					this._scopeParent = parent;
				}
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 0 && args.length <= 1) {
				AbstractScope.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_addMacro_0: function(name, macro) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(macro === void 0 || macro === null) {
				throw new TypeError("'macro' is not nullable");
			}
			else if(!KSType.is(macro, MacroDeclaration)) {
				throw new TypeError("'macro' is not of type 'MacroDeclaration'");
			}
			if(KSType.isArray(this._macros[name])) {
				var type = macro.type();
				var na = true;
				for(var index = 0, __ks_469 = this._macros[name].length, m; na && index < __ks_469; ++index) {
					m = this._macros[name][index];
					if(m.type().matchContentTo(type)) {
						this._macros[name].splice(index, 0, macro);
						na = false;
					}
				}
				if(na) {
					this._macros[name].push(macro);
				}
			}
			else {
				this._macros[name] = [macro];
			}
		},
		addMacro: function() {
			if(arguments.length === 2) {
				return AbstractScope.prototype.__ks_func_addMacro_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addNative_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			this._natives[name] = new Variable(name, true, false, Type.Any);
		},
		__ks_func_addNative_1: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.isString(type)) {
				throw new TypeError("'type' is not of type 'String'");
			}
			this._natives[name] = new Variable(name, true, false, this.reference(type));
		},
		addNative: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_addNative_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return AbstractScope.prototype.__ks_func_addNative_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addVariable_0: function(name, variable, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(node === void 0) {
				node = null;
			}
			if(KSType.is(this._variables[name], Variable)) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			if($keywords[name] === true) {
				var index = KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
				var newName = "__ks_" + name + "_" + ++index;
				while(KSType.is(this._variables[newName], Variable)) {
					newName = "__ks_" + name + "_" + ++index;
				}
				this._renamedIndexes[name] = index;
				this._renamedVariables[name] = newName;
			}
			this._variables[name] = variable;
			return this;
		},
		addVariable: function() {
			if(arguments.length === 3) {
				return AbstractScope.prototype.__ks_func_addVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_define_0: function() {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var immutable = arguments[++__ks_i];
			if(immutable === void 0 || immutable === null) {
				throw new TypeError("'immutable' is not nullable");
			}
			else if(!KSType.isBoolean(immutable)) {
				throw new TypeError("'immutable' is not of type 'Boolean'");
			}
			var type;
			if(arguments.length > 3 && (type = arguments[++__ks_i]) !== void 0) {
				if(type !== null && !KSType.is(type, Type)) {
					throw new TypeError("'type' is not of type 'Type'");
				}
			}
			else {
				type = null;
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			else if(!KSType.is(node, AbstractNode)) {
				throw new TypeError("'node' is not of type 'AbstractNode'");
			}
			if(KSType.is(this._variables[name], Variable)) {
				SyntaxException.throwAlreadyDeclared(name, node);
			}
			var variable = new Variable(name, immutable, false, type);
			this.addVariable(name, variable, node);
			return variable;
		},
		define: function() {
			if(arguments.length >= 3 && arguments.length <= 4) {
				return AbstractScope.prototype.__ks_func_define_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getLocalVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.is(this._variables[name], Variable)) {
				return this._variables[name];
			}
			else if(KSType.is(this._natives[name], Variable)) {
				return this._natives[name];
			}
			else {
				return null;
			}
		},
		getLocalVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_getLocalVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getMacro_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(data.callee.kind === NodeKind.Identifier) {
				if(KSType.isValue(this._macros[data.callee.name])) {
					for(var __ks_470 = 0, __ks_471 = this._macros[data.callee.name].length, macro; __ks_470 < __ks_471; ++__ks_470) {
						macro = this._macros[data.callee.name][__ks_470];
						if(macro.matchArguments(data.arguments)) {
							return macro;
						}
					}
				}
				SyntaxException.throwUnmatchedMacro(data.callee.name, parent, data);
			}
			else {
				var path = Generator.generate(data.callee);
				if(KSType.isValue(this._macros[path])) {
					for(var __ks_470 = 0, __ks_471 = this._macros[path].length, macro; __ks_470 < __ks_471; ++__ks_470) {
						macro = this._macros[path][__ks_470];
						if(macro.matchArguments(data.arguments)) {
							return macro;
						}
					}
				}
				SyntaxException.throwUnmatchedMacro(path, parent, data);
			}
		},
		getMacro: function() {
			if(arguments.length === 2) {
				return AbstractScope.prototype.__ks_func_getMacro_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getNextTempIndex_0: function() {
			return this._scopeParent.getNextTempIndex();
		},
		getNextTempIndex: function() {
			if(arguments.length === 0) {
				return AbstractScope.prototype.__ks_func_getNextTempIndex_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.is(this._variables[name], Variable)) {
				return this._variables[name];
			}
			else if(KSType.is(this._natives[name], Variable)) {
				return this._natives[name];
			}
			else if(KSType.isValue(this._parent)) {
				return this._parent.getVariable(name);
			}
			else {
				return null;
			}
		},
		getVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_getVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasDeclaredLocalVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return KSType.is(this._variables[name], Variable) || (this._variables[name] === false);
		},
		hasDeclaredLocalVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_hasDeclaredLocalVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasLocalVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return KSType.is(this._variables[name], Variable) || KSType.is(this._natives[name], Variable);
		},
		hasLocalVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_hasLocalVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasMacro_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return KSType.isArray(this._macros[name]);
		},
		hasMacro: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_hasMacro_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return KSType.is(this._variables[name], Variable) || KSType.is(this._natives[name], Variable) || (KSType.isValue(this._parent) ? this._parent.hasVariable(name) : false);
		},
		hasVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_hasVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isPredefinedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var variable, __ks_472;
			return (KSType.isValue(__ks_472 = this.getVariable(name)) ? (variable = __ks_472, true) : false) && variable.isPredefined();
		},
		isPredefinedVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_isPredefinedVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_listMacros_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._macros[name];
		},
		listMacros: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_listMacros_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parent_0: function() {
			return this._parent;
		},
		parent: function() {
			if(arguments.length === 0) {
				return AbstractScope.prototype.__ks_func_parent_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reference_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(KSType.is(value, AnyType)) {
				return this.resolveReference("Any");
			}
			else if(KSType.is(value, ClassVariableType)) {
				return this.reference(value.type());
			}
			else if(KSType.is(value, NamedType)) {
				if(value.hasContainer()) {
					return value.container().scope().reference(value.name());
				}
				else {
					return this.resolveReference(value.name());
				}
			}
			else if(KSType.is(value, ReferenceType)) {
				return this.resolveReference(value.name(), value.isNullable());
			}
			else if(KSType.isString(value)) {
				return this.resolveReference(value);
			}
			else if(KSType.is(value, Variable)) {
				return this.resolveReference(value.name());
			}
			else {
				console.log(value);
				throw new NotImplementedException();
			}
		},
		reference: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_reference_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_resolveReference_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			var __ks__;
			var nullable = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : false;
			if(KSType.is(this._variables[name], Variable) || KSType.is(this._natives[name], Variable) || !KSType.isValue(this._parent)) {
				var hash = name + (nullable ? "?" : "");
				if(!KSType.is(this._references[hash], ReferenceType)) {
					this._references[hash] = new ReferenceType(this, name, nullable);
				}
				return this._references[hash];
			}
			else {
				return this._parent.resolveReference(name, nullable);
			}
		},
		resolveReference: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return AbstractScope.prototype.__ks_func_resolveReference_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reassignReference_0: function(oldName, newName, newScope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(oldName === void 0 || oldName === null) {
				throw new TypeError("'oldName' is not nullable");
			}
			if(newName === void 0 || newName === null) {
				throw new TypeError("'newName' is not nullable");
			}
			if(newScope === void 0 || newScope === null) {
				throw new TypeError("'newScope' is not nullable");
			}
			if(KSType.isValue(this._references[oldName])) {
				this._references[oldName].reassign(newName, newScope);
			}
		},
		reassignReference: function() {
			if(arguments.length === 3) {
				return AbstractScope.prototype.__ks_func_reassignReference_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_removeVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.is(this._variables[name], Variable)) {
				this._variables[name] = false;
			}
			else {
				KSType.isValue(this._parent) ? this._parent.removeVariable(name) : undefined;
			}
			return this;
		},
		removeVariable: function() {
			if(arguments.length === 1) {
				return AbstractScope.prototype.__ks_func_removeVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_rename_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var __ks__;
			var newName = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this.newRenamedVariable(name);
			if(newName !== name) {
				this._renamedVariables[name] = newName;
			}
			return this;
		},
		rename: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return AbstractScope.prototype.__ks_func_rename_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_replaceVariable_0: function(name, variable) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			this._variables[name] = variable;
			return this;
		},
		replaceVariable: function() {
			if(arguments.length === 2) {
				return AbstractScope.prototype.__ks_func_replaceVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Scope = Helper.class({
		$name: "Scope",
		$extends: AbstractScope,
		__ks_init_1: function() {
			this._stashes = {};
			this._tempNames = {};
			this._tempParentNames = {};
		},
		__ks_init: function() {
			AbstractScope.prototype.__ks_init.call(this);
			Scope.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractScope.prototype.__ks_cons.call(this, args);
		},
		__ks_func_acquireTempName_0: function(statement) {
			if(statement === void 0) {
				statement = null;
			}
			else if(statement !== null && !KSType.is(statement, Statement)) {
				throw new TypeError("'statement' is not of type 'Statement'");
			}
			var name, __ks_473;
			if(KSType.isValue(this._scopeParent) && KSType.isValue(__ks_473 = this._scopeParent.acquireTempNameFromKid()) ? (name = __ks_473, true) : false) {
				this._tempParentNames[name] = true;
				return name;
			}
			for(name in this._tempNames) {
				if(this._tempNames[name]) {
					this._tempNames[name] = false;
					return name;
				}
			}
			var index = this.getNextTempIndex();
			while(this._tempParentNames[name = "__ks_" + index]) {
				index = this.getNextTempIndex();
			}
			this._tempNames[name] = false;
			if(statement !== null) {
				__ks_Array._im_pushUniq(statement._assignments, name);
			}
			return name;
		},
		acquireTempName: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Scope.prototype.__ks_func_acquireTempName_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_acquireTempNameFromKid_0: function() {
			var name, __ks_474;
			if(KSType.isValue(this._scopeParent) && KSType.isValue(__ks_474 = this._scopeParent.acquireTempNameFromKid()) ? (name = __ks_474, true) : false) {
				this._tempParentNames[name] = true;
				return name;
			}
			for(name in this._tempNames) {
				if(this._tempNames[name]) {
					this._tempNames[name] = false;
					return name;
				}
			}
			return null;
		},
		acquireTempNameFromKid: function() {
			if(arguments.length === 0) {
				return Scope.prototype.__ks_func_acquireTempNameFromKid_0.apply(this);
			}
			else if(AbstractScope.prototype.acquireTempNameFromKid) {
				return AbstractScope.prototype.acquireTempNameFromKid.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addStash_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var fn = Array.prototype.slice.call(arguments, 1, arguments.length);
			if(KSType.isValue(this._stashes[name])) {
				this._stashes[name].push(fn);
			}
			else {
				this._stashes[name] = [fn];
			}
		},
		addStash: function() {
			return Scope.prototype.__ks_func_addStash_0.apply(this, arguments);
		},
		__ks_func_getRenamedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isString(this._renamedVariables[name])) {
				return this._renamedVariables[name];
			}
			else if(KSType.isValue(this._scopeParent)) {
				return this._scopeParent.getRenamedVariable(name);
			}
			else {
				return name;
			}
		},
		getRenamedVariable: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_getRenamedVariable_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.getRenamedVariable) {
				return AbstractScope.prototype.getRenamedVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isRenamedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isString(this._renamedVariables[name])) {
				return true;
			}
			else if(KSType.isValue(this._scopeParent)) {
				return this._scopeParent.isRenamedVariable(name);
			}
			else {
				return false;
			}
		},
		isRenamedVariable: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_isRenamedVariable_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.isRenamedVariable) {
				return AbstractScope.prototype.isRenamedVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newRenamedVariable_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var __ks__;
			var variables = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this._variables;
			if(KSType.isValue(variables[name])) {
				var index = this._renamedIndexes[name] ? this._renamedIndexes[name] : 0;
				var newName = "__ks_" + name + "_" + ++index;
				while(variables[newName]) {
					newName = "__ks_" + name + "_" + ++index;
				}
				this._renamedIndexes[name] = index;
				return newName;
			}
			else {
				return name;
			}
		},
		newRenamedVariable: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Scope.prototype.__ks_func_newRenamedVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_processStash_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var stash = this._stashes[name];
			if(KSType.isValue(stash)) {
				delete this._stashes[name];
				var variable = this.getVariable(name);
				for(var __ks_475 = 0, __ks_476 = stash.length, fn; __ks_475 < __ks_476; ++__ks_475) {
					fn = stash[__ks_475];
					if(fn[0](variable)) {
						break;
					}
				}
				variable = this.getVariable(name);
				for(var __ks_475 = 0, __ks_476 = stash.length, fn; __ks_475 < __ks_476; ++__ks_475) {
					fn = stash[__ks_475];
					fn[1](variable);
				}
				return true;
			}
			else {
				return false;
			}
		},
		processStash: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_processStash_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.processStash) {
				return AbstractScope.prototype.processStash.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseTempName_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if((name.length > 5) && (name.substr(0, 5) === "__ks_")) {
				this.releaseTempNameFromKid(name);
			}
			return this;
		},
		releaseTempName: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_releaseTempName_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.releaseTempName) {
				return AbstractScope.prototype.releaseTempName.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseTempNameFromKid_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isValue(this._tempParentNames[name])) {
				this._scopeParent.releaseTempNameFromKid(name);
				this._tempParentNames[name] = false;
			}
			else {
				this._tempNames[name] = true;
			}
		},
		releaseTempNameFromKid: function() {
			if(arguments.length === 1) {
				return Scope.prototype.__ks_func_releaseTempNameFromKid_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.releaseTempNameFromKid) {
				return AbstractScope.prototype.releaseTempNameFromKid.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var XScope = Helper.class({
		$name: "XScope",
		$extends: AbstractScope,
		__ks_init: function() {
			AbstractScope.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractScope.prototype.__ks_cons.call(this, args);
		},
		__ks_func_acquireTempName_0: function(statement) {
			if(statement === void 0) {
				statement = null;
			}
			else if(statement !== null && !KSType.is(statement, Statement)) {
				throw new TypeError("'statement' is not of type 'Statement'");
			}
			return this._scopeParent.acquireTempName(statement);
		},
		acquireTempName: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return XScope.prototype.__ks_func_acquireTempName_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getRenamedVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isString(this._renamedVariables[name])) {
				return this._renamedVariables[name];
			}
			else if(KSType.isValue(this._variables[name])) {
				return name;
			}
			else {
				return this._parent.getRenamedVariable(name);
			}
		},
		getRenamedVariable: function() {
			if(arguments.length === 1) {
				return XScope.prototype.__ks_func_getRenamedVariable_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.getRenamedVariable) {
				return AbstractScope.prototype.getRenamedVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newRenamedVariable_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			var __ks__;
			var variables = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this._variables;
			if(KSType.isValue(variables[name])) {
				return this._scopeParent.newRenamedVariable(name, variables);
			}
			else {
				return this._parent.newRenamedVariable(name);
			}
		},
		newRenamedVariable: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return XScope.prototype.__ks_func_newRenamedVariable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseTempName_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this._scopeParent.releaseTempName(name);
			return this;
		},
		releaseTempName: function() {
			if(arguments.length === 1) {
				return XScope.prototype.__ks_func_releaseTempName_0.apply(this, arguments);
			}
			else if(AbstractScope.prototype.releaseTempName) {
				return AbstractScope.prototype.releaseTempName.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ModuleScope = Helper.class({
		$name: "ModuleScope",
		$extends: Scope,
		__ks_init_1: function() {
			this._predefined = {};
			this._tempIndex = -1;
		},
		__ks_init: function() {
			Scope.prototype.__ks_init.call(this);
			ModuleScope.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			Scope.prototype.__ks_cons.call(this, []);
			var __ks_477;
			this._predefined.__Array = Variable.createPredefinedClass("Array", this);
			this._predefined.__Boolean = Variable.createPredefinedClass("Boolean", this);
			this._predefined.__Class = Variable.createPredefinedClass("Class", this);
			this._predefined.__Date = Variable.createPredefinedClass("Date", this);
			this._predefined.__Error = Variable.createPredefinedClass("Error", this);
			this._predefined.__Function = Variable.createPredefinedClass("Function", this);
			this._predefined.__Number = Variable.createPredefinedClass("Number", this);
			this._predefined.__Object = Variable.createPredefinedClass("Object", this);
			this._predefined.__String = Variable.createPredefinedClass("String", this);
			this._predefined.__RegExp = Variable.createPredefinedClass("RegExp", this);
			this._predefined.__false = new Variable("false", true, true, this.reference("Boolean"));
			this._predefined.__null = new Variable("null", true, true, Type.Any);
			this._predefined.__true = new Variable("true", true, true, this.reference("Boolean"));
			this._predefined.__Infinity = new Variable("Infinity", true, true, this.reference("Number"));
			this._predefined.__Math = new Variable("Math", true, true, this.reference("Object"));
			this._predefined.__NaN = new Variable("NaN", true, true, this.reference("Number"));
		},
		__ks_cons: function(args) {
			if(args.length === 0) {
				ModuleScope.prototype.__ks_cons_0.apply(this);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_getNextTempIndex_0: function() {
			return ++this._tempIndex;
		},
		getNextTempIndex: function() {
			if(arguments.length === 0) {
				return ModuleScope.prototype.__ks_func_getNextTempIndex_0.apply(this);
			}
			return Scope.prototype.getNextTempIndex.apply(this, arguments);
		},
		__ks_func_getVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isString($types[name])) {
				name = $types[name];
			}
			if(KSType.is(this._variables[name], Variable)) {
				return this._variables[name];
			}
			else if(KSType.is(this._natives[name], Variable)) {
				return this._natives[name];
			}
			else if(KSType.is(this._predefined["__" + name], Variable)) {
				return this._predefined["__" + name];
			}
			else {
				return null;
			}
		},
		getVariable: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_getVariable_0.apply(this, arguments);
			}
			return Scope.prototype.getVariable.apply(this, arguments);
		},
		__ks_func_hasVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isString($types[name])) {
				name = $types[name];
			}
			return KSType.is(this._variables[name], Variable) || ($natives[name] === true) || KSType.is(this._predefined["__" + name], Variable);
		},
		hasVariable: function() {
			if(arguments.length === 1) {
				return ModuleScope.prototype.__ks_func_hasVariable_0.apply(this, arguments);
			}
			return Scope.prototype.hasVariable.apply(this, arguments);
		}
	});
	var ImportScope = Helper.class({
		$name: "ImportScope",
		$extends: Scope,
		__ks_init: function() {
			Scope.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Scope.prototype.__ks_cons.call(this, args);
		}
	});
	var NamespaceScope = Helper.class({
		$name: "NamespaceScope",
		$extends: Scope,
		__ks_init: function() {
			Scope.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Scope.prototype.__ks_cons.call(this, args);
		},
		__ks_func_addVariable_0: function(name, variable) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if($keywords[name] === true) {
				var index = KSType.isNumber(this._renamedIndexes[name]) ? this._renamedIndexes[name] : 0;
				var newName = "__ks_" + name + "_" + ++index;
				while(KSType.is(this._variables[newName], Variable)) {
					newName = "__ks_" + name + "_" + ++index;
				}
				this._renamedIndexes[name] = index;
				this._renamedVariables[name] = newName;
			}
			this._variables[name] = variable;
			return this;
		},
		addVariable: function() {
			if(arguments.length === 2) {
				return NamespaceScope.prototype.__ks_func_addVariable_0.apply(this, arguments);
			}
			return Scope.prototype.addVariable.apply(this, arguments);
		}
	});
	var Module = Helper.class({
		$name: "Module",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init_1: function() {
			this._aliens = {};
			this._binary = false;
			this._dynamicRequirements = [];
			this._exports = {};
			this._exportedMacros = {};
			this._flags = {};
			this._hashes = {};
			this._imports = {};
			this._includeModules = {};
			this._includePaths = {};
			this._metadata = null;
			this._references = {};
			this._register = false;
			this._requirements = [];
			this._requirementByNames = {};
		},
		__ks_init: function() {
			Module.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, compiler, file) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(compiler === void 0 || compiler === null) {
				throw new TypeError("'compiler' is not nullable");
			}
			else if(!KSType.is(compiler, Compiler)) {
				throw new TypeError("'compiler' is not of type 'Compiler'");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			this._compiler = compiler;
			this._file = file;
			this._data = this.parse(data, file);
			this._directory = path.dirname(file);
			this._options = Attribute.configure(this._data, this._compiler._options.config, true, AttributeTarget.Global);
			for(var __ks_478 = 0, __ks_479 = this._data.attributes.length, attr; __ks_478 < __ks_479; ++__ks_478) {
				attr = this._data.attributes[__ks_478];
				if((attr.declaration.kind === NodeKind.Identifier) && (attr.declaration.name === "bin")) {
					this._binary = true;
				}
			}
			if(this._compiler._options.output) {
				this._output = this._compiler._options.output;
				if(KSType.isArray(this._compiler._options.rewire)) {
					this._rewire = this._compiler._options.rewire;
				}
				else {
					this._rewire = [];
				}
			}
			else {
				this._output = null;
			}
			this._hashes["."] = this._compiler.sha256(file, data);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				Module.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_addAlien_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._aliens[name] = type;
		},
		addAlien: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addAlien_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addHash_0: function(file, hash) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			if(hash === void 0 || hash === null) {
				throw new TypeError("'hash' is not nullable");
			}
			this._hashes[path.relative(this._directory, file)] = hash;
		},
		addHash: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addHash_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addHashes_0: function(file, hashes) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			if(hashes === void 0 || hashes === null) {
				throw new TypeError("'hashes' is not nullable");
			}
			var root = path.dirname(file);
			for(var name in hashes) {
				var hash = hashes[name];
				if(name === ".") {
					this._hashes[path.relative(this._directory, file)] = hash;
				}
				else {
					this._hashes[path.relative(this._directory, path.join(root, name))] = hash;
				}
			}
		},
		addHashes: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addHashes_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addInclude_0: function(path) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			if(!KSType.isString(this._includePaths[path])) {
				this._includePaths[path] = true;
			}
		},
		__ks_func_addInclude_1: function(path, modulePath, moduleVersion) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			if(modulePath === void 0 || modulePath === null) {
				throw new TypeError("'modulePath' is not nullable");
			}
			if(moduleVersion === void 0 || moduleVersion === null) {
				throw new TypeError("'moduleVersion' is not nullable");
			}
			if((this._includePaths[path] === true) || !KSType.isString(this._includePaths[path])) {
				this._includePaths[path] = modulePath;
			}
			if(KSType.isObject(this._includeModules[modulePath])) {
				__ks_Array._im_pushUniq(this._includeModules[modulePath].paths, path);
				__ks_Array._im_pushUniq(this._includeModules[modulePath].versions, moduleVersion);
			}
			else {
				this._includeModules[modulePath] = {
					paths: [path],
					versions: [moduleVersion]
				};
			}
		},
		addInclude: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_addInclude_0.apply(this, arguments);
			}
			else if(arguments.length === 3) {
				return Module.prototype.__ks_func_addInclude_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addReference_0: function(key, code) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(key === void 0 || key === null) {
				throw new TypeError("'key' is not nullable");
			}
			if(code === void 0 || code === null) {
				throw new TypeError("'code' is not nullable");
			}
			if(this._references[key]) {
				this._references[key].push(code);
			}
			else {
				this._references[key] = [code];
			}
			return this;
		},
		addReference: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_addReference_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addRequirement_0: function(requirement) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(requirement === void 0 || requirement === null) {
				throw new TypeError("'requirement' is not nullable");
			}
			else if(!KSType.is(requirement, Requirement)) {
				throw new TypeError("'requirement' is not of type 'Requirement'");
			}
			this._requirements.push(requirement);
			this._requirementByNames[requirement.name()] = requirement;
			if(KSType.is(requirement, DynamicRequirement)) {
				this._dynamicRequirements.push(requirement);
			}
			if(requirement.isAlien()) {
				this.addAlien(requirement.name(), requirement.type());
			}
		},
		addRequirement: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_addRequirement_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compile_0: function() {
			this._body = new ModuleBlock(this._data, this);
			this._body.analyse();
			this._body.prepare();
			this._body.translate();
		},
		compile: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_compile_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_compiler_0: function() {
			return this._compiler;
		},
		compiler: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_compiler_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._directory;
		},
		directory: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_directory_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(name, variable) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			if(this._binary) {
				SyntaxException.throwNotBinary("export", this);
			}
			this._exports[name] = variable;
			variable.type().flagExported().flagReferenced();
		},
		export: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_export_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_exportMacro_0: function(name, data) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			else if(!KSType.isString(data)) {
				throw new TypeError("'data' is not of type 'String'");
			}
			if(this._binary) {
				SyntaxException.throwNotBinary("export", this);
			}
			if(KSType.isValue(this._exportedMacros[name])) {
				this._exportedMacros[name].push(data);
			}
			else {
				this._exportedMacros[name] = [data];
			}
		},
		exportMacro: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_exportMacro_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_file_0: function() {
			return this._file;
		},
		file: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_file_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flag_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this._flags[name] = true;
		},
		flag: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_flag_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagRegister_0: function() {
			this._register = true;
		},
		flagRegister: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_flagRegister_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getRequirement_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._requirementByNames[name];
		},
		getRequirement: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_getRequirement_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasInclude_0: function(path) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			return (this._includePaths[path] === true) || KSType.isString(this._includePaths[path]);
		},
		hasInclude: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_hasInclude_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_import_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			this._imports[name] = true;
		},
		import: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_import_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isBinary_0: function() {
			return this._binary;
		},
		isBinary: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_isBinary_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isUpToDate_0: function(file, target, data) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			if(target === void 0 || target === null) {
				throw new TypeError("'target' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var hashes;
			try {
				var __ks_480, __ks_481, __ks_482;
				hashes = JSON.parse(fs.readFile(getHashPath(file, target)));
			}
			catch(__ks_5) {
				return null;
			}
			var root = path.dirname(file);
			for(var name in hashes) {
				var hash = hashes[name];
				if(name === ".") {
					if(this._compiler.sha256(file, data) !== hash) {
						return null;
					}
				}
				else {
					if(this._compiler.sha256(path.join(root, name)) !== hash) {
						return null;
					}
				}
			}
			return hashes;
		},
		isUpToDate: function() {
			if(arguments.length === 3) {
				return Module.prototype.__ks_func_isUpToDate_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_listIncludeVersions_0: function(path, modulePath) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			if(modulePath === void 0 || modulePath === null) {
				throw new TypeError("'modulePath' is not nullable");
			}
			if(KSType.isObject(this._includeModules[modulePath])) {
				return this._includeModules[modulePath].versions;
			}
			else if(this._includePaths[path] === true) {
				return [""];
			}
			else {
				return null;
			}
		},
		listIncludeVersions: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_listIncludeVersions_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_listReferences_0: function(key) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(key === void 0 || key === null) {
				throw new TypeError("'key' is not nullable");
			}
			if(this._references[key]) {
				var references = this._references[key];
				this._references[key] = null;
				return references;
			}
			else {
				return null;
			}
		},
		listReferences: function() {
			if(arguments.length === 1) {
				return Module.prototype.__ks_func_listReferences_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parse_0: function(data, file) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			try {
				return Parser.parse(data);
			}
			catch(error) {
				error.message += " (file \"" + file + "\")";
				error.fileName = file;
				throw error;
			}
		},
		parse: function() {
			if(arguments.length === 2) {
				return Module.prototype.__ks_func_parse_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_path_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var __ks__;
			var x = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var name = arguments[++__ks_i];
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(!KSType.isValue(x) || !KSType.isValue(this._output)) {
				return name;
			}
			var output = null;
			for(var __ks_483 = 0, __ks_484 = this._rewire.length, rewire; __ks_483 < __ks_484; ++__ks_483) {
				rewire = this._rewire[__ks_483];
				if(rewire.input === x) {
					output = path.relative(this._output, rewire.output);
					break;
				}
			}
			if(!KSType.isValue(output)) {
				output = path.relative(this._output, x);
			}
			if(output[0] !== ".") {
				output = "./" + output;
			}
			return output;
		},
		path: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Module.prototype.__ks_func_path_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_scope_0: function() {
			return this._body.scope();
		},
		scope: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_scope_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toHashes_0: function() {
			return this._hashes;
		},
		toHashes: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_toHashes_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function() {
			var fragments = new FragmentBuilder(0);
			if(this._options.header) {
				fragments.comment("// Generated by kaoscript " + metadata.version);
			}
			if(this._register && this._compiler._options.register) {
				fragments.line("require(\"kaoscript/register\")");
			}
			var mark = fragments.mark();
			if(this._binary) {
				this._body.toFragments(fragments);
			}
			else {
				if(this._dynamicRequirements.length > 0) {
					var ctrl = fragments.newControl().code("function __ks_require(");
					for(var index = 0, __ks_485 = this._dynamicRequirements.length, requirement; index < __ks_485; ++index) {
						requirement = this._dynamicRequirements[index];
						if(index !== 0) {
							ctrl.code($comma);
						}
						requirement.toParameterFragments(ctrl);
					}
					ctrl.code(")").step();
					if(this._dynamicRequirements.length === 1) {
						this._dynamicRequirements[0].toLoneAltFragments(ctrl);
					}
					else {
						ctrl.line("var req = []");
						for(var __ks_485 = 0, __ks_486 = this._dynamicRequirements.length, requirement; __ks_485 < __ks_486; ++__ks_485) {
							requirement = this._dynamicRequirements[__ks_485];
							requirement.toManyAltFragments(ctrl);
						}
						ctrl.line("return req");
					}
					ctrl.done();
				}
				var line = fragments.newLine().code("module.exports = function(");
				for(var index = 0, __ks_485 = this._requirements.length, requirement; index < __ks_485; ++index) {
					requirement = this._requirements[index];
					if(index !== 0) {
						line.code($comma);
					}
					requirement.toParameterFragments(line);
				}
				line.code(")");
				var block = line.newBlock();
				if(this._dynamicRequirements.length > 0) {
					if(this._options.format.destructuring === "es5") {
						var __ks_line_1 = block.newLine().code("var __ks__ = __ks_require(");
						for(var index = 0, __ks_485 = this._dynamicRequirements.length, requirement; index < __ks_485; ++index) {
							requirement = this._dynamicRequirements[index];
							if(index !== 0) {
								__ks_line_1.code($comma);
							}
							requirement.toParameterFragments(__ks_line_1);
						}
						__ks_line_1.code(")").done();
						__ks_line_1 = block.newLine().code("var ");
						var i = -1;
						for(var index = 0, __ks_485 = this._dynamicRequirements.length, requirement; index < __ks_485; ++index) {
							requirement = this._dynamicRequirements[index];
							if(index !== 0) {
								__ks_line_1.code($comma);
							}
							i = requirement.toAssignmentFragments(__ks_line_1, i);
						}
						__ks_line_1.done();
					}
					else {
						var __ks_line_2 = block.newLine().code("var [");
						for(var index = 0, __ks_485 = this._dynamicRequirements.length, requirement; index < __ks_485; ++index) {
							requirement = this._dynamicRequirements[index];
							if(index !== 0) {
								__ks_line_2.code($comma);
							}
							requirement.toNameFragments(__ks_line_2);
						}
						__ks_line_2.code("] = __ks_require(");
						for(var index = 0, __ks_485 = this._dynamicRequirements.length, requirement; index < __ks_485; ++index) {
							requirement = this._dynamicRequirements[index];
							if(index !== 0) {
								__ks_line_2.code($comma);
							}
							requirement.toParameterFragments(__ks_line_2);
						}
						__ks_line_2.code(")").done();
					}
				}
				this._body.toFragments(block);
				var __ks_export_1 = 0;
				for(var __ks_485 in this._exports) {
					var variable = this._exports[__ks_485];
					if(!variable.type().isAlias()) {
						++__ks_export_1;
					}
				}
				if(__ks_export_1 !== 0) {
					var __ks_line_3 = block.newLine().code("return ");
					var object = __ks_line_3.newObject();
					var type;
					for(var name in this._exports) {
						var variable = this._exports[name];
						type = variable.type();
						if(!type.isAlias()) {
							object.newLine().code(name + ": ").compile(variable).done();
							if(!KSType.is(type, ReferenceType)) {
								if(type.isSealed() && type.isExtendable()) {
									object.line("__ks_" + name + ": " + type.getSealedName());
								}
							}
						}
					}
					object.done();
					__ks_line_3.done();
				}
				block.done();
				line.done();
			}
			var helper = $runtime.helper(this);
			var type = $runtime.type(this);
			var hasHelper = !this._flags.Helper || (this._imports[helper] === true);
			var hasType = !this._flags.Type || (this._imports[type] === true);
			if(!hasHelper || !hasType) {
				for(var __ks_485 = 0, __ks_486 = this._requirements.length, requirement; __ks_485 < __ks_486; ++__ks_485) {
					requirement = this._requirements[__ks_485];
					if(requirement.name() === helper) {
						hasHelper = true;
					}
					else if(requirement.name() === type) {
						hasType = true;
					}
				}
			}
			if(!hasHelper || !hasType) {
				if(hasHelper) {
					mark.line("var " + type + " = require(\"" + this._options.runtime.type.package + "\")." + this._options.runtime.type.member);
				}
				else if(hasType) {
					mark.line("var " + helper + " = require(\"" + this._options.runtime.helper.package + "\")." + this._options.runtime.helper.member);
				}
				else if(this._options.runtime.helper.package === this._options.runtime.type.package) {
					if(this._options.format.destructuring === "es5") {
						mark.line("var __ks__ = require(\"" + this._options.runtime.helper.package + "\")").line("var " + helper + " = __ks__." + this._options.runtime.helper.member + ", " + type + " = __ks__." + this._options.runtime.type.member);
					}
					else {
						if(!(helper === this._options.runtime.helper.member)) {
							helper = "" + this._options.runtime.helper.member + ": " + helper;
						}
						if(!(type === this._options.runtime.type.member)) {
							type = "" + this._options.runtime.type.member + ": " + type;
						}
						mark.line("var {" + helper + ", " + type + "} = require(\"" + this._options.runtime.helper.package + "\")");
					}
				}
				else {
					mark.line("var " + helper + " = require(\"" + this._options.runtime.helper.package + "\")." + this._options.runtime.helper.member).line("var " + type + " = require(\"" + this._options.runtime.type.package + "\")." + this._options.runtime.type.member);
				}
			}
			return fragments.toArray();
		},
		toFragments: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_toFragments_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toMetadata_0: function() {
			if(this._metadata === null) {
				this._metadata = {
					aliens: [],
					requirements: [],
					exports: [],
					references: [],
					macros: []
				};
				for(var __ks_487 = 0, __ks_488 = this._requirements.length, requirement; __ks_487 < __ks_488; ++__ks_487) {
					requirement = this._requirements[__ks_487];
					this._metadata.requirements.push(requirement.type().toMetadata(this._metadata.references, true), requirement.name(), requirement.isRequired());
				}
				for(var name in this._aliens) {
					var type = this._aliens[name];
					this._metadata.aliens.push(type.toMetadata(this._metadata.references, true), name);
				}
				for(var name in this._exports) {
					var variable = this._exports[name];
					this._metadata.exports.push(variable.type().toMetadata(this._metadata.references, false), name);
				}
				for(var name in this._exportedMacros) {
					var datas = this._exportedMacros[name];
					this._metadata.macros.push(name, datas);
				}
			}
			return this._metadata;
		},
		toMetadata: function() {
			if(arguments.length === 0) {
				return Module.prototype.__ks_func_toMetadata_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ModuleBlock = Helper.class({
		$name: "ModuleBlock",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._statements = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			ModuleBlock.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, module) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(module === void 0 || module === null) {
				throw new TypeError("'module' is not nullable");
			}
			AbstractNode.prototype.__ks_cons.call(this, []);
			this._data = data;
			this._module = module;
			this._options = module._options;
			this._scope = new ModuleScope();
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ModuleBlock.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			for(var __ks_489 = 0, __ks_490 = this._data.body.length, statement; __ks_489 < __ks_490; ++__ks_489) {
				statement = this._data.body[__ks_489];
				var __ks_491;
				if(KSType.isValue(__ks_491 = $compile.statement(statement, this)) ? (statement = __ks_491, true) : false) {
					this._statements.push(statement);
					statement.analyse();
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_492 = 0, __ks_493 = this._statements.length, statement; __ks_492 < __ks_493; ++__ks_492) {
				statement = this._statements[__ks_492];
				statement.prepare();
			}
			var recipient = this.recipient();
			for(var __ks_492 = 0, __ks_493 = this._statements.length, statement; __ks_492 < __ks_493; ++__ks_492) {
				statement = this._statements[__ks_492];
				if(statement.isExportable()) {
					statement.export(recipient);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_494 = 0, __ks_495 = this._statements.length, statement; __ks_494 < __ks_495; ++__ks_494) {
				statement = this._statements[__ks_494];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._module.directory();
		},
		directory: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_directory_0.apply(this);
			}
			return AbstractNode.prototype.directory.apply(this, arguments);
		},
		__ks_func_file_0: function() {
			return this._module.file();
		},
		file: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_file_0.apply(this);
			}
			return AbstractNode.prototype.file.apply(this, arguments);
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._module.isBinary();
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return ModuleBlock.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return AbstractNode.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_includePath_0: function() {
			return null;
		},
		includePath: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_includePath_0.apply(this);
			}
			else if(AbstractNode.prototype.includePath) {
				return AbstractNode.prototype.includePath.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_module_0: function() {
			return this._module;
		},
		module: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_module_0.apply(this);
			}
			return AbstractNode.prototype.module.apply(this, arguments);
		},
		__ks_func_recipient_0: function() {
			return this._module;
		},
		recipient: function() {
			if(arguments.length === 0) {
				return ModuleBlock.prototype.__ks_func_recipient_0.apply(this);
			}
			else if(AbstractNode.prototype.recipient) {
				return AbstractNode.prototype.recipient.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var index = -1;
			var item;
			for(var i = 0, __ks_496 = this._statements.length, statement; index === -1 && i < __ks_496; ++i) {
				statement = this._statements[i];
				var __ks_497;
				if(KSType.isValue(__ks_497 = statement.toFragments(fragments, Mode.None)) ? (item = __ks_497, true) : false) {
					index = i;
				}
			}
			if(index !== -1) {
				item(this._statements.slice(index + 1));
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return ModuleBlock.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Statement = Helper.class({
		$name: "Statement",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._afterwards = [];
			this._assignments = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			Statement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			var scope;
			if(arguments.length > 2 && (scope = arguments[++__ks_i]) !== void 0 && scope !== null) {
				if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
			}
			else {
				scope = parent.scope();
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent, scope]);
			var __ks_498;
			this._options = Attribute.configure(data, parent._options, true, AttributeTarget.Statement);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				Statement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_afterward_0: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._afterwards.push(node);
		},
		afterward: function() {
			if(arguments.length === 1) {
				return Statement.prototype.__ks_func_afterward_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.afterward) {
				return AbstractNode.prototype.afterward.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_assignment_0: function(data, expression) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(expression === void 0 || expression === null) {
				throw new TypeError("'expression' is not nullable");
			}
			if(data.left.kind === NodeKind.Identifier) {
				var variable;
				var __ks_499;
				if(KSType.isValue(__ks_499 = this._scope.getVariable(data.left.name)) ? (variable = __ks_499, true) : false) {
					if(variable.isImmutable()) {
						ReferenceException.throwImmutable(data.left.name, this);
					}
				}
				else {
					this._assignments.push(data.left.name);
					this._scope.define(data.left.name, false, this);
					return [data.left.name];
				}
			}
		},
		assignment: function() {
			if(arguments.length === 2) {
				return Statement.prototype.__ks_func_assignment_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.assignment) {
				return AbstractNode.prototype.assignment.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_assignments_0: function() {
			return this._assignments;
		},
		assignments: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_assignments_0.apply(this);
			}
			else if(AbstractNode.prototype.assignments) {
				return AbstractNode.prototype.assignments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_bindingScope_0: function() {
			return this._scope;
		},
		bindingScope: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_bindingScope_0.apply(this);
			}
			return AbstractNode.prototype.bindingScope.apply(this, arguments);
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return Statement.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return false;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_isAwait_0.apply(this);
			}
			else if(AbstractNode.prototype.isAwait) {
				return AbstractNode.prototype.isAwait.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExit_0: function() {
			return false;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_isExit_0.apply(this);
			}
			else if(AbstractNode.prototype.isExit) {
				return AbstractNode.prototype.isExit.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExportable_0: function() {
			return false;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_isExportable_0.apply(this);
			}
			else if(AbstractNode.prototype.isExportable) {
				return AbstractNode.prototype.isExportable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_includePath_0: function() {
			return this._parent.includePath();
		},
		includePath: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_includePath_0.apply(this);
			}
			else if(AbstractNode.prototype.includePath) {
				return AbstractNode.prototype.includePath.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isReturning_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			return true;
		},
		isReturning: function() {
			if(arguments.length === 1) {
				return Statement.prototype.__ks_func_isReturning_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.isReturning) {
				return AbstractNode.prototype.isReturning.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_statement_0: function() {
			return this;
		},
		statement: function() {
			if(arguments.length === 0) {
				return Statement.prototype.__ks_func_statement_0.apply(this);
			}
			return AbstractNode.prototype.statement.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var variables = this.assignments();
			if(variables.length !== 0) {
				fragments.newLine().code($runtime.scope(this) + variables.join(", ")).done();
			}
			var r, __ks_500;
			if(KSType.isValue(__ks_500 = this.toStatementFragments(fragments, mode)) ? (r = __ks_500, true) : false) {
				r.afterwards = this._afterwards;
				return r;
			}
			else {
				for(var __ks_500 = 0, __ks_501 = this._afterwards.length, afterward; __ks_500 < __ks_501; ++__ks_500) {
					afterward = this._afterwards[__ks_500];
					afterward.toAfterwardFragments(fragments);
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Statement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BreakStatement = Helper.class({
		$name: "BreakStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BreakStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BreakStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return BreakStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.line("break", this._data);
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return BreakStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var HelperTypeKind = {
		Native: 0,
		Referenced: 1,
		Unreferenced: 2
	};
	var TypeStatus = {
		Native: 0,
		Referenced: 1,
		Unreferenced: 2
	};
	var ClassDeclaration = Helper.class({
		$name: "ClassDeclaration",
		$extends: Statement,
		$static: {
			__ks_sttc_callMethod_0: function(node, variable, fnName, argName, retCode, fragments, method, index) {
				if(arguments.length < 8) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(fnName === void 0 || fnName === null) {
					throw new TypeError("'fnName' is not nullable");
				}
				if(argName === void 0 || argName === null) {
					throw new TypeError("'argName' is not nullable");
				}
				if(retCode === void 0 || retCode === null) {
					throw new TypeError("'retCode' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(method === void 0 || method === null) {
					throw new TypeError("'method' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if((method.max() === 0) && !method.isAsync()) {
					fragments.line(retCode, variable.name(), ".", fnName, index, ".apply(this)");
				}
				else {
					fragments.line(retCode, variable.name(), ".", fnName, index, ".apply(this, ", argName, ")");
				}
			},
			callMethod: function() {
				if(arguments.length === 8) {
					return ClassDeclaration.__ks_sttc_callMethod_0.apply(this, arguments);
				}
				else if(Statement.callMethod) {
					return Statement.callMethod.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_checkMethods_0: function(methods, parameters, index, node, fragments, call, argName, returns) {
				if(arguments.length < 8) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 8)");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(parameters === void 0 || parameters === null) {
					throw new TypeError("'parameters' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(call === void 0 || call === null) {
					throw new TypeError("'call' is not nullable");
				}
				if(argName === void 0 || argName === null) {
					throw new TypeError("'argName' is not nullable");
				}
				if(returns === void 0 || returns === null) {
					throw new TypeError("'returns' is not nullable");
				}
				if(!KSType.isValue(parameters[index + 1])) {
					SyntaxException.throwNotDifferentiableMethods(node);
				}
				var tree = [];
				var usages = [];
				var type, nf, item, usage;
				for(var __ks_528 in parameters[index + 1].types) {
					type = parameters[index + 1].types[__ks_528];
					tree.push(item = {
						type: type.type,
						methods: Helper.mapArray(type.methods, function(i) {
							return methods[i];
						}),
						usage: type.methods.length
					});
					if(type.type.isAny()) {
						item.weight = 0;
					}
					else {
						item.weight = 1000;
					}
					for(var __ks_529 = 0, __ks_530 = type.methods.length, i; __ks_529 < __ks_530; ++__ks_529) {
						i = type.methods[__ks_529];
						var method = methods[i];
						nf = true;
						for(var __ks_531 = 0, __ks_532 = usages.length; nf && __ks_531 < __ks_532; ++__ks_531) {
							usage = usages[__ks_531];
							if(usage.method === method) {
								nf = false;
							}
						}
						if(nf) {
							usages.push(usage = {
								method: method,
								types: [item]
							});
						}
						else {
							usage.types.push(item);
						}
					}
				}
				if(tree.length === 0) {
					return ClassDeclaration.checkMethods(methods, parameters, index + 1, node, fragments, call, argName, returns);
				}
				else if(tree.length === 1) {
					item = tree[0];
					if(item.methods.length === 1) {
						call(fragments, item.methods[0], item.methods[0].index());
						return false;
					}
					else {
						return ClassDeclaration.checkMethods(methods, parameters, index + 1, node, fragments, call, argName, returns);
					}
				}
				else {
					for(var __ks_528 = 0, __ks_529 = usages.length; __ks_528 < __ks_529; ++__ks_528) {
						usage = usages[__ks_528];
						var count = usage.types.length;
						for(var __ks_530 = 0, __ks_531 = usage.types.length; count >= 0 && __ks_530 < __ks_531; ++__ks_530) {
							type = usage.types[__ks_530];
							count -= type.usage;
						}
						if(count === 0) {
							var __ks_item_1 = {
								type: [],
								path: [],
								methods: [usage.method],
								usage: 0,
								weight: 0
							};
							for(var __ks_530 = 0, __ks_531 = usage.types.length; __ks_530 < __ks_531; ++__ks_530) {
								type = usage.types[__ks_530];
								__ks_item_1.type.push(type.type);
								__ks_item_1.usage += type.usage;
								__ks_item_1.weight += type.weight;
								__ks_Array._im_remove(tree, type);
							}
							tree.push(__ks_item_1);
						}
					}
					tree.sort(function(a, b) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(a === void 0 || a === null) {
							throw new TypeError("'a' is not nullable");
						}
						if(b === void 0 || b === null) {
							throw new TypeError("'b' is not nullable");
						}
						if((a.weight === 0) && (b.weight !== 0)) {
							return 1;
						}
						else if(b.weight === 0) {
							return -1;
						}
						else if(a.type.length === b.type.length) {
							if(a.usage === b.usage) {
								return b.weight - a.weight;
							}
							else {
								return b.usage - a.usage;
							}
						}
						else {
							return a.type.length - b.type.length;
						}
					});
					var ctrl = fragments.newControl();
					var ne = true;
					for(var i = 0, __ks_528 = tree.length; i < __ks_528; ++i) {
						item = tree[i];
						if((i + 1) === tree.length) {
							if(!ctrl.isFirstStep()) {
								ctrl.step().code("else");
								ne = false;
							}
						}
						else {
							if(!ctrl.isFirstStep()) {
								ctrl.step().code("else ");
							}
							ctrl.code("if(");
							item.type[0].toTestFragments(ctrl, new Literal(false, node, node.scope(), "" + argName + "[" + index + "]"));
							ctrl.code(")");
						}
						ctrl.step();
						if(item.methods.length === 1) {
							call(ctrl, item.methods[0], item.methods[0].index());
						}
						else {
							ClassDeclaration.checkMethods(methods, parameters, index + 1, node, ctrl, call, argName, returns);
						}
					}
					ctrl.done();
					return ne;
				}
			},
			checkMethods: function() {
				if(arguments.length === 8) {
					return ClassDeclaration.__ks_sttc_checkMethods_0.apply(this, arguments);
				}
				else if(Statement.checkMethods) {
					return Statement.checkMethods.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_isAssigningAlias_0: function(data, name, __ks_constructor_1, extending) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(__ks_constructor_1 === void 0 || __ks_constructor_1 === null) {
					throw new TypeError("'constructor' is not nullable");
				}
				if(extending === void 0 || extending === null) {
					throw new TypeError("'extending' is not nullable");
				}
				if(KSType.isArray(data)) {
					for(var __ks_533 = 0, __ks_534 = data.length, d; __ks_533 < __ks_534; ++__ks_533) {
						d = data[__ks_533];
						if(ClassDeclaration.isAssigningAlias(d, name, constructor, extending)) {
							return true;
						}
					}
				}
				else {
					var __ks_533 = data.kind;
					if(__ks_533 === NodeKind.BinaryExpression) {
						if(data.operator.kind === BinaryOperatorKind.Assignment) {
							if((data.left.kind === NodeKind.ThisExpression) && (data.left.name.name === name)) {
								return true;
							}
							else if((data.left.kind === NodeKind.MemberExpression) && (data.left.object.kind === NodeKind.Identifier) && (data.left.object.name === "this") && (data.left.property.kind === NodeKind.Identifier) && ((data.left.property.name === name) || (data.left.property.name === ("_" + name)))) {
								return true;
							}
						}
					}
					else if(__ks_533 === NodeKind.CallExpression) {
						if(__ks_constructor_1 && (data.callee.kind === NodeKind.Identifier)) {
							if((data.callee.name === "this") || (extending && (data.callee.name === "super"))) {
								for(var __ks_534 = 0, __ks_535 = data.arguments.length, arg; __ks_534 < __ks_535; ++__ks_534) {
									arg = data.arguments[__ks_534];
									if((arg.kind === NodeKind.Identifier) && (arg.name === name)) {
										return true;
									}
								}
							}
						}
					}
					else if(__ks_533 === NodeKind.ReturnStatement) {
						return ClassDeclaration.isAssigningAlias(data.value, name, constructor, extending);
					}
				}
				return false;
			},
			isAssigningAlias: function() {
				if(arguments.length === 4) {
					return ClassDeclaration.__ks_sttc_isAssigningAlias_0.apply(this, arguments);
				}
				else if(Statement.isAssigningAlias) {
					return Statement.isAssigningAlias.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_mapMethod_0: function(method, target, map) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(method === void 0 || method === null) {
					throw new TypeError("'method' is not nullable");
				}
				if(target === void 0 || target === null) {
					throw new TypeError("'target' is not nullable");
				}
				if(map === void 0 || map === null) {
					throw new TypeError("'map' is not nullable");
				}
				var index = 1;
				var count = method.min();
				var item;
				var __ks_536 = method.parameters();
				for(var p = 0, __ks_537 = __ks_536.length, parameter; p < __ks_537; ++p) {
					parameter = __ks_536[p];
					for(var i = 1, __ks_538 = parameter.min(); i <= __ks_538; ++i) {
						if(KSType.isValue(map[index]) ? (item = map[index], false) : true) {
							item = map[index] = {
								index: index,
								types: {},
								weight: 0
							};
						}
						ClassDeclaration.mapParameter(parameter.type(), method.index(), item);
						++index;
					}
					for(var i = parameter.min() + 1, __ks_538 = parameter.max(); count < target && i <= __ks_538; ++i) {
						if(KSType.isValue(map[index]) ? (item = map[index], false) : true) {
							item = map[index] = {
								index: index,
								types: {},
								weight: 0
							};
						}
						ClassDeclaration.mapParameter(parameter.type(), method.index(), item);
						++index;
						++count;
					}
				}
			},
			mapMethod: function() {
				if(arguments.length === 3) {
					return ClassDeclaration.__ks_sttc_mapMethod_0.apply(this, arguments);
				}
				else if(Statement.mapMethod) {
					return Statement.mapMethod.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_mapParameter_0: function(type, index, map) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(type === void 0 || type === null) {
					throw new TypeError("'type' is not nullable");
				}
				if(index === void 0 || index === null) {
					throw new TypeError("'index' is not nullable");
				}
				if(map === void 0 || map === null) {
					throw new TypeError("'map' is not nullable");
				}
				if(KSType.is(type, UnionType)) {
					var __ks_539 = type.types();
					for(var __ks_540 = 0, __ks_541 = __ks_539.length, value; __ks_540 < __ks_541; ++__ks_540) {
						value = __ks_539[__ks_540];
						ClassDeclaration.mapParameter(value, index, map);
					}
				}
				else {
					if(KSType.isObject(map.types[type.hashCode()])) {
						map.types[type.hashCode()].methods.push(index);
					}
					else {
						map.types[type.hashCode()] = {
							type: type,
							methods: [index]
						};
						if(type.isAny()) {
							map.weight += 1;
						}
						else {
							map.weight += 1000;
						}
					}
				}
			},
			mapParameter: function() {
				if(arguments.length === 3) {
					return ClassDeclaration.__ks_sttc_mapParameter_0.apply(this, arguments);
				}
				else if(Statement.mapParameter) {
					return Statement.mapParameter.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_toSwitchFragments_0: function(node, fragments, variable, methods, name, extend, header, footer, call, wrongdoer, argName, returns) {
				if(arguments.length < 12) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 12)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				else if(!KSType.isString(name)) {
					throw new TypeError("'name' is not of type 'String'");
				}
				if(extend === void 0) {
					extend = null;
				}
				if(header === void 0 || header === null) {
					throw new TypeError("'header' is not nullable");
				}
				if(footer === void 0 || footer === null) {
					throw new TypeError("'footer' is not nullable");
				}
				if(call === void 0 || call === null) {
					throw new TypeError("'call' is not nullable");
				}
				if(wrongdoer === void 0 || wrongdoer === null) {
					throw new TypeError("'wrongdoer' is not nullable");
				}
				if(argName === void 0 || argName === null) {
					throw new TypeError("'argName' is not nullable");
				}
				if(returns === void 0 || returns === null) {
					throw new TypeError("'returns' is not nullable");
				}
				var block = header(node, fragments);
				var method;
				if(methods.length === 0) {
					if(KSType.isValue(extend)) {
						extend(node, block, null, variable);
					}
					else {
						block.newControl().code("if(" + argName + ".length !== 0)").step().line("throw new SyntaxError(\"wrong number of arguments\")").done();
					}
				}
				else if(methods.length === 1) {
					method = methods[0];
					var async = method.isAsync();
					var min = method.absoluteMin();
					var max = method.absoluteMax();
					if((min === 0) && (max >= Infinity)) {
						call(block, method, 0);
					}
					else if(min === max) {
						var ctrl = block.newControl();
						ctrl.code("if(" + argName + ".length === " + min + ")").step();
						call(ctrl, method, 0);
						if(extend) {
							extend(node, block, ctrl, variable);
						}
						else {
							wrongdoer(block, ctrl, async, returns);
						}
					}
					else if(max < Infinity) {
						var ctrl = block.newControl();
						ctrl.code("if(" + argName + ".length >= " + min + " && " + argName + ".length <= " + max + ")").step();
						call(ctrl, method, 0);
						wrongdoer(block, ctrl, async, returns);
					}
					else {
						call(block, method, 0);
					}
				}
				else {
					var async = methods[0].isAsync();
					var groups = {};
					var infinities = [];
					var min = Infinity;
					var max = 0;
					var asyncCount = 0;
					var syncCount = 0;
					for(var index = 0, __ks_542 = methods.length; index < __ks_542; ++index) {
						method = methods[index];
						method.index(index);
						if(method.isAsync()) {
							++asyncCount;
						}
						else {
							++syncCount;
						}
						if(method.absoluteMax() === Infinity) {
							infinities.push(method);
						}
						else {
							for(var n = method.absoluteMin(), __ks_543 = method.absoluteMax(); n <= __ks_543; ++n) {
								if(KSType.isValue(groups[n])) {
									groups[n].methods.push(method);
								}
								else {
									groups[n] = {
										n: n,
										methods: [method]
									};
								}
							}
							min = Math.min(min, method.absoluteMin());
							max = Math.max(max, method.absoluteMax());
						}
					}
					if((asyncCount !== 0) && (syncCount !== 0)) {
						SyntaxException.throwInvalidSyncMethods(node.name(), name, node);
					}
					if(infinities.length) {
						for(var __ks_542 = 0, __ks_543 = infinities.length; __ks_542 < __ks_543; ++__ks_542) {
							method = infinities[__ks_542];
							for(var group in groups) {
								if(method.absoluteMin() >= group.n) {
									group.methods.push(method);
								}
							}
						}
					}
					if(min === Infinity) {
						throw new NotImplementedException(node);
					}
					else {
						for(var i = min; i <= max; ++i) {
							var group;
							if(KSType.isValue(groups[i]) ? (group = groups[i], true) : false) {
								var gg;
								for(var j = i + 1; (KSType.isValue(groups[j]) ? (gg = groups[j], true) : false) && __ks_Array._cm_same(gg.methods, group.methods) && j <= max; ++j) {
									if(KSType.isArray(group.n)) {
										group.n.push(j);
									}
									else {
										group.n = [i, j];
									}
									delete groups[j];
								}
							}
						}
						var ctrl = block.newControl();
						for(var k in groups) {
							var group = groups[k];
							if(!ctrl.isFirstStep()) {
								ctrl.step().code("else ");
							}
							if(KSType.isArray(group.n)) {
								if(group.n.length === 2) {
									ctrl.code("if(" + argName + ".length === " + group.n[0] + " || " + argName + ".length === " + group.n[1] + ")").step();
								}
								else {
									ctrl.code("if(" + argName + ".length >= " + group.n[0] + " && " + argName + ".length <= " + group.n[group.n.length - 1] + ")").step();
								}
							}
							else {
								ctrl.code("if(" + argName + ".length === " + group.n + ")").step();
							}
							if(group.methods.length === 1) {
								call(ctrl, group.methods[0], group.methods[0].index());
							}
							else {
								var parameters = {};
								for(var __ks_542 = 0, __ks_543 = group.methods.length; __ks_542 < __ks_543; ++__ks_542) {
									method = group.methods[__ks_542];
									ClassDeclaration.mapMethod(method, group.n, parameters);
								}
								var indexes = [];
								var __ks_542 = Helper.mapObject(parameters, function(__ks_542, value) {
									return value;
								}).sort(function(a, b) {
									if(arguments.length < 2) {
										throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
									}
									if(a === void 0 || a === null) {
										throw new TypeError("'a' is not nullable");
									}
									if(b === void 0 || b === null) {
										throw new TypeError("'b' is not nullable");
									}
									return b.weight - a.weight;
								});
								for(var __ks_543 in __ks_542) {
									var parameter = __ks_542[__ks_543];
									for(var hash in parameter.types) {
										var type = parameter.types[hash];
										__ks_Array._im_remove.apply(null, [type.methods].concat(indexes));
										if(type.methods.length === 0) {
											delete parameter.types[hash];
										}
									}
									for(var __ks_544 in parameter.types) {
										var type = parameter.types[__ks_544];
										if(type.methods.length === 1) {
											__ks_Array._im_pushUniq(indexes, type.methods[0]);
										}
									}
								}
								if(ClassDeclaration.checkMethods(methods, parameters, 0, node, ctrl, call, argName, returns)) {
									if(returns) {
										fragments.line("throw new Error(\"Wrong type of arguments\")");
									}
									else {
										fragments.step().code("else").step().code("throw new Error(\"Wrong type of arguments\")");
									}
								}
							}
						}
						if(infinities.length === 0) {
							wrongdoer(block, ctrl, async, returns);
						}
						else if(infinities.length === 1) {
							ctrl.step().code("else").step();
							call(ctrl, infinities[0], infinities[0].index());
							ctrl.done();
						}
						else {
							throw new NotImplementedException(node);
						}
					}
				}
				footer(block);
				return fragments;
			},
			toSwitchFragments: function() {
				if(arguments.length === 12) {
					return ClassDeclaration.__ks_sttc_toSwitchFragments_0.apply(this, arguments);
				}
				else if(Statement.toSwitchFragments) {
					return Statement.toSwitchFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_toWrongDoingFragments_0: function(block, ctrl, async, returns) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(block === void 0 || block === null) {
					throw new TypeError("'block' is not nullable");
				}
				if(ctrl === void 0 || ctrl === null) {
					throw new TypeError("'ctrl' is not nullable");
				}
				if(async === void 0 || async === null) {
					throw new TypeError("'async' is not nullable");
				}
				if(returns === void 0 || returns === null) {
					throw new TypeError("'returns' is not nullable");
				}
				if(async) {
					ctrl.step().code("else").step();
					ctrl.line("let __ks_cb, __ks_error = new SyntaxError(\"wrong number of arguments\")");
					ctrl.newControl().code("if(arguments.length > 0 && Type.isFunction((__ks_cb = arguments[arguments.length - 1])))").step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
					ctrl.done();
				}
				else if(returns) {
					ctrl.done();
					block.line("throw new SyntaxError(\"wrong number of arguments\")");
				}
				else {
					ctrl.step().code("else").step().line("throw new SyntaxError(\"wrong number of arguments\")").done();
				}
			},
			toWrongDoingFragments: function() {
				if(arguments.length === 4) {
					return ClassDeclaration.__ks_sttc_toWrongDoingFragments_0.apply(this, arguments);
				}
				else if(Statement.toWrongDoingFragments) {
					return Statement.toWrongDoingFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._abstract = false;
			this._abstractMethods = {};
			this._classMethods = {};
			this._classVariables = {};
			this._constructors = [];
			this._destructor = null;
			this._es5 = false;
			this._extending = false;
			this._extendingAlien = false;
			this._hybrid = false;
			this._instanceMethods = {};
			this._instanceVariables = {};
			this._macros = {};
			this._references = {};
			this._sealed = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ClassDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			this._constructorScope = new Scope(parent.scope());
			this._destructorScope = new Scope(parent.scope());
			this._instanceVariableScope = new Scope(parent.scope());
			this._es5 = this._options.format.classes === "es5";
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			this._class = new ClassType(this._scope);
			this._type = new NamedType(this._name, this._class);
			this._variable = this._scope.define(this._name, true, this._type, this);
			var thisVariable = this._constructorScope.define("this", true, this._scope.reference(this._name), this);
			thisVariable.replaceCall = Helper.vcurry(function(data, __ks_arguments_1) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				return new CallThisConstructorSubstitude(data, __ks_arguments_1, this._type);
			}, this);
			this._destructorScope.define("this", true, this._scope.reference(this._name), this);
			this._destructorScope.rename("this", "that");
			this._instanceVariableScope.define("this", true, this._scope.reference(this._name), this);
			if(KSType.isValue(this._data.extends)) {
				this._extending = true;
				var name = "";
				var member = this._data.extends;
				while(member.kind === NodeKind.MemberExpression) {
					name = ("." + member.property.name) + name;
					member = member.object;
				}
				this._extendsName = "" + member.name + name;
			}
			for(var __ks_502 = 0, __ks_503 = this._data.modifiers.length, modifier; __ks_502 < __ks_503; ++__ks_502) {
				modifier = this._data.modifiers[__ks_502];
				if(modifier.kind === ModifierKind.Abstract) {
					this._abstract = true;
					this._class.flagAbstract();
				}
				else if(modifier.kind === ModifierKind.Sealed) {
					this._sealed = true;
					this._class.flagSealed();
				}
			}
			var declaration;
			for(var __ks_502 = 0, __ks_503 = this._data.members.length, data; __ks_502 < __ks_503; ++__ks_502) {
				data = this._data.members[__ks_502];
				var __ks_504 = data.kind;
				if(__ks_504 === NodeKind.CommentBlock) {
				}
				else if(__ks_504 === NodeKind.CommentLine) {
				}
				else if(__ks_504 === NodeKind.FieldDeclaration) {
					declaration = new ClassVariableDeclaration(data, this);
					declaration.analyse();
				}
				else if(__ks_504 === NodeKind.MacroDeclaration) {
					var name = data.name.name;
					declaration = new MacroDeclaration(data, this, "" + this._name + "." + name);
					if(KSType.isArray(this._macros[name])) {
						this._macros[name].push(declaration);
					}
					else {
						this._macros[name] = [declaration];
					}
				}
				else if(__ks_504 === NodeKind.MethodDeclaration) {
					if(this._class.isConstructor(data.name.name)) {
						declaration = new ClassConstructorDeclaration(data, this);
					}
					else if(this._class.isDestructor(data.name.name)) {
						declaration = new ClassDestructorDeclaration(data, this);
					}
					else {
						declaration = new ClassMethodDeclaration(data, this);
					}
					declaration.analyse();
				}
				else {
					throw new NotSupportedException("Unknow kind " + data.kind, this);
				}
			}
			if(this.hasInits()) {
				this._class.init(1);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._extending) {
				var __ks_505;
				if(KSType.isValue(__ks_505 = Type.fromAST(this._data.extends, this)) ? (this._extendsType = __ks_505, false) : true) {
					ReferenceException.throwNotDefined(this._extendsName, this);
				}
				else if(!KSType.is(this._extendsType.discardName(), ClassType)) {
					TypeException.throwNotClass(this._extendsName, this);
				}
				this._class.extends(this._extendsType);
				this._hybrid = this._class.isHybrid();
				var superVariable = this._constructorScope.define("super", true, this._scope.reference(this._extendsName), this);
				if(this._hybrid && !this._es5) {
					var thisVariable = this._constructorScope.getVariable("this");
					thisVariable.replaceCall = Helper.vcurry(function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new CallHybridThisConstructorES6Substitude(data, __ks_arguments_1, this._type);
					}, this);
					superVariable.replaceCall = Helper.vcurry(function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new CallHybridSuperConstructorES6Substitude(data, __ks_arguments_1, this._type);
					}, this);
				}
				else {
					if(this._es5) {
						superVariable.replaceCall = Helper.vcurry(function(data, __ks_arguments_1) {
							if(arguments.length < 2) {
								throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
							}
							if(data === void 0 || data === null) {
								throw new TypeError("'data' is not nullable");
							}
							if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
								throw new TypeError("'arguments' is not nullable");
							}
							return new CallSuperConstructorES5Substitude(data, __ks_arguments_1, this._type);
						}, this);
					}
					else {
						superVariable.replaceCall = Helper.vcurry(function(data, __ks_arguments_1) {
							if(arguments.length < 2) {
								throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
							}
							if(data === void 0 || data === null) {
								throw new TypeError("'data' is not nullable");
							}
							if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
								throw new TypeError("'arguments' is not nullable");
							}
							return new CallSuperConstructorSubstitude(data, __ks_arguments_1, this._type);
						}, this);
					}
				}
				this._instanceVariableScope.define("super", true, this._scope.reference(this._extendsName), this);
			}
			for(var name in this._classVariables) {
				var variable = this._classVariables[name];
				variable.prepare();
				this._class.addClassVariable(name, variable.type());
			}
			for(var name in this._classMethods) {
				var methods = this._classMethods[name];
				for(var __ks_505 = 0, __ks_506 = methods.length, method; __ks_505 < __ks_506; ++__ks_505) {
					method = methods[__ks_505];
					method.prepare();
					this._class.addClassMethod(name, method.type());
				}
			}
			for(var name in this._instanceVariables) {
				var variable = this._instanceVariables[name];
				variable.prepare();
				this._class.addInstanceVariable(name, variable.type());
			}
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				for(var __ks_505 = 0, __ks_506 = methods.length, method; __ks_505 < __ks_506; ++__ks_505) {
					method = methods[__ks_505];
					method.prepare();
					this._class.addInstanceMethod(name, method.type());
				}
			}
			for(var name in this._abstractMethods) {
				var methods = this._abstractMethods[name];
				for(var __ks_505 = 0, __ks_506 = methods.length, method; __ks_505 < __ks_506; ++__ks_505) {
					method = methods[__ks_505];
					method.prepare();
					this._class.addAbstractMethod(name, method.type());
				}
			}
			for(var __ks_505 = 0, __ks_506 = this._constructors.length, method; __ks_505 < __ks_506; ++__ks_505) {
				method = this._constructors[__ks_505];
				method.prepare();
				this._class.addConstructor(method.type());
			}
			if(KSType.isValue(this._destructor)) {
				this._destructor.prepare();
				this._class.addDestructor();
			}
			var notImplemented;
			if(this._extending && !this._abstract && ((notImplemented = this._class.getMissingAbstractMethods()).length !== 0)) {
				SyntaxException.throwMissingAbstractMethods(this._name, notImplemented, this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_507 in this._classVariables) {
				var variable = this._classVariables[__ks_507];
				variable.translate();
			}
			for(var __ks_507 in this._instanceVariables) {
				var variable = this._instanceVariables[__ks_507];
				variable.translate();
			}
			for(var __ks_507 = 0, __ks_508 = this._constructors.length, method; __ks_507 < __ks_508; ++__ks_507) {
				method = this._constructors[__ks_507];
				method.translate();
			}
			if(KSType.isValue(this._destructor)) {
				this._destructor.translate();
			}
			for(var __ks_507 in this._instanceMethods) {
				var methods = this._instanceMethods[__ks_507];
				for(var __ks_508 = 0, __ks_509 = methods.length, method; __ks_508 < __ks_509; ++__ks_508) {
					method = methods[__ks_508];
					method.translate();
				}
			}
			for(var __ks_507 in this._abstractMethods) {
				var methods = this._abstractMethods[__ks_507];
				for(var __ks_508 = 0, __ks_509 = methods.length, method; __ks_508 < __ks_509; ++__ks_508) {
					method = methods[__ks_508];
					method.translate();
				}
			}
			for(var __ks_507 in this._classMethods) {
				var methods = this._classMethods[__ks_507];
				for(var __ks_508 = 0, __ks_509 = methods.length, method; __ks_508 < __ks_509; ++__ks_508) {
					method = methods[__ks_508];
					method.translate();
				}
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addReference_0: function(type, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(!type.isAny()) {
				if(KSType.is(type, ReferenceType)) {
					var name = type.name();
					if(!KSType.isValue(this._references[name])) {
						var variable, __ks_510;
						if($typeofs[name] === true) {
							this._references[name] = {
								status: TypeStatus.Native,
								type: type
							};
						}
						else if(KSType.isValue(__ks_510 = this._scope.getVariable(name)) ? (variable = __ks_510, true) : false) {
							this._references[name] = {
								status: TypeStatus.Referenced,
								type: type,
								variable: variable
							};
						}
						else {
							this._references[name] = {
								status: TypeStatus.Unreferenced,
								type: type
							};
						}
					}
				}
				else if(KSType.is(type, UnionType)) {
					var __ks_510 = type.types();
					for(var __ks_511 = 0, __ks_512 = __ks_510.length, type; __ks_511 < __ks_512; ++__ks_511) {
						type = __ks_510[__ks_511];
						this.addReference(type, node);
					}
				}
				else if(KSType.is(type, ClassVariableType)) {
					this.addReference(type.type(), node);
				}
				else {
					throw new NotImplementedException(this);
				}
			}
		},
		addReference: function() {
			if(arguments.length === 2) {
				return ClassDeclaration.prototype.__ks_func_addReference_0.apply(this, arguments);
			}
			else if(Statement.prototype.addReference) {
				return Statement.prototype.addReference.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			recipient.export(this._name, this._variable);
			for(var name in this._macros) {
				var macros = this._macros[name];
				var path = "" + this._name + "." + name;
				for(var __ks_513 = 0, __ks_514 = macros.length, macro; __ks_513 < __ks_514; ++__ks_513) {
					macro = macros[__ks_513];
					macro.export(recipient, path);
				}
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_extends_0: function() {
			return this._extendsType;
		},
		extends: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_extends_0.apply(this);
			}
			else if(Statement.prototype.extends) {
				return Statement.prototype.extends.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasConstructors_0: function() {
			return this._constructors.length !== 0;
		},
		hasConstructors: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_hasConstructors_0.apply(this);
			}
			else if(Statement.prototype.hasConstructors) {
				return Statement.prototype.hasConstructors.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasInits_0: function() {
			for(var __ks_515 in this._instanceVariables) {
				var field = this._instanceVariables[__ks_515];
				if(field.hasDefaultValue()) {
					return true;
				}
			}
			return false;
		},
		hasInits: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_hasInits_0.apply(this);
			}
			else if(Statement.prototype.hasInits) {
				return Statement.prototype.hasInits.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExtending_0: function() {
			return this._extending;
		},
		isExtending: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_isExtending_0.apply(this);
			}
			else if(Statement.prototype.isExtending) {
				return Statement.prototype.isExtending.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isHybrid_0: function() {
			return this._hybrid;
		},
		isHybrid: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_isHybrid_0.apply(this);
			}
			else if(Statement.prototype.isHybrid) {
				return Statement.prototype.isHybrid.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_newInstanceMethodScope_0: function(method) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			else if(!KSType.is(method, ClassMethodDeclaration)) {
				throw new TypeError("'method' is not of type 'ClassMethodDeclaration'");
			}
			var scope = new Scope(this._scope);
			scope.define("this", true, this._scope.reference(this._name), this);
			if(this._extending) {
				scope.define("super", true, null, this);
			}
			return scope;
		},
		newInstanceMethodScope: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_newInstanceMethodScope_0.apply(this, arguments);
			}
			else if(Statement.prototype.newInstanceMethodScope) {
				return Statement.prototype.newInstanceMethodScope.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toContinousES5Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			this.module().flag("Helper");
			var line = fragments.newLine().code($runtime.scope(this), this._name, " = ", $runtime.helper(this), ".class(");
			var clazz = line.newObject();
			clazz.line("$name: " + $quote(this._name));
			if(KSType.isValue(this._data.version)) {
				clazz.line("$version: [" + this._data.version.major + ", " + this._data.version.minor + ", " + this._data.version.patch + "]");
			}
			if(this._extending) {
				clazz.line("$extends: ", this._extendsName);
			}
			var m = [];
			var ctrl;
			if(KSType.isValue(this._destructor) || !__ks_Object._cm_isEmpty(this._classMethods)) {
				ctrl = clazz.newLine().code("$static: ").newObject();
				if(KSType.isValue(this._destructor)) {
					this._destructor.toFragments(ctrl, Mode.None);
					ClassDestructorDeclaration.toSwitchFragments(this, ctrl, this._type);
				}
				for(var name in this._classMethods) {
					var methods = this._classMethods[name];
					__ks_Array._im_clear(m);
					for(var __ks_516 = 0, __ks_517 = methods.length, method; __ks_516 < __ks_517; ++__ks_516) {
						method = methods[__ks_516];
						method.toFragments(ctrl, Mode.None);
						m.push(method.type());
					}
					ClassMethodDeclaration.toClassSwitchFragments(this, ctrl.newControl(), this._type, m, name, function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.code(name + ": function()").step();
					}, function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
					});
				}
				ctrl.done();
			}
			if(!this._extending || this._extendsType.isSealedAlien()) {
				clazz.newControl().code("$create: function()").step().line("this.__ks_init()").line("this.__ks_cons(arguments)");
			}
			if(this.hasInits()) {
				ctrl = clazz.newControl().code("__ks_init_1: function()").step();
				for(var __ks_516 in this._instanceVariables) {
					var field = this._instanceVariables[__ks_516];
					field.toFragments(ctrl);
				}
				ctrl = clazz.newControl().code("__ks_init: function()").step();
				if(this._extending && !this._extendsType.isSealedAlien()) {
					ctrl.line(this._extendsName + ".prototype.__ks_init.call(this)");
				}
				ctrl.line(this._name + ".prototype.__ks_init_1.call(this)");
			}
			else {
				if(this._extending) {
					if(this._extendsType.isSealedAlien()) {
						clazz.newControl().code("__ks_init: function()").step();
					}
					else {
						clazz.newControl().code("__ks_init: function()").step().line(this._extendsName + ".prototype.__ks_init.call(this)");
					}
				}
				else {
					clazz.newControl().code("__ks_init: function()").step();
				}
			}
			__ks_Array._im_clear(m);
			for(var __ks_516 = 0, __ks_517 = this._constructors.length, method; __ks_516 < __ks_517; ++__ks_516) {
				method = this._constructors[__ks_516];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toSwitchFragments(this, clazz.newControl(), this._type, m, function(node, fragments) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code("__ks_cons: function(args)").step();
			}, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
			});
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_516 = 0, __ks_517 = methods.length, method; __ks_516 < __ks_517; ++__ks_516) {
					method = methods[__ks_516];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + ": function()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
				});
			}
			clazz.done();
			line.code(")").done();
		},
		toContinousES5Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toContinousES5Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toContinousES5Fragments) {
				return Statement.prototype.toContinousES5Fragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toContinousES6Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var clazz = fragments.newControl().code("class ", this._name);
			if(this._extending) {
				clazz.code(" extends ", this._extendsName);
			}
			clazz.step();
			var ctrl;
			if(!this._extending) {
				clazz.newControl().code("constructor()").step().line("this.__ks_init()").line("this.__ks_cons(arguments)").done();
			}
			if(this.hasInits()) {
				ctrl = clazz.newControl().code("__ks_init_1()").step();
				for(var __ks_518 in this._instanceVariables) {
					var field = this._instanceVariables[__ks_518];
					field.toFragments(ctrl);
				}
				ctrl.done();
				ctrl = clazz.newControl().code("__ks_init()").step();
				if(this._extending && !this._extendsType.isSealedAlien()) {
					ctrl.line(this._extendsName + ".prototype.__ks_init.call(this)");
				}
				ctrl.line(this._name + ".prototype.__ks_init_1.call(this)");
				ctrl.done();
			}
			else {
				if(this._extending) {
					clazz.newControl().code("__ks_init()").step().line(this._extendsName + ".prototype.__ks_init.call(this)").done();
				}
				else {
					clazz.newControl().code("__ks_init()").step().done();
				}
			}
			var m = [];
			for(var __ks_518 = 0, __ks_519 = this._constructors.length, method; __ks_518 < __ks_519; ++__ks_518) {
				method = this._constructors[__ks_518];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toSwitchFragments(this, clazz.newControl(), this._type, m, function(node, fragments) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code("__ks_cons(args)").step();
			}, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				fragments.done();
			});
			if(KSType.isValue(this._destructor)) {
				this._destructor.toFragments(clazz, Mode.None);
				ClassDestructorDeclaration.toSwitchFragments(this, clazz, this._type);
			}
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_518 = 0, __ks_519 = methods.length, method; __ks_518 < __ks_519; ++__ks_518) {
					method = methods[__ks_518];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			for(var name in this._classMethods) {
				var methods = this._classMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_518 = 0, __ks_519 = methods.length, method; __ks_518 < __ks_519; ++__ks_518) {
					method = methods[__ks_518];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toClassSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code("static " + name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			clazz.done();
		},
		toContinousES6Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toContinousES6Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toContinousES6Fragments) {
				return Statement.prototype.toContinousES6Fragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toHybridES6Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var clazz = fragments.newControl().code("class ", this._name, " extends ", this._extendsName).step();
			var m = [];
			var ctrl;
			if(this._constructors.length === 0) {
				ctrl = clazz.newControl().code("constructor()").step().line("super(...arguments)");
				if(this._extendsType.isSealedAlien()) {
					ctrl.line("this.constructor.prototype.__ks_init()");
				}
				ctrl.done();
			}
			else if(this._constructors.length === 1) {
				this._constructors[0].toHybridConstructorFragments(clazz);
			}
			else {
				ctrl = clazz.newControl().code("constructor()").step();
				for(var __ks_520 = 0, __ks_521 = this._constructors.length, method; __ks_520 < __ks_521; ++__ks_520) {
					method = this._constructors[__ks_520];
					method.toFragments(ctrl, Mode.None);
					m.push(method.type());
				}
				var line = ctrl.newLine().code("const __ks_cons = (__ks_arguments) =>");
				ClassDeclaration.toSwitchFragments(this, line.newBlock(), this._type, m, "constructor", function(node, fragments, ctrl, variable) {
					if(arguments.length < 4) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					if(ctrl === void 0 || ctrl === null) {
						throw new TypeError("'ctrl' is not nullable");
					}
					if(variable === void 0 || variable === null) {
						throw new TypeError("'variable' is not nullable");
					}
				}, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments;
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				}, function(fragments, method, index) {
					if(arguments.length < 3) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					if(method === void 0 || method === null) {
						throw new TypeError("'method' is not nullable");
					}
					if(index === void 0 || index === null) {
						throw new TypeError("'index' is not nullable");
					}
					fragments.line("__ks_cons_" + index + "(__ks_arguments)");
				}, ClassDeclaration.toWrongDoingFragments, "__ks_arguments", false);
				line.done();
				ctrl.line("__ks_cons(arguments)").done();
			}
			if(this.hasInits()) {
				ctrl = clazz.newControl().code("__ks_init_1()").step();
				for(var __ks_520 in this._instanceVariables) {
					var field = this._instanceVariables[__ks_520];
					field.toFragments(ctrl);
				}
				ctrl.done();
				if(this._extendsType.isSealedAlien()) {
					clazz.newControl().code("__ks_init()").step().line("" + this._name + ".prototype.__ks_init_1.call(this)").done();
				}
				else {
					clazz.newControl().code("__ks_init()").step().line(this._extendsName + ".prototype.__ks_init.call(this)").line("" + this._name + ".prototype.__ks_init_1.call(this)").done();
				}
			}
			else if(this._extendsType.isSealedAlien()) {
				clazz.newControl().code("__ks_init()").step().done();
			}
			else {
				clazz.newControl().code("__ks_init()").step().line(this._extendsName + ".prototype.__ks_init.call(this)").done();
			}
			if(KSType.isValue(this._destructor)) {
				this._destructor.toFragments(clazz, Mode.None);
				ClassDestructorDeclaration.toSwitchFragments(this, clazz, this._type);
			}
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_520 = 0, __ks_521 = methods.length, method; __ks_520 < __ks_521; ++__ks_520) {
					method = methods[__ks_520];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			for(var name in this._classMethods) {
				var methods = this._classMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_520 = 0, __ks_521 = methods.length, method; __ks_520 < __ks_521; ++__ks_520) {
					method = methods[__ks_520];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toClassSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code("static " + name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			clazz.done();
		},
		toHybridES6Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toHybridES6Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toHybridES6Fragments) {
				return Statement.prototype.toHybridES6Fragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toSealedES5Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			this.module().flag("Helper");
			var line = fragments.newLine().code($runtime.scope(this), this._name, " = ", $runtime.helper(this), ".class(");
			var clazz = line.newObject();
			clazz.line("$name: " + $quote(this._name));
			if(KSType.isValue(this._data.version)) {
				clazz.line("$version: [" + this._data.version.major + ", " + this._data.version.minor + ", " + this._data.version.patch + "]");
			}
			if(this._extending) {
				clazz.line("$extends: ", this._extendsName);
			}
			var m = [];
			var ctrl;
			if(KSType.isValue(this._destructor) || !__ks_Object._cm_isEmpty(this._classMethods)) {
				ctrl = clazz.newLine().code("$static: ").newObject();
				if(KSType.isValue(this._destructor)) {
					this._destructor.toFragments(ctrl, Mode.None);
					ClassDestructorDeclaration.toSwitchFragments(this, ctrl, this._type);
				}
				for(var name in this._classMethods) {
					var methods = this._classMethods[name];
					__ks_Array._im_clear(m);
					for(var __ks_522 = 0, __ks_523 = methods.length, method; __ks_522 < __ks_523; ++__ks_522) {
						method = methods[__ks_522];
						method.toFragments(ctrl, Mode.None);
						m.push(method.type());
					}
					ClassMethodDeclaration.toClassSwitchFragments(this, ctrl.newControl(), this._type, m, name, function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.code(name + ": function()").step();
					}, function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
					});
				}
				ctrl.done();
			}
			if(this._extending && !this._extendsType.isSealedAlien()) {
				ctrl = clazz.newControl().code("__ks_init: function()").step();
				ctrl.line(this._extendsName, ".prototype.__ks_init.call(this)");
				if(this.hasInits()) {
					for(var __ks_522 in this._instanceVariables) {
						var field = this._instanceVariables[__ks_522];
						field.toFragments(ctrl);
					}
				}
			}
			else {
				ctrl = clazz.newControl().code("$create: function()").step();
				if(this.hasInits()) {
					for(var __ks_522 in this._instanceVariables) {
						var field = this._instanceVariables[__ks_522];
						field.toFragments(ctrl);
					}
				}
				ctrl.line("this.__ks_cons(arguments)");
			}
			__ks_Array._im_clear(m);
			for(var __ks_522 = 0, __ks_523 = this._constructors.length, method; __ks_522 < __ks_523; ++__ks_522) {
				method = this._constructors[__ks_522];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toSwitchFragments(this, clazz.newControl(), this._type, m, function(node, fragments) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code("__ks_cons: function(args)").step();
			}, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
			});
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_522 = 0, __ks_523 = methods.length, method; __ks_522 < __ks_523; ++__ks_522) {
					method = methods[__ks_522];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + ": function()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
				});
			}
			clazz.done();
			line.code(")").done();
		},
		toSealedES5Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toSealedES5Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toSealedES5Fragments) {
				return Statement.prototype.toSealedES5Fragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toSealedES6Fragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var clazz = fragments.newControl().code("class ", this._name);
			if(this._extending) {
				clazz.code(" extends ", this._extendsName);
			}
			clazz.step();
			var ctrl;
			if(this._extending && !this._extendsType.isSealedAlien()) {
				ctrl = clazz.newControl().code("__ks_init()").step();
				ctrl.line(this._extendsName, ".prototype.__ks_init.call(this)");
				if(this.hasInits()) {
					for(var __ks_524 in this._instanceVariables) {
						var field = this._instanceVariables[__ks_524];
						field.toFragments(ctrl);
					}
				}
				ctrl.done();
			}
			else {
				ctrl = clazz.newControl().code("constructor()").step();
				if(this.hasInits()) {
					for(var __ks_524 in this._instanceVariables) {
						var field = this._instanceVariables[__ks_524];
						field.toFragments(ctrl);
					}
				}
				ctrl.line("this.__ks_cons(arguments)");
				ctrl.done();
			}
			var m = [];
			for(var __ks_524 = 0, __ks_525 = this._constructors.length, method; __ks_524 < __ks_525; ++__ks_524) {
				method = this._constructors[__ks_524];
				method.toFragments(clazz, Mode.None);
				m.push(method.type());
			}
			ClassConstructorDeclaration.toSwitchFragments(this, clazz.newControl(), this._type, m, function(node, fragments) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code("__ks_cons(args)").step();
			}, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				fragments.done();
			});
			if(KSType.isValue(this._destructor)) {
				this._destructor.toFragments(clazz, Mode.None);
				ClassDestructorDeclaration.toSwitchFragments(this, clazz, this._type);
			}
			for(var name in this._instanceMethods) {
				var methods = this._instanceMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_524 = 0, __ks_525 = methods.length, method; __ks_524 < __ks_525; ++__ks_524) {
					method = methods[__ks_524];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toInstanceSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code(name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			for(var name in this._classMethods) {
				var methods = this._classMethods[name];
				__ks_Array._im_clear(m);
				for(var __ks_524 = 0, __ks_525 = methods.length, method; __ks_524 < __ks_525; ++__ks_524) {
					method = methods[__ks_524];
					method.toFragments(clazz, Mode.None);
					m.push(method.type());
				}
				ClassMethodDeclaration.toClassSwitchFragments(this, clazz.newControl(), this._type, m, name, function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					return fragments.code("static " + name + "()").step();
				}, function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				});
			}
			clazz.done();
		},
		toSealedES6Fragments: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_toSealedES6Fragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toSealedES6Fragments) {
				return Statement.prototype.toSealedES6Fragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._sealed) {
				if(this._es5) {
					this.toSealedES5Fragments(fragments);
				}
				else {
					this.toSealedES6Fragments(fragments);
				}
			}
			else {
				if(this._es5) {
					this.toContinousES5Fragments(fragments);
				}
				else if(this._hybrid) {
					this.toHybridES6Fragments(fragments);
				}
				else {
					this.toContinousES6Fragments(fragments);
				}
			}
			for(var __ks_526 in this._classVariables) {
				var variable = this._classVariables[__ks_526];
				variable.toFragments(fragments);
			}
			if(!this._es5 && KSType.isValue(this._data.version)) {
				var line = fragments.newLine();
				line.code("Object.defineProperty(" + this._name + ", 'version', ").newObject().line("value: [" + this._data.version.major + ", " + this._data.version.minor + ", " + this._data.version.patch + "]").done();
				line.code(")").done();
			}
			var references;
			if(KSType.isValue(__ks_526 = this.module().listReferences(this._name)) ? (references = __ks_526, true) : false) {
				for(var __ks_526 = 0, __ks_527 = references.length, ref; __ks_526 < __ks_527; ++__ks_526) {
					ref = references[__ks_526];
					fragments.line(ref);
				}
			}
			if(this._sealed) {
				fragments.line("var " + this._type.getSealedName() + " = {}");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ClassDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_updateMethodScope_0: function(method) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			if(this._extending) {
				var variable = method.scope().getVariable("super").type(this._scope.reference(this._extendsName));
				if(this._es5) {
					variable.replaceCall = Helper.vcurry(function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new CallSuperMethodES5Substitude(data, __ks_arguments_1, method, this._type);
					}, this);
					variable.replaceMemberCall = Helper.vcurry(function(property, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(property === void 0 || property === null) {
							throw new TypeError("'property' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new MemberSuperMethodES5Substitude(property, __ks_arguments_1, this._type);
					}, this);
				}
				else {
					variable.replaceCall = Helper.vcurry(function(data, __ks_arguments_1) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
							throw new TypeError("'arguments' is not nullable");
						}
						return new CallSuperMethodES6Substitude(data, __ks_arguments_1, method, this._type);
					}, this);
				}
			}
		},
		updateMethodScope: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_updateMethodScope_0.apply(this, arguments);
			}
			else if(Statement.prototype.updateMethodScope) {
				return Statement.prototype.updateMethodScope.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			fn(this._name, this._type);
		},
		walk: function() {
			if(arguments.length === 1) {
				return ClassDeclaration.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Statement.prototype.walk) {
				return Statement.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CallThisConstructorSubstitude = Helper.class({
		$name: "CallThisConstructorSubstitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, __ks_class_1) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.is(__ks_class_1, NamedType)) {
				throw new TypeError("'class' is not of type 'NamedType'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				CallThisConstructorSubstitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallThisConstructorSubstitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("" + this._class.path() + ".prototype.__ks_cons.call(this, [");
			for(var index = 0, __ks_545 = this._arguments.length, argument; index < __ks_545; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallThisConstructorSubstitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return Type.Void;
		},
		type: function() {
			if(arguments.length === 0) {
				return CallThisConstructorSubstitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CallHybridThisConstructorES6Substitude = Helper.class({
		$name: "CallHybridThisConstructorES6Substitude",
		$extends: CallThisConstructorSubstitude,
		__ks_init: function() {
			CallThisConstructorSubstitude.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			CallThisConstructorSubstitude.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("__ks_cons([");
			for(var index = 0, __ks_546 = this._arguments.length, argument; index < __ks_546; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallHybridThisConstructorES6Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return CallThisConstructorSubstitude.prototype.toFragments.apply(this, arguments);
		}
	});
	var CallSuperConstructorSubstitude = Helper.class({
		$name: "CallSuperConstructorSubstitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, __ks_class_1) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.is(__ks_class_1, NamedType)) {
				throw new TypeError("'class' is not of type 'NamedType'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				CallSuperConstructorSubstitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallSuperConstructorSubstitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("" + this._class.type().extends().path() + ".prototype.__ks_cons.call(this, [");
			for(var index = 0, __ks_547 = this._arguments.length, argument; index < __ks_547; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallSuperConstructorSubstitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return Type.Void;
		},
		type: function() {
			if(arguments.length === 0) {
				return CallSuperConstructorSubstitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CallSuperConstructorES5Substitude = Helper.class({
		$name: "CallSuperConstructorES5Substitude",
		$extends: CallSuperConstructorSubstitude,
		__ks_init: function() {
			CallSuperConstructorSubstitude.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			CallSuperConstructorSubstitude.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._class.type().extends().isAlien()) {
				if(this._arguments.length === 0) {
					fragments.code("(1");
				}
				else {
					throw new NotSupportedException();
				}
			}
			else {
				fragments.code("" + this._class.type().extends().path() + ".prototype.__ks_cons.call(this, [");
				for(var index = 0, __ks_548 = this._arguments.length, argument; index < __ks_548; ++index) {
					argument = this._arguments[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(argument);
				}
				fragments.code("]");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallSuperConstructorES5Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return CallSuperConstructorSubstitude.prototype.toFragments.apply(this, arguments);
		}
	});
	var CallHybridSuperConstructorES6Substitude = Helper.class({
		$name: "CallHybridSuperConstructorES6Substitude",
		$extends: CallSuperConstructorSubstitude,
		__ks_init: function() {
			CallSuperConstructorSubstitude.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			CallSuperConstructorSubstitude.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("super(");
			for(var index = 0, __ks_549 = this._arguments.length, argument; index < __ks_549; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallHybridSuperConstructorES6Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return CallSuperConstructorSubstitude.prototype.toFragments.apply(this, arguments);
		}
	});
	var CallSuperMethodES5Substitude = Helper.class({
		$name: "CallSuperMethodES5Substitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, method, __ks_class_1) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			else if(!KSType.is(method, ClassMethodDeclaration)) {
				throw new TypeError("'method' is not of type 'ClassMethodDeclaration'");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.is(__ks_class_1, NamedType)) {
				throw new TypeError("'class' is not of type 'NamedType'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._method = method;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				CallSuperMethodES5Substitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallSuperMethodES5Substitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("" + this._class.type().extends().path() + ".prototype." + this._method.name() + ".call(this, [");
			for(var index = 0, __ks_550 = this._arguments.length, argument; index < __ks_550; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallSuperMethodES5Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._method.type().returnType();
		},
		type: function() {
			if(arguments.length === 0) {
				return CallSuperMethodES5Substitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CallSuperMethodES6Substitude = Helper.class({
		$name: "CallSuperMethodES6Substitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(data, __ks_arguments_1, method, __ks_class_1) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(method === void 0 || method === null) {
				throw new TypeError("'method' is not nullable");
			}
			else if(!KSType.is(method, ClassMethodDeclaration)) {
				throw new TypeError("'method' is not of type 'ClassMethodDeclaration'");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.is(__ks_class_1, NamedType)) {
				throw new TypeError("'class' is not of type 'NamedType'");
			}
			this._data = data;
			this._arguments = __ks_arguments_1;
			this._method = method;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 4) {
				CallSuperMethodES6Substitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallSuperMethodES6Substitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("super." + this._method.name() + "(");
			for(var index = 0, __ks_551 = this._arguments.length, argument; index < __ks_551; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallSuperMethodES6Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._method.type().returnType();
		},
		type: function() {
			if(arguments.length === 0) {
				return CallSuperMethodES6Substitude.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var MemberSuperMethodES5Substitude = Helper.class({
		$name: "MemberSuperMethodES5Substitude",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(property, __ks_arguments_1, __ks_class_1) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			else if(!KSType.isString(property)) {
				throw new TypeError("'property' is not of type 'String'");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			if(__ks_class_1 === void 0 || __ks_class_1 === null) {
				throw new TypeError("'class' is not nullable");
			}
			else if(!KSType.is(__ks_class_1, NamedType)) {
				throw new TypeError("'class' is not of type 'NamedType'");
			}
			this._property = property;
			this._arguments = __ks_arguments_1;
			this._class = __ks_class_1;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				MemberSuperMethodES5Substitude.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return MemberSuperMethodES5Substitude.prototype.__ks_func_isNullable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("" + this._class.discardName().extends().name() + ".prototype." + this._property + ".apply(this, [");
			for(var index = 0, __ks_552 = this._arguments.length, argument; index < __ks_552; ++index) {
				argument = this._arguments[index];
				if(index !== 0) {
					fragments.code($comma);
				}
				fragments.compile(argument);
			}
			fragments.code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return MemberSuperMethodES5Substitude.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassMethodDeclaration = Helper.class({
		$name: "ClassMethodDeclaration",
		$extends: Statement,
		$static: {
			__ks_sttc_toClassSwitchFragments_0: function(node, fragments, variable, methods, name, header, footer) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(header === void 0 || header === null) {
					throw new TypeError("'header' is not nullable");
				}
				if(footer === void 0 || footer === null) {
					throw new TypeError("'footer' is not nullable");
				}
				var extend = null;
				if(variable.type().isExtending()) {
					extend = function(node, fragments, ctrl, variable) {
						if(arguments.length < 4) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(ctrl === void 0) {
							ctrl = null;
						}
						if(variable === void 0 || variable === null) {
							throw new TypeError("'variable' is not nullable");
						}
						var __ks_extends_1 = variable.type().extends();
						var parent = __ks_extends_1.name();
						if(__ks_extends_1.type().hasClassMethod(name)) {
							ctrl.done();
							fragments.line("return " + parent + "." + name + ".apply(null, arguments)");
						}
						else {
							ctrl.step().code("else if(" + parent + "." + name + ")").step().line("return " + parent + "." + name + ".apply(null, arguments)").done();
							fragments.line("throw new SyntaxError(\"wrong number of arguments\")");
						}
					};
				}
				return ClassDeclaration.toSwitchFragments(node, fragments, variable, methods, name, extend, header, footer, Helper.vcurry(ClassDeclaration.callMethod, null, node, variable, "__ks_sttc_" + name + "_", "arguments", "return "), ClassDeclaration.toWrongDoingFragments, "arguments", true);
			},
			toClassSwitchFragments: function() {
				if(arguments.length === 7) {
					return ClassMethodDeclaration.__ks_sttc_toClassSwitchFragments_0.apply(this, arguments);
				}
				else if(Statement.toClassSwitchFragments) {
					return Statement.toClassSwitchFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_toInstanceSwitchFragments_0: function(node, fragments, variable, methods, name, header, footer) {
				if(arguments.length < 7) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 7)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				if(header === void 0 || header === null) {
					throw new TypeError("'header' is not nullable");
				}
				if(footer === void 0 || footer === null) {
					throw new TypeError("'footer' is not nullable");
				}
				var extend = null;
				if(variable.type().isExtending()) {
					extend = function(node, fragments, ctrl, variable) {
						if(arguments.length < 4) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(ctrl === void 0) {
							ctrl = null;
						}
						if(variable === void 0 || variable === null) {
							throw new TypeError("'variable' is not nullable");
						}
						var __ks_extends_1 = variable.type().extends();
						var parent = __ks_extends_1.name();
						if(__ks_extends_1.type().hasInstanceMethod(name)) {
							ctrl.done();
							fragments.line("return " + parent + ".prototype." + name + ".apply(this, arguments)");
						}
						else {
							ctrl.step().code("else if(" + parent + ".prototype." + name + ")").step().line("return " + parent + ".prototype." + name + ".apply(this, arguments)").done();
							fragments.line("throw new SyntaxError(\"wrong number of arguments\")");
						}
					};
				}
				return ClassDeclaration.toSwitchFragments(node, fragments, variable, methods, name, extend, header, footer, Helper.vcurry(ClassDeclaration.callMethod, null, node, variable, "prototype.__ks_func_" + name + "_", "arguments", "return "), ClassDeclaration.toWrongDoingFragments, "arguments", true);
			},
			toInstanceSwitchFragments: function() {
				if(arguments.length === 7) {
					return ClassMethodDeclaration.__ks_sttc_toInstanceSwitchFragments_0.apply(this, arguments);
				}
				else if(Statement.toInstanceSwitchFragments) {
					return Statement.toInstanceSwitchFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._abstract = false;
			this._aliases = [];
			this._analysed = false;
			this._awaiting = false;
			this._exit = false;
			this._instance = true;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ClassMethodDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newInstanceMethodScope(this)]);
			this._name = data.name.name;
			for(var __ks_553 = 0, __ks_554 = data.modifiers.length, modifier; __ks_553 < __ks_554; ++__ks_553) {
				modifier = data.modifiers[__ks_553];
				if(modifier.kind === ModifierKind.Abstract) {
					this._abstract = true;
				}
				else if(modifier.kind === ModifierKind.Static) {
					this._instance = false;
				}
			}
			if(this._instance) {
				if(this._abstract) {
					if(parent._abstract) {
						if(KSType.isArray(parent._abstractMethods[this._name])) {
							parent._abstractMethods[this._name].push(this);
						}
						else {
							parent._abstractMethods[this._name] = [this];
						}
					}
					else {
						SyntaxException.throwNotAbstractClass(parent._name, this._name, parent);
					}
				}
				else {
					if(KSType.isArray(parent._instanceMethods[this._name])) {
						this._internalName = "__ks_func_" + this._name + "_" + parent._instanceMethods[this._name].length;
						parent._instanceMethods[this._name].push(this);
					}
					else {
						this._internalName = "__ks_func_" + this._name + "_0";
						parent._instanceMethods[this._name] = [this];
					}
				}
			}
			else if((this._name === "name") || (this._name === "version")) {
				SyntaxException.throwReservedClassMethod(this._name, parent);
			}
			else {
				if(KSType.isArray(parent._classMethods[this._name])) {
					this._internalName = "__ks_sttc_" + this._name + "_" + parent._classMethods[this._name].length;
					parent._classMethods[this._name].push(this);
				}
				else {
					this._internalName = "__ks_sttc_" + this._name + "_0";
					parent._classMethods[this._name] = [this];
				}
			}
			for(var __ks_553 = 0, __ks_554 = this._data.parameters.length, parameter; __ks_553 < __ks_554; ++__ks_553) {
				parameter = this._data.parameters[__ks_553];
				this._parent.addReference(Type.fromAST(parameter.type, this._scope, false, this), this);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassMethodDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._body = $ast.body(this._data.body);
			this._parameters = [];
			for(var __ks_555 = 0, __ks_556 = this._data.parameters.length, parameter; __ks_555 < __ks_556; ++__ks_555) {
				parameter = this._data.parameters[__ks_555];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(!this._analysed) {
				this._parent.updateMethodScope(this);
				for(var __ks_557 = 0, __ks_558 = this._parameters.length, parameter; __ks_557 < __ks_558; ++__ks_557) {
					parameter = this._parameters[__ks_557];
					parameter.prepare();
				}
				var __ks_arguments_1 = Helper.mapArray(this._parameters, function(parameter) {
					return parameter.type();
				});
				this._type = new ClassMethodType(__ks_arguments_1, this._data, this);
				if(this._parent.isExtending()) {
					var __ks_extends_1 = this._parent.extends().type();
					var method;
					if(KSType.isValue(KSType.isValue(__ks_557 = __ks_extends_1.getInstanceMethod(this._name, __ks_arguments_1)) ? __ks_557 : __ks_extends_1.getAsbtractMethod(this._name, __ks_arguments_1)) ? (method = (KSType.isValue(__ks_557 = __ks_557) ? __ks_557 : __ks_extends_1.getAsbtractMethod(this._name, __ks_arguments_1)), true) : false) {
						if(KSType.isValue(this._data.type)) {
							if(!this._type.returnType().isInstanceOf(method.returnType())) {
								SyntaxException.throwInvalidMethodReturn(this._parent.name(), this._name, this);
							}
						}
						else {
							this._type.returnType(method.returnType());
						}
					}
				}
				this._analysed = true;
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_559 = 0, __ks_560 = this._parameters.length, parameter; __ks_559 < __ks_560; ++__ks_559) {
				parameter = this._parameters[__ks_559];
				parameter.translate();
			}
			this._statements = [];
			for(var __ks_559 = 0, __ks_560 = this._aliases.length, statement; __ks_559 < __ks_560; ++__ks_559) {
				statement = this._aliases[__ks_559];
				this._statements.push(statement);
				statement.analyse();
				if(statement.isAwait()) {
					this._awaiting = true;
				}
			}
			for(var __ks_559 = 0, __ks_560 = this._body.length, statement; __ks_559 < __ks_560; ++__ks_559) {
				statement = this._body[__ks_559];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
			}
			var rtype = this._type.returnType();
			var na = !rtype.isAny();
			for(var __ks_559 = 0, __ks_560 = this._statements.length, statement; __ks_559 < __ks_560; ++__ks_559) {
				statement = this._statements[__ks_559];
				statement.prepare();
				if(this._exit) {
					SyntaxException.throwDeadCode(statement);
				}
				else if(na && !statement.isReturning(rtype)) {
					TypeException.throwUnexpectedReturnedType(rtype, statement);
				}
				else {
					this._exit = statement.isExit();
				}
			}
			for(var __ks_559 = 0, __ks_560 = this._statements.length, statement; __ks_559 < __ks_560; ++__ks_559) {
				statement = this._statements[__ks_559];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addAliasStatement_0: function(statement) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(statement === void 0 || statement === null) {
				throw new TypeError("'statement' is not nullable");
			}
			else if(!KSType.is(statement, AliasStatement)) {
				throw new TypeError("'statement' is not of type 'AliasStatement'");
			}
			if(!ClassDeclaration.isAssigningAlias(this._body, statement.name(), false, false)) {
				this._aliases.push(statement);
			}
		},
		addAliasStatement: function() {
			if(arguments.length === 1) {
				return ClassMethodDeclaration.prototype.__ks_func_addAliasStatement_0.apply(this, arguments);
			}
			else if(Statement.prototype.addAliasStatement) {
				return Statement.prototype.addAliasStatement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAbstract_0: function() {
			return this._abstract;
		},
		isAbstract: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_isAbstract_0.apply(this);
			}
			else if(Statement.prototype.isAbstract) {
				return Statement.prototype.isAbstract.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return ClassMethodDeclaration.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Statement.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isInstance_0: function() {
			return this._instance;
		},
		isInstance: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_isInstance_0.apply(this);
			}
			else if(Statement.prototype.isInstance) {
				return Statement.prototype.isInstance.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isInstanceMethod_0: function() {
			return this._instance;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Statement.prototype.isInstanceMethod) {
				return Statement.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_length_0: function() {
			return this._parameters.length;
		},
		length: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_length_0.apply(this);
			}
			else if(Statement.prototype.length) {
				return Statement.prototype.length.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			if(this._parent._es5) {
				ctrl.code(this._internalName + ": function(");
			}
			else {
				if(!this._instance) {
					ctrl.code("static ");
				}
				ctrl.code(this._internalName + "(");
			}
			Parameter.toFragments(this, ctrl, ParameterMode.Default, function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				return node.code(")").step();
			});
			if(this._awaiting) {
				throw new NotImplementedException(this);
			}
			else {
				for(var __ks_561 = 0, __ks_562 = this._statements.length, statement; __ks_561 < __ks_562; ++__ks_561) {
					statement = this._statements[__ks_561];
					ctrl.compile(statement);
				}
				if(!this._exit && this._type.isAsync()) {
					ctrl.line("__ks_cb()");
				}
			}
			if(!this._parent._es5) {
				ctrl.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ClassMethodDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			if(this._analysed) {
				return this._type;
			}
			else {
				this.prepare();
				return this._type;
			}
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassMethodDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassConstructorDeclaration = Helper.class({
		$name: "ClassConstructorDeclaration",
		$extends: Statement,
		$static: {
			__ks_sttc_toSwitchFragments_0: function(node, fragments, variable, methods, header, footer) {
				if(arguments.length < 6) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 6)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				if(methods === void 0 || methods === null) {
					throw new TypeError("'methods' is not nullable");
				}
				if(header === void 0 || header === null) {
					throw new TypeError("'header' is not nullable");
				}
				if(footer === void 0 || footer === null) {
					throw new TypeError("'footer' is not nullable");
				}
				var extend = null;
				if(node.isExtending()) {
					extend = function(node, fragments, ctrl, variable) {
						if(arguments.length < 4) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(ctrl === void 0) {
							ctrl = null;
						}
						if(variable === void 0 || variable === null) {
							throw new TypeError("'variable' is not nullable");
						}
						if(variable.type().hasConstructors()) {
							ctrl.step().code("else").step().line("throw new SyntaxError(\"wrong number of arguments\")").done();
						}
						else {
							var constructorName = variable.type().extends().isSealedAlien() ? "constructor" : "__ks_cons";
							fragments.line("" + variable.type().extends().path() + ".prototype." + constructorName + ".call(this, args)");
						}
					};
				}
				return ClassDeclaration.toSwitchFragments(node, fragments, variable, methods, "constructor", extend, header, footer, Helper.vcurry(ClassDeclaration.callMethod, null, node, variable, "prototype.__ks_cons_", "args", ""), ClassDeclaration.toWrongDoingFragments, "args", false);
			},
			toSwitchFragments: function() {
				if(arguments.length === 6) {
					return ClassConstructorDeclaration.__ks_sttc_toSwitchFragments_0.apply(this, arguments);
				}
				else if(Statement.toSwitchFragments) {
					return Statement.toSwitchFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._aliases = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ClassConstructorDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent._constructorScope)]);
			this._internalName = "__ks_cons_" + parent._constructors.length;
			parent._constructors.push(this);
			for(var __ks_563 = 0, __ks_564 = this._data.parameters.length, parameter; __ks_563 < __ks_564; ++__ks_563) {
				parameter = this._data.parameters[__ks_563];
				this._parent.addReference(Type.fromAST(parameter.type, this._scope, false, this), this);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassConstructorDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._body = $ast.body(this._data.body);
			this._parameters = [];
			for(var __ks_565 = 0, __ks_566 = this._data.parameters.length, parameter; __ks_565 < __ks_566; ++__ks_565) {
				parameter = this._data.parameters[__ks_565];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_567 = 0, __ks_568 = this._parameters.length, parameter; __ks_567 < __ks_568; ++__ks_567) {
				parameter = this._parameters[__ks_567];
				parameter.prepare();
			}
			this._type = new ClassConstructorType(Helper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_569 = 0, __ks_570 = this._parameters.length, parameter; __ks_569 < __ks_570; ++__ks_569) {
				parameter = this._parameters[__ks_569];
				parameter.translate();
			}
			var index = 1;
			if(this._body.length === 0) {
				if(this._parent._extending) {
					this.callParentConstructor(this._body);
					index = 0;
				}
			}
			else if(((index = this.getConstructorIndex(this._body)) === -1) && this._parent._extending) {
				SyntaxException.throwNoSuperCall(this);
			}
			this._statements = [];
			if(this._aliases.length === 0) {
				for(var __ks_569 = 0, __ks_570 = this._body.length, statement; __ks_569 < __ks_570; ++__ks_569) {
					statement = this._body[__ks_569];
					this._statements.push(statement = $compile.statement(statement, this));
					statement.analyse();
				}
			}
			else {
				for(var __ks_569 = 0, __ks_570 = Math.min(this._body.length, index + 1), statement; __ks_569 < __ks_570; ++__ks_569) {
					statement = this._body[__ks_569];
					this._statements.push(statement = $compile.statement(statement, this));
					statement.analyse();
				}
				for(var __ks_569 = 0, __ks_570 = this._aliases.length, statement; __ks_569 < __ks_570; ++__ks_569) {
					statement = this._aliases[__ks_569];
					this._statements.push(statement);
					statement.analyse();
				}
				for(var __ks_569 = index + 1, __ks_570 = this._body.length, statement; __ks_569 < __ks_570; ++__ks_569) {
					statement = this._body[__ks_569];
					var __ks_571;
					this._statements.push(statement = $compile.statement(statement, this));
					statement.analyse();
				}
			}
			for(var __ks_569 = 0, __ks_570 = this._statements.length, statement; __ks_569 < __ks_570; ++__ks_569) {
				statement = this._statements[__ks_569];
				statement.prepare();
			}
			for(var __ks_569 = 0, __ks_570 = this._statements.length, statement; __ks_569 < __ks_570; ++__ks_569) {
				statement = this._statements[__ks_569];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addAliasStatement_0: function(statement) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(statement === void 0 || statement === null) {
				throw new TypeError("'statement' is not nullable");
			}
			else if(!KSType.is(statement, AliasStatement)) {
				throw new TypeError("'statement' is not of type 'AliasStatement'");
			}
			if(!ClassDeclaration.isAssigningAlias(this._body, statement.name(), true, this._parent._extending)) {
				this._aliases.push(statement);
			}
		},
		addAliasStatement: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_addAliasStatement_0.apply(this, arguments);
			}
			else if(Statement.prototype.addAliasStatement) {
				return Statement.prototype.addAliasStatement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_callParentConstructor_0: function(body) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(body === void 0 || body === null) {
				throw new TypeError("'body' is not nullable");
			}
			var type = this._parent.type();
			var parameters = Helper.mapArray(this._parameters, function(parameter) {
				return parameter;
			}, function(parameter) {
				return !parameter.isAnonymous() && !parameter.isThisAlias();
			});
			if(parameters.length === 0) {
				if(this._parent.extends().type().hasConstructors()) {
					SyntaxException.throwNoSuperCall(this);
				}
			}
			else {
				SyntaxException.throwNoSuperCall(this);
			}
		},
		callParentConstructor: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_callParentConstructor_0.apply(this, arguments);
			}
			else if(Statement.prototype.callParentConstructor) {
				return Statement.prototype.callParentConstructor.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getConstructorIndex_0: function(body) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(body === void 0 || body === null) {
				throw new TypeError("'body' is not nullable");
			}
			else if(!KSType.isArray(body)) {
				throw new TypeError("'body' is not of type 'Array'");
			}
			for(var index = 0, __ks_572 = body.length, statement; index < __ks_572; ++index) {
				statement = body[index];
				if(statement.kind === NodeKind.CallExpression) {
					if((statement.callee.kind === NodeKind.Identifier) && ((statement.callee.name === "this") || (statement.callee.name === "super"))) {
						return index;
					}
				}
				else if(statement.kind === NodeKind.IfStatement) {
					if(KSType.isValue(statement.whenFalse) && (this.getConstructorIndex(statement.whenTrue.statements) !== -1) && (this.getConstructorIndex(statement.whenFalse.statements) !== -1)) {
						return index;
					}
				}
			}
			return -1;
		},
		getConstructorIndex: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_getConstructorIndex_0.apply(this, arguments);
			}
			else if(Statement.prototype.getConstructorIndex) {
				return Statement.prototype.getConstructorIndex.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getSuperIndex_0: function(body) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(body === void 0 || body === null) {
				throw new TypeError("'body' is not nullable");
			}
			else if(!KSType.isArray(body)) {
				throw new TypeError("'body' is not of type 'Array'");
			}
			for(var index = 0, __ks_573 = body.length, statement; index < __ks_573; ++index) {
				statement = body[index];
				if(statement.kind === NodeKind.CallExpression) {
					if((statement.callee.kind === NodeKind.Identifier) && (statement.callee.name === "super")) {
						return index;
					}
				}
				else if(statement.kind === NodeKind.IfStatement) {
					if(KSType.isValue(statement.whenFalse) && (this.getSuperIndex(statement.whenTrue.statements) !== -1) && (this.getSuperIndex(statement.whenFalse.statements) !== -1)) {
						return index;
					}
				}
			}
			return -1;
		},
		getSuperIndex: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_getSuperIndex_0.apply(this, arguments);
			}
			else if(Statement.prototype.getSuperIndex) {
				return Statement.prototype.getSuperIndex.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAbstract_0: function() {
			for(var __ks_574 = 0, __ks_575 = this._data.modifiers.length, modifier; __ks_574 < __ks_575; ++__ks_574) {
				modifier = this._data.modifiers[__ks_574];
				if(modifier.kind === ModifierKind.Abstract) {
					return true;
				}
			}
			return false;
		},
		isAbstract: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_isAbstract_0.apply(this);
			}
			else if(Statement.prototype.isAbstract) {
				return Statement.prototype.isAbstract.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Statement.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isInstanceMethod_0: function() {
			return true;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Statement.prototype.isInstanceMethod) {
				return Statement.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toHybridConstructorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var ctrl = fragments.newControl().code("constructor(");
			Parameter.toFragments(this, ctrl, ParameterMode.Default, function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				return node.code(")").step();
			});
			if(this._parent._extendsType.isSealedAlien()) {
				var index = this.getSuperIndex(this._body);
				if(index === -1) {
					ctrl.line("super()");
					ctrl.line("this.constructor.prototype.__ks_init()");
					for(var __ks_576 = 0, __ks_577 = this._statements.length, statement; __ks_576 < __ks_577; ++__ks_576) {
						statement = this._statements[__ks_576];
						ctrl.compile(statement);
					}
				}
				else {
					for(var __ks_576 = 0, __ks_577 = Math.min(this._statements.length, index + 1), statement; __ks_576 < __ks_577; ++__ks_576) {
						statement = this._statements[__ks_576];
						ctrl.compile(statement);
					}
					ctrl.line("this.constructor.prototype.__ks_init()");
					for(var __ks_576 = index + 1, __ks_577 = this._statements.length, statement; __ks_576 < __ks_577; ++__ks_576) {
						statement = this._statements[__ks_576];
						ctrl.compile(statement);
					}
				}
			}
			else {
				for(var __ks_576 = 0, __ks_577 = this._statements.length, statement; __ks_576 < __ks_577; ++__ks_576) {
					statement = this._statements[__ks_576];
					ctrl.compile(statement);
				}
			}
			ctrl.done();
		},
		toHybridConstructorFragments: function() {
			if(arguments.length === 1) {
				return ClassConstructorDeclaration.prototype.__ks_func_toHybridConstructorFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toHybridConstructorFragments) {
				return Statement.prototype.toHybridConstructorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(!this._parent._es5 && this._parent.isHybrid()) {
				var ctrl = fragments.newLine().code("const " + this._internalName + " = (");
				var block = Parameter.toFragments(this, ctrl, ParameterMode.HybridConstructor, function(node) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					return node.code(") =>").newBlock();
				});
				var index = this.getSuperIndex(this._body);
				if(index === -1) {
					for(var __ks_578 = 0, __ks_579 = this._statements.length, statement; __ks_578 < __ks_579; ++__ks_578) {
						statement = this._statements[__ks_578];
						block.compile(statement);
					}
				}
				else {
					for(var __ks_578 = 0, __ks_579 = Math.min(this._statements.length, index + 1), statement; __ks_578 < __ks_579; ++__ks_578) {
						statement = this._statements[__ks_578];
						block.compile(statement);
					}
					block.line("this.__ks_init()");
					for(var __ks_578 = index + 1, __ks_579 = this._statements.length, statement; __ks_578 < __ks_579; ++__ks_578) {
						statement = this._statements[__ks_578];
						block.compile(statement);
					}
				}
				block.done();
				ctrl.done();
			}
			else {
				var ctrl = fragments.newControl();
				if(this._parent._es5) {
					ctrl.code(this._internalName + ": function(");
				}
				else {
					ctrl.code(this._internalName + "(");
				}
				Parameter.toFragments(this, ctrl, ParameterMode.Default, function(node) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					return node.code(")").step();
				});
				for(var __ks_578 = 0, __ks_579 = this._statements.length, statement; __ks_578 < __ks_579; ++__ks_578) {
					statement = this._statements[__ks_578];
					ctrl.compile(statement);
				}
				if(!this._parent._es5) {
					ctrl.done();
				}
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ClassConstructorDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassConstructorDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassDestructorDeclaration = Helper.class({
		$name: "ClassDestructorDeclaration",
		$extends: Statement,
		$static: {
			__ks_sttc_toSwitchFragments_0: function(node, fragments, variable) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(variable === void 0 || variable === null) {
					throw new TypeError("'variable' is not nullable");
				}
				var ctrl = fragments.newControl();
				if(node._es5) {
					ctrl.code("__ks_destroy: function(that)");
				}
				else {
					ctrl.code("static __ks_destroy(that)");
				}
				ctrl.step();
				if(node._extending) {
					ctrl.line("" + node._extendsName + ".__ks_destroy(that)");
				}
				for(var i = 0, __ks_587 = variable.type().destructors(); i < __ks_587; ++i) {
					ctrl.line("" + node._name + ".__ks_destroy_" + i + "(that)");
				}
				if(!node._es5) {
					ctrl.done();
				}
			},
			toSwitchFragments: function() {
				if(arguments.length === 3) {
					return ClassDestructorDeclaration.__ks_sttc_toSwitchFragments_0.apply(this, arguments);
				}
				else if(Statement.toSwitchFragments) {
					return Statement.toSwitchFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent._destructorScope)]);
			this._internalName = "__ks_destroy_0";
			parent._destructor = this;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassDestructorDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			var parameter = new Parameter({
				kind: NodeKind.Parameter,
				modifiers: [],
				name: $ast.identifier("that")
			}, this);
			parameter.analyse();
			this._parameters = [parameter];
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._parameters[0].prepare();
			this._type = new ClassDestructorType(this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._statements = [];
			var __ks_580 = $ast.body(this._data.body);
			for(var __ks_581 = 0, __ks_582 = __ks_580.length, statement; __ks_581 < __ks_582; ++__ks_581) {
				statement = __ks_580[__ks_581];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
			}
			for(var __ks_580 = 0, __ks_581 = this._statements.length, statement; __ks_580 < __ks_581; ++__ks_580) {
				statement = this._statements[__ks_580];
				statement.prepare();
			}
			for(var __ks_580 = 0, __ks_581 = this._statements.length, statement; __ks_580 < __ks_581; ++__ks_580) {
				statement = this._statements[__ks_580];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAbstract_0: function() {
			for(var __ks_583 = 0, __ks_584 = this._data.modifiers.length, modifier; __ks_583 < __ks_584; ++__ks_583) {
				modifier = this._data.modifiers[__ks_583];
				if(modifier.kind === ModifierKind.Abstract) {
					return true;
				}
			}
			return false;
		},
		isAbstract: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_isAbstract_0.apply(this);
			}
			else if(Statement.prototype.isAbstract) {
				return Statement.prototype.isAbstract.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isInstance_0: function() {
			return false;
		},
		isInstance: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_isInstance_0.apply(this);
			}
			else if(Statement.prototype.isInstance) {
				return Statement.prototype.isInstance.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isInstanceMethod_0: function() {
			return true;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Statement.prototype.isInstanceMethod) {
				return Statement.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			if(this._parent._es5) {
				ctrl.code(this._internalName + ": function(");
			}
			else {
				ctrl.code("static " + this._internalName + "(");
			}
			Parameter.toFragments(this, ctrl, ParameterMode.Default, function(node) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				return node.code(")").step();
			});
			for(var __ks_585 = 0, __ks_586 = this._statements.length, statement; __ks_585 < __ks_586; ++__ks_585) {
				statement = this._statements[__ks_585];
				ctrl.compile(statement);
			}
			if(!this._parent._es5) {
				ctrl.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ClassDestructorDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassDestructorDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ClassVariableDeclaration = Helper.class({
		$name: "ClassVariableDeclaration",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._defaultValue = null;
			this._hasDefaultValue = false;
			this._instance = true;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			ClassVariableDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent]);
			this._name = data.name.name;
			for(var i = 0, __ks_588 = data.modifiers.length; this._instance && i < __ks_588; ++i) {
				if(data.modifiers[i].kind === ModifierKind.Static) {
					this._instance = false;
				}
			}
			if(this._instance) {
				parent._instanceVariables[this._name] = this;
			}
			else if((this._name === "name") || (this._name === "version")) {
				SyntaxException.throwReservedClassVariable(this._name, parent);
			}
			else {
				parent._classVariables[this._name] = this;
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ClassVariableDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			if(KSType.isValue(this._data.defaultValue)) {
				this._hasDefaultValue = true;
				if(!this._instance) {
					var __ks_589;
					this._defaultValue = $compile.expression(this._data.defaultValue, this);
					this._defaultValue.analyse();
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var __ks_590;
			this._parent.addReference(this._type = ClassVariableType.fromAST(this._data, this), this);
			if(this._parent.isExtending()) {
				var type = this._parent._extendsType.type();
				if(this._instance) {
					if(type.hasInstanceVariable(this._name)) {
						ReferenceException.throwAlreadyDefinedField(this._name, this);
					}
				}
				else {
					if(type.hasClassVariable(this._name)) {
						ReferenceException.throwAlreadyDefinedField(this._name, this);
					}
				}
			}
			if(this._hasDefaultValue) {
				if(this._instance) {
					var __ks_591;
					this._defaultValue = $compile.expression(this._data.defaultValue, this, this._parent._instanceVariableScope);
					this._defaultValue.analyse();
				}
				this._defaultValue.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._hasDefaultValue) {
				this._defaultValue.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasDefaultValue_0: function() {
			return this._hasDefaultValue;
		},
		hasDefaultValue: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_hasDefaultValue_0.apply(this);
			}
			else if(AbstractNode.prototype.hasDefaultValue) {
				return AbstractNode.prototype.hasDefaultValue.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isInstance_0: function() {
			return this._instance;
		},
		isInstance: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_isInstance_0.apply(this);
			}
			else if(AbstractNode.prototype.isInstance) {
				return AbstractNode.prototype.isInstance.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(AbstractNode.prototype.name) {
				return AbstractNode.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._hasDefaultValue) {
				if(this._instance) {
					fragments.newLine().code("this." + this._name + " = ").compile(this._defaultValue).done();
				}
				else {
					fragments.newLine().code("" + this._parent.name() + "." + this._name + " = ").compile(this._defaultValue).done();
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return ClassVariableDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ClassVariableDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ContinueStatement = Helper.class({
		$name: "ContinueStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ContinueStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ContinueStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ContinueStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.line("continue", this._data);
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ContinueStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var DestroyStatement = Helper.class({
		$name: "DestroyStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._hasVariable = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			DestroyStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_592;
			this._expression = $compile.expression(this._data.variable, this);
			this._expression.analyse();
			if(this._data.variable.kind === NodeKind.Identifier) {
				this._variable = this._scope.getVariable(this._data.variable.name);
				this._hasVariable = true;
				this._scope.removeVariable(this._data.variable.name);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DestroyStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DestroyStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DestroyStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var type;
			if(this._hasVariable && (type = this._variable.type().discardReference()).isClass() && type.type().hasDestructors()) {
				fragments.newLine().code(type.path(), ".__ks_destroy(").compile(this._expression).code(")").done();
			}
			if(KSType.is(this._expression, IdentifierLiteral)) {
				fragments.newLine().compile(this._expression).code(" = undefined").done();
			}
			else {
				fragments.newLine().code("delete ").compile(this._expression).done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return DestroyStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var DoUntilStatement = Helper.class({
		$name: "DoUntilStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_593;
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._body = $compile.expression(this._data.body, this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DoUntilStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._body.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DoUntilStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DoUntilStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("do").step().compile(this._body).step().code("while(!(").compileBoolean(this._condition).code("))").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return DoUntilStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var DoWhileStatement = Helper.class({
		$name: "DoWhileStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_594;
			this._body = $compile.expression(this._data.body, this);
			this._body.analyse();
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return DoWhileStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._body.prepare();
			this._condition.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return DoWhileStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._body.translate();
			this._condition.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DoWhileStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("do").step().compile(this._body).step().code("while(").compileBoolean(this._condition).code(")").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return DoWhileStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var EnumDeclaration = Helper.class({
		$name: "EnumDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._composites = [];
			this._new = true;
			this._values = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			EnumDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			var __ks_595;
			if(KSType.isValue(__ks_595 = this._scope.getVariable(this._name)) ? (this._variable = __ks_595, true) : false) {
				this._new = false;
			}
			else {
				var type = Type.fromAST(this._data.type, this);
				if(type.isString()) {
					this._enum = new EnumType(this._scope, EnumTypeKind.String);
				}
				else if(KSType.isValue(this._data.attributes)) {
					var nf = true;
					for(var __ks_595 = 0, __ks_596 = this._data.attributes.length, attr; nf && __ks_595 < __ks_596; ++__ks_595) {
						attr = this._data.attributes[__ks_595];
						if((attr.kind === NodeKind.AttributeDeclaration) && (attr.declaration.kind === NodeKind.Identifier) && (attr.declaration.name === "flags")) {
							nf = false;
							this._enum = new EnumType(this._scope, EnumTypeKind.Flags);
						}
					}
					if(nf) {
						this._enum = new EnumType(this._scope);
					}
				}
				else {
					this._enum = new EnumType(this._scope);
				}
				this._type = new NamedType(this._name, this._enum);
				this._variable = this._scope.define(this._name, true, this._type, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(!this._new) {
				this._type = this._variable.type();
				this._enum = this._type.type();
			}
			var __ks_597 = this._enum.kind();
			if(__ks_597 === EnumTypeKind.Flags) {
				for(var __ks_598 = 0, __ks_599 = this._data.members.length, data; __ks_598 < __ks_599; ++__ks_598) {
					data = this._data.members[__ks_598];
					if(KSType.isValue(data.value)) {
						if((data.value.kind === NodeKind.BinaryExpression) && (data.value.operator.kind === BinaryOperatorKind.BitwiseOr)) {
							this._composites.push({
								name: data.name.name,
								components: [data.value.left, data.value.right]
							});
							this._enum.addElement(data.name.name);
						}
						else if((data.value.kind === NodeKind.PolyadicExpression) && (data.value.operator.kind === BinaryOperatorKind.BitwiseOr)) {
							this._composites.push({
								name: data.name.name,
								components: data.value.operands
							});
							this._enum.addElement(data.name.name);
						}
						else {
							if(data.value.kind === NodeKind.NumericExpression) {
								this._enum.index(data.value.value);
							}
							else {
								throw new NotSupportedException(this);
							}
							this._values.push({
								name: data.name.name,
								value: (this._enum.index() <= 0) ? 0 : 1 << (this._enum.index() - 1)
							});
							this._enum.addElement(data.name.name);
						}
					}
					else {
						this._values.push({
							name: data.name.name,
							value: (this._enum.step().index() <= 0) ? 0 : 1 << (this._enum.index() - 1)
						});
						this._enum.addElement(data.name.name);
					}
				}
			}
			else if(__ks_597 === EnumTypeKind.String) {
				var value;
				for(var __ks_598 = 0, __ks_599 = this._data.members.length, data; __ks_598 < __ks_599; ++__ks_598) {
					data = this._data.members[__ks_598];
					if(KSType.isValue(data.value)) {
						if(data.value.kind === NodeKind.Literal) {
							value = $quote(data.value.value);
						}
						else {
							throw new NotSupportedException(this);
						}
					}
					else {
						value = $quote(data.name.name.toLowerCase());
					}
					this._values.push({
						name: data.name.name,
						value: value
					});
					this._enum.addElement(data.name.name);
				}
			}
			else if(__ks_597 === EnumTypeKind.Number) {
				var value;
				for(var __ks_598 = 0, __ks_599 = this._data.members.length, data; __ks_598 < __ks_599; ++__ks_598) {
					data = this._data.members[__ks_598];
					if(KSType.isValue(data.value)) {
						if(data.value.kind === NodeKind.NumericExpression) {
							this._enum.index(data.value.value);
						}
						else {
							throw new NotSupportedException(this);
						}
					}
					else {
						this._enum.step();
					}
					this._values.push({
						name: data.name.name,
						value: this._enum.index()
					});
					this._enum.addElement(data.name.name);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			recipient.export(this._name, this._variable);
		},
		export: function() {
			if(arguments.length === 1) {
				return EnumDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._new) {
				var line = fragments.newLine().code($runtime.scope(this), this._name, $equals);
				var object = line.newObject();
				for(var __ks_600 = 0, __ks_601 = this._values.length, member; __ks_600 < __ks_601; ++__ks_600) {
					member = this._values[__ks_600];
					object.line(member.name, ": ", member.value);
				}
				object.done();
				line.done();
			}
			else {
				for(var __ks_600 = 0, __ks_601 = this._values.length, member; __ks_600 < __ks_601; ++__ks_600) {
					member = this._values[__ks_600];
					fragments.line(this._name, ".", member.name, " = ", member.value);
				}
			}
			if(this._composites.length > 0) {
				var line;
				for(var __ks_600 = 0, __ks_601 = this._composites.length, member; __ks_600 < __ks_601; ++__ks_600) {
					member = this._composites[__ks_600];
					line = fragments.newLine().code(this._name, ".", member.name, " = ");
					for(var i = 0, __ks_602 = member.components.length, value; i < __ks_602; ++i) {
						value = member.components[i];
						if(i > 0) {
							line.code(" | ");
						}
						line.code(this._name, ".", value.name);
					}
					line.done();
				}
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return EnumDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return EnumDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExportDeclaration = Helper.class({
		$name: "ExportDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarations = [];
			this._statements = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ExportDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var statement;
			if(this._parent.includePath() === null) {
				for(var __ks_603 = 0, __ks_604 = this._data.declarations.length, declaration; __ks_603 < __ks_604; ++__ks_603) {
					declaration = this._data.declarations[__ks_603];
					var __ks_605 = declaration.kind;
					if(__ks_605 === NodeKind.ExportDeclarationSpecifier) {
						statement = $compile.statement(declaration.declaration, this);
					}
					else if(__ks_605 === NodeKind.ExportNamedSpecifier) {
						statement = new ExportNamedSpecifier(declaration, this);
					}
					else if(__ks_605 === NodeKind.ExportPropertiesSpecifier) {
						statement = new ExportPropertiesSpecifier(declaration, this);
					}
					else if(__ks_605 === NodeKind.ExportWildcardSpecifier) {
						statement = new ExportWildcardSpecifier(declaration, this);
					}
					else {
						console.log(declaration);
						throw new NotImplementedException(this);
					}
					statement.analyse();
					this._statements.push(statement);
					this._declarations.push(statement);
				}
			}
			else {
				for(var __ks_603 = 0, __ks_604 = this._data.declarations.length, declaration; __ks_603 < __ks_604; ++__ks_603) {
					declaration = this._data.declarations[__ks_603];
					if(declaration.kind === NodeKind.ExportDeclarationSpecifier) {
						this._statements.push(statement = $compile.statement(declaration.declaration, this));
						statement.analyse();
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExportDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_606 = 0, __ks_607 = this._statements.length, statement; __ks_606 < __ks_607; ++__ks_606) {
				statement = this._statements[__ks_606];
				statement.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExportDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_608 = 0, __ks_609 = this._statements.length, statement; __ks_608 < __ks_609; ++__ks_608) {
				statement = this._statements[__ks_608];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExportDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			for(var __ks_610 = 0, __ks_611 = this._declarations.length, declaration; __ks_610 < __ks_611; ++__ks_610) {
				declaration = this._declarations[__ks_610];
				declaration.export(recipient);
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return ExportDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_isExportable_0: function() {
			return true;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return ExportDeclaration.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Statement.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_612 = 0, __ks_613 = this._statements.length, statement; __ks_612 < __ks_613; ++__ks_612) {
				statement = this._statements[__ks_612];
				statement.toFragments(fragments, Mode.None);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ExportDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var __ks_614 = 0, __ks_615 = this._statements.length, statement; __ks_614 < __ks_615; ++__ks_614) {
				statement = this._statements[__ks_614];
				statement.walk(fn);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ExportDeclaration.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Statement.prototype.walk) {
				return Statement.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExportNamedSpecifier = Helper.class({
		$name: "ExportNamedSpecifier",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExportNamedSpecifier.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var __ks_616;
			this._expression = $compile.expression(this._data.local, this._parent);
			this._expression.analyse();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExportNamedSpecifier.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExportNamedSpecifier.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			this._expression.prepare();
			if(this._expression.isMacro()) {
				var __ks_617 = this._parent.scope().listMacros(this._expression.name());
				for(var __ks_618 = 0, __ks_619 = __ks_617.length, macro; __ks_618 < __ks_619; ++__ks_618) {
					macro = __ks_617[__ks_618];
					macro.export(recipient, this._data.exported.name);
				}
			}
			else {
				recipient.export(this._data.exported.name, this._expression);
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return ExportNamedSpecifier.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExportNamedSpecifier.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			if(!this._expression.isMacro()) {
				fn(this._data.exported.name, this._expression.type());
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ExportNamedSpecifier.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.walk) {
				return AbstractNode.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExportPropertiesSpecifier = Helper.class({
		$name: "ExportPropertiesSpecifier",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExportPropertiesSpecifier.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var __ks_620;
			this._object = $compile.expression(this._data.object, this._parent);
			this._object.analyse();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExportPropertiesSpecifier.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExportPropertiesSpecifier.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			this._object.prepare();
			for(var __ks_621 = 0, __ks_622 = this._data.properties.length, property; __ks_621 < __ks_622; ++__ks_621) {
				property = this._data.properties[__ks_621];
				recipient.export(property.exported.name, new ExportProperty(this._object, property.local.name));
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return ExportPropertiesSpecifier.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExportPropertiesSpecifier.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExportWildcardSpecifier = Helper.class({
		$name: "ExportWildcardSpecifier",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExportWildcardSpecifier.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var __ks_623;
			this._expression = $compile.expression(this._data.local, this._parent);
			this._expression.analyse();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExportWildcardSpecifier.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExportWildcardSpecifier.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			this._expression.prepare();
			this._expression.type().walk(Helper.vcurry(function(name, __ks_624) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(name === void 0 || name === null) {
					throw new TypeError("'name' is not nullable");
				}
				recipient.export(name, new ExportProperty(this._expression, name));
			}, this));
		},
		export: function() {
			if(arguments.length === 1) {
				return ExportWildcardSpecifier.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExportWildcardSpecifier.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExportProperty = Helper.class({
		$name: "ExportProperty",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(object, property) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(object === void 0 || object === null) {
				throw new TypeError("'object' is not nullable");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			else if(!KSType.isString(property)) {
				throw new TypeError("'property' is not of type 'String'");
			}
			this._object = object;
			this._property = property;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ExportProperty.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._object).code("." + this._property);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExportProperty.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._object.type().getProperty(this._property);
		},
		type: function() {
			if(arguments.length === 0) {
				return ExportProperty.prototype.__ks_func_type_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExpressionStatement = Helper.class({
		$name: "ExpressionStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._variable = "";
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ExpressionStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_625;
			this._expression = $compile.expression(this._data, this);
			this._expression.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.prepare();
			this._expression.acquireReusable(false);
			this._expression.releaseReusable();
			this._expression.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_assignment_0: function(data, expression) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(expression === void 0 || expression === null) {
				throw new TypeError("'expression' is not nullable");
			}
			if(data.left.kind === NodeKind.Identifier) {
				var variable;
				var __ks_626;
				if(KSType.isValue(__ks_626 = this._scope.getVariable(data.left.name)) ? (variable = __ks_626, true) : false) {
					if(variable.isImmutable()) {
						ReferenceException.throwImmutable(data.left.name, this);
					}
				}
				else {
					if(!expression.isAssignable() || this._variable.length) {
						this._assignments.push(data.left.name);
					}
					else {
						this._variable = data.left.name;
					}
					this._scope.define(data.left.name, false, this);
					return [data.left.name];
				}
			}
		},
		assignment: function() {
			if(arguments.length === 2) {
				return ExpressionStatement.prototype.__ks_func_assignment_0.apply(this, arguments);
			}
			return Statement.prototype.assignment.apply(this, arguments);
		},
		__ks_func_hasExceptions_0: function() {
			return this._expression.hasExceptions();
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			else if(Statement.prototype.hasExceptions) {
				return Statement.prototype.hasExceptions.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._expression.isAwait();
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return ExpressionStatement.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_toAwaitStatementFragments_0: function(fragments, statements) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			var line = fragments.newLine();
			var item = this._expression.toFragments(line, Mode.None);
			statements.unshift(this);
			item(statements);
			line.done();
		},
		toAwaitStatementFragments: function() {
			if(arguments.length === 2) {
				return ExpressionStatement.prototype.__ks_func_toAwaitStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitStatementFragments) {
				return Statement.prototype.toAwaitStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._expression.isAwaiting()) {
				return Helper.vcurry(this.toAwaitStatementFragments, this, fragments);
			}
			else if(this._expression.isAssignable()) {
				if(this._assignments.length !== 0) {
					fragments.newLine().code($runtime.scope(this) + this._assignments.join(", ")).done();
				}
				var line = fragments.newLine();
				if(this._variable.length !== 0) {
					line.code($runtime.scope(this));
				}
				if(KSType.isValue(this._expression.toAssignmentFragments)) {
					this._expression.toAssignmentFragments(line);
				}
				else {
					this._expression.toFragments(line, Mode.None);
				}
				line.done();
			}
			else if(KSType.isValue(this._expression.toStatementFragments)) {
				if(this._variable.length !== 0) {
					this._assignments.unshift(this._variable);
				}
				if(this._assignments.length !== 0) {
					fragments.newLine().code($runtime.scope(this) + this._assignments.join(", ")).done();
				}
				this._expression.toStatementFragments(fragments, Mode.None);
			}
			else {
				if(this._assignments.length !== 0) {
					fragments.newLine().code($runtime.scope(this) + this._assignments.join(", ")).done();
				}
				var line = fragments.newLine();
				if(this._variable.length) {
					line.code($runtime.scope(this));
				}
				line.compile(this._expression, Mode.None).done();
			}
			for(var __ks_627 = 0, __ks_628 = this._afterwards.length, afterward; __ks_627 < __ks_628; ++__ks_627) {
				afterward = this._afterwards[__ks_627];
				afterward.toAfterwardFragments(fragments);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ExpressionStatement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	var ForFromStatement = Helper.class({
		$name: "ForFromStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._defineVariable = false;
			this._immutableVariable = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForFromStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ForFromStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			var rename = false;
			var variable = this._scope.getVariable(this._data.variable.name);
			this._defineVariable = this._data.declaration || (variable === null);
			this._immutableVariable = this._data.declaration && !this._data.rebindable;
			var __ks_629, __ks_630;
			this._from = $compile.expression(this._data.from, this, this._parent.scope());
			this._from.analyse();
			if(this._from.isUsingVariable(this._data.variable.name)) {
				if(this._defineVariable) {
					rename = true;
				}
				else {
					SyntaxException.throwAlreadyDeclared(this._data.variable.name, this);
				}
			}
			if(this._data.til) {
				var __ks_631;
				this._til = $compile.expression(this._data.til, this, this._parent.scope());
				this._til.analyse();
				if(this._til.isUsingVariable(this._data.variable.name)) {
					if(this._defineVariable) {
						rename = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.variable.name, this);
					}
				}
			}
			else {
				var __ks_632;
				this._to = $compile.expression(this._data.to, this, this._parent.scope());
				this._to.analyse();
				if(this._to.isUsingVariable(this._data.variable.name)) {
					if(this._defineVariable) {
						rename = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.variable.name, this);
					}
				}
			}
			if(this._data.by) {
				var __ks_633;
				this._by = $compile.expression(this._data.by, this, this._parent.scope());
				this._by.analyse();
				if(this._by.isUsingVariable(this._data.variable.name)) {
					if(this._defineVariable) {
						rename = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.variable.name, this);
					}
				}
			}
			if(this._defineVariable) {
				var __ks_634;
				this._variableVariable = this._scope.define(this._data.variable.name, this._immutableVariable, this._scope.reference("Number"), this);
				if(rename) {
					this._scope.rename(this._data.variable.name);
				}
			}
			else if(variable.isImmutable()) {
				ReferenceException.throwImmutable(this._data.variable.name, this);
			}
			this._variable = $compile.expression(this._data.variable, this);
			this._variable.analyse();
			if(this._data.until) {
				this._until = $compile.expression(this._data.until, this);
				this._until.analyse();
			}
			else if(this._data.while) {
				this._while = $compile.expression(this._data.while, this);
				this._while.analyse();
			}
			if(this._data.when) {
				this._when = $compile.expression(this._data.when, this);
				this._when.analyse();
			}
			var __ks_635;
			this._body = $compile.expression($ast.block(this._data.body), this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForFromStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._variable.prepare();
			this._from.prepare();
			var context = this._defineVariable ? null : this;
			if(KSType.isValue(this._til)) {
				this._til.prepare();
				if(this._til.isComposite()) {
					this._boundName = this._scope.acquireTempName(context);
				}
			}
			else {
				this._to.prepare();
				if(this._to.isComposite()) {
					this._boundName = this._scope.acquireTempName(context);
				}
			}
			if(KSType.isValue(this._by)) {
				this._by.prepare();
				if(this._by.isComposite()) {
					this._byName = this._scope.acquireTempName(context);
				}
			}
			if(KSType.isValue(this._until)) {
				this._until.prepare();
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._boundName)) {
				this._scope.releaseTempName(this._boundName);
			}
			if(KSType.isValue(this._byName)) {
				this._scope.releaseTempName(this._byName);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ForFromStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._variable.translate();
			this._from.translate();
			if(KSType.isValue(this._til)) {
				this._til.translate();
			}
			else {
				this._to.translate();
			}
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ForFromStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl().code("for(");
			if(this._defineVariable) {
				ctrl.code($runtime.scope(this));
			}
			ctrl.compile(this._variable).code($equals).compile(this._from);
			if(KSType.isValue(this._boundName)) {
				ctrl.code($comma, this._boundName, $equals).compile(KSType.isValue(this._til) ? this._til : this._to);
			}
			if(KSType.isValue(this._byName)) {
				ctrl.code($comma, this._byName, $equals).compile(this._by);
			}
			ctrl.code("; ");
			if(this._data.until) {
				ctrl.code("!(").compileBoolean(this._until).code(") && ");
			}
			else if(this._data.while) {
				ctrl.compileBoolean(this._while).code(" && ");
			}
			ctrl.compile(this._variable);
			var desc = (this._data.by && (this._data.by.kind === NodeKind.NumericExpression) && (this._data.by.value < 0)) || ((this._data.from.kind === NodeKind.NumericExpression) && ((this._data.to && (this._data.to.kind === NodeKind.NumericExpression) && (this._data.from.value > this._data.to.value)) || (this._data.til && (this._data.til.kind === NodeKind.NumericExpression) && (this._data.from.value > this._data.til.value))));
			if(this._data.til) {
				if(desc) {
					ctrl.code(" > ");
				}
				else {
					ctrl.code(" < ");
				}
				ctrl.compile(KSType.isValue(this._boundName) ? this._boundName : this._til);
			}
			else {
				if(desc) {
					ctrl.code(" >= ");
				}
				else {
					ctrl.code(" <= ");
				}
				ctrl.compile(KSType.isValue(this._boundName) ? this._boundName : this._to);
			}
			ctrl.code("; ");
			if(this._data.by) {
				if(this._data.by.kind === NodeKind.NumericExpression) {
					if(this._data.by.value === 1) {
						ctrl.code("++").compile(this._variable);
					}
					else if(this._data.by.value === -1) {
						ctrl.code("--").compile(this._variable);
					}
					else if(this._data.by.value >= 0) {
						ctrl.compile(this._variable).code(" += ").compile(this._by);
					}
					else {
						ctrl.compile(this._variable).code(" -= ", -this._data.by.value);
					}
				}
				else {
					ctrl.compile(this._variable).code(" += ").compile(KSType.isValue(this._byName) ? this._byName : this._by);
				}
			}
			else if(desc) {
				ctrl.code("--").compile(this._variable);
			}
			else {
				ctrl.code("++").compile(this._variable);
			}
			ctrl.code(")").step();
			if(this._data.when) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForFromStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ForInStatement = Helper.class({
		$name: "ForInStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._defineIndex = false;
			this._defineValue = false;
			this._immutable = false;
			this._index = null;
			this._value = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForInStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ForInStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			var indexVariable = null;
			var valueVariable = null;
			this._immutable = this._data.declaration && !this._data.rebindable;
			if(KSType.isValue(this._data.index)) {
				var __ks_636;
				indexVariable = this._scope.getVariable(this._data.index.name);
				if(this._data.declaration || (indexVariable === null)) {
					var __ks_637;
					this._indexVariable = this._scope.define(this._data.index.name, this._immutable, this._scope.reference("Number"), this);
					this._defineIndex = true;
				}
				else if(indexVariable.isImmutable()) {
					ReferenceException.throwImmutable(this._data.index.name, this);
				}
				this._index = $compile.expression(this._data.index, this);
				this._index.analyse();
			}
			if(KSType.isValue(this._data.value)) {
				valueVariable = this._scope.getVariable(this._data.value.name);
				if(this._data.declaration || (valueVariable === null)) {
					this._valueVariable = this._scope.define(this._data.value.name, this._immutable, this);
					this._defineValue = true;
				}
				else if(valueVariable.isImmutable()) {
					ReferenceException.throwImmutable(this._data.value.name, this);
				}
				this._value = $compile.expression(this._data.value, this);
				this._value.analyse();
			}
			var renameIndex = false;
			var renameValue = false;
			var __ks_638;
			this._expression = $compile.expression(this._data.expression, this, this._parent.scope());
			this._expression.analyse();
			if((this._index !== null) && this._expression.isUsingVariable(this._data.index.name)) {
				if(this._defineIndex) {
					renameIndex = true;
				}
				else {
					SyntaxException.throwAlreadyDeclared(this._data.index.name, this);
				}
			}
			if((this._value !== null) && this._expression.isUsingVariable(this._data.value.name)) {
				if(this._defineValue) {
					renameValue = true;
				}
				else {
					SyntaxException.throwAlreadyDeclared(this._data.value.name, this);
				}
			}
			if(KSType.isValue(this._data.from)) {
				var __ks_639;
				this._from = $compile.expression(this._data.from, this, this._parent.scope());
				this._from.analyse();
				if((this._index !== null) && this._from.isUsingVariable(this._data.index.name)) {
					if(this._defineIndex) {
						renameIndex = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.index.name, this);
					}
				}
				if((this._value !== null) && this._from.isUsingVariable(this._data.value.name)) {
					if(this._defineValue) {
						renameValue = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.value.name, this);
					}
				}
			}
			if(KSType.isValue(this._data.til)) {
				var __ks_640;
				this._til = $compile.expression(this._data.til, this, this._parent.scope());
				this._til.analyse();
				if((this._index !== null) && this._til.isUsingVariable(this._data.index.name)) {
					if(this._defineIndex) {
						renameIndex = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.index.name, this);
					}
				}
				if((this._value !== null) && this._til.isUsingVariable(this._data.value.name)) {
					if(this._defineValue) {
						renameValue = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.value.name, this);
					}
				}
			}
			else if(KSType.isValue(this._data.to)) {
				var __ks_641;
				this._to = $compile.expression(this._data.to, this, this._parent.scope());
				this._to.analyse();
				if((this._index !== null) && this._to.isUsingVariable(this._data.index.name)) {
					if(this._defineIndex) {
						renameIndex = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.index.name, this);
					}
				}
				if((this._value !== null) && this._to.isUsingVariable(this._data.value.name)) {
					if(this._defineValue) {
						renameValue = true;
					}
					else {
						SyntaxException.throwAlreadyDeclared(this._data.value.name, this);
					}
				}
			}
			if(renameIndex) {
				this._scope.rename(this._data.index.name);
			}
			if(renameValue) {
				this._scope.rename(this._data.value.name);
			}
			if(KSType.isValue(this._data.until)) {
				this._until = $compile.expression(this._data.until, this);
				this._until.analyse();
			}
			else if(KSType.isValue(this._data.while)) {
				this._while = $compile.expression(this._data.while, this);
				this._while.analyse();
			}
			if(KSType.isValue(this._data.when)) {
				this._when = $compile.expression(this._data.when, this);
				this._when.analyse();
			}
			var __ks_642;
			this._body = $compile.expression($ast.block(this._data.body), this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForInStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
			var type = this._expression.type();
			if(!(type.isAny() || type.isArray())) {
				TypeException.throwInvalidForInExpression(this);
			}
			if(this._expression.isEntangled()) {
				var __ks_643;
				this._expressionName = this.greatScope().acquireTempName();
			}
			if(this._defineValue) {
				this._valueVariable.type(type.parameter());
			}
			if(!KSType.isValue(this._index) && !(KSType.isValue(this._data.index) && !this._data.declaration && this.greatScope().hasVariable(this._data.index.name))) {
				this._indexName = this._scope.acquireTempName();
			}
			this._boundName = this._scope.acquireTempName();
			if(KSType.isValue(this._from)) {
				this._from.prepare();
			}
			if(KSType.isValue(this._til)) {
				this._til.prepare();
			}
			else if(KSType.isValue(this._to)) {
				this._to.prepare();
			}
			if(KSType.isValue(this._until)) {
				this._until.prepare();
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
				this._when.acquireReusable(false);
				this._when.releaseReusable();
			}
			this._body.prepare();
			if(KSType.isValue(this._expressionName)) {
				this.greatScope().releaseTempName(this._expressionName);
			}
			if(KSType.isValue(this._indexName)) {
				this._scope.releaseTempName(this._indexName);
			}
			this._scope.releaseTempName(this._boundName);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ForInStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			if(KSType.isValue(this._from)) {
				this._from.translate();
			}
			if(KSType.isValue(this._til)) {
				this._til.translate();
			}
			else if(KSType.isValue(this._to)) {
				this._to.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ForInStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBoundFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._data.desc) {
				if(KSType.isValue(this._from)) {
					if(KSType.is(this._from, NumberLiteral) && (this._from.value() < 0)) {
						fragments.code("Math.max(0, ").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - " + -this._from.value() + ")");
					}
					else {
						fragments.compile(this._from);
					}
				}
				else {
					fragments.code("0");
				}
			}
			else {
				if(KSType.isValue(this._til)) {
					if(KSType.is(this._til, NumberLiteral) && (this._til.value() < 0)) {
						fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - " + -this._til.value());
					}
					else {
						fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length, ").compile(this._til).code(")");
					}
				}
				else if(KSType.isValue(this._to)) {
					if(KSType.is(this._to, NumberLiteral)) {
						if(this._to.value() < 0) {
							fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - " + (-this._to.value() - 1));
						}
						else {
							fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length, " + (this._to.value() + 1) + ")");
						}
					}
					else {
						fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length, ").compile(this._to).code(" + 1)");
					}
				}
				else {
					fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length");
				}
			}
		},
		toBoundFragments: function() {
			if(arguments.length === 1) {
				return ForInStatement.prototype.__ks_func_toBoundFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toBoundFragments) {
				return Statement.prototype.toBoundFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFromFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._data.desc) {
				if(KSType.isValue(this._til)) {
					if(KSType.is(this._til, NumberLiteral) && (this._til.value() < 0)) {
						fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - " + (-this._til.value() + 1));
					}
					else {
						fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length, ").compile(this._til).code(") - 1");
					}
				}
				else if(KSType.isValue(this._to)) {
					if(KSType.is(this._to, NumberLiteral)) {
						if(this._to.value() < 0) {
							fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - " + -this._to.value());
						}
						else {
							fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length, " + this._to.value() + ")");
						}
					}
					else {
						fragments.code("Math.min(").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length, ").compile(this._to).code(")");
					}
				}
				else {
					fragments.compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - 1");
				}
			}
			else {
				if(KSType.isValue(this._from)) {
					if(KSType.is(this._from, NumberLiteral) && (this._from.value() < 0)) {
						fragments.code("Math.max(0, ").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(".length - " + -this._from.value() + ")");
					}
					else {
						fragments.compile(this._from);
					}
				}
				else {
					fragments.code("0");
				}
			}
		},
		toFromFragments: function() {
			if(arguments.length === 1) {
				return ForInStatement.prototype.__ks_func_toFromFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toFromFragments) {
				return Statement.prototype.toFromFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isValue(this._expressionName)) {
				var line = fragments.newLine();
				if(!this.greatScope().hasVariable(this._expressionName)) {
					line.code($runtime.scope(this));
					this.greatScope().define(this._expressionName, false, this);
				}
				line.code(this._expressionName, $equals).compile(this._expression).done();
			}
			var ctrl;
			if((this._index !== null) && !this._data.declaration && !this._defineIndex) {
				var line = fragments.newLine().compile(this._index).code($equals);
				this.toFromFragments(line);
				line.done();
				var __ks_644, __ks_645;
				ctrl = fragments.newControl().code("for(", $runtime.scope(this));
			}
			else {
				ctrl = fragments.newControl().code("for(", $runtime.scope(this)).compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code($equals);
				this.toFromFragments(ctrl);
				ctrl.code($comma);
			}
			ctrl.code(this._boundName, $equals);
			this.toBoundFragments(ctrl);
			if(this._defineValue) {
				ctrl.code($comma).compile(this._value);
			}
			ctrl.code("; ");
			if(KSType.isValue(this._until)) {
				ctrl.code("!(").compile(this._until).code(") && ");
			}
			else if(KSType.isValue(this._while)) {
				ctrl.compile(this._while).code(" && ");
			}
			if(this._data.desc) {
				ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" >= " + this._boundName + "; --").compile(KSType.isValue(this._indexName) ? this._indexName : this._index);
			}
			else {
				ctrl.compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code(" < " + this._boundName + "; ++").compile(KSType.isValue(this._indexName) ? this._indexName : this._index);
			}
			ctrl.code(")").step();
			if(KSType.isValue(this._value)) {
				ctrl.newLine().compile(this._value).code($equals).compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code("[").compile(KSType.isValue(this._indexName) ? this._indexName : this._index).code("]").done();
			}
			if(KSType.isValue(this._when)) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForInStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ForOfStatement = Helper.class({
		$name: "ForOfStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._defineKey = false;
			this._defineValue = false;
			this._key = null;
			this._immutable = false;
			this._value = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForOfStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ForOfStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			var keyVariable = null;
			var valueVariable = null;
			this._immutable = this._data.declaration && !this._data.rebindable;
			if(KSType.isValue(this._data.key)) {
				var __ks_646;
				keyVariable = this._scope.getVariable(this._data.key.name);
				if(this._data.declaration || (keyVariable === null)) {
					var __ks_647;
					this._keyVariable = this._scope.define(this._data.key.name, this._immutable, this._scope.reference("String"), this);
					this._defineKey = true;
				}
				else if(keyVariable.isImmutable()) {
					ReferenceException.throwImmutable(this._data.key.name, this);
				}
				this._key = $compile.expression(this._data.key, this);
				this._key.analyse();
			}
			if(KSType.isValue(this._data.value)) {
				valueVariable = this._scope.getVariable(this._data.value.name);
				if(this._data.declaration || (valueVariable === null)) {
					this._valueVariable = this._scope.define(this._data.value.name, this._immutable, this);
					this._defineValue = true;
				}
				else if(valueVariable.isImmutable()) {
					ReferenceException.throwImmutable(this._data.value.name, this);
				}
				this._value = $compile.expression(this._data.value, this);
				this._value.analyse();
			}
			var __ks_648;
			this._expression = $compile.expression(this._data.expression, this, this._parent.scope());
			this._expression.analyse();
			if((this._key !== null) && this._expression.isUsingVariable(this._data.key.name)) {
				if(this._defineKey) {
					this._scope.rename(this._data.key.name);
				}
				else {
					SyntaxException.throwAlreadyDeclared(this._data.key.name, this);
				}
			}
			if((this._value !== null) && this._expression.isUsingVariable(this._data.value.name)) {
				if(this._defineValue) {
					this._scope.rename(this._data.value.name);
				}
				else {
					SyntaxException.throwAlreadyDeclared(this._data.value.name, this);
				}
			}
			if(this._data.until) {
				this._until = $compile.expression(this._data.until, this);
				this._until.analyse();
			}
			else if(this._data.while) {
				this._while = $compile.expression(this._data.while, this);
				this._while.analyse();
			}
			if(this._data.when) {
				this._when = $compile.expression(this._data.when, this);
				this._when.analyse();
			}
			var __ks_649;
			this._body = $compile.expression($ast.block(this._data.body), this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForOfStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
			var type = this._expression.type();
			if(!(type.isAny() || type.isObject())) {
				TypeException.throwInvalidForOfExpression(this);
			}
			if(this._expression.isEntangled()) {
				var __ks_650;
				this._expressionName = this.greatScope().acquireTempName();
			}
			if(this._defineValue) {
				this._valueVariable.type(type.parameter());
			}
			if(KSType.isValue(this._key)) {
				this._key.prepare();
			}
			else {
				this._keyName = this._scope.acquireTempName();
			}
			if(KSType.isValue(this._until)) {
				this._until.prepare();
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._expressionName)) {
				this.greatScope().releaseTempName(this._expressionName);
			}
			if(KSType.isValue(this._keyName)) {
				this._scope.releaseTempName(this._keyName);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ForOfStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
			if(KSType.isValue(this._key)) {
				this._key.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ForOfStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isValue(this._expressionName)) {
				var line = fragments.newLine();
				if(!this.greatScope().hasVariable(this._expressionName)) {
					line.code($runtime.scope(this));
					this.greatScope().define(this._expressionName, false, this);
				}
				line.code(this._expressionName, $equals).compile(this._expression).done();
			}
			var ctrl = fragments.newControl().code("for(");
			if(this._key !== null) {
				if(this._data.declaration || this._defineKey) {
					if(this._options.format.variables === "es5") {
						ctrl.code("var ");
					}
					else if(this._immutable) {
						ctrl.code("const ");
					}
					else {
						ctrl.code("let ");
					}
				}
				ctrl.compile(this._key);
			}
			else {
				ctrl.code($runtime.scope(this), this._keyName);
			}
			ctrl.code(" in ").compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code(")").step();
			if(this._value !== null) {
				var line = ctrl.newLine();
				if(this._data.declaration || this._defineValue) {
					if(this._options.format.variables === "es5") {
						line.code("var ");
					}
					else if(this._immutable) {
						line.code("const ");
					}
					else {
						line.code("let ");
					}
				}
				line.compile(this._value).code($equals).compile(KSType.isValue(this._expressionName) ? this._expressionName : this._expression).code("[").compile(KSType.isValue(this._key) ? this._key : this._keyName).code("]").done();
			}
			if(KSType.isValue(this._until)) {
				ctrl.newControl().code("if(").compile(this._until).code(")").step().line("break").done();
			}
			else if(KSType.isValue(this._while)) {
				ctrl.newControl().code("if(!(").compile(this._while).code("))").step().line("break").done();
			}
			if(KSType.isValue(this._when)) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForOfStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ForRangeStatement = Helper.class({
		$name: "ForRangeStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._defineVariable = false;
			this._immutableVariable = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ForRangeStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, parent.newScope()]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ForRangeStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._immutableVariable = this._data.declaration && !this._data.rebindable;
			var variable = this._scope.getVariable(this._data.value.name);
			if(this._data.declaration || (variable === null)) {
				var __ks_651, __ks_652;
				this._valueVariable = this._scope.define(this._data.value.name, this._immutableVariable, this._scope.reference("Number"), this);
				this._defineVariable = true;
			}
			else if(variable.isImmutable()) {
				ReferenceException.throwImmutable(this._data.value.name, this);
			}
			this._value = $compile.expression(this._data.value, this);
			this._value.analyse();
			this._from = $compile.expression(this._data.from, this);
			this._from.analyse();
			this._to = $compile.expression(this._data.to, this);
			this._to.analyse();
			if(this._data.by) {
				this._by = $compile.expression(this._data.by, this);
				this._by.analyse();
			}
			if(this._data.until) {
				this._until = $compile.expression(this._data.until, this);
				this._until.analyse();
			}
			else if(this._data.while) {
				this._while = $compile.expression(this._data.while, this);
				this._while.analyse();
			}
			if(this._data.when) {
				this._when = $compile.expression(this._data.when, this);
				this._when.analyse();
			}
			var __ks_653;
			this._body = $compile.expression($ast.block(this._data.body), this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ForRangeStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
			this._from.prepare();
			this._to.prepare();
			if(this._to.isComposite()) {
				this._boundName = this._scope.acquireTempName();
			}
			if(KSType.isValue(this._by)) {
				this._by.prepare();
				if(this._by.isComposite()) {
					this._byName = this._scope.acquireTempName();
				}
			}
			if(KSType.isValue(this._until)) {
				this._until.prepare();
			}
			else if(KSType.isValue(this._while)) {
				this._while.prepare();
			}
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._boundName)) {
				this._scope.releaseTempName(this._boundName);
			}
			if(KSType.isValue(this._byName)) {
				this._scope.releaseTempName(this._byName);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ForRangeStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
			this._from.translate();
			this._to.translate();
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			if(KSType.isValue(this._until)) {
				this._until.translate();
			}
			else if(KSType.isValue(this._while)) {
				this._while.translate();
			}
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ForRangeStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl().code("for(");
			if(this._defineVariable) {
				ctrl.code($runtime.scope(this));
			}
			ctrl.compile(this._value).code($equals).compile(this._from);
			if(KSType.isValue(this._boundName)) {
				ctrl.code(this._boundName, $equals).compile(this._to);
			}
			if(KSType.isValue(this._byName)) {
				ctrl.code($comma, this._byName, $equals).compile(this._by);
			}
			ctrl.code("; ");
			if(this._data.until) {
				ctrl.code("!(").compile(this._until).code(") && ");
			}
			else if(this._data.while) {
				ctrl.compile(this._while).code(" && ");
			}
			ctrl.compile(this._value).code(" <= ").compile(KSType.isValue(this._boundName) ? this._boundName : this._to).code("; ");
			if(this._data.by) {
				if(this._data.by.kind === NodeKind.NumericExpression) {
					if(this._data.by.value === 1) {
						ctrl.code("++").compile(this._value);
					}
					else {
						ctrl.compile(this._value).code(" += ").compile(this._by);
					}
				}
				else {
					ctrl.compile(this._value).code(" += ").compile(KSType.isValue(this._byName) ? this._byName : this._by);
				}
			}
			else {
				ctrl.code("++").compile(this._value);
			}
			ctrl.code(")").step();
			if(this._data.when) {
				ctrl.newControl().code("if(").compileBoolean(this._when).code(")").step().compile(this._body).done();
			}
			else {
				ctrl.compile(this._body);
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ForRangeStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var $function = {
		surround: function(node) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var parent = node._parent;
			while(KSType.isValue(parent) && !(KSType.is(parent, ClassMethodDeclaration) || KSType.is(parent, ImplementClassMethodDeclaration))) {
				var __ks_654;
				parent = parent.parent();
			}
			if(KSType.isValue(parent) ? parent._instance : false) {
				if($function.useThisVariable(node._data.body, node)) {
					if(node._options.format.functions === "es5") {
						return {
							arrow: false,
							beforeParameters: "" + $runtime.helper(node) + ".vcurry(function(",
							afterParameters: ")",
							footer: ", this)"
						};
					}
					else {
						return {
							arrow: true,
							beforeParameters: "(",
							afterParameters: ") =>",
							footer: ""
						};
					}
				}
				else {
					return {
						arrow: false,
						beforeParameters: "function(",
						afterParameters: ")",
						footer: ""
					};
				}
			}
			else {
				return {
					arrow: false,
					beforeParameters: "function(",
					afterParameters: ")",
					footer: ""
				};
			}
		},
		useThisVariable: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks_655 = data.kind;
			if(__ks_655 === NodeKind.ArrayExpression) {
				for(var __ks_656 = 0, __ks_657 = data.values.length, value; __ks_656 < __ks_657; ++__ks_656) {
					value = data.values[__ks_656];
					if($function.useThisVariable(value, node)) {
						return true;
					}
				}
			}
			else if(__ks_655 === NodeKind.BinaryExpression) {
				if($function.useThisVariable(data.left, node) || $function.useThisVariable(data.right, node)) {
					return true;
				}
			}
			else if(__ks_655 === NodeKind.Block) {
				for(var __ks_656 = 0, __ks_657 = data.statements.length, statement; __ks_656 < __ks_657; ++__ks_656) {
					statement = data.statements[__ks_656];
					if($function.useThisVariable(statement, node)) {
						return true;
					}
				}
			}
			else if(__ks_655 === NodeKind.CallExpression) {
				if($function.useThisVariable(data.callee, node)) {
					return true;
				}
				for(var __ks_656 = 0, __ks_657 = data.arguments.length, arg; __ks_656 < __ks_657; ++__ks_656) {
					arg = data.arguments[__ks_656];
					if($function.useThisVariable(arg, node)) {
						return true;
					}
				}
			}
			else if(__ks_655 === NodeKind.CreateExpression) {
				if($function.useThisVariable(data.class, node)) {
					return true;
				}
				for(var __ks_656 = 0, __ks_657 = data.arguments.length, arg; __ks_656 < __ks_657; ++__ks_656) {
					arg = data.arguments[__ks_656];
					if($function.useThisVariable(arg, node)) {
						return true;
					}
				}
			}
			else if(__ks_655 === NodeKind.EnumExpression) {
				return false;
			}
			else if(__ks_655 === NodeKind.Identifier) {
				return data.name === "this";
			}
			else if(__ks_655 === NodeKind.IfStatement) {
				if($function.useThisVariable(data.condition, node) || $function.useThisVariable(data.whenTrue, node)) {
					return true;
				}
				if(KSType.isValue(data.whenFalse) && $function.useThisVariable(data.whenFalse, node)) {
					return true;
				}
			}
			else if(__ks_655 === NodeKind.Literal) {
				return false;
			}
			else if(__ks_655 === NodeKind.MemberExpression) {
				return $function.useThisVariable(data.object, node);
			}
			else if(__ks_655 === NodeKind.NumericExpression) {
				return false;
			}
			else if(__ks_655 === NodeKind.ObjectExpression) {
				for(var __ks_656 = 0, __ks_657 = data.properties.length, property; __ks_656 < __ks_657; ++__ks_656) {
					property = data.properties[__ks_656];
					if($function.useThisVariable(property.value, node)) {
						return true;
					}
				}
			}
			else if(__ks_655 === NodeKind.PolyadicExpression) {
				for(var __ks_656 = 0, __ks_657 = data.operands.length, operand; __ks_656 < __ks_657; ++__ks_656) {
					operand = data.operands[__ks_656];
					if($function.useThisVariable(operand, node)) {
						return true;
					}
				}
			}
			else if(__ks_655 === NodeKind.ReturnStatement) {
				return $function.useThisVariable(data.value, node);
			}
			else if(__ks_655 === NodeKind.TemplateExpression) {
				for(var __ks_656 = 0, __ks_657 = data.elements.length, element; __ks_656 < __ks_657; ++__ks_656) {
					element = data.elements[__ks_656];
					if($function.useThisVariable(element, node)) {
						return true;
					}
				}
			}
			else if(__ks_655 === NodeKind.ThisExpression) {
				return true;
			}
			else if(__ks_655 === NodeKind.ThrowStatement) {
				return $function.useThisVariable(data.value, node);
			}
			else if(__ks_655 === NodeKind.UnaryExpression) {
				return $function.useThisVariable(data.argument, node);
			}
			else if(__ks_655 === NodeKind.VariableDeclaration) {
				return KSType.isValue(data.init) && $function.useThisVariable(data.init, node);
			}
			else {
				throw new NotImplementedException("Unknow kind " + data.kind, node);
			}
			return false;
		}
	};
	var FunctionDeclaration = Helper.class({
		$name: "FunctionDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._extended = false;
			this._main = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			FunctionDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				FunctionDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._scope.define("this", true, this);
			this._name = this._data.name.name;
			var scope = this.greatScope();
			var __ks_658;
			if(KSType.isValue(__ks_658 = scope.getLocalVariable(this._name)) ? (this._variable = __ks_658, true) : false) {
				if(KSType.is(this._variable, FunctionVariable)) {
					var declarator = new FunctionDeclarator(this._variable, this._data, this);
					declarator.analyse();
				}
				else {
					scope.addStash(this._name, Helper.vcurry(function(variable) {
						if(arguments.length < 1) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(variable === void 0 || variable === null) {
							throw new TypeError("'variable' is not nullable");
						}
						var type = variable.type();
						if(type.isFunction()) {
							this._main = true;
							this._extended = true;
							this._variable = new FunctionVariable(scope, this._name, true);
							this._variable.type().addFunction(type);
							scope.replaceVariable(this._name, this._variable);
							this._oldVariableName = scope.newRenamedVariable(this._name);
						}
						else {
							SyntaxException.throwNotOverloadableFunction(this._name, this);
						}
						return true;
					}, this), Helper.vcurry(function(variable) {
						if(arguments.length < 1) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(variable === void 0 || variable === null) {
							throw new TypeError("'variable' is not nullable");
						}
						this._variable = variable;
						var declarator = new FunctionDeclarator(this._variable, this._data, this);
						declarator.analyse();
					}, this));
				}
			}
			else {
				this._main = true;
				this._variable = new FunctionVariable(scope, this._name, false);
				scope.addVariable(this._name, this._variable, this);
				var declarator = new FunctionDeclarator(this._variable, this._data, this);
				declarator.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._main || this.greatScope().processStash(this._name)) {
				this._variable.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._main) {
				this._variable.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			recipient.export(this._name, this._variable);
		},
		export: function() {
			if(arguments.length === 1) {
				return FunctionDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(!this._main) {
				return;
			}
			if(this._extended) {
				fragments.line($const(this), this._oldVariableName, $equals, this._name);
				ClassDeclaration.toSwitchFragments(this, fragments.newLine(), this._variable.type(), Helper.mapArray(this._variable._declarators, function(declarator) {
					return declarator.type();
				}), this._name, null, Helper.vcurry(function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					var block = fragments.code("function " + this._name + "()").newBlock();
					return block;
				}, this), function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				}, Helper.vcurry(function(fragments, method, index) {
					if(arguments.length < 3) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					if(method === void 0 || method === null) {
						throw new TypeError("'method' is not nullable");
					}
					if(index === void 0 || index === null) {
						throw new TypeError("'index' is not nullable");
					}
					var declarator = this._variable.getDeclarator(index);
					declarator.toSwitchFragments(fragments, Helper.vcurry(function(fragments, wrongdoing, data) {
						if(arguments.length < 3) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(wrongdoing === void 0 || wrongdoing === null) {
							throw new TypeError("'wrongdoing' is not nullable");
						}
						if(data === void 0 || data === null) {
							throw new TypeError("'data' is not nullable");
						}
						if(this._options.format.spreads === "es5") {
							fragments.line("return " + this._oldVariableName + ".apply(null, arguments)");
						}
						else {
							fragments.line("return " + this._oldVariableName + "(...arguments)");
						}
					}, this));
				}, this), Helper.vcurry(function(block, ctrl, async, returns) {
					if(arguments.length < 4) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
					}
					if(block === void 0 || block === null) {
						throw new TypeError("'block' is not nullable");
					}
					if(ctrl === void 0 || ctrl === null) {
						throw new TypeError("'ctrl' is not nullable");
					}
					if(async === void 0 || async === null) {
						throw new TypeError("'async' is not nullable");
					}
					if(returns === void 0 || returns === null) {
						throw new TypeError("'returns' is not nullable");
					}
					if(this._options.format.spreads === "es5") {
						ctrl.step().code("else").step().line("return " + this._oldVariableName + ".apply(null, arguments)").done();
					}
					else {
						ctrl.step().code("else").step().line("return " + this._oldVariableName + "(...arguments)").done();
					}
				}, this), "arguments", false).done();
			}
			else if(this._variable.length() === 1) {
				this._variable.getDeclarator(0).toStatementFragments(fragments, mode);
			}
			else {
				ClassDeclaration.toSwitchFragments(this, fragments.newLine(), this._variable.type(), Helper.mapArray(this._variable._declarators, function(declarator) {
					return declarator.type();
				}), this._name, null, Helper.vcurry(function(node, fragments) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					var block = fragments.code("function " + this._name + "()").newBlock();
					return block;
				}, this), function(fragments) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					fragments.done();
				}, Helper.vcurry(function(fragments, method, index) {
					if(arguments.length < 3) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
					}
					if(fragments === void 0 || fragments === null) {
						throw new TypeError("'fragments' is not nullable");
					}
					if(method === void 0 || method === null) {
						throw new TypeError("'method' is not nullable");
					}
					if(index === void 0 || index === null) {
						throw new TypeError("'index' is not nullable");
					}
					var declarator = this._variable.getDeclarator(index);
					declarator.toSwitchFragments(fragments, Parameter.toWrongDoingFragments);
				}, this), ClassDeclaration.toWrongDoingFragments, "arguments", false).done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return FunctionDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._variable.type();
		},
		type: function() {
			if(arguments.length === 0) {
				return FunctionDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			if(this._main) {
				fn(this._name, this._variable.type());
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return FunctionDeclaration.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Statement.prototype.walk) {
				return Statement.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var FunctionDeclarator = Helper.class({
		$name: "FunctionDeclarator",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._await = false;
			this._exit = false;
			this._parameters = [];
			this._statements = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			FunctionDeclarator.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(variable, data, parent) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, FunctionVariable)) {
				throw new TypeError("'variable' is not of type 'FunctionVariable'");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent]);
			this._variable = variable;
			variable.addDeclarator(this);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				FunctionDeclarator.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			for(var __ks_659 = 0, __ks_660 = this._data.parameters.length, parameter; __ks_659 < __ks_660; ++__ks_659) {
				parameter = this._data.parameters[__ks_659];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_661 = 0, __ks_662 = this._parameters.length, parameter; __ks_661 < __ks_662; ++__ks_661) {
				parameter = this._parameters[__ks_661];
				parameter.prepare();
			}
			this._type = new FunctionType(Helper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_663 = 0, __ks_664 = this._parameters.length, parameter; __ks_663 < __ks_664; ++__ks_663) {
				parameter = this._parameters[__ks_663];
				parameter.translate();
			}
			var __ks_663 = $ast.body(this._data.body);
			for(var __ks_664 = 0, __ks_665 = __ks_663.length, statement; __ks_664 < __ks_665; ++__ks_664) {
				statement = __ks_663[__ks_664];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
				if(statement.isAwait()) {
					this._await = true;
				}
			}
			var rtype = this._type.returnType();
			var na = !rtype.isAny();
			for(var __ks_663 = 0, __ks_664 = this._statements.length, statement; __ks_663 < __ks_664; ++__ks_663) {
				statement = this._statements[__ks_663];
				statement.prepare();
				if(this._exit) {
					SyntaxException.throwDeadCode(statement);
				}
				else if(na && !statement.isReturning(rtype)) {
					TypeException.throwUnexpectedReturnedType(rtype, statement);
				}
				else {
					this._exit = statement.isExit();
				}
			}
			for(var __ks_663 = 0, __ks_664 = this._statements.length, statement; __ks_663 < __ks_664; ++__ks_663) {
				statement = this._statements[__ks_663];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_isAwait_0.apply(this);
			}
			else if(AbstractNode.prototype.isAwait) {
				return AbstractNode.prototype.isAwait.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return FunctionDeclarator.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return AbstractNode.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isInstanceMethod_0: function() {
			return false;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(AbstractNode.prototype.isInstanceMethod) {
				return AbstractNode.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(AbstractNode.prototype.parameters) {
				return AbstractNode.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAwaitExpressionFragments_0: function(fragments, parameters, statements) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			fragments.code("(__ks_e");
			for(var __ks_666 = 0, __ks_667 = parameters.length, parameter; __ks_666 < __ks_667; ++__ks_666) {
				parameter = parameters[__ks_666];
				fragments.code($comma).compile(parameter);
			}
			fragments.code(") =>");
			var block = fragments.newBlock();
			var ctrl = block.newControl().code("if(__ks_e)").step().line("__ks_cb(__ks_e)").step().code("else").step();
			var index = -1;
			var item;
			for(var i = 0, __ks_666 = statements.length, statement; index === -1 && i < __ks_666; ++i) {
				statement = statements[i];
				if(KSType.isValue(__ks_667 = statement.toFragments(ctrl, Mode.None)) ? (item = __ks_667, true) : false) {
					index = i;
				}
			}
			if(index !== -1) {
				item(statements.slice(index + 1));
			}
			ctrl.done();
			block.done();
			fragments.code(")").done();
		},
		toAwaitExpressionFragments: function() {
			if(arguments.length === 3) {
				return FunctionDeclarator.prototype.__ks_func_toAwaitExpressionFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toAwaitExpressionFragments) {
				return AbstractNode.prototype.toAwaitExpressionFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl().code("function " + this._parent.name() + "(");
			Parameter.toFragments(this, ctrl, ParameterMode.Default, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code(")").step();
			});
			if(this._await) {
				var index = -1;
				var item;
				for(var i = 0, __ks_668 = this._statements.length, statement; index === -1 && i < __ks_668; ++i) {
					statement = this._statements[i];
					var __ks_669;
					if(KSType.isValue(__ks_669 = statement.toFragments(ctrl, Mode.None)) ? (item = __ks_669, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(this._statements.slice(index + 1));
				}
			}
			else {
				for(var __ks_668 = 0, __ks_669 = this._statements.length, statement; __ks_668 < __ks_669; ++__ks_668) {
					statement = this._statements[__ks_668];
					ctrl.compile(statement, Mode.None);
				}
				if(!this._exit && this._type.isAsync()) {
					ctrl.line("__ks_cb()");
				}
			}
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return FunctionDeclarator.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toSwitchFragments_0: function(fragments, wrongdoer) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			Parameter.toFragments(this, fragments, ParameterMode.OverloadedFunction, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments;
			}, wrongdoer);
			if(this._await) {
				var index = -1;
				var item;
				for(var i = 0, __ks_670 = this._statements.length, statement; index === -1 && i < __ks_670; ++i) {
					statement = this._statements[i];
					var __ks_671;
					if(KSType.isValue(__ks_671 = statement.toFragments(fragments, Mode.None)) ? (item = __ks_671, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(this._statements.slice(index + 1));
				}
			}
			else {
				for(var __ks_670 = 0, __ks_671 = this._statements.length, statement; __ks_670 < __ks_671; ++__ks_670) {
					statement = this._statements[__ks_670];
					fragments.compile(statement, Mode.None);
				}
				if(!this._exit && this._type.isAsync()) {
					fragments.line("__ks_cb()");
				}
			}
		},
		toSwitchFragments: function() {
			if(arguments.length === 2) {
				return FunctionDeclarator.prototype.__ks_func_toSwitchFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toSwitchFragments) {
				return AbstractNode.prototype.toSwitchFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return FunctionDeclarator.prototype.__ks_func_type_0.apply(this);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var FunctionVariable = Helper.class({
		$name: "FunctionVariable",
		$extends: Variable,
		__ks_init_1: function() {
			this._async = false;
			this._extended = false;
			this._declarators = [];
		},
		__ks_init: function() {
			Variable.prototype.__ks_init.call(this);
			FunctionVariable.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(scope, name, extended) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(extended === void 0 || extended === null) {
				throw new TypeError("'extended' is not nullable");
			}
			else if(!KSType.isBoolean(extended)) {
				throw new TypeError("'extended' is not of type 'Boolean'");
			}
			Variable.prototype.__ks_cons.call(this, [name, true, false, new OverloadedFunctionType(scope)]);
			this._extended = extended;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				FunctionVariable.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_addDeclarator_0: function(declarator) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(declarator === void 0 || declarator === null) {
				throw new TypeError("'declarator' is not nullable");
			}
			else if(!KSType.is(declarator, FunctionDeclarator)) {
				throw new TypeError("'declarator' is not of type 'FunctionDeclarator'");
			}
			this._declarators.push(declarator);
		},
		addDeclarator: function() {
			if(arguments.length === 1) {
				return FunctionVariable.prototype.__ks_func_addDeclarator_0.apply(this, arguments);
			}
			else if(Variable.prototype.addDeclarator) {
				return Variable.prototype.addDeclarator.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getDeclarator_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			return this._declarators[index];
		},
		getDeclarator: function() {
			if(arguments.length === 1) {
				return FunctionVariable.prototype.__ks_func_getDeclarator_0.apply(this, arguments);
			}
			else if(Variable.prototype.getDeclarator) {
				return Variable.prototype.getDeclarator.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_length_0: function() {
			return this._declarators.length;
		},
		length: function() {
			if(arguments.length === 0) {
				return FunctionVariable.prototype.__ks_func_length_0.apply(this);
			}
			else if(Variable.prototype.length) {
				return Variable.prototype.length.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._extended) {
				var type;
				for(var __ks_672 = 0, __ks_673 = this._declarators.length, declarator; __ks_672 < __ks_673; ++__ks_672) {
					declarator = this._declarators[__ks_672];
					declarator.prepare();
					type = declarator.type();
					if(type.isAsync() !== this._async) {
						SyntaxException.throwMixedOverloadedFunction(declarator);
					}
					else if(this._type.hasFunction(type)) {
						SyntaxException.throwNotDifferentiableFunction(declarator);
					}
					this._type.addFunction(type);
				}
			}
			else if(this._declarators.length === 1) {
				this._declarators[0].prepare();
				this._type = this._declarators[0].type();
			}
			else {
				var declarator = this._declarators[0];
				declarator.prepare();
				var type = declarator.type();
				this._type.addFunction(type);
				var async = type.isAsync();
				for(var __ks_672 = 1, __ks_673 = this._declarators.length; __ks_672 < __ks_673; ++__ks_672) {
					declarator = this._declarators[__ks_672];
					declarator.prepare();
					type = declarator.type();
					if(type.isAsync() !== async) {
						SyntaxException.throwMixedOverloadedFunction(declarator);
					}
					else if(this._type.hasFunction(type)) {
						SyntaxException.throwNotDifferentiableFunction(declarator);
					}
					this._type.addFunction(type);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FunctionVariable.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Variable.prototype.prepare) {
				return Variable.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_674 = 0, __ks_675 = this._declarators.length, declarator; __ks_674 < __ks_675; ++__ks_674) {
				declarator = this._declarators[__ks_674];
				declarator.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return FunctionVariable.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Variable.prototype.translate) {
				return Variable.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var IfStatement = Helper.class({
		$name: "IfStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_676;
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenTrueScope = this.newScope(this._scope);
			var __ks_677;
			this._whenTrueExpression = $compile.expression($ast.block(this._data.whenTrue), this, this._whenTrueScope);
			this._whenTrueExpression.analyse();
			if(KSType.isValue(this._data.whenFalse)) {
				if(this._data.whenFalse.kind === NodeKind.IfStatement) {
					this._whenFalseExpression = $compile.statement(this._data.whenFalse, this);
					this._whenFalseExpression.analyse();
				}
				else {
					this._whenFalseScope = this.newScope(this._scope);
					var __ks_678;
					this._whenFalseExpression = $compile.expression($ast.block(this._data.whenFalse), this, this._whenFalseScope);
					this._whenFalseExpression.analyse();
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			var __ks_679 = this._condition.reduceTypes();
			for(var name in __ks_679) {
				var type = __ks_679[name];
				this._whenTrueScope.define(name, true, type, this);
			}
			this._condition.acquireReusable(false);
			this._condition.releaseReusable();
			this._whenTrueExpression.prepare();
			if(KSType.isValue(this._whenFalseExpression)) {
				this._whenFalseExpression.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenTrueExpression.translate();
			if(KSType.isValue(this._whenFalseExpression)) {
				this._whenFalseExpression.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_assignments_0: function() {
			if(KSType.is(this._whenFalseExpression, IfStatement)) {
				return [].concat(this._assignments, this._whenFalseExpression.assignments());
			}
			else {
				return this._assignments;
			}
		},
		assignments: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_assignments_0.apply(this);
			}
			return Statement.prototype.assignments.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			return KSType.isValue(this._whenFalseExpression) && this._whenTrueExpression.isExit() && this._whenFalseExpression.isExit();
		},
		isExit: function() {
			if(arguments.length === 0) {
				return IfStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_isReturning_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(this._whenFalseExpression) {
				return this._whenTrueExpression.isReturning(type) && this._whenFalseExpression.isReturning(type);
			}
			else {
				return this._whenTrueExpression.isReturning(type);
			}
		},
		isReturning: function() {
			if(arguments.length === 1) {
				return IfStatement.prototype.__ks_func_isReturning_0.apply(this, arguments);
			}
			return Statement.prototype.isReturning.apply(this, arguments);
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			this.toIfFragments(ctrl, mode);
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return IfStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toIfFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("if(");
			if(this._condition.isAssignable()) {
				fragments.code("(").compileBoolean(this._condition).code(")");
			}
			else {
				fragments.compileBoolean(this._condition);
			}
			fragments.code(")").step().compile(this._whenTrueExpression, mode);
			if(KSType.isValue(this._whenFalseExpression)) {
				if(KSType.is(this._whenFalseExpression, IfStatement)) {
					fragments.step().code("else ");
					this._whenFalseExpression.toIfFragments(fragments, mode);
				}
				else {
					fragments.step().code("else").step().compile(this._whenFalseExpression, mode);
				}
			}
		},
		toIfFragments: function() {
			if(arguments.length === 2) {
				return IfStatement.prototype.__ks_func_toIfFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toIfFragments) {
				return Statement.prototype.toIfFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImplementDeclaration = Helper.class({
		$name: "ImplementDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._properties = [];
			this._sharingProperties = {};
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_680;
			if(KSType.isValue(__ks_680 = this._scope.getVariable(this._data.variable.name)) ? (this._variable = __ks_680, false) : true) {
				ReferenceException.throwNotDefined(this._data.variable.name, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._variable.prepareAlteration();
			this._type = this._variable.type();
			if(!KSType.is(this._type, NamedType)) {
				TypeException.throwImplInvalidType(this);
			}
			var type = this._type.type();
			if(KSType.is(type, ClassType)) {
				for(var __ks_681 = 0, __ks_682 = this._data.properties.length, property; __ks_681 < __ks_682; ++__ks_681) {
					property = this._data.properties[__ks_681];
					var __ks_683 = property.kind;
					if(__ks_683 === NodeKind.FieldDeclaration) {
						property = new ImplementClassFieldDeclaration(property, this, this._type);
					}
					else if(__ks_683 === NodeKind.MethodDeclaration) {
						property = new ImplementClassMethodDeclaration(property, this, this._type);
					}
					else {
						throw new NotSupportedException("Unexpected kind " + property.kind, this);
					}
					property.analyse();
					this._properties.push(property);
				}
			}
			else if(KSType.is(type, NamespaceType)) {
				for(var __ks_681 = 0, __ks_682 = this._data.properties.length, property; __ks_681 < __ks_682; ++__ks_681) {
					property = this._data.properties[__ks_681];
					var __ks_683 = property.kind;
					if(__ks_683 === NodeKind.FieldDeclaration) {
						property = new ImplementNamespaceVariableDeclaration(property, this, this._type);
					}
					else if(__ks_683 === NodeKind.MethodDeclaration) {
						property = new ImplementNamespaceFunctionDeclaration(property, this, this._type);
					}
					else {
						throw new NotSupportedException("Unexpected kind " + property.kind, this);
					}
					property.analyse();
					this._properties.push(property);
				}
			}
			else {
				TypeException.throwImplInvalidType(this);
			}
			var name;
			for(var __ks_681 = 0, __ks_682 = this._properties.length, property; __ks_681 < __ks_682; ++__ks_681) {
				property = this._properties[__ks_681];
				property.prepare();
				if(KSType.isValue(__ks_683 = property.getSharedName()) ? (name = __ks_683, true) : false) {
					this._sharingProperties[name] = property;
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_684 = 0, __ks_685 = this._properties.length, property; __ks_684 < __ks_685; ++__ks_684) {
				property = this._properties[__ks_684];
				property.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_686 = 0, __ks_687 = this._properties.length, property; __ks_686 < __ks_687; ++__ks_686) {
				property = this._properties[__ks_686];
				property.toFragments(fragments, Mode.None);
			}
			for(var __ks_686 in this._sharingProperties) {
				var property = this._sharingProperties[__ks_686];
				property.toSharedFragments(fragments);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImplementDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImplementClassFieldDeclaration = Helper.class({
		$name: "ImplementClassFieldDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._defaultValue = null;
			this._hasDefaultValue = false;
			this._init = 0;
			this._instance = true;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementClassFieldDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, NamedType)) {
				throw new TypeError("'variable' is not of type 'NamedType'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			this._variable = variable;
			var __ks_688;
			this._class = this._variable.type();
			if(this._class.isSealed()) {
				TypeException.throwImplFieldToSealedType(this);
			}
			this._classRef = this._scope.reference(this._variable);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementClassFieldDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			for(var i = 0, __ks_689 = this._data.modifiers.length; this._instance && i < __ks_689; ++i) {
				if(this._data.modifiers[i].kind === ModifierKind.Static) {
					this._instance = false;
				}
			}
			this._name = this._data.name.name;
			if(KSType.isValue(this._data.defaultValue)) {
				this._hasDefaultValue = true;
				this._defaultValue = $compile.expression(this._data.defaultValue, this);
				this._defaultValue.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var __ks_690;
			this._type = ClassVariableType.fromAST(this._data, this);
			this._type.flagAlteration();
			if(this._instance) {
				this._class.addInstanceVariable(this._name, this._type);
			}
			else {
				this._class.addClassVariable(this._name, this._type);
			}
			if(this._hasDefaultValue) {
				if(this._instance) {
					this._init = this._class.init() + 1;
					this._class.init(this._init);
				}
				this._defaultValue.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._hasDefaultValue) {
				this._defaultValue.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getSharedName_0: function() {
			return (this._hasDefaultValue && this._instance) ? "__ks_init" : null;
		},
		getSharedName: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_getSharedName_0.apply(this);
			}
			else if(Statement.prototype.getSharedName) {
				return Statement.prototype.getSharedName.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._hasDefaultValue) {
				if(this._instance) {
					var line = fragments.newLine();
					line.code("" + this._variable.name() + ".prototype.__ks_init_" + this._init + " = function()");
					var block = line.newBlock();
					block.newLine().code("this." + this._name + " = ").compile(this._defaultValue).done();
					block.done();
					line.done();
				}
				else {
					fragments.newLine().code("" + this._variable.name() + "." + this._name + " = ").compile(this._defaultValue).done();
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_toSharedFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var line = fragments.newLine();
			line.code("" + this._variable.name() + ".prototype.__ks_init = function()");
			var block = line.newBlock();
			for(var i = 1, __ks_691 = this._init; i <= __ks_691; ++i) {
				block.line("" + this._variable.name() + ".prototype.__ks_init_" + i + ".call(this)");
			}
			block.done();
			line.done();
		},
		toSharedFragments: function() {
			if(arguments.length === 1) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_toSharedFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toSharedFragments) {
				return Statement.prototype.toSharedFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementClassFieldDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImplementClassMethodDeclaration = Helper.class({
		$name: "ImplementClassMethodDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._aliases = [];
			this._isContructor = false;
			this._isDestructor = false;
			this._instance = true;
			this._override = false;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImplementClassMethodDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, NamedType)) {
				throw new TypeError("'variable' is not of type 'NamedType'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
			this._variable = variable;
			var __ks_692;
			this._class = this._variable.type();
			this._classRef = this._scope.reference(this._variable);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementClassMethodDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			this._body = $ast.body(this._data.body);
			if((this._isContructor = ((this._data.name.kind === NodeKind.Identifier) && this._class.isConstructor(this._name)))) {
				throw new NotImplementedException(this);
			}
			else if((this._isDestructor = ((this._data.name.kind === NodeKind.Identifier) && this._class.isDestructor(this._name)))) {
				throw new NotImplementedException(this);
			}
			else {
				for(var i = 0, __ks_693 = this._data.modifiers.length; i < __ks_693; ++i) {
					if(this._data.modifiers[i].kind === ModifierKind.Static) {
						this._instance = false;
					}
					else if(this._data.modifiers[i].kind === ModifierKind.Override) {
						this._override = true;
					}
				}
			}
			this._this = this._scope.define("this", true, this._classRef, this);
			this._parameters = [];
			for(var __ks_693 = 0, __ks_694 = this._data.parameters.length, parameter; __ks_693 < __ks_694; ++__ks_693) {
				parameter = this._data.parameters[__ks_693];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_695 = 0, __ks_696 = this._parameters.length, parameter; __ks_695 < __ks_696; ++__ks_695) {
				parameter = this._parameters[__ks_695];
				parameter.prepare();
			}
			this._type = new ClassMethodType(Helper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
			this._type.flagAlteration();
			if(this._class.isSealed()) {
				this._type.flagSealed();
			}
			if(this._instance) {
				var index;
				if(KSType.isValue(__ks_695 = this._class.matchInstanceMethod(this._name, this._type)) ? (index = __ks_695, true) : false) {
					if(this._override) {
						this._internalName = "__ks_func_" + this._name + "_" + index;
					}
					else {
						SyntaxException.throwDuplicateMethod(this._name, this);
					}
				}
				else {
					this._override = false;
					this._internalName = "__ks_func_" + this._name + "_" + this._class.addInstanceMethod(this._name, this._type);
				}
			}
			else {
				var index;
				if(KSType.isValue(__ks_695 = this._class.matchClassMethod(this._name, this._type)) ? (index = __ks_695, true) : false) {
					if(this._override) {
						this._internalName = "__ks_sttc_" + this._name + "_" + index;
					}
					else {
						SyntaxException.throwDuplicateMethod(this._name, this);
					}
				}
				else {
					this._override = false;
					this._internalName = "__ks_sttc_" + this._name + "_" + this._class.addClassMethod(this._name, this._type);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_697 = 0, __ks_698 = this._parameters.length, parameter; __ks_697 < __ks_698; ++__ks_697) {
				parameter = this._parameters[__ks_697];
				parameter.translate();
			}
			this._statements = [];
			for(var __ks_697 = 0, __ks_698 = this._aliases.length, statement; __ks_697 < __ks_698; ++__ks_697) {
				statement = this._aliases[__ks_697];
				this._statements.push(statement);
				statement.analyse();
			}
			for(var __ks_697 = 0, __ks_698 = this._body.length, statement; __ks_697 < __ks_698; ++__ks_697) {
				statement = this._body[__ks_697];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
			}
			for(var __ks_697 = 0, __ks_698 = this._statements.length, statement; __ks_697 < __ks_698; ++__ks_697) {
				statement = this._statements[__ks_697];
				statement.prepare();
			}
			for(var __ks_697 = 0, __ks_698 = this._statements.length, statement; __ks_697 < __ks_698; ++__ks_697) {
				statement = this._statements[__ks_697];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addAliasStatement_0: function(statement) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(statement === void 0 || statement === null) {
				throw new TypeError("'statement' is not nullable");
			}
			else if(!KSType.is(statement, AliasStatement)) {
				throw new TypeError("'statement' is not of type 'AliasStatement'");
			}
			if(!ClassDeclaration.isAssigningAlias(this._body, statement.name(), false, false)) {
				this._aliases.push(statement);
			}
		},
		addAliasStatement: function() {
			if(arguments.length === 1) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_addAliasStatement_0.apply(this, arguments);
			}
			else if(Statement.prototype.addAliasStatement) {
				return Statement.prototype.addAliasStatement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_class_0: function() {
			return this._class;
		},
		class: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_class_0.apply(this);
			}
			else if(Statement.prototype.class) {
				return Statement.prototype.class.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getSharedName_0: function() {
			return this._override ? null : this._instance ? "_im_" + this._name : "_cm_" + this._name;
		},
		getSharedName: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_getSharedName_0.apply(this);
			}
			else if(Statement.prototype.getSharedName) {
				return Statement.prototype.getSharedName.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Statement.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isInstance_0: function() {
			return this._instance;
		},
		isInstance: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_isInstance_0.apply(this);
			}
			else if(Statement.prototype.isInstance) {
				return Statement.prototype.isInstance.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isInstanceMethod_0: function() {
			return this._instance;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Statement.prototype.isInstanceMethod) {
				return Statement.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._isContructor) {
				throw new NotImplementedException(this);
			}
			else if(this._isDestructor) {
				throw new NotImplementedException(this);
			}
			else {
				var line = fragments.newLine();
				if(this._class.isSealed()) {
					line.code("" + this._variable.getSealedName() + "." + this._internalName + " = function(");
				}
				else {
					if(this._instance) {
						line.code("" + this._variable.name() + ".prototype." + this._internalName + " = function(");
					}
					else {
						line.code("" + this._variable.name() + "." + this._internalName + " = function(");
					}
				}
				var block = Parameter.toFragments(this, line, ParameterMode.Default, function(node) {
					if(arguments.length < 1) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
					}
					if(node === void 0 || node === null) {
						throw new TypeError("'node' is not nullable");
					}
					line.code(")");
					return line.newBlock();
				});
				for(var __ks_699 = 0, __ks_700 = this._statements.length, statement; __ks_699 < __ks_700; ++__ks_699) {
					statement = this._statements[__ks_699];
					block.compile(statement);
				}
				block.done();
				line.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toSharedFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._override) {
				return;
			}
			if(this._instance) {
				if(this._class.isSealed()) {
					ClassDeclaration.toSwitchFragments(this, fragments.newLine(), this._variable, this._class.getInstanceMethods(this._name), this._name, null, Helper.vcurry(function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						var block = fragments.code("" + this._variable.getSealedName() + "._im_" + this._name + " = function(that)").newBlock();
						block.line("var args = Array.prototype.slice.call(arguments, 1, arguments.length)");
						return block;
					}, this), function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.done();
					}, Helper.vcurry(function(fragments, method, index) {
						if(arguments.length < 3) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(method === void 0 || method === null) {
							throw new TypeError("'method' is not nullable");
						}
						if(index === void 0 || index === null) {
							throw new TypeError("'index' is not nullable");
						}
						if(method.max() === 0) {
							if(method.isSealed()) {
								fragments.line("return " + this._variable.getSealedName() + ".__ks_func_" + this._name + "_" + index + ".apply(that)");
							}
							else {
								fragments.line("return " + this._variable.name() + ".prototype.__ks_func_" + this._name + "_" + index + ".apply(that)");
							}
						}
						else {
							if(method.isSealed()) {
								fragments.line("return " + this._variable.getSealedName() + ".__ks_func_" + this._name + "_" + index + ".apply(that, args)");
							}
							else {
								fragments.line("return " + this._variable.name() + ".prototype.__ks_func_" + this._name + "_" + index + ".apply(that, args)");
							}
						}
					}, this), ClassDeclaration.toWrongDoingFragments, "args", true).done();
				}
				else {
					ClassMethodDeclaration.toInstanceSwitchFragments(this, fragments.newLine(), this._variable, this._class.getInstanceMethods(this._name), this._name, Helper.vcurry(function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.code("" + this._variable.name() + ".prototype." + this._name + " = function()").newBlock();
					}, this), function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.done();
					}).done();
				}
			}
			else {
				if(this._class.isSealed()) {
					ClassDeclaration.toSwitchFragments(this, fragments.newLine(), this._variable, this._class.getClassMethods(this._name), this._name, null, Helper.vcurry(function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						var block = fragments.code("" + this._variable.getSealedName() + "._cm_" + this._name + " = function()").newBlock();
						block.line("var args = Array.prototype.slice.call(arguments)");
						return block;
					}, this), function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.done();
					}, Helper.vcurry(function(fragments, method, index) {
						if(arguments.length < 3) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						if(method === void 0 || method === null) {
							throw new TypeError("'method' is not nullable");
						}
						if(index === void 0 || index === null) {
							throw new TypeError("'index' is not nullable");
						}
						if(method.max() === 0) {
							if(method.isSealed()) {
								fragments.line("return " + this._variable.getSealedName() + ".__ks_sttc_" + this._name + "_" + index + "()");
							}
							else {
								fragments.line("return " + this._variable.name() + ".__ks_sttc_" + this._name + "_" + index + "()");
							}
						}
						else {
							if(method.isSealed()) {
								fragments.line("return " + this._variable.getSealedName() + ".__ks_sttc_" + this._name + "_" + index + ".apply(null, args)");
							}
							else {
								fragments.line("return " + this._variable.name() + ".__ks_sttc_" + this._name + "_" + index + ".apply(null, args)");
							}
						}
					}, this), ClassDeclaration.toWrongDoingFragments, "args", true).done();
				}
				else {
					ClassMethodDeclaration.toClassSwitchFragments(this, fragments.newLine(), this._variable, this._class.getClassMethods(this._name), this._name, Helper.vcurry(function(node, fragments) {
						if(arguments.length < 2) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
						}
						if(node === void 0 || node === null) {
							throw new TypeError("'node' is not nullable");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.code("" + this._variable.name() + "." + this._name + " = function()").newBlock();
					}, this), function(fragments) {
						if(arguments.length < 1) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(fragments === void 0 || fragments === null) {
							throw new TypeError("'fragments' is not nullable");
						}
						return fragments.done();
					}).done();
				}
			}
		},
		toSharedFragments: function() {
			if(arguments.length === 1) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_toSharedFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toSharedFragments) {
				return Statement.prototype.toSharedFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementClassMethodDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImplementNamespaceVariableDeclaration = Helper.class({
		$name: "ImplementNamespaceVariableDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, NamedType)) {
				throw new TypeError("'variable' is not of type 'NamedType'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			this._variable = variable;
			var __ks_701;
			this._namespace = this._variable.type();
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementNamespaceVariableDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			var __ks_702;
			this._value = $compile.expression(this._data.defaultValue, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
			var property = NamespacePropertyType.fromAST(this._data.type, this);
			property.flagAlteration();
			if(this._namespace.isSealed()) {
				property.flagSealed();
			}
			this._namespace.addProperty(this._data.name.name, property);
			var __ks_703;
			this._type = property.type();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getSharedName_0: function() {
			return null;
		},
		getSharedName: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_getSharedName_0.apply(this);
			}
			else if(Statement.prototype.getSharedName) {
				return Statement.prototype.getSharedName.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._namespace.isSealed()) {
				fragments.newLine().code(this._variable.getSealedName(), ".", this._data.name.name, " = ").compile(this._value).done();
			}
			else {
				fragments.newLine().code(this._variable.name(), ".", this._data.name.name, " = ").compile(this._value).done();
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceVariableDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImplementNamespaceFunctionDeclaration = Helper.class({
		$name: "ImplementNamespaceFunctionDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, variable) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, NamedType)) {
				throw new TypeError("'variable' is not of type 'NamedType'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
			this._variable = variable;
			var __ks_704;
			this._namespace = this._variable.type();
			this._namespaceRef = this._scope.reference(this._variable);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ImplementNamespaceFunctionDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._parameters = [];
			for(var __ks_705 = 0, __ks_706 = this._data.parameters.length, parameter; __ks_705 < __ks_706; ++__ks_705) {
				parameter = this._data.parameters[__ks_705];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_707 = 0, __ks_708 = this._parameters.length, parameter; __ks_707 < __ks_708; ++__ks_707) {
				parameter = this._parameters[__ks_707];
				parameter.prepare();
			}
			var property = NamespacePropertyType.fromAST(this._data, this);
			property.flagAlteration();
			if(this._namespace.isSealed()) {
				property.flagSealed();
			}
			this._namespace.addProperty(this._data.name.name, property);
			this._type = property.type();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(KSType.isValue(this._data.body)) {
				this._statements = [];
				var __ks_709 = $ast.body(this._data.body);
				for(var __ks_710 = 0, __ks_711 = __ks_709.length, statement; __ks_710 < __ks_711; ++__ks_710) {
					statement = __ks_709[__ks_710];
					this._statements.push(statement = $compile.statement(statement, this));
					statement.analyse();
				}
				for(var __ks_709 = 0, __ks_710 = this._statements.length, statement; __ks_709 < __ks_710; ++__ks_709) {
					statement = this._statements[__ks_709];
					statement.prepare();
				}
				for(var __ks_709 = 0, __ks_710 = this._statements.length, statement; __ks_709 < __ks_710; ++__ks_709) {
					statement = this._statements[__ks_709];
					statement.translate();
				}
			}
			else {
				this._statements = [];
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getSharedName_0: function() {
			return null;
		},
		getSharedName: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_getSharedName_0.apply(this);
			}
			else if(Statement.prototype.getSharedName) {
				return Statement.prototype.getSharedName.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isInstanceMethod_0: function() {
			return false;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Statement.prototype.isInstanceMethod) {
				return Statement.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Statement.prototype.parameters) {
				return Statement.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var line = fragments.newLine();
			if(this._namespace.isSealed()) {
				line.code(this._variable.getSealedName());
			}
			else {
				line.code(this._variable.name());
			}
			line.code(".", this._data.name.name, " = function(");
			var block = Parameter.toFragments(this, line, ParameterMode.Default, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code(")").newBlock();
			});
			for(var __ks_712 = 0, __ks_713 = this._statements.length, statement; __ks_712 < __ks_713; ++__ks_712) {
				statement = this._statements[__ks_712];
				block.compile(statement);
			}
			block.done();
			line.done();
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ImplementNamespaceFunctionDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var $nodeModules = {
		assert: true,
		buffer: true,
		child_process: true,
		cluster: true,
		constants: true,
		crypto: true,
		dgram: true,
		dns: true,
		domain: true,
		events: true,
		fs: true,
		http: true,
		https: true,
		module: true,
		net: true,
		os: true,
		path: true,
		punycode: true,
		querystring: true,
		readline: true,
		repl: true,
		stream: true,
		string_decoder: true,
		tls: true,
		tty: true,
		url: true,
		util: true,
		v8: true,
		vm: true,
		zlib: true
	};
	function $nodeModulesPaths(start) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(start === void 0 || start === null) {
			throw new TypeError("'start' is not nullable");
		}
		var __ks_714;
		start = fs.resolve(start);
		var prefix = "/";
		if(/^([A-Za-z]:)/.test(start)) {
			prefix = "";
		}
		else if(/^\\\\/.test(start)) {
			prefix = "\\\\";
		}
		var splitRe = (process.platform === "win32") ? /[\/\\]/ : /\/+/;
		var parts = start.split(splitRe);
		var dirs = [];
		for(var i = parts.length - 1; i >= 0; --i) {
			if(parts[i] === "node_modules") {
				continue;
			}
			dirs.push(prefix + path.join(path.join.apply(path, [].concat(parts.slice(0, i + 1))), "node_modules"));
		}
		if(process.platform === "win32") {
			dirs[dirs.length - 1] = dirs[dirs.length - 1].replace(":", ":\\");
		}
		return dirs;
	}
	var Importer = Helper.class({
		$name: "Importer",
		$extends: Statement,
		__ks_init_1: function() {
			this._alias = null;
			this._arguments = {};
			this._count = 0;
			this._imports = {};
			this._localToModuleArguments = {};
			this._moduleToLocalArguments = {};
			this._sealedVariables = {};
			this._seepedArguments = {};
			this._variables = {};
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			Importer.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var x = this._data.source.value;
			var y = this.directory();
			var metadata;
			if(/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[\\\/])/.test(x)) {
				var __ks_715;
				x = fs.resolve(y, x);
				if(!(this.loadFile(x, null) || this.loadDirectory(x, null))) {
					IOException.throwNotFoundModule(x, y, this);
				}
			}
			else {
				if(!(this.loadNodeModule(x, y) || this.loadCoreModule(x))) {
					IOException.throwNotFoundModule(x, y, this);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return Importer.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._isKSFile) {
				for(var name in this._arguments) {
					var argument = this._arguments[name];
					argument.name = this._moduleToLocalArguments[name];
					if(this._seepedArguments[name] === true) {
						argument.seeped = true;
					}
					else {
						argument.seeped = false;
						argument.type = this._scope.getVariable(this._moduleToLocalArguments[name]).type();
					}
				}
				this._worker.prepare(this._arguments);
				var module = this.module();
				for(var name in this._seepedArguments) {
					module.addRequirement(new SeepedRequirement(this._arguments[name].name, this._arguments[name].type));
				}
				var matchables = [];
				for(var name in this._imports) {
					var def = this._imports[name];
					var variable = this._scope.getVariable(def.local);
					if(def.isAlias) {
						var type = new NamedContainerType(def.local, new NamespaceType(this._scope));
						for(var i = 1, __ks_716 = this._metadata.exports.length; i < __ks_716; i += 2) {
							var __ks_name_1 = this._metadata.exports[i];
							type.addProperty(__ks_name_1, this._worker.getType(__ks_name_1));
						}
						variable.type(type);
					}
					else {
						if(!this._worker.hasType(name)) {
							ReferenceException.throwNotDefinedInModule(name, this._data.source.value, this);
						}
						var type = this._worker.getType(name);
						if((def.type !== null) && !type.matchSignatureOf(def.type, matchables)) {
							TypeException.throwNotCompatibleDefinition(def.local, name, this._data.source.value, this);
						}
						if(def.newVariable) {
							variable.type(KSType.isValue(def.type) ? def.type : type);
						}
						else if(!variable.isPredefined() && !KSType.isString(this._localToModuleArguments[def.local])) {
							ReferenceException.throwNotPassed(def.local, this._data.source.value, this);
						}
						else if(type.matchSignatureOf(variable.type(), matchables)) {
							var alien = variable.type().isAlien();
							variable.type(KSType.isValue(def.type) ? def.type : type);
							if(alien) {
								variable.type().flagAlien();
							}
						}
						else {
							console.log(type);
							console.log(variable.type());
							TypeException.throwNotCompatibleArgument(def.local, name, this._data.source.value, this);
						}
						if(type.isNamed()) {
							type.name(def.local);
							type.scope().reassignReference(name, def.local, this._scope);
						}
						if(!type.isAlias()) {
							this._variables[name] = def.local;
							++this._count;
							if(type.isSealed()) {
								this._sealedVariables[name] = true;
								++this._count;
							}
						}
					}
				}
				if((KSType.isValue(this._data.arguments) ? this._data.arguments.length !== 0 : false) || (this._count !== 0) || KSType.isValue(this._alias)) {
					this.module().flagRegister();
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return Importer.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return Importer.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addArgument_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(data.seeped) {
				var variable, __ks_717;
				if((KSType.isValue(__ks_717 = this._scope.getVariable(data.local.name)) ? (variable = __ks_717, true) : false) && !variable.type().isPredefined()) {
					ReferenceException.throwDefined(data.local.name, this);
				}
				this._seepedArguments[data.imported.name] = true;
			}
			else {
				if(!this._scope.hasVariable(data.local.name)) {
					ReferenceException.throwNotDefined(data.local.name, this);
				}
			}
			this._localToModuleArguments[data.local.name] = data.imported.name;
			this._moduleToLocalArguments[data.imported.name] = data.local.name;
		},
		addArgument: function() {
			if(arguments.length === 1) {
				return Importer.prototype.__ks_func_addArgument_0.apply(this, arguments);
			}
			else if(Statement.prototype.addArgument) {
				return Statement.prototype.addArgument.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addImport_0: function() {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			var __ks_i = -1;
			var imported = arguments[++__ks_i];
			if(imported === void 0 || imported === null) {
				throw new TypeError("'imported' is not nullable");
			}
			else if(!KSType.isString(imported)) {
				throw new TypeError("'imported' is not of type 'String'");
			}
			var local = arguments[++__ks_i];
			if(local === void 0 || local === null) {
				throw new TypeError("'local' is not nullable");
			}
			else if(!KSType.isString(local)) {
				throw new TypeError("'local' is not of type 'String'");
			}
			var isAlias = arguments[++__ks_i];
			if(isAlias === void 0 || isAlias === null) {
				throw new TypeError("'isAlias' is not nullable");
			}
			else if(!KSType.isBoolean(isAlias)) {
				throw new TypeError("'isAlias' is not of type 'Boolean'");
			}
			var type;
			if(arguments.length > 3 && (type = arguments[++__ks_i]) !== void 0) {
				if(type !== null && !KSType.is(type, Type)) {
					throw new TypeError("'type' is not of type 'Type'");
				}
			}
			else {
				type = null;
			}
			var variable, __ks_718;
			var newVariable = (KSType.isValue(__ks_718 = this._scope.getVariable(local)) ? (variable = __ks_718, false) : true) || variable.isPredefined();
			if(newVariable) {
				this._scope.define(local, true, null, this);
			}
			else if(this._parent.includePath() !== null) {
				return;
			}
			else if(isAlias) {
				SyntaxException.throwAlreadyDeclared(local, this);
			}
			this.module().import(local);
			this._imports[imported] = {
				local: local,
				isAlias: isAlias,
				newVariable: newVariable,
				type: type
			};
		},
		addImport: function() {
			if(arguments.length >= 3 && arguments.length <= 4) {
				return Importer.prototype.__ks_func_addImport_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addVariable_0: function(imported, local, isVariable, type) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(imported === void 0 || imported === null) {
				throw new TypeError("'imported' is not nullable");
			}
			else if(!KSType.isString(imported)) {
				throw new TypeError("'imported' is not of type 'String'");
			}
			if(local === void 0 || local === null) {
				throw new TypeError("'local' is not nullable");
			}
			else if(!KSType.isString(local)) {
				throw new TypeError("'local' is not of type 'String'");
			}
			if(isVariable === void 0 || isVariable === null) {
				throw new TypeError("'isVariable' is not nullable");
			}
			else if(!KSType.isBoolean(isVariable)) {
				throw new TypeError("'isVariable' is not of type 'Boolean'");
			}
			if(type === void 0) {
				type = null;
			}
			else if(type !== null && !KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			var variable, __ks_719;
			if((KSType.isValue(__ks_719 = this._scope.getVariable(local)) ? (variable = __ks_719, true) : false) && !variable.isPredefined()) {
				if(this._parent.includePath() !== null) {
					return;
				}
				else if(isVariable) {
					if(!KSType.isString(this._localToModuleArguments[local])) {
						ReferenceException.throwNotPassed(local, this._data.source.value, this);
					}
					else if(variable.type().isMergeable(type)) {
						variable.type().merge(type, this);
					}
					else {
						ReferenceException.throwNotMergeable(local, this._data.source.value, this);
					}
				}
				else {
					SyntaxException.throwAlreadyDeclared(local, this);
				}
			}
			else {
				this._scope.define(local, true, type, this);
			}
			this.module().import(local);
			if(isVariable && !KSType.is(type, AliasType)) {
				this._variables[imported] = local;
				++this._count;
			}
		},
		addVariable: function() {
			if(arguments.length === 4) {
				return Importer.prototype.__ks_func_addVariable_0.apply(this, arguments);
			}
			else if(Statement.prototype.addVariable) {
				return Statement.prototype.addVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_loadCoreModule_0: function(x) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(x === void 0 || x === null) {
				throw new TypeError("'x' is not nullable");
			}
			if($nodeModules[x] === true) {
				return this.loadNodeFile(null, x);
			}
			return false;
		},
		loadCoreModule: function() {
			if(arguments.length === 1) {
				return Importer.prototype.__ks_func_loadCoreModule_0.apply(this, arguments);
			}
			else if(Statement.prototype.loadCoreModule) {
				return Statement.prototype.loadCoreModule.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_loadDirectory_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var x = arguments[++__ks_i];
			if(x === void 0 || x === null) {
				throw new TypeError("'x' is not nullable");
			}
			var __ks__;
			var moduleName = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var pkgfile = path.join(x, "package.json");
			if(fs.isFile(pkgfile)) {
				var pkg;
				try {
					var __ks_720, __ks_721;
					pkg = JSON.parse(fs.readFile(pkgfile));
				}
				catch(__ks_5) {
				}
				if(KSType.isValue(pkg)) {
					var metadata;
					if(KSType.isValue(pkg.kaoscript)) {
						var __ks_metadata_1 = KSType.isValue(pkg.kaoscript.metadata) ? path.join(x, pkg.kaoscript.metadata) : null;
						if(KSType.isValue(pkg.kaoscript.main)) {
							if(this.loadKSFile(path.join(x, pkg.kaoscript.main), moduleName, __ks_metadata_1)) {
								return true;
							}
						}
						else if(KSType.isValue(__ks_metadata_1)) {
							if(this.loadKSFile(null, KSType.isValue(moduleName) ? moduleName : x, __ks_metadata_1)) {
								return true;
							}
						}
					}
					if(pkg.main && (this.loadFile(path.join(x, pkg.main), moduleName) || this.loadDirectory(path.join(x, pkg.main), moduleName))) {
						return true;
					}
				}
			}
			return this.loadFile(path.join(x, "index"), moduleName);
		},
		loadDirectory: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Importer.prototype.__ks_func_loadDirectory_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_loadFile_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var x = arguments[++__ks_i];
			if(x === void 0 || x === null) {
				throw new TypeError("'x' is not nullable");
			}
			var __ks__;
			var moduleName = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			if(fs.isFile(x)) {
				if(x.endsWith($extensions.source)) {
					return this.loadKSFile(x, moduleName);
				}
				else {
					return this.loadNodeFile(x, moduleName);
				}
			}
			if(fs.isFile(x + $extensions.source)) {
				return this.loadKSFile(x + $extensions.source, moduleName);
			}
			else {
				for(var ext in require.extensions) {
					if(fs.isFile(x + ext)) {
						return this.loadNodeFile(x, moduleName);
					}
				}
			}
			return false;
		},
		loadFile: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Importer.prototype.__ks_func_loadFile_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_loadKSFile_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var x = arguments[++__ks_i];
			if(x === void 0) {
				x = null;
			}
			else if(x !== null && !KSType.isString(x)) {
				throw new TypeError("'x' is not of type 'String'");
			}
			var __ks__;
			var moduleName = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var metadataPath = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var module = this.module();
			if(moduleName === null) {
				moduleName = module.path(x, this._data.source.value);
				if((moduleName.slice(-$extensions.source.length).toLowerCase() !== $extensions.source) && (path.basename(x) === path.basename(moduleName + $extensions.source))) {
					moduleName += $extensions.source;
				}
			}
			var name, alias, variable, hashes;
			var __ks_722;
			if(KSType.isValue(metadataPath) && fs.isFile(metadataPath) && (KSType.isValue(__ks_722 = this.readMetadata(metadataPath)) ? (this._metadata = __ks_722, true) : false)) {
			}
			else {
				var source = fs.readFile(x);
				var target = module.compiler()._options.target;
				var __ks_723, __ks_724;
				if(fs.isFile(getMetadataPath(x, target)) && fs.isFile(getHashPath(x, target)) && (KSType.isValue(__ks_722 = module.isUpToDate(x, target, source)) ? (hashes = __ks_722, true) : false) && (KSType.isValue(__ks_722 = this.readMetadata(getMetadataPath(x, target))) ? (this._metadata = __ks_722, true) : false)) {
					module.addHashes(x, hashes);
				}
				else {
					var compiler = module.compiler().createServant(x);
					compiler.compile(source);
					compiler.writeFiles();
					this._metadata = compiler.toMetadata();
					hashes = compiler.toHashes();
					module.addHashes(x, hashes);
				}
			}
			this._isKSFile = true;
			this._moduleName = moduleName;
			this._worker = new ImportWorker(this._metadata, this);
			if(KSType.isValue(this._data.arguments) ? this._data.arguments.length !== 0 : false) {
				for(var __ks_722 = 0, __ks_725 = this._data.arguments.length, argument; __ks_722 < __ks_725; ++__ks_722) {
					argument = this._data.arguments[__ks_722];
					this.addArgument(argument);
				}
				var __ks_name_1;
				for(var i = 0, __ks_722 = this._metadata.requirements.length; i < __ks_722; i += 3) {
					__ks_name_1 = this._metadata.requirements[i + 1];
					if(KSType.isString(this._moduleToLocalArguments[__ks_name_1])) {
						this._arguments[__ks_name_1] = {
							index: Math.floor(i / 3) + 1,
							data: this._metadata.references[this._metadata.requirements[i]]
						};
					}
					else if(this._metadata.requirements[i + 2]) {
						SyntaxException.throwMissingRequirement(__ks_name_1, this);
					}
				}
			}
			else {
				for(var i = 1, __ks_722 = this._metadata.requirements.length; i < __ks_722; i += 3) {
					if(this._metadata.requirements[i + 1]) {
						SyntaxException.throwMissingRequirement(this._metadata.requirements[i], this);
					}
				}
			}
			var macros = {};
			for(var i = 0, __ks_722 = this._metadata.macros.length; i < __ks_722; i += 2) {
				macros[this._metadata.macros[i]] = Helper.mapArray(this._metadata.macros[i + 1], function(data) {
					return JSON.parse(Buffer.from(data, "base64").toString("utf8"));
				});
			}
			if(this._data.specifiers.length === 0) {
				for(var i = 1, __ks_722 = this._metadata.exports.length; i < __ks_722; i += 2) {
					name = this._metadata.exports[i];
					this.addImport(name, name, false);
				}
				for(name in macros) {
					var datas = macros[name];
					for(var __ks_722 = 0, __ks_725 = datas.length, data; __ks_722 < __ks_725; ++__ks_722) {
						data = datas[__ks_722];
						new MacroDeclaration(data, this, name);
					}
				}
			}
			else {
				var __ks_name_2, type;
				for(var __ks_722 = 0, __ks_725 = this._data.specifiers.length, specifier; __ks_722 < __ks_725; ++__ks_722) {
					specifier = this._data.specifiers[__ks_722];
					if(specifier.kind === NodeKind.ImportNamespaceSpecifier) {
						this._alias = specifier.local.name;
					}
					else {
						var __ks_726 = specifier.imported.kind;
						if(__ks_726 === NodeKind.ClassDeclaration) {
							__ks_name_2 = specifier.imported.name.name;
							type = Type.fromAST(specifier.imported, this);
						}
						else if(__ks_726 === NodeKind.Identifier) {
							__ks_name_2 = specifier.imported.name;
							type = null;
						}
						else if(__ks_726 === NodeKind.VariableDeclarator) {
							__ks_name_2 = specifier.imported.name.name;
							type = specifier.imported.type ? Type.fromAST(specifier.imported.type, this) : null;
						}
						else {
							console.log(specifier.imported);
							throw new NotImplementedException();
						}
						if(KSType.isValue(macros[__ks_name_2])) {
							for(var __ks_726 = 0, __ks_727 = macros[__ks_name_2].length, data; __ks_726 < __ks_727; ++__ks_726) {
								data = macros[__ks_name_2][__ks_726];
								new MacroDeclaration(data, this, specifier.local.name);
							}
						}
						else {
							this.addImport(__ks_name_2, specifier.local.name, false, type);
						}
					}
				}
				if(this._alias !== null) {
					this.addImport(this._alias, this._alias, true);
				}
			}
			return true;
		},
		loadKSFile: function() {
			if(arguments.length >= 1 && arguments.length <= 3) {
				return Importer.prototype.__ks_func_loadKSFile_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_loadNodeFile_0: function(x, moduleName) {
			if(x === void 0) {
				x = null;
			}
			if(moduleName === void 0) {
				moduleName = null;
			}
			var module = this.module();
			var file = null;
			if(moduleName === null) {
				file = moduleName = module.path(x, this._data.source.value);
			}
			if(KSType.isValue(this._data.arguments) ? this._data.arguments.length !== 0 : false) {
				for(var __ks_728 = 0, __ks_729 = this._data.arguments.length, argument; __ks_728 < __ks_729; ++__ks_728) {
					argument = this._data.arguments[__ks_728];
					if(argument.local === argument.imported) {
						this.addArgument(argument);
					}
					else {
						SyntaxException.throwInvalidImportAliasArgument(this);
					}
				}
			}
			this._isKSFile = false;
			this._moduleName = moduleName;
			if(this._data.specifiers.length === 0) {
				var parts = this._data.source.value.split("/");
				for(var i = 0, __ks_728 = parts.length; i < __ks_728; ++i) {
					if(!/(?:^\.+$|^@)/.test(parts[i])) {
						this._alias = parts[i].split(".")[0];
						break;
					}
				}
				if(this._alias === null) {
					SyntaxException.throwUnnamedWildcardImport(this);
				}
				this.addVariable(this._alias, this._alias, false, null);
			}
			else {
				var type;
				for(var __ks_728 = 0, __ks_729 = this._data.specifiers.length, specifier; __ks_728 < __ks_729; ++__ks_728) {
					specifier = this._data.specifiers[__ks_728];
					if(specifier.kind === NodeKind.ImportNamespaceSpecifier) {
						this._alias = specifier.local.name;
						if(KSType.isValue(specifier.specifiers) ? specifier.specifiers.length !== 0 : false) {
							type = new NamespaceType(this._scope);
							for(var __ks_730 = 0, __ks_731 = specifier.specifiers.length, s; __ks_730 < __ks_731; ++__ks_730) {
								s = specifier.specifiers[__ks_730];
								if(s.imported.kind === NodeKind.Identifier) {
									type.addProperty(s.local.name, Type.Any);
								}
								else {
									type.addProperty(s.local.name, Type.fromAST(s.imported, this).flagAlien());
								}
							}
							this.addVariable(this._alias, this._alias, false, type);
						}
						else {
							this.addVariable(this._alias, this._alias, false, null);
						}
					}
					else {
						if(specifier.imported.kind === NodeKind.Identifier) {
							this.addVariable(specifier.imported.name, specifier.local.name, true, null);
						}
						else {
							type = Type.fromAST(specifier.imported, this).flagAlien();
							this.addVariable(specifier.imported.name.name, specifier.local.name, true, type);
						}
					}
				}
			}
			return true;
		},
		loadNodeFile: function() {
			if(arguments.length >= 0 && arguments.length <= 2) {
				return Importer.prototype.__ks_func_loadNodeFile_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_loadNodeModule_0: function(x, start) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(x === void 0 || x === null) {
				throw new TypeError("'x' is not nullable");
			}
			if(start === void 0 || start === null) {
				throw new TypeError("'start' is not nullable");
			}
			var dirs = $nodeModulesPaths(start);
			var file, metadata;
			for(var __ks_732 = 0, __ks_733 = dirs.length, dir; __ks_732 < __ks_733; ++__ks_732) {
				dir = dirs[__ks_732];
				file = path.join(dir, x);
				if(this.loadFile(file, x) || this.loadDirectory(file, x)) {
					return true;
				}
			}
			return false;
		},
		loadNodeModule: function() {
			if(arguments.length === 2) {
				return Importer.prototype.__ks_func_loadNodeModule_0.apply(this, arguments);
			}
			else if(Statement.prototype.loadNodeModule) {
				return Statement.prototype.loadNodeModule.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_readMetadata_0: function(file) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			try {
				return JSON.parse(fs.readFile(file), function(key, value) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(key === void 0 || key === null) {
						throw new TypeError("'key' is not nullable");
					}
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					return ((key === "max") && (value === "Infinity")) ? Infinity : value;
				});
			}
			catch(__ks_5) {
				return null;
			}
		},
		readMetadata: function() {
			if(arguments.length === 1) {
				return Importer.prototype.__ks_func_readMetadata_0.apply(this, arguments);
			}
			else if(Statement.prototype.readMetadata) {
				return Statement.prototype.readMetadata.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toImportFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._isKSFile) {
				this.toKSFileFragments(fragments);
			}
			else {
				this.toNodeFileFragments(fragments);
			}
		},
		toImportFragments: function() {
			if(arguments.length === 1) {
				return Importer.prototype.__ks_func_toImportFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toImportFragments) {
				return Statement.prototype.toImportFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toKSFileFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var modulePath = ($localFileRegex.test(this._moduleName) && (this._parent.includePath() !== null)) ? path.join(path.dirname(this._parent.includePath()), this._moduleName) : this._moduleName;
			var importCode = "require(" + $quote(modulePath) + ")(";
			var importCodeVariable = false;
			var name, alias, variable;
			var hasArguments = KSType.isValue(this._data.arguments) ? this._data.arguments.length !== 0 : false;
			if(hasArguments) {
				var nf = false;
				for(name in this._arguments) {
					if(nf) {
						importCode += ", ";
					}
					else {
						nf = true;
					}
					if(KSType.isString(this._moduleToLocalArguments[name])) {
						importCode += this._moduleToLocalArguments[name];
						if(this._arguments[name].type.isSealed()) {
							importCode += ", __ks_" + this._moduleToLocalArguments[name];
						}
					}
					else {
						importCode += "null";
					}
				}
			}
			importCode += ")";
			if(this._count === 0) {
				if(this._alias !== null) {
					fragments.newLine().code("var ", this._alias, " = ", importCode).done();
				}
				else if(hasArguments) {
					fragments.newLine().code(importCode).done();
				}
			}
			else {
				if(this._alias !== null) {
					var __ks_variable_1 = this._scope.acquireTempName();
					fragments.line("var " + __ks_variable_1 + " = " + importCode);
					importCode = __ks_variable_1;
					importCodeVariable = true;
				}
				if(this._count === 1) {
					for(name in this._variables) {
						alias = this._variables[name];
					}
					fragments.newLine().code("var " + alias + " = " + importCode + "." + name).done();
				}
				else {
					if(this._options.format.destructuring === "es5") {
						var __ks_variable_2 = importCode;
						if(!importCodeVariable) {
							fragments.line("var __ks__ = " + importCode);
							__ks_variable_2 = "__ks__";
						}
						var line = fragments.newLine().code("var ");
						var nf = false;
						for(name in this._variables) {
							alias = this._variables[name];
							if(nf) {
								line.code(", ");
							}
							else {
								nf = true;
							}
							line.code("" + alias + " = " + __ks_variable_2 + "." + name);
							if(this._sealedVariables[name] === true) {
								line.code(", __ks_" + alias + " = " + __ks_variable_2 + ".__ks_" + name);
							}
						}
						line.done();
					}
					else {
						var line = fragments.newLine().code("var {");
						var nf = false;
						for(name in this._variables) {
							alias = this._variables[name];
							if(nf) {
								line.code(", ");
							}
							else {
								nf = true;
							}
							if(alias === name) {
								line.code(name);
								if(this._sealedVariables[name] === true) {
									line.code(", __ks_" + name);
								}
							}
							else {
								line.code("" + name + ": " + alias);
								if(this._sealedVariables[name] === true) {
									line.code(", __ks_" + name + ": __ks_" + alias);
								}
							}
						}
						line.code("} = ", importCode).done();
					}
				}
				if(this._alias !== null) {
					fragments.newLine().code("var ", this._alias, " = ", importCode).done();
				}
			}
			this._scope.releaseTempName(importCode);
		},
		toKSFileFragments: function() {
			if(arguments.length === 1) {
				return Importer.prototype.__ks_func_toKSFileFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toKSFileFragments) {
				return Statement.prototype.toKSFileFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNodeFileFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._alias !== null) {
				var line = fragments.newLine().code("var " + this._alias + " = require(" + $quote(this._moduleName) + ")");
				if(KSType.isValue(this._data.arguments)) {
					line.code("(");
					for(var index = 0, __ks_734 = this._data.arguments.length, argument; index < __ks_734; ++index) {
						argument = this._data.arguments[index];
						if(index !== 0) {
							line.code(", ");
						}
						line.code(argument.local.name);
					}
					line.code(")");
				}
				line.done();
			}
			var name, alias;
			if(this._count === 1) {
				for(name in this._variables) {
					alias = this._variables[name];
				}
				var line = fragments.newLine().code("var " + alias + " = require(" + $quote(this._moduleName) + ")");
				if(KSType.isValue(this._data.arguments)) {
					line.code("(");
					for(var index = 0, __ks_734 = this._data.arguments.length, argument; index < __ks_734; ++index) {
						argument = this._data.arguments[index];
						if(index !== 0) {
							line.code(", ");
						}
						line.code(argument.local.name);
					}
					line.code(")");
				}
				line.code("." + alias).done();
			}
			else if(this._count > 0) {
				if(this._options.format.destructuring === "es5") {
					var line = fragments.newLine().code("var __ks__ = require(" + $quote(this._moduleName) + ")");
					if(KSType.isValue(this._data.arguments)) {
						line.code("(");
						for(var index = 0, __ks_734 = this._data.arguments.length, argument; index < __ks_734; ++index) {
							argument = this._data.arguments[index];
							if(index !== 0) {
								line.code(", ");
							}
							line.code(argument.local.name);
						}
						line.code(")");
					}
					line.done();
					line = fragments.newLine().code("var ");
					var nf = false;
					for(name in this._variables) {
						alias = this._variables[name];
						if(nf) {
							line.code(", ");
						}
						else {
							nf = true;
						}
						line.code("" + alias + " = __ks__." + name);
					}
					line.done();
				}
				else {
					var line = fragments.newLine().code("var {");
					var nf = false;
					for(name in this._variables) {
						alias = this._variables[name];
						if(nf) {
							line.code(", ");
						}
						else {
							nf = true;
						}
						if(alias === name) {
							line.code(name);
						}
						else {
							line.code(name, ": ", alias);
						}
					}
					line.code("} = require(" + $quote(this._moduleName) + ")");
					if(KSType.isValue(this._data.arguments)) {
						line.code("(");
						for(var index = 0, __ks_734 = this._data.arguments.length, argument; index < __ks_734; ++index) {
							argument = this._data.arguments[index];
							if(index !== 0) {
								line.code(", ");
							}
							line.code(argument.local.name);
						}
						line.code(")");
					}
					line.done();
				}
			}
		},
		toNodeFileFragments: function() {
			if(arguments.length === 1) {
				return Importer.prototype.__ks_func_toNodeFileFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toNodeFileFragments) {
				return Statement.prototype.toNodeFileFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImportDeclaration = Helper.class({
		$name: "ImportDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarators = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ImportDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_735 = 0, __ks_736 = this._data.declarations.length, declarator; __ks_735 < __ks_736; ++__ks_735) {
				declarator = this._data.declarations[__ks_735];
				this._declarators.push(declarator = new ImportDeclarator(declarator, this));
				declarator.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ImportDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_737 = 0, __ks_738 = this._declarators.length, declarator; __ks_737 < __ks_738; ++__ks_737) {
				declarator = this._declarators[__ks_737];
				declarator.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ImportDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ImportDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_739 = 0, __ks_740 = this._declarators.length, declarator; __ks_739 < __ks_740; ++__ks_739) {
				declarator = this._declarators[__ks_739];
				declarator.toFragments(fragments, mode);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImportDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImportDeclarator = Helper.class({
		$name: "ImportDeclarator",
		$extends: Importer,
		__ks_init: function() {
			Importer.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Importer.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.toImportFragments(fragments);
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ImportDeclarator.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Importer.prototype.toStatementFragments) {
				return Importer.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ImportWorker = Helper.class({
		$name: "ImportWorker",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(metadata, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(metadata === void 0 || metadata === null) {
				throw new TypeError("'metadata' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._metadata = metadata;
			this._node = node;
			this._scope = new ImportScope(node.scope());
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ImportWorker.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_hasType_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._scope.hasLocalVariable(name);
		},
		hasType: function() {
			if(arguments.length === 1) {
				return ImportWorker.prototype.__ks_func_hasType_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getType_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._scope.getLocalVariable(name).type();
		},
		getType: function() {
			if(arguments.length === 1) {
				return ImportWorker.prototype.__ks_func_getType_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function(__ks_arguments_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			var references = [];
			var queue = [];
			var index, name, type, argument;
			if(this._metadata.requirements.length > 0) {
				var reqReferences = [];
				var alterations = {};
				for(var i = 0, __ks_741 = this._metadata.requirements.length; i < __ks_741; i += 3) {
					index = this._metadata.requirements[i];
					type = Type.import(index, this._metadata, reqReferences, alterations, queue, this._scope, this._node);
					reqReferences[index] = Type.toNamedType(this._metadata.requirements[i + 1], type);
				}
				while(queue.length > 0) {
					queue.shift()();
				}
				var matchables = [];
				for(var i = 0, __ks_741 = this._metadata.requirements.length; i < __ks_741; i += 3) {
					name = this._metadata.requirements[i + 1];
					if((KSType.isValue(__ks_arguments_1[name]) ? (argument = __ks_arguments_1[name], true) : false) && !argument.seeped && !argument.type.matchSignatureOf(reqReferences[this._metadata.requirements[i]], matchables)) {
						TypeException.throwNotCompatibleArgument(argument.name, name, this._node.data().source.value, this._node);
					}
				}
				for(var i = 0, __ks_741 = this._metadata.requirements.length; i < __ks_741; i += 3) {
					if(KSType.isValue(__ks_arguments_1[this._metadata.requirements[i + 1]]) ? (argument = __ks_arguments_1[this._metadata.requirements[i + 1]], true) : false) {
						if(argument.seeped) {
							argument.type = reqReferences[this._metadata.requirements[i]];
						}
						references[this._metadata.requirements[i]] = argument.type;
					}
				}
			}
			var alterations = {};
			for(var i = 0, __ks_741 = this._metadata.aliens.length; i < __ks_741; i += 2) {
				index = this._metadata.aliens[i];
				name = this._metadata.aliens[i + 1];
				if(!KSType.isValue(references[index])) {
					type = Type.import(index, this._metadata, references, alterations, queue, this._scope, this._node);
				}
				else {
					type = references[index];
				}
				type = references[index] = Type.toNamedType(name, type);
			}
			for(var i = 0, __ks_741 = this._metadata.requirements.length; i < __ks_741; i += 3) {
				index = this._metadata.requirements[i];
				name = this._metadata.requirements[i + 1];
				if(!KSType.isValue(references[index])) {
					type = Type.import(index, this._metadata, references, alterations, queue, this._scope, this._node);
				}
				else {
					type = references[index];
				}
				references[index] = Type.toNamedType(name, type);
			}
			for(var i = 0, __ks_741 = this._metadata.exports.length; i < __ks_741; i += 2) {
				index = this._metadata.exports[i];
				name = this._metadata.exports[i + 1];
				if(!KSType.isValue(references[index])) {
					type = Type.import(index, this._metadata, references, alterations, queue, this._scope, this._node);
				}
				else {
					type = references[index];
				}
				type = references[index] = Type.toNamedType(name, type);
				this._scope.addVariable(name, new Variable(name, false, false, type), this._node);
			}
			for(var i = 0, __ks_741 = this._metadata.aliens.length; i < __ks_741; i += 2) {
				index = this._metadata.aliens[i];
				name = this._metadata.aliens[i + 1];
				if(!this._scope.hasVariable(name)) {
					this._scope.addVariable(name, new Variable(name, false, false, references[index]), this._node);
				}
			}
			index = 0;
			for(var __ks_741 = this._metadata.references.length; index < __ks_741; ++index) {
				if(!KSType.isValue(references[index])) {
					references[index] = Type.import(index, this._metadata, references, alterations, queue, this._scope, this._node);
				}
			}
			while(queue.length > 0) {
				queue.shift()();
			}
		},
		prepare: function() {
			if(arguments.length === 1) {
				return ImportWorker.prototype.__ks_func_prepare_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_scope_0: function() {
			return this._scope;
		},
		scope: function() {
			if(arguments.length === 0) {
				return ImportWorker.prototype.__ks_func_scope_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var DependencyKind = {
		Extern: 0,
		ExternOrRequire: 1,
		Require: 2,
		RequireOrExtern: 3,
		RequireOrImport: 4
	};
	var DependencyStatement = Helper.class({
		$name: "DependencyStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_define_0: function(declaration, kind) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(declaration === void 0 || declaration === null) {
				throw new TypeError("'declaration' is not nullable");
			}
			if(kind === void 0 || kind === null) {
				throw new TypeError("'kind' is not nullable");
			}
			var scope = this.greatScope();
			var __ks_742 = declaration.kind;
			if(__ks_742 === NodeKind.ClassDeclaration) {
				var type = new ClassType(scope);
				var variable = scope.define(declaration.name.name, true, type, this);
				if(KSType.isValue(declaration.extends)) {
					var superVar, __ks_743;
					if(KSType.isValue(__ks_743 = this._scope.getVariable(declaration.extends.name)) ? (superVar = __ks_743, false) : true) {
						ReferenceException.throwNotDefined(declaration.extends.name, this);
					}
					else if(!superVar.type().isClass()) {
						TypeException.throwNotClass(declaration.extends.name, this);
					}
					type.extends(superVar.type());
				}
				if(kind !== DependencyKind.Extern) {
					type.flagRequired();
				}
				if((kind === DependencyKind.Extern) || (kind === DependencyKind.ExternOrRequire) || (kind === DependencyKind.RequireOrExtern)) {
					type = type.flagAlien();
				}
				for(var __ks_743 = 0, __ks_744 = declaration.modifiers.length, modifier; __ks_743 < __ks_744; ++__ks_743) {
					modifier = declaration.modifiers[__ks_743];
					if(modifier.kind === ModifierKind.Abstract) {
						type.flagAbstract();
					}
					else if(modifier.kind === ModifierKind.Sealed) {
						type.flagSealed();
					}
				}
				for(var __ks_743 = 0, __ks_744 = declaration.members.length, member; __ks_743 < __ks_744; ++__ks_743) {
					member = declaration.members[__ks_743];
					type.addPropertyFromAST(member, this);
				}
				return variable;
			}
			else if(__ks_742 === NodeKind.EnumDeclaration) {
				var __ks_kind_1 = EnumTypeKind.Number;
				if(KSType.isValue(declaration.type)) {
					if(Type.fromAST(declaration.type, this).isString()) {
						__ks_kind_1 = EnumTypeKind.String;
					}
				}
				var type = new EnumType(scope, __ks_kind_1);
				var variable = scope.define(declaration.name.name, true, type, this);
				if(__ks_kind_1 !== DependencyKind.Extern) {
					type.flagRequired();
				}
				if((__ks_kind_1 === DependencyKind.Extern) || (__ks_kind_1 === DependencyKind.ExternOrRequire) || (__ks_kind_1 === DependencyKind.RequireOrExtern)) {
					type = type.flagAlien();
				}
				for(var __ks_743 = 0, __ks_744 = declaration.members.length, member; __ks_743 < __ks_744; ++__ks_743) {
					member = declaration.members[__ks_743];
					type.addElement(member.name.name);
				}
				return variable;
			}
			else if(__ks_742 === NodeKind.FunctionDeclaration) {
				var type;
				if(KSType.isValue(declaration.parameters)) {
					var parameters = Helper.mapArray(declaration.parameters, Helper.vcurry(function(parameter) {
						return Type.fromAST(parameter, this);
					}, this));
					type = new FunctionType(parameters, declaration, this);
				}
				else {
					type = this.scope().reference("Function");
				}
				var variable = scope.define(declaration.name.name, true, type, this);
				if(kind !== DependencyKind.Extern) {
					type.flagRequired();
				}
				return variable;
			}
			else if(__ks_742 === NodeKind.NamespaceDeclaration) {
				var type = new NamespaceType(scope);
				var variable = scope.define(declaration.name.name, true, type, this);
				if(kind !== DependencyKind.Extern) {
					type.flagRequired();
				}
				if((kind === DependencyKind.Extern) || (kind === DependencyKind.ExternOrRequire) || (kind === DependencyKind.RequireOrExtern)) {
					type = type.flagAlien();
				}
				for(var __ks_743 = 0, __ks_744 = declaration.modifiers.length, modifier; __ks_743 < __ks_744; ++__ks_743) {
					modifier = declaration.modifiers[__ks_743];
					if(modifier.kind === ModifierKind.Sealed) {
						type.flagSealed();
					}
				}
				for(var __ks_743 = 0, __ks_744 = declaration.statements.length, statement; __ks_743 < __ks_744; ++__ks_743) {
					statement = declaration.statements[__ks_743];
					type.addPropertyFromAST(statement, this);
				}
				return variable;
			}
			else if(__ks_742 === NodeKind.VariableDeclarator) {
				var type = Type.fromAST(declaration.type, this);
				var instance = KSType.is(type, ClassType);
				if(KSType.is(type, ReferenceType) && type.isClass()) {
					type = new ClassType(scope);
				}
				if(declaration.sealed) {
					if(KSType.is(type, ReferenceType) && type.isClass()) {
						type = new ClassType(scope);
					}
					else if(!type.isSealable()) {
						type = new SealableType(scope, type);
					}
					type.flagSealed();
				}
				if((kind === DependencyKind.Extern) || (kind === DependencyKind.ExternOrRequire) || (kind === DependencyKind.RequireOrExtern)) {
					type = type.flagAlien();
				}
				if(instance) {
					type = this._scope.reference(type);
				}
				var variable = scope.define(declaration.name.name, true, type, this);
				if(kind !== DependencyKind.Extern) {
					type.flagRequired();
				}
				return variable;
			}
			else {
				throw new NotSupportedException("Unexpected kind " + declaration.kind, this);
			}
		},
		define: function() {
			if(arguments.length === 2) {
				return DependencyStatement.prototype.__ks_func_define_0.apply(this, arguments);
			}
			else if(Statement.prototype.define) {
				return Statement.prototype.define.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExternDeclaration = Helper.class({
		$name: "ExternDeclaration",
		$extends: DependencyStatement,
		__ks_init_1: function() {
			this._lines = [];
		},
		__ks_init: function() {
			DependencyStatement.prototype.__ks_init.call(this);
			ExternDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			DependencyStatement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var module = this.module();
			var variable;
			for(var __ks_745 = 0, __ks_746 = this._data.declarations.length, declaration; __ks_745 < __ks_746; ++__ks_745) {
				declaration = this._data.declarations[__ks_745];
				var __ks_747;
				if((KSType.isValue(__ks_747 = this._scope.getVariable(declaration.name.name)) ? (variable = __ks_747, true) : false) && !variable.isPredefined()) {
					if(declaration.kind === NodeKind.FunctionDeclaration) {
						var parameters;
						if(KSType.isValue(declaration.parameters) ? declaration.parameters.length !== 0 : false) {
							parameters = Helper.mapArray(declaration.parameters, Helper.vcurry(function(parameter) {
								return Type.fromAST(parameter, this);
							}, this));
						}
						else {
							parameters = [new ParameterType(this._scope, Type.Any, 0, Infinity)];
						}
						var type = new FunctionType(parameters, declaration, this);
						if(KSType.is(variable.type(), FunctionType)) {
							var newType = new OverloadedFunctionType(this._scope);
							newType.addFunction(variable.type());
							newType.addFunction(type);
							variable.type(newType);
						}
						else if(KSType.is(variable.type(), OverloadedFunctionType)) {
							variable.type().addFunction(type);
						}
						else {
							SyntaxException.throwAlreadyDeclared(declaration.name.name, this);
						}
					}
					else if(this._parent.includePath() === null) {
						variable = this.define(declaration, DependencyKind.Extern);
						if(variable.type().isSealed() && variable.type().isExtendable()) {
							this._lines.push("var " + variable.type().getSealedName() + " = {}");
						}
					}
					else {
					}
				}
				else {
					variable = this.define(declaration, DependencyKind.Extern);
					if(variable.type().isSealed() && variable.type().isExtendable()) {
						this._lines.push("var " + variable.type().getSealedName() + " = {}");
					}
				}
				module.addAlien(variable.name(), variable.type());
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExternDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(DependencyStatement.prototype.analyse) {
				return DependencyStatement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExternDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(DependencyStatement.prototype.prepare) {
				return DependencyStatement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExternDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(DependencyStatement.prototype.translate) {
				return DependencyStatement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_748 = 0, __ks_749 = this._lines.length, line; __ks_748 < __ks_749; ++__ks_748) {
				line = this._lines[__ks_748];
				fragments.line(line);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ExternDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(DependencyStatement.prototype.toStatementFragments) {
				return DependencyStatement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var RequireDeclaration = Helper.class({
		$name: "RequireDeclaration",
		$extends: DependencyStatement,
		__ks_init: function() {
			DependencyStatement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			DependencyStatement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var module = this.module();
			var variable;
			for(var __ks_750 = 0, __ks_751 = this._data.declarations.length, declaration; __ks_750 < __ks_751; ++__ks_750) {
				declaration = this._data.declarations[__ks_750];
				var __ks_752;
				if(KSType.isValue(__ks_752 = this._scope.getVariable(declaration.name.name)) ? (variable = __ks_752, true) : false) {
					if(declaration.kind === NodeKind.FunctionDeclaration) {
						var requirement = module.getRequirement(declaration.name.name);
						var parameters;
						if(KSType.isValue(declaration.parameters) ? declaration.parameters.length !== 0 : false) {
							parameters = Helper.mapArray(declaration.parameters, Helper.vcurry(function(parameter) {
								return Type.fromAST(parameter, this);
							}, this));
						}
						else {
							parameters = [new ParameterType(this._scope, Type.Any, 0, Infinity)];
						}
						var type = new FunctionType(parameters, declaration, this);
						if(KSType.is(variable.type(), FunctionType)) {
							var newType = new OverloadedFunctionType(this._scope);
							newType.addFunction(variable.type());
							newType.addFunction(type);
							variable.type(newType);
							requirement.type(newType);
						}
						else if(KSType.is(variable.type(), OverloadedFunctionType)) {
							variable.type().addFunction(type);
						}
						else {
							SyntaxException.throwAlreadyDeclared(declaration.name.name, this);
						}
					}
					else if(this._parent.includePath() === null) {
						module.addRequirement(new StaticRequirement(declaration, this));
					}
					else {
					}
				}
				else {
					module.addRequirement(new StaticRequirement(declaration, this));
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RequireDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(DependencyStatement.prototype.analyse) {
				return DependencyStatement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RequireDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(DependencyStatement.prototype.prepare) {
				return DependencyStatement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return RequireDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(DependencyStatement.prototype.translate) {
				return DependencyStatement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return RequireDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(DependencyStatement.prototype.toStatementFragments) {
				return DependencyStatement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ExternOrRequireDeclaration = Helper.class({
		$name: "ExternOrRequireDeclaration",
		$extends: DependencyStatement,
		__ks_init: function() {
			DependencyStatement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			DependencyStatement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var module = this.module();
			module.flag("Type");
			if(this._parent.includePath() !== null) {
				var variable;
				for(var __ks_753 = 0, __ks_754 = this._data.declarations.length, declaration; __ks_753 < __ks_754; ++__ks_753) {
					declaration = this._data.declarations[__ks_753];
					var __ks_755;
					if(KSType.isValue(__ks_755 = this._scope.getVariable(declaration.name.name)) ? (variable = __ks_755, true) : false) {
					}
					else {
						module.addRequirement(new EORDynamicRequirement(declaration, this));
					}
				}
			}
			else {
				for(var __ks_753 = 0, __ks_754 = this._data.declarations.length, declaration; __ks_753 < __ks_754; ++__ks_753) {
					declaration = this._data.declarations[__ks_753];
					module.addRequirement(new EORDynamicRequirement(declaration, this));
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ExternOrRequireDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(DependencyStatement.prototype.analyse) {
				return DependencyStatement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ExternOrRequireDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(DependencyStatement.prototype.prepare) {
				return DependencyStatement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ExternOrRequireDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(DependencyStatement.prototype.translate) {
				return DependencyStatement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ExternOrRequireDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(DependencyStatement.prototype.toStatementFragments) {
				return DependencyStatement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var RequireOrExternDeclaration = Helper.class({
		$name: "RequireOrExternDeclaration",
		$extends: DependencyStatement,
		__ks_init: function() {
			DependencyStatement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			DependencyStatement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var module = this.module();
			module.flag("Type");
			if(this._parent.includePath() !== null) {
				var variable;
				for(var __ks_756 = 0, __ks_757 = this._data.declarations.length, declaration; __ks_756 < __ks_757; ++__ks_756) {
					declaration = this._data.declarations[__ks_756];
					var __ks_758;
					if(KSType.isValue(__ks_758 = this._scope.getVariable(declaration.name.name)) ? (variable = __ks_758, true) : false) {
					}
					else {
						module.addRequirement(new ROEDynamicRequirement(declaration, this));
					}
				}
			}
			else {
				for(var __ks_756 = 0, __ks_757 = this._data.declarations.length, declaration; __ks_756 < __ks_757; ++__ks_756) {
					declaration = this._data.declarations[__ks_756];
					module.addRequirement(new ROEDynamicRequirement(declaration, this));
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RequireOrExternDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(DependencyStatement.prototype.analyse) {
				return DependencyStatement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RequireOrExternDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(DependencyStatement.prototype.prepare) {
				return DependencyStatement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return RequireOrExternDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(DependencyStatement.prototype.translate) {
				return DependencyStatement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return RequireOrExternDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(DependencyStatement.prototype.toStatementFragments) {
				return DependencyStatement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var RequireOrImportDeclaration = Helper.class({
		$name: "RequireOrImportDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarators = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			RequireOrImportDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var __ks_759 = 0, __ks_760 = this._data.declarations.length, declarator; __ks_759 < __ks_760; ++__ks_759) {
				declarator = this._data.declarations[__ks_759];
				this._declarators.push(declarator = new RequireOrImportDeclarator(declarator, this));
				declarator.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_761 = 0, __ks_762 = this._declarators.length, declarator; __ks_761 < __ks_762; ++__ks_761) {
				declarator = this._declarators[__ks_761];
				declarator.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return RequireOrImportDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var RequireOrImportDeclarator = Helper.class({
		$name: "RequireOrImportDeclarator",
		$extends: Importer,
		__ks_init: function() {
			Importer.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Importer.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			Importer.prototype.prepare.apply(this, []);
			var module = this.module();
			if(this._count !== 0) {
				if(this._parent.includePath() !== null) {
					var variable;
					for(var __ks_763 in this._variables) {
						var alias = this._variables[__ks_763];
						var __ks_764;
						if(KSType.isValue(__ks_764 = this._scope.getVariable(alias)) ? (variable = __ks_764, true) : false) {
						}
						else {
							module.addRequirement(new ROIDynamicRequirement(variable, this));
						}
					}
				}
				else {
					for(var __ks_763 in this._variables) {
						var alias = this._variables[__ks_763];
						module.addRequirement(new ROIDynamicRequirement(this._scope.getVariable(alias), this));
					}
				}
			}
			if(this._alias !== null) {
				throw new NotImplementedException(this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			return Importer.prototype.prepare.apply(this, arguments);
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			return Importer.prototype.translate.apply(this, arguments);
		},
		__ks_func_metadata_0: function() {
			return this._metadata;
		},
		metadata: function() {
			if(arguments.length === 0) {
				return RequireOrImportDeclarator.prototype.__ks_func_metadata_0.apply(this);
			}
			else if(Importer.prototype.metadata) {
				return Importer.prototype.metadata.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return RequireOrImportDeclarator.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Importer.prototype.toStatementFragments) {
				return Importer.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Requirement = Helper.class({
		$name: "Requirement",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._name = name;
			this._type = type;
		},
		__ks_cons_1: function(variable) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			var __ks_765;
			this._name = variable.name();
			this._type = variable.type();
		},
		__ks_cons_2: function(data, kind, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(kind === void 0 || kind === null) {
				throw new TypeError("'kind' is not nullable");
			}
			else if(!KSType.is(kind, DependencyKind)) {
				throw new TypeError("'kind' is not of type 'DependencyKind'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Requirement.prototype.__ks_cons.call(this, [node.define(data, kind)]);
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				Requirement.prototype.__ks_cons_1.apply(this, args);
			}
			else if(args.length === 2) {
				Requirement.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 3) {
				Requirement.prototype.__ks_cons_2.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isAlien_0: function() {
			return false;
		},
		isAlien: function() {
			if(arguments.length === 0) {
				return Requirement.prototype.__ks_func_isAlien_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return Requirement.prototype.__ks_func_name_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNameFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code(this._name);
			if(this._type.isFlexible()) {
				fragments.code(", __ks_" + this._name);
			}
		},
		toNameFragments: function() {
			if(arguments.length === 1) {
				return Requirement.prototype.__ks_func_toNameFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		__ks_func_type_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._type = type;
			return this;
		},
		type: function() {
			if(arguments.length === 0) {
				return Requirement.prototype.__ks_func_type_0.apply(this);
			}
			else if(arguments.length === 1) {
				return Requirement.prototype.__ks_func_type_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var StaticRequirement = Helper.class({
		$name: "StaticRequirement",
		$extends: Requirement,
		__ks_init: function() {
			Requirement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			Requirement.prototype.__ks_cons.call(this, [name, type]);
		},
		__ks_cons_1: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Requirement.prototype.__ks_cons.call(this, [data, DependencyKind.Require, node]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				if(KSType.isString(args[0])) {
					StaticRequirement.prototype.__ks_cons_0.apply(this, args);
				}
				else {
					StaticRequirement.prototype.__ks_cons_1.apply(this, args);
				}
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isRequired_0: function() {
			return true;
		},
		isRequired: function() {
			if(arguments.length === 0) {
				return StaticRequirement.prototype.__ks_func_isRequired_0.apply(this);
			}
			else if(Requirement.prototype.isRequired) {
				return Requirement.prototype.isRequired.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameter_0: function() {
			return this._name;
		},
		parameter: function() {
			if(arguments.length === 0) {
				return StaticRequirement.prototype.__ks_func_parameter_0.apply(this);
			}
			else if(Requirement.prototype.parameter) {
				return Requirement.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toParameterFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code(this._name);
			if(this._type.isFlexible()) {
				fragments.code(", __ks_" + this._name);
			}
		},
		toParameterFragments: function() {
			if(arguments.length === 1) {
				return StaticRequirement.prototype.__ks_func_toParameterFragments_0.apply(this, arguments);
			}
			else if(Requirement.prototype.toParameterFragments) {
				return Requirement.prototype.toParameterFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SeepedRequirement = Helper.class({
		$name: "SeepedRequirement",
		$extends: StaticRequirement,
		__ks_init: function() {
			StaticRequirement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(name, type) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			StaticRequirement.prototype.__ks_cons.call(this, [name, type]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				SeepedRequirement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isRequired_0: function() {
			return false;
		},
		isRequired: function() {
			if(arguments.length === 0) {
				return SeepedRequirement.prototype.__ks_func_isRequired_0.apply(this);
			}
			return StaticRequirement.prototype.isRequired.apply(this, arguments);
		}
	});
	var DynamicRequirement = Helper.class({
		$name: "DynamicRequirement",
		$extends: Requirement,
		__ks_init: function() {
			Requirement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(variable, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Requirement.prototype.__ks_cons.call(this, [variable]);
			var __ks_766;
			this._parameter = node.module().scope().acquireTempName();
		},
		__ks_cons_1: function(data, kind, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(kind === void 0 || kind === null) {
				throw new TypeError("'kind' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Requirement.prototype.__ks_cons.call(this, [data, kind, node]);
			var __ks_767;
			this._parameter = node.module().scope().acquireTempName();
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				DynamicRequirement.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 3) {
				DynamicRequirement.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isRequired_0: function() {
			return false;
		},
		isRequired: function() {
			if(arguments.length === 0) {
				return DynamicRequirement.prototype.__ks_func_isRequired_0.apply(this);
			}
			else if(Requirement.prototype.isRequired) {
				return Requirement.prototype.isRequired.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameter_0: function() {
			return this._parameter;
		},
		parameter: function() {
			if(arguments.length === 0) {
				return DynamicRequirement.prototype.__ks_func_parameter_0.apply(this);
			}
			else if(Requirement.prototype.parameter) {
				return Requirement.prototype.parameter.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments, index) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			fragments.code(this._name + " = __ks__[" + ++index + "]");
			if(this._type.isFlexible()) {
				fragments.code(", __ks_" + this._name + " = __ks__[" + ++index + "]");
			}
			return index;
		},
		toAssignmentFragments: function() {
			if(arguments.length === 2) {
				return DynamicRequirement.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(Requirement.prototype.toAssignmentFragments) {
				return Requirement.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toParameterFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code(this._parameter);
			if(this._type.isFlexible()) {
				fragments.code(", __ks_" + this._parameter);
			}
		},
		toParameterFragments: function() {
			if(arguments.length === 1) {
				return DynamicRequirement.prototype.__ks_func_toParameterFragments_0.apply(this, arguments);
			}
			else if(Requirement.prototype.toParameterFragments) {
				return Requirement.prototype.toParameterFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var EORDynamicRequirement = Helper.class({
		$name: "EORDynamicRequirement",
		$extends: DynamicRequirement,
		__ks_init: function() {
			DynamicRequirement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			DynamicRequirement.prototype.__ks_cons.call(this, [data, DependencyKind.ExternOrRequire, node]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				EORDynamicRequirement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isAlien_0: function() {
			return true;
		},
		isAlien: function() {
			if(arguments.length === 0) {
				return EORDynamicRequirement.prototype.__ks_func_isAlien_0.apply(this);
			}
			return DynamicRequirement.prototype.isAlien.apply(this, arguments);
		},
		__ks_func_toLoneAltFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var ctrl = fragments.newControl().code("if(Type.isValue(" + this._name + "))").step();
			if(this._type.isFlexible()) {
				ctrl.line("return [" + this._name + ", typeof __ks_" + this._name + " === \"undefined\" ? {} : __ks_" + this._name + "]").step().code("else").step().line("return [" + this._parameter + ", __ks_" + this._parameter + "]");
			}
			else {
				ctrl.line("return [" + this._name + "]").step().code("else").step().line("return [" + this._parameter + "]");
			}
			ctrl.done();
		},
		toLoneAltFragments: function() {
			if(arguments.length === 1) {
				return EORDynamicRequirement.prototype.__ks_func_toLoneAltFragments_0.apply(this, arguments);
			}
			else if(DynamicRequirement.prototype.toLoneAltFragments) {
				return DynamicRequirement.prototype.toLoneAltFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toManyAltFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var ctrl = fragments.newControl().code("if(Type.isValue(" + this._name + "))").step();
			if(this._type.isFlexible()) {
				ctrl.line("req.push(" + this._name + ", typeof __ks_" + this._name + " === \"undefined\" ? {} : __ks_" + this._name + ")").step().code("else").step().line("req.push(" + this._parameter + ", __ks_" + this._parameter + ")");
			}
			else {
				ctrl.line("req.push(" + this._name + ")").step().code("else").step().line("req.push(" + this._parameter + ")");
			}
			ctrl.done();
		},
		toManyAltFragments: function() {
			if(arguments.length === 1) {
				return EORDynamicRequirement.prototype.__ks_func_toManyAltFragments_0.apply(this, arguments);
			}
			else if(DynamicRequirement.prototype.toManyAltFragments) {
				return DynamicRequirement.prototype.toManyAltFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ROEDynamicRequirement = Helper.class({
		$name: "ROEDynamicRequirement",
		$extends: DynamicRequirement,
		__ks_init: function() {
			DynamicRequirement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			DynamicRequirement.prototype.__ks_cons.call(this, [data, DependencyKind.RequireOrExtern, node]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ROEDynamicRequirement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isAlien_0: function() {
			return true;
		},
		isAlien: function() {
			if(arguments.length === 0) {
				return ROEDynamicRequirement.prototype.__ks_func_isAlien_0.apply(this);
			}
			return DynamicRequirement.prototype.isAlien.apply(this, arguments);
		},
		__ks_func_toLoneAltFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var ctrl = fragments.newControl().code("if(Type.isValue(" + this._parameter + "))").step();
			if(this._type.isFlexible()) {
				ctrl.line("return [" + this._parameter + ", __ks_" + this._parameter + "]").step().code("else").step().line("return [" + this._name + ", typeof __ks_" + this._name + " === \"undefined\" ? {} : __ks_" + this._name + "]");
			}
			else {
				ctrl.line("return [" + this._parameter + "]").step().code("else").step().line("return [" + this._name + "]");
			}
			ctrl.done();
		},
		toLoneAltFragments: function() {
			if(arguments.length === 1) {
				return ROEDynamicRequirement.prototype.__ks_func_toLoneAltFragments_0.apply(this, arguments);
			}
			else if(DynamicRequirement.prototype.toLoneAltFragments) {
				return DynamicRequirement.prototype.toLoneAltFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toManyAltFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var ctrl = fragments.newControl().code("if(Type.isValue(" + this._parameter + "))").step();
			if(this._type.isFlexible()) {
				ctrl.line("req.push(" + this._parameter + ", __ks_" + this._parameter + ")").step().code("else").step().line("req.push(" + this._name + ", typeof __ks_" + this._name + " === \"undefined\" ? {} : __ks_" + this._name + ")");
			}
			else {
				ctrl.line("req.push(" + this._parameter + ")").step().code("else").step().line("req.push(" + this._name + ")");
			}
			ctrl.done();
		},
		toManyAltFragments: function() {
			if(arguments.length === 1) {
				return ROEDynamicRequirement.prototype.__ks_func_toManyAltFragments_0.apply(this, arguments);
			}
			else if(DynamicRequirement.prototype.toManyAltFragments) {
				return DynamicRequirement.prototype.toManyAltFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ROIDynamicRequirement = Helper.class({
		$name: "ROIDynamicRequirement",
		$extends: DynamicRequirement,
		__ks_init: function() {
			DynamicRequirement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(variable, importer) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, Variable)) {
				throw new TypeError("'variable' is not of type 'Variable'");
			}
			if(importer === void 0 || importer === null) {
				throw new TypeError("'importer' is not nullable");
			}
			DynamicRequirement.prototype.__ks_cons.call(this, [variable, this._importer = importer]);
			variable.type().condense();
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ROIDynamicRequirement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_toLoneAltFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var ctrl = fragments.newControl().code("if(Type.isValue(" + this._parameter + "))").step();
			if(this._type.isFlexible()) {
				ctrl.line("return [" + this._parameter + ", __ks_" + this._parameter + "]").step().code("else").step();
				this._importer.toImportFragments(ctrl);
				ctrl.line("return [" + this._name + ", __ks_" + this._name + "]").done();
			}
			else {
				ctrl.line("return [" + this._parameter + "]").step().code("else").step();
				this._importer.toImportFragments(ctrl);
				ctrl.line("return [" + this._name + "]").done();
			}
			ctrl.done();
		},
		toLoneAltFragments: function() {
			if(arguments.length === 1) {
				return ROIDynamicRequirement.prototype.__ks_func_toLoneAltFragments_0.apply(this, arguments);
			}
			else if(DynamicRequirement.prototype.toLoneAltFragments) {
				return DynamicRequirement.prototype.toLoneAltFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toManyAltFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var ctrl = fragments.newControl().code("if(Type.isValue(" + this._parameter + "))").step();
			if(this._type.isFlexible()) {
				ctrl.line("req.push(" + this._parameter + ", __ks_" + this._parameter + ")").step().code("else").step();
				this._importer.toImportFragments(ctrl);
				ctrl.line("req.push(" + this._name + ", __ks_" + this._name + ")").done();
			}
			else {
				ctrl.line("req.push(" + this._parameter + ")").step().code("else").step();
				this._importer.toImportFragments(ctrl);
				ctrl.line("req.push(" + this._name + ")").done();
			}
			ctrl.done();
		},
		toManyAltFragments: function() {
			if(arguments.length === 1) {
				return ROIDynamicRequirement.prototype.__ks_func_toManyAltFragments_0.apply(this, arguments);
			}
			else if(DynamicRequirement.prototype.toManyAltFragments) {
				return DynamicRequirement.prototype.toManyAltFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var $localFileRegex = /^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[\\\/])/;
	var IncludeDeclaration = Helper.class({
		$name: "IncludeDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._statements = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			IncludeDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var directory = this.directory();
			var x;
			for(var __ks_768 = 0, __ks_769 = this._data.files.length, file; __ks_768 < __ks_769; ++__ks_768) {
				file = this._data.files[__ks_768];
				if($localFileRegex.test(file)) {
					x = fs.resolve(directory, file);
					if(fs.isFile(x) || fs.isFile(x += $extensions.source)) {
						if(this.canLoadLocalFile(x)) {
							this.loadLocalFile(x);
						}
					}
					else {
						IOException.throwNotFoundFile(file, directory, this);
					}
				}
				else {
					var modulePath = file;
					var moduleVersion = "";
					var nf = true;
					var __ks_770 = $nodeModulesPaths(directory);
					for(var __ks_771 = 0, __ks_772 = __ks_770.length, dir; nf && __ks_771 < __ks_772; ++__ks_771) {
						dir = __ks_770[__ks_771];
						x = fs.resolve(dir, file);
						if(fs.isFile(x)) {
							nf = false;
						}
						else if(fs.isFile(x + $extensions.source)) {
							x += $extensions.source;
							modulePath += $extensions.source;
							nf = false;
						}
						else {
							var pkgfile = path.join(x, "package.json");
							if(fs.isFile(pkgfile)) {
								var pkg;
								try {
									pkg = JSON.parse(fs.readFile(pkgfile));
								}
								catch(__ks_5) {
								}
								if(KSType.isValue(pkg)) {
									if(KSType.isValue(pkg.kaoscript) && fs.isFile(path.join(x, pkg.kaoscript.main))) {
										x = path.join(x, pkg.kaoscript.main);
										modulePath = path.join(modulePath, pkg.kaoscript.main);
										nf = false;
									}
									else if(KSType.isValue(pkg.main)) {
										if(fs.isFile(path.join(x, pkg.main))) {
											x = path.join(x, pkg.main);
											modulePath = path.join(modulePath, pkg.main);
											nf = false;
										}
										else if(fs.isFile(path.join(x, pkg.main + $extensions.source))) {
											x = path.join(x, pkg.main + $extensions.source);
											modulePath = path.join(modulePath, pkg.main + $extensions.source);
											nf = false;
										}
										else if(fs.isFile(path.join(x, pkg.main, "index" + $extensions.source))) {
											x = path.join(x, pkg.main, "index" + $extensions.source);
											modulePath = path.join(modulePath, pkg.main, "index" + $extensions.source);
											nf = false;
										}
									}
									if(!nf) {
										moduleVersion = pkg.version;
									}
								}
							}
							if(nf && fs.isFile(path.join(x, "index" + $extensions.source))) {
								x = path.join(x, "index" + $extensions.source);
								modulePath = path.join(modulePath, "index" + $extensions.source);
								nf = false;
							}
						}
					}
					if(nf) {
						IOException.throwNotFoundModule(file, directory, this);
					}
					if(this.canLoadModuleFile(x, file, modulePath, moduleVersion)) {
						this.loadModuleFile(x, file, modulePath, moduleVersion);
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IncludeDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_773 = 0, __ks_774 = this._statements.length, statement; __ks_773 < __ks_774; ++__ks_773) {
				statement = this._statements[__ks_773];
				statement.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IncludeDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_775 = 0, __ks_776 = this._statements.length, statement; __ks_775 < __ks_776; ++__ks_775) {
				statement = this._statements[__ks_775];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return IncludeDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_canLoadLocalFile_0: function(file) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			return !this.module().hasInclude(file);
		},
		canLoadLocalFile: function() {
			if(arguments.length === 1) {
				return IncludeDeclaration.prototype.__ks_func_canLoadLocalFile_0.apply(this, arguments);
			}
			else if(Statement.prototype.canLoadLocalFile) {
				return Statement.prototype.canLoadLocalFile.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_canLoadModuleFile_0: function(file, name, path, version) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			if(version === void 0 || version === null) {
				throw new TypeError("'version' is not nullable");
			}
			var versions, __ks_777;
			if(KSType.isValue(__ks_777 = this.module().listIncludeVersions(file, path)) ? (versions = __ks_777, true) : false) {
				if((versions.length > 1) || (versions[0] === version)) {
					return false;
				}
				else {
					SyntaxException.throwMismatchedInclude(name, this);
				}
			}
			else {
				return true;
			}
		},
		canLoadModuleFile: function() {
			if(arguments.length === 4) {
				return IncludeDeclaration.prototype.__ks_func_canLoadModuleFile_0.apply(this, arguments);
			}
			else if(Statement.prototype.canLoadModuleFile) {
				return Statement.prototype.canLoadModuleFile.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			for(var __ks_778 = 0, __ks_779 = this._statements.length, statement; __ks_778 < __ks_779; ++__ks_778) {
				statement = this._statements[__ks_778];
				if(statement.isExportable()) {
					statement.export(recipient);
				}
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return IncludeDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_isExportable_0: function() {
			return true;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return IncludeDeclaration.prototype.__ks_func_isExportable_0.apply(this);
			}
			return Statement.prototype.isExportable.apply(this, arguments);
		},
		__ks_func_loadLocalFile_0: function(path) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			var module = this.module();
			var declarator = new IncludeDeclarator(path, this);
			var data = fs.readFile(path);
			module.addHash(path, module.compiler().sha256(path, data));
			module.addInclude(path);
			try {
				data = module.parse(data, path);
			}
			catch(error) {
				error.filename = path;
				throw error;
			}
			Attribute.configure(data, this.module()._options, false, AttributeTarget.Global);
			var __ks_782;
			for(var __ks_780 = 0, __ks_781 = data.body.length, statement; __ks_780 < __ks_781; ++__ks_780) {
				statement = data.body[__ks_780];
				if(KSType.isValue(__ks_782 = $compile.statement(statement, declarator)) ? (statement = __ks_782, true) : false) {
					this._statements.push(statement);
					statement.analyse();
				}
			}
		},
		loadLocalFile: function() {
			if(arguments.length === 1) {
				return IncludeDeclaration.prototype.__ks_func_loadLocalFile_0.apply(this, arguments);
			}
			else if(Statement.prototype.loadLocalFile) {
				return Statement.prototype.loadLocalFile.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_loadModuleFile_0: function(path, moduleName, modulePath, moduleVersion) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(path === void 0 || path === null) {
				throw new TypeError("'path' is not nullable");
			}
			if(moduleName === void 0 || moduleName === null) {
				throw new TypeError("'moduleName' is not nullable");
			}
			if(modulePath === void 0 || modulePath === null) {
				throw new TypeError("'modulePath' is not nullable");
			}
			if(moduleVersion === void 0 || moduleVersion === null) {
				throw new TypeError("'moduleVersion' is not nullable");
			}
			var module = this.module();
			var declarator = new IncludeDeclarator(path, moduleName, this);
			var data = fs.readFile(path);
			module.addHash(path, module.compiler().sha256(path, data));
			module.addInclude(path, modulePath, moduleVersion);
			try {
				data = module.parse(data, path);
			}
			catch(error) {
				error.filename = path;
				throw error;
			}
			Attribute.configure(data, this.module()._options, false, AttributeTarget.Global);
			var __ks_785;
			for(var __ks_783 = 0, __ks_784 = data.body.length, statement; __ks_783 < __ks_784; ++__ks_783) {
				statement = data.body[__ks_783];
				if(KSType.isValue(__ks_785 = $compile.statement(statement, declarator)) ? (statement = __ks_785, true) : false) {
					this._statements.push(statement);
					statement.analyse();
				}
			}
		},
		loadModuleFile: function() {
			if(arguments.length === 4) {
				return IncludeDeclaration.prototype.__ks_func_loadModuleFile_0.apply(this, arguments);
			}
			else if(Statement.prototype.loadModuleFile) {
				return Statement.prototype.loadModuleFile.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_786 = 0, __ks_787 = this._statements.length, statement; __ks_786 < __ks_787; ++__ks_786) {
				statement = this._statements[__ks_786];
				statement.toFragments(fragments, mode);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IncludeDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	var IncludeAgainDeclaration = Helper.class({
		$name: "IncludeAgainDeclaration",
		$extends: IncludeDeclaration,
		__ks_init: function() {
			IncludeDeclaration.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			IncludeDeclaration.prototype.__ks_cons.call(this, args);
		},
		__ks_func_canLoadLocalFile_0: function() {
			var __ks_1 = Array.prototype.slice.call(arguments, 0, arguments.length);
			return true;
		},
		canLoadLocalFile: function() {
			return IncludeAgainDeclaration.prototype.__ks_func_canLoadLocalFile_0.apply(this, arguments);
		},
		__ks_func_canLoadModuleFile_0: function() {
			var __ks_2 = Array.prototype.slice.call(arguments, 0, arguments.length);
			return true;
		},
		canLoadModuleFile: function() {
			return IncludeAgainDeclaration.prototype.__ks_func_canLoadModuleFile_0.apply(this, arguments);
		}
	});
	var IncludeDeclarator = Helper.class({
		$name: "IncludeDeclarator",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var file = arguments[++__ks_i];
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			else if(!KSType.isString(file)) {
				throw new TypeError("'file' is not of type 'String'");
			}
			var moduleName;
			if(arguments.length > 2 && (moduleName = arguments[++__ks_i]) !== void 0) {
				if(moduleName !== null && !KSType.isString(moduleName)) {
					throw new TypeError("'moduleName' is not of type 'String'");
				}
			}
			else {
				moduleName = null;
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			Statement.prototype.__ks_cons.call(this, [{}, parent]);
			this._file = file;
			var __ks_788;
			this._directory = path.dirname(file);
			if(moduleName === null) {
				this._includePath = parent.includePath();
			}
			else if((parent.includePath() === null) || !$localFileRegex.test(moduleName)) {
				this._includePath = moduleName;
			}
			else {
				var __ks_789;
				this._includePath = path.join(parent.includePath(), moduleName);
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				IncludeDeclarator.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_directory_0: function() {
			return this._directory;
		},
		directory: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_directory_0.apply(this);
			}
			return Statement.prototype.directory.apply(this, arguments);
		},
		__ks_func_file_0: function() {
			return this._file;
		},
		file: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_file_0.apply(this);
			}
			return Statement.prototype.file.apply(this, arguments);
		},
		__ks_func_includePath_0: function() {
			return this._includePath;
		},
		includePath: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_includePath_0.apply(this);
			}
			return Statement.prototype.includePath.apply(this, arguments);
		},
		__ks_func_recipient_0: function() {
			return this.module();
		},
		recipient: function() {
			if(arguments.length === 0) {
				return IncludeDeclarator.prototype.__ks_func_recipient_0.apply(this);
			}
			else if(Statement.prototype.recipient) {
				return Statement.prototype.recipient.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var NamespaceDeclaration = Helper.class({
		$name: "NamespaceDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._exports = {};
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			NamespaceDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent, new Scope(parent.scope())]);
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				NamespaceDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			this._type = new NamedContainerType(this._name, new NamespaceType(this._scope));
			this._variable = this._scope.parent().define(this._name, true, this._type, this);
			this._statements = [];
			for(var __ks_790 = 0, __ks_791 = this._data.statements.length, statement; __ks_790 < __ks_791; ++__ks_790) {
				statement = this._data.statements[__ks_790];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_792 = 0, __ks_793 = this._statements.length, statement; __ks_792 < __ks_793; ++__ks_792) {
				statement = this._statements[__ks_792];
				statement.prepare();
			}
			for(var __ks_792 = 0, __ks_793 = this._statements.length, statement; __ks_792 < __ks_793; ++__ks_792) {
				statement = this._statements[__ks_792];
				if(statement.isExportable()) {
					statement.export(this);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_794 = 0, __ks_795 = this._statements.length, statement; __ks_794 < __ks_795; ++__ks_794) {
				statement = this._statements[__ks_794];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			recipient.export(this._name, this._variable);
		},
		__ks_func_export_1: function(name, variable) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			this._type.addProperty(name, variable.type());
			this._exports[name] = variable;
		},
		export: function() {
			if(arguments.length === 1) {
				return NamespaceDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(arguments.length === 2) {
				return NamespaceDeclaration.prototype.__ks_func_export_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_includePath_0: function() {
			return null;
		},
		includePath: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_includePath_0.apply(this);
			}
			return Statement.prototype.includePath.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_recipient_0: function() {
			return this;
		},
		recipient: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_recipient_0.apply(this);
			}
			else if(Statement.prototype.recipient) {
				return Statement.prototype.recipient.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toExportFragements_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var line = fragments.newLine().code("return ");
			var object = line.newObject();
			var type;
			for(var name in this._exports) {
				var variable = this._exports[name];
				var __ks_796;
				type = variable.type();
				if(!KSType.is(type, AliasType)) {
					object.newLine().code(name + ": ").compile(variable).done();
					if(!KSType.is(type, ReferenceType)) {
						if(type.isSealed()) {
							object.line("__ks_" + name + ": " + type.sealName());
						}
					}
				}
			}
			object.done();
			line.done();
		},
		toExportFragements: function() {
			if(arguments.length === 1) {
				return NamespaceDeclaration.prototype.__ks_func_toExportFragements_0.apply(this, arguments);
			}
			else if(Statement.prototype.toExportFragements) {
				return Statement.prototype.toExportFragements.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var line = fragments.newLine().code($runtime.scope(this), this._name, " = (function()");
			var block = line.newBlock();
			for(var __ks_797 = 0, __ks_798 = this._statements.length, statement; __ks_797 < __ks_798; ++__ks_797) {
				statement = this._statements[__ks_797];
				block.compile(statement);
			}
			this.toExportFragements(block);
			block.done();
			line.code(")()").done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return NamespaceDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return NamespaceDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ReturnStatement = Helper.class({
		$name: "ReturnStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._await = false;
			this._function = null;
			this._exceptions = false;
			this._value = null;
			this._temp = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ReturnStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			while(KSType.isValue(parent) && !(KSType.is(parent, FunctionExpression) || KSType.is(parent, LambdaExpression) || KSType.is(parent, FunctionDeclarator) || KSType.is(parent, ClassMethodDeclaration) || KSType.is(parent, ImplementClassMethodDeclaration) || KSType.is(parent, ImplementNamespaceFunctionDeclaration))) {
				var __ks_799;
				parent = parent.parent();
			}
			if(KSType.isValue(parent)) {
				this._function = parent;
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ReturnStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			if(KSType.isValue(this._data.value)) {
				var __ks_800;
				this._value = $compile.expression(this._data.value, this);
				this._value.analyse();
				this._await = this._value.isAwait();
				this._exceptions = this._value.hasExceptions();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._value !== null) {
				this._value.prepare();
				this._value.acquireReusable(false);
				this._value.releaseReusable();
				if(this._afterwards.length !== 0) {
					var __ks_801;
					this._temp = this._scope.acquireTempName(this);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._value !== null) {
				this._value.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			if(this._value !== null) {
				this._value.acquireReusable(acquire);
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return ReturnStatement.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			else if(Statement.prototype.acquireReusable) {
				return Statement.prototype.acquireReusable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return this._exceptions;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			else if(Statement.prototype.hasExceptions) {
				return Statement.prototype.hasExceptions.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			return true;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_isReturning_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(this._value !== null) {
				return this._value.type().isInstanceOf(type);
			}
			else {
				return false;
			}
		},
		isReturning: function() {
			if(arguments.length === 1) {
				return ReturnStatement.prototype.__ks_func_isReturning_0.apply(this, arguments);
			}
			return Statement.prototype.isReturning.apply(this, arguments);
		},
		__ks_func_reference_0: function() {
			return this._temp;
		},
		reference: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_reference_0.apply(this);
			}
			return Statement.prototype.reference.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			if(this._value !== null) {
				this._value.releaseReusable();
			}
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			else if(Statement.prototype.releaseReusable) {
				return Statement.prototype.releaseReusable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAwaitStatementFragments_0: function(fragments, statements) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			var line = fragments.newLine();
			var item = this._value.toFragments(line, Mode.None);
			item([this]);
			line.done();
		},
		toAwaitStatementFragments: function() {
			if(arguments.length === 2) {
				return ReturnStatement.prototype.__ks_func_toAwaitStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitStatementFragments) {
				return Statement.prototype.toAwaitStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._value === null) {
				if(KSType.isValue(this._function) ? this._function.type().isAsync() : false) {
					fragments.line("return __ks_cb()");
				}
				else {
					fragments.line("return", this._data);
				}
			}
			else if(this._temp === null) {
				if(this._assignments.length !== 0) {
					fragments.newLine().code($runtime.scope(this) + this._assignments.join(", ")).done();
				}
				if(this._value.isAwaiting()) {
					return Helper.vcurry(this.toAwaitStatementFragments, this, fragments);
				}
				else {
					if(KSType.isValue(this._function) ? this._function.type().isAsync() : false) {
						fragments.newLine().code("return __ks_cb(null, ").compile(this._value).code(")").done();
					}
					else {
						fragments.newLine().code("return ").compile(this._value).done();
					}
				}
			}
			else {
				if(this._value.isAwaiting()) {
					throw new NotImplementedException(this);
				}
				else {
					__ks_Array._im_remove(this._assignments, this._temp);
					if(this._assignments.length !== 0) {
						fragments.newLine().code($runtime.scope(this) + this._assignments.join(", ")).done();
					}
					fragments.newLine().code("" + $runtime.scope(this) + this._temp + " = ").compile(this._value).done();
					for(var __ks_802 = 0, __ks_803 = this._afterwards.length, afterward; __ks_802 < __ks_803; ++__ks_802) {
						afterward = this._afterwards[__ks_802];
						afterward.toAfterwardFragments(fragments);
					}
					if(KSType.isValue(this._function) ? this._function.type().isAsync() : false) {
						fragments.line("return __ks_cb(null, " + this._temp + ")");
					}
					else {
						fragments.line("return " + this._temp);
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ReturnStatement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._value.type();
		},
		type: function() {
			if(arguments.length === 0) {
				return ReturnStatement.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var $switch = {
		length: function(elements) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(elements === void 0 || elements === null) {
				throw new TypeError("'elements' is not nullable");
			}
			var min = 0;
			var max = 0;
			for(var __ks_804 = 0, __ks_805 = elements.length, element; __ks_804 < __ks_805; ++__ks_804) {
				element = elements[__ks_804];
				if(element.spread) {
					max = Infinity;
				}
				else {
					++min;
					++max;
				}
			}
			return {
				min: min,
				max: max
			};
		}
	};
	var SwitchStatement = Helper.class({
		$name: "SwitchStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._clauses = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			SwitchStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(this._data.expression.kind === NodeKind.Identifier) {
				this._name = this._data.expression.name;
			}
			else {
				this._value = $compile.expression(this._data.expression, this);
				this._value.analyse();
			}
			var clause, condition, name, exp, value;
			for(var index = 0, __ks_806 = this._data.clauses.length, data; index < __ks_806; ++index) {
				data = this._data.clauses[index];
				clause = {
					hasTest: KSType.isValue(data.filter),
					bindings: [],
					conditions: [],
					scope: this.newScope()
				};
				clause.scope.index = index;
				for(var conditionIdx = 0, __ks_807 = data.conditions.length; conditionIdx < __ks_807; ++conditionIdx) {
					condition = data.conditions[conditionIdx];
					if(condition.kind === NodeKind.SwitchConditionArray) {
						condition = new SwitchConditionArray(condition, this, clause.scope);
					}
					else if(condition.kind === NodeKind.SwitchConditionEnum) {
						throw new NotImplementedException(this);
					}
					else if(condition.kind === NodeKind.SwitchConditionObject) {
						throw new NotImplementedException(this);
					}
					else if(condition.kind === NodeKind.SwitchConditionRange) {
						condition = new SwitchConditionRange(condition, this, clause.scope);
					}
					else if(condition.kind === NodeKind.SwitchConditionType) {
						condition = new SwitchConditionType(condition, this, clause.scope);
					}
					else {
						condition = new SwitchConditionValue(condition, this, clause.scope);
					}
					condition.analyse();
					clause.conditions.push(condition);
				}
				for(var __ks_807 = 0, __ks_808 = data.bindings.length, binding; __ks_807 < __ks_808; ++__ks_807) {
					binding = data.bindings[__ks_807];
					if(binding.kind === NodeKind.ArrayBinding) {
						binding = new SwitchBindingArray(binding, this, clause.scope);
						clause.hasTest = true;
					}
					else if(binding.kind === NodeKind.ObjectBinding) {
						throw new NotImplementedException(this);
					}
					else if(binding.kind === NodeKind.SwitchTypeCasting) {
						binding = new SwitchBindingType(binding, this, clause.scope);
					}
					else {
						binding = new SwitchBindingValue(binding, this, clause.scope);
					}
					binding.analyse();
					clause.bindings.push(binding);
				}
				clause.filter = new SwitchFilter(data, this, clause.scope);
				clause.filter.analyse();
				clause.body = $compile.expression($ast.block(data.body), this, clause.scope);
				clause.body.analyse();
				this._clauses.push(clause);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._data.expression.kind === NodeKind.Identifier) {
				this._name = this._data.expression.name;
			}
			else {
				this._name = this._scope.acquireTempName();
			}
			if(KSType.isValue(this._value)) {
				this._value.prepare();
			}
			for(var __ks_809 = 0, __ks_810 = this._clauses.length, clause; __ks_809 < __ks_810; ++__ks_809) {
				clause = this._clauses[__ks_809];
				for(var __ks_811 = 0, __ks_812 = clause.conditions.length, condition; __ks_811 < __ks_812; ++__ks_811) {
					condition = clause.conditions[__ks_811];
					condition.prepare();
				}
				for(var __ks_811 = 0, __ks_812 = clause.bindings.length, binding; __ks_811 < __ks_812; ++__ks_811) {
					binding = clause.bindings[__ks_811];
					binding.prepare();
				}
				clause.filter.prepare();
				clause.body.prepare();
			}
			if(this._data.expression.kind !== NodeKind.Identifier) {
				this._scope.releaseTempName(this._name);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			for(var __ks_813 = 0, __ks_814 = this._clauses.length, clause; __ks_813 < __ks_814; ++__ks_813) {
				clause = this._clauses[__ks_813];
				for(var __ks_815 = 0, __ks_816 = clause.conditions.length, condition; __ks_815 < __ks_816; ++__ks_815) {
					condition = clause.conditions[__ks_815];
					condition.translate();
				}
				for(var __ks_815 = 0, __ks_816 = clause.bindings.length, binding; __ks_815 < __ks_816; ++__ks_815) {
					binding = clause.bindings[__ks_815];
					binding.translate();
				}
				clause.filter.translate();
				clause.body.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._clauses.length === 0) {
				return;
			}
			if(KSType.isValue(this._value)) {
				fragments.newLine().code($runtime.scope(this), this._name, " = ").compile(this._value).done();
			}
			var condition;
			for(var __ks_817 = 0, __ks_818 = this._clauses.length, clause; __ks_817 < __ks_818; ++__ks_817) {
				clause = this._clauses[__ks_817];
				for(var __ks_819 = 0, __ks_820 = clause.conditions.length; __ks_819 < __ks_820; ++__ks_819) {
					condition = clause.conditions[__ks_819];
					condition.toStatementFragments(fragments);
				}
				clause.filter.toStatementFragments(fragments);
			}
			var ctrl = fragments.newControl();
			var we = false;
			var i, binding;
			for(var clauseIdx = 0, __ks_817 = this._clauses.length, clause; clauseIdx < __ks_817; ++clauseIdx) {
				clause = this._clauses[clauseIdx];
				if(clause.conditions.length) {
					if(we) {
						SyntaxException.throwAfterDefaultClause(this);
					}
					if(clauseIdx) {
						ctrl.step().code("else if(");
					}
					else {
						ctrl.code("if(");
					}
					i = 0;
					for(var __ks_818 = clause.conditions.length; i < __ks_818; ++i) {
						condition = clause.conditions[i];
						if(i) {
							ctrl.code(" || ");
						}
						condition.toBooleanFragments(ctrl, this._name);
					}
					clause.filter.toBooleanFragments(ctrl, true);
					ctrl.code(")").step();
					for(var __ks_818 = 0, __ks_819 = clause.bindings.length; __ks_818 < __ks_819; ++__ks_818) {
						binding = clause.bindings[__ks_818];
						binding.toFragments(ctrl);
					}
					clause.body.toFragments(ctrl, mode);
				}
				else if(clause.hasTest) {
					if(clauseIdx) {
						ctrl.step().code("else if(");
					}
					else {
						ctrl.code("if(");
					}
					clause.filter.toBooleanFragments(ctrl, false);
					ctrl.code(")").step();
					for(var __ks_818 = 0, __ks_819 = clause.bindings.length; __ks_818 < __ks_819; ++__ks_818) {
						binding = clause.bindings[__ks_818];
						binding.toFragments(ctrl);
					}
					clause.body.toFragments(ctrl, mode);
				}
				else {
					if(clauseIdx) {
						ctrl.step().code("else");
					}
					else {
						ctrl.code("if(true)");
					}
					we = true;
					ctrl.step();
					for(var __ks_818 = 0, __ks_819 = clause.bindings.length; __ks_818 < __ks_819; ++__ks_818) {
						binding = clause.bindings[__ks_818];
						binding.toFragments(ctrl);
					}
					clause.body.toFragments(ctrl, mode);
				}
			}
			ctrl.done();
			if(KSType.isValue(this._value)) {
				this._scope.releaseTempName(this._name);
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return SwitchStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchBindingArray = Helper.class({
		$name: "SwitchBindingArray",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_821;
			this._array = $compile.expression(this._data, this);
			this._array.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchBindingArray.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._array.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchBindingArray.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._array.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchBindingArray.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_bindingScope_0: function() {
			return this._scope;
		},
		bindingScope: function() {
			if(arguments.length === 0) {
				return SwitchBindingArray.prototype.__ks_func_bindingScope_0.apply(this);
			}
			return AbstractNode.prototype.bindingScope.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var line = fragments.newLine();
			this._array.toAssignmentFragments(line, this._parent._name);
			line.done();
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return SwitchBindingArray.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchBindingType = Helper.class({
		$name: "SwitchBindingType",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._scope.define(this._data.name.name, false, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchBindingType.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchBindingType.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchBindingType.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.line($runtime.scope(this), this._data.name.name, " = ", this._parent._name);
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return SwitchBindingType.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchBindingValue = Helper.class({
		$name: "SwitchBindingValue",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._scope.define(this._data.name, false, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchBindingValue.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchBindingValue.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchBindingValue.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.line($runtime.scope(this), this._data.name, " = ", this._parent._name);
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return SwitchBindingValue.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchConditionArray = Helper.class({
		$name: "SwitchConditionArray",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._values = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			SwitchConditionArray.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var nv = true;
			for(var i = 0, __ks_822 = this._data.values.length; nv && i < __ks_822; ++i) {
				if(this._data.values[i].kind !== NodeKind.OmittedExpression) {
					nv = false;
				}
			}
			if(!nv) {
				this._name = this._scope.parent().acquireTempName();
				for(var __ks_822 = 0, __ks_823 = this._data.values.length, value; __ks_822 < __ks_823; ++__ks_822) {
					value = this._data.values[__ks_822];
					if(value.kind !== NodeKind.OmittedExpression) {
						if(value.kind === NodeKind.SwitchConditionRange) {
							value = new SwitchConditionRange(value, this);
						}
						else {
							value = new SwitchConditionValue(value, this);
						}
						value.analyse();
						this._values.push(value);
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionArray.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_824 = 0, __ks_825 = this._values.length, value; __ks_824 < __ks_825; ++__ks_824) {
				value = this._values[__ks_824];
				value.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchConditionArray.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_826 = 0, __ks_827 = this._values.length, value; __ks_826 < __ks_827; ++__ks_826) {
				value = this._values[__ks_826];
				value.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchConditionArray.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this.module().flag("Type");
			fragments.code("(", $runtime.typeof("Array", this), "(", name, ")");
			var mm = $switch.length(this._data.values);
			if(mm.min === mm.max) {
				if(mm.min !== Infinity) {
					fragments.code(" && ", name, ".length === ", mm.min);
				}
			}
			else {
				fragments.code(" && ", name, ".length >= ", mm.min);
				if(mm.max !== Infinity) {
					fragments.code(" && ", name, ".length <= ", mm.max);
				}
			}
			if(KSType.isValue(this._name)) {
				fragments.code(" && ", this._name, "(", name, ")");
			}
			fragments.code(")");
			if(KSType.isValue(this._name)) {
				this._scope.parent().releaseTempName(this._name);
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionArray.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._values.length > 0) {
				var line = fragments.newLine();
				line.code($runtime.scope(this), this._name, " = ([");
				for(var i = 0, __ks_828 = this._data.values.length, value; i < __ks_828; ++i) {
					value = this._data.values[i];
					if(i) {
						line.code(", ");
					}
					if(value.kind === NodeKind.OmittedExpression) {
						if(value.spread) {
							line.code("...");
						}
					}
					else {
						line.code("__ks_", i);
					}
				}
				line.code("]) => ");
				var index = 0;
				for(var i = 0, __ks_828 = this._data.values.length, value; i < __ks_828; ++i) {
					value = this._data.values[i];
					if(value.kind !== NodeKind.OmittedExpression) {
						if(index) {
							line.code(" && ");
						}
						this._values[index].toBooleanFragments(line, "__ks_" + i);
						index++;
					}
				}
				line.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionArray.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchConditionRange = Helper.class({
		$name: "SwitchConditionRange",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._from = true;
			this._to = true;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			SwitchConditionRange.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(KSType.isValue(this._data.from)) {
				var __ks_829;
				this._left = $compile.expression(this._data.from, this);
			}
			else {
				this._left = $compile.expression(this._data.then, this);
				this._from = false;
			}
			if(KSType.isValue(this._data.to)) {
				this._right = $compile.expression(this._data.to, this);
			}
			else {
				this._right = $compile.expression(this._data.til, this);
				this._to = false;
			}
			this._left.analyse();
			this._right.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionRange.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			this._right.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchConditionRange.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
			this._right.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchConditionRange.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			fragments.code(name, this._from ? " >= " : ">").compile(this._left).code(" && ").code(name, this._to ? " <= " : "<").compile(this._right);
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionRange.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionRange.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchConditionType = Helper.class({
		$name: "SwitchConditionType",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionType.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var __ks_830;
			this._type = Type.fromAST(this._data.type, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchConditionType.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchConditionType.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			this._type.toTestFragments(fragments, new Literal(false, this, this._scope, name));
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionType.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionType.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchConditionValue = Helper.class({
		$name: "SwitchConditionValue",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_831;
			this._value = $compile.expression(this._data, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchConditionValue.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchConditionValue.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchConditionValue.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			fragments.code(name, " === ").compile(this._value);
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchConditionValue.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchConditionValue.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SwitchFilter = Helper.class({
		$name: "SwitchFilter",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._bindings = [];
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			SwitchFilter.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(KSType.isValue(this._data.filter)) {
				if(this._data.bindings.length > 0) {
					this._name = this._scope.parent().acquireTempName();
					for(var __ks_832 = 0, __ks_833 = this._data.bindings.length, binding; __ks_832 < __ks_833; ++__ks_832) {
						binding = this._data.bindings[__ks_832];
						this._bindings.push(binding = $compile.expression(binding, this));
						binding.analyse();
					}
				}
				this._filter = $compile.expression(this._data.filter, this);
				this._filter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SwitchFilter.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(KSType.isValue(this._filter)) {
				for(var __ks_834 = 0, __ks_835 = this._bindings.length, binding; __ks_834 < __ks_835; ++__ks_834) {
					binding = this._bindings[__ks_834];
					binding.prepare();
				}
				this._filter.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SwitchFilter.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(KSType.isValue(this._filter)) {
				for(var __ks_836 = 0, __ks_837 = this._bindings.length, binding; __ks_836 < __ks_837; ++__ks_836) {
					binding = this._bindings[__ks_836];
					binding.translate();
				}
				this._filter.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return SwitchFilter.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_bindingScope_0: function() {
			return this._scope;
		},
		bindingScope: function() {
			if(arguments.length === 0) {
				return SwitchFilter.prototype.__ks_func_bindingScope_0.apply(this);
			}
			return AbstractNode.prototype.bindingScope.apply(this, arguments);
		},
		__ks_func_toBooleanFragments_0: function(fragments, nf) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(nf === void 0 || nf === null) {
				throw new TypeError("'nf' is not nullable");
			}
			var mm;
			for(var __ks_838 = 0, __ks_839 = this._data.bindings.length, binding; __ks_838 < __ks_839; ++__ks_838) {
				binding = this._data.bindings[__ks_838];
				if(binding.kind === NodeKind.ArrayBinding) {
					this.module().flag("Type");
					if(nf) {
						fragments.code(" && ");
					}
					else {
						nf = true;
					}
					fragments.code($runtime.typeof("Array", this), "(", this._parent._name, ")");
					mm = $switch.length(binding.elements);
					if(mm.min === mm.max) {
						if(mm.min !== Infinity) {
							fragments.code(" && ", this._parent._name, ".length === ", mm.min);
						}
					}
					else {
						fragments.code(" && ", this._parent._name, ".length >= ", mm.min);
						if(mm.max !== Infinity) {
							fragments.code(" && ", this._parent._name, ".length <= ", mm.max);
						}
					}
				}
			}
			if(KSType.isValue(this._name)) {
				if(nf) {
					fragments.code(" && ");
				}
				fragments.code(this._name, "(", this._parent._name, ")");
				this._scope.parent().releaseTempName(this._name);
			}
			else if(KSType.isValue(this._filter)) {
				if(nf) {
					fragments.code(" && ");
				}
				fragments.compile(this._filter);
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SwitchFilter.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBooleanFragments) {
				return AbstractNode.prototype.toBooleanFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(KSType.isValue(this._name)) {
				var line = fragments.newLine();
				line.code($runtime.scope(this), this._name, " = (");
				for(var i = 0, __ks_840 = this._bindings.length, binding; i < __ks_840; ++i) {
					binding = this._bindings[i];
					if(i) {
						line.code(", ");
					}
					line.compile(binding);
				}
				line.code(") => ").compile(this._filter);
				line.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 1) {
				return SwitchFilter.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toStatementFragments) {
				return AbstractNode.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ThrowStatement = Helper.class({
		$name: "ThrowStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._function = null;
			this._inSource = true;
			this._value = null;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			ThrowStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			var __ks_841;
			do {
				if(KSType.is(parent, FunctionExpression) || KSType.is(parent, LambdaExpression) || KSType.is(parent, FunctionDeclarator) || KSType.is(parent, ClassMethodDeclaration) || KSType.is(parent, ImplementClassMethodDeclaration) || KSType.is(parent, ImplementNamespaceFunctionDeclaration)) {
					this._function = parent;
					this._inSource = false;
					break;
				}
				else if(KSType.is(parent, ClassConstructorDeclaration) || KSType.is(parent, ClassDestructorDeclaration)) {
					this._inSource = false;
					break;
				}
			}
			while(KSType.isValue(__ks_841 = parent.parent()) ? (parent = __ks_841, true) : false)
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				ThrowStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			var __ks_842;
			this._value = $compile.expression(this._data.value, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
			var type, __ks_843;
			if(KSType.isValue(__ks_843 = this._value.type().discardReference()) ? (type = __ks_843, false) : true) {
				TypeException.throwRequireClass(this);
			}
			else if(type.isNamed() && KSType.is(type.type(), ClassType)) {
				Exception.validateReportedError(type, this);
			}
			else if(!type.isAny()) {
				TypeException.throwRequireClass(this);
			}
			else if(this._inSource && !this.module().isBinary()) {
				SyntaxException.throwUnreportedError(this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExit_0: function() {
			return true;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ThrowStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isValue(this._function) ? this._function.type().isAsync() : false) {
				fragments.newLine().code("return __ks_cb(").compile(this._value).code(")").done();
			}
			else {
				fragments.newLine().code("throw ").compile(this._value).done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return ThrowStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var TryState = {
		Body: 0,
		Catch: 1,
		Finally: 2
	};
	var TryStatement = Helper.class({
		$name: "TryStatement",
		$extends: Statement,
		__ks_init_1: function() {
			this._await = false;
			this._catchClauses = [];
			this._exit = false;
			this._hasCatch = false;
			this._hasFinally = false;
			this._statements = [];
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			TryStatement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var scope;
			if(KSType.isValue(this._data.catchClauses)) {
				var variable, body, type;
				for(var __ks_844 = 0, __ks_845 = this._data.catchClauses.length, clause; __ks_844 < __ks_845; ++__ks_844) {
					clause = this._data.catchClauses[__ks_844];
					var __ks_846;
					if(KSType.isValue(__ks_846 = this._scope.getVariable(clause.type.name)) ? (variable = __ks_846, false) : true) {
						ReferenceException.throwNotDefined(clause.type.name, this);
					}
					if(KSType.isValue(clause.binding)) {
						scope = new Scope(this._scope);
						scope.define(clause.binding.name, false, this);
					}
					else {
						scope = this._scope;
					}
					body = $compile.expression(clause.body, this, scope);
					body.analyse();
					type = $compile.expression(clause.type, this, scope);
					type.analyse();
					this._catchClauses.push({
						body: body,
						type: type
					});
				}
			}
			if(KSType.isValue(this._data.catchClause)) {
				if(KSType.isValue(this._data.catchClause.binding)) {
					scope = new Scope(this._scope);
					scope.define(this._data.catchClause.binding.name, false, this);
				}
				else {
					scope = this._scope;
				}
				this._catchClause = $compile.expression(this._data.catchClause.body, this, scope);
				this._catchClause.analyse();
			}
			var __ks_844 = $ast.body(this._data.body);
			for(var __ks_845 = 0, __ks_846 = __ks_844.length, statement; __ks_845 < __ks_846; ++__ks_845) {
				statement = __ks_844[__ks_845];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
				if(statement.isAwait()) {
					this._await = true;
				}
			}
			if(KSType.isValue(this._data.finalizer)) {
				this._finalizer = $compile.expression(this._data.finalizer, this);
				this._finalizer.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var exit = false;
			for(var __ks_847 = 0, __ks_848 = this._statements.length, statement; __ks_847 < __ks_848; ++__ks_847) {
				statement = this._statements[__ks_847];
				statement.prepare();
				if(exit) {
					SyntaxException.throwDeadCode(statement);
				}
				else {
					exit = statement.isExit();
				}
			}
			this._hasCatch = this._catchClauses.length !== 0;
			for(var __ks_847 = 0, __ks_848 = this._catchClauses.length, clause; __ks_847 < __ks_848; ++__ks_847) {
				clause = this._catchClauses[__ks_847];
				clause.body.prepare();
				clause.type.prepare();
				exit = exit && clause.body.isExit();
			}
			if(KSType.isValue(this._catchClause)) {
				this._catchClause.prepare();
				this._hasCatch = true;
				this._exit = exit && this._catchClause.isExit();
			}
			if(KSType.isValue(this._finalizer)) {
				this._finalizer.prepare();
				this._hasFinally = true;
				if(this._finalizer.isExit()) {
					this._exit = true;
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_849 = 0, __ks_850 = this._statements.length, statement; __ks_849 < __ks_850; ++__ks_849) {
				statement = this._statements[__ks_849];
				statement.translate();
			}
			for(var __ks_849 = 0, __ks_850 = this._catchClauses.length, clause; __ks_849 < __ks_850; ++__ks_849) {
				clause = this._catchClauses[__ks_849];
				clause.body.translate();
				clause.type.translate();
			}
			if(KSType.isValue(this._catchClause)) {
				this._catchClause.translate();
			}
			if(KSType.isValue(this._finalizer)) {
				this._finalizer.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getErrorVarname_0: function() {
			if((this._catchClauses.length === 0) && (KSType.isValue(this._data.catchClause) && KSType.isValue(this._data.catchClause.binding))) {
				return this._data.catchClause.binding.name;
			}
			else {
				return this._scope.acquireTempName();
			}
		},
		getErrorVarname: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_getErrorVarname_0.apply(this);
			}
			else if(Statement.prototype.getErrorVarname) {
				return Statement.prototype.getErrorVarname.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			if(this._catchClauses.length > 0) {
				for(var __ks_851 = 0, __ks_852 = this._catchClauses.length, clause; __ks_851 < __ks_852; ++__ks_851) {
					clause = this._catchClauses[__ks_851];
					if(error.matchInheritanceOf(clause.type.type())) {
						return true;
					}
				}
				return false;
			}
			else {
				return true;
			}
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return TryStatement.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Statement.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			return this._exit;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return TryStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_isReturning_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			for(var __ks_853 = 0, __ks_854 = this._statements.length, statement; __ks_853 < __ks_854; ++__ks_853) {
				statement = this._statements[__ks_853];
				if(!statement.isReturning(type)) {
					return false;
				}
			}
			return true;
		},
		isReturning: function() {
			if(arguments.length === 1) {
				return TryStatement.prototype.__ks_func_isReturning_0.apply(this, arguments);
			}
			return Statement.prototype.isReturning.apply(this, arguments);
		},
		__ks_func_toAwaitStatementFragments_0: function(fragments, statements) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			if(statements.length !== 0) {
				this._continueVarname = this._scope.acquireTempName();
				var line = fragments.newLine().code($runtime.scope(this), this._continueVarname, " = () =>");
				var block = line.newBlock();
				var index = -1;
				var item;
				for(var i = 0, __ks_855 = statements.length, statement; index === -1 && i < __ks_855; ++i) {
					statement = statements[i];
					var __ks_856;
					if(KSType.isValue(__ks_856 = statement.toFragments(block, Mode.None)) ? (item = __ks_856, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(statements.slice(index + 1));
				}
				block.done();
				line.done();
			}
			if(KSType.isValue(this._finalizer)) {
				this._state = TryState.Finally;
				this._finallyVarname = this._scope.acquireTempName();
				var line = fragments.newLine().code($runtime.scope(this), this._finallyVarname, " = () =>");
				line.newBlock().compile(this._finalizer).done();
				line.done();
			}
			if((this._catchClauses.length !== 0) || KSType.isValue(this._catchClause)) {
				this._state = TryState.Catch;
				this._catchVarname = this._scope.acquireTempName();
				var error = this.getErrorVarname();
				var line = fragments.newLine().code($runtime.scope(this), this._catchVarname, " = (" + error + ") =>");
				var block = line.newBlock();
				this.toCatchFragments(block, error);
				this._scope.releaseTempName(error);
				block.done();
				line.done();
			}
			this._state = TryState.Body;
			var ctrl = fragments.newControl().code("try").step();
			var index = -1;
			var item;
			for(var i = 0, __ks_855 = this._statements.length, statement; index === -1 && i < __ks_855; ++i) {
				statement = this._statements[i];
				if(KSType.isValue(__ks_856 = statement.toFragments(ctrl, Mode.None)) ? (item = __ks_856, true) : false) {
					index = i;
				}
			}
			if(index !== -1) {
				item(this._statements.slice(index + 1));
			}
			ctrl.step().code("catch(__ks_e)").step();
			if(KSType.isValue(this._catchVarname)) {
				ctrl.line(this._catchVarname + "(__ks_e)");
			}
			else if(KSType.isValue(this._finallyVarname)) {
				ctrl.line(this._finallyVarname + "()");
			}
			else if(KSType.isValue(this._continueVarname)) {
				ctrl.line(this._continueVarname + "()");
			}
			ctrl.done();
		},
		toAwaitStatementFragments: function() {
			if(arguments.length === 2) {
				return TryStatement.prototype.__ks_func_toAwaitStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitStatementFragments) {
				return Statement.prototype.toAwaitStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAwaitExpressionFragments_0: function(fragments, parameters, statements) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			fragments.code("(__ks_e");
			for(var __ks_857 = 0, __ks_858 = parameters.length, parameter; __ks_857 < __ks_858; ++__ks_857) {
				parameter = parameters[__ks_857];
				fragments.code($comma).compile(parameter);
			}
			fragments.code(") =>");
			var block = fragments.newBlock();
			var ctrl = block.newControl().code("if(__ks_e)").step();
			if(this._state === TryState.Body) {
				if(KSType.isValue(this._catchVarname)) {
					ctrl.line(this._catchVarname + "(__ks_e)");
				}
				else if(KSType.isValue(this._finallyVarname)) {
					ctrl.line(this._finallyVarname + "()");
				}
				else if(KSType.isValue(this._continueVarname)) {
					ctrl.line(this._continueVarname + "()");
				}
			}
			else if(this._state === TryState.Catch) {
				if(KSType.isValue(this._finallyVarname)) {
					ctrl.line(this._finallyVarname + "()");
				}
				else if(KSType.isValue(this._continueVarname)) {
					ctrl.line(this._continueVarname + "()");
				}
			}
			else if(this._state === TryState.Finally) {
				if(KSType.isValue(this._continueVarname)) {
					ctrl.line(this._continueVarname + "()");
				}
			}
			ctrl.step().code("else").step();
			var statement = statements[statements.length - 1];
			if(this._state === TryState.Body) {
				if((statements.length === 1) && !statement.hasExceptions()) {
					ctrl.compile(statement);
					if(!KSType.is(statement, ReturnStatement)) {
						if(KSType.isValue(this._finallyVarname)) {
							ctrl.line(this._finallyVarname + "()");
						}
						else if(KSType.isValue(this._continueVarname)) {
							ctrl.line(this._continueVarname + "()");
						}
					}
				}
				else {
					var returnOutside = KSType.is(statement, ReturnStatement) && statement.hasExceptions();
					if(returnOutside) {
						statement.toDeclareReusableFragments(ctrl);
					}
					var ctrl2 = ctrl.newControl().code("try").step();
					var index = -1;
					var item;
					for(var i = 0, __ks_857 = statements.length - 1; index === -1 && i < __ks_857; ++i) {
						if(KSType.isValue(__ks_858 = statements[i].toFragments(ctrl2, Mode.None)) ? (item = __ks_858, true) : false) {
							index = i;
						}
					}
					if(index !== -1) {
						item(statements.slice(index + 1));
					}
					else {
						if(returnOutside) {
							statement.toReusableFragments(ctrl2);
						}
						else {
							if(KSType.isValue(__ks_857 = statement.toFragments(ctrl2, Mode.None)) ? (item = __ks_857, true) : false) {
								item([]);
							}
						}
					}
					ctrl2.step().code("catch(__ks_e)").step();
					if(KSType.isValue(this._catchVarname)) {
						ctrl2.line("return " + this._catchVarname + "(__ks_e)");
					}
					ctrl2.done();
					if(!KSType.isValue(item)) {
						if(returnOutside) {
							ctrl.compile(statement);
						}
						else if(!KSType.is(statement, ReturnStatement)) {
							if(KSType.isValue(this._finallyVarname)) {
								ctrl.line(this._finallyVarname + "()");
							}
							else if(KSType.isValue(this._continueVarname)) {
								ctrl.line(this._continueVarname + "()");
							}
						}
					}
				}
			}
			else {
				var index = -1;
				var item;
				for(var i = 0, __ks_857 = statements.length; index === -1 && i < __ks_857; ++i) {
					if(KSType.isValue(__ks_858 = statements[i].toFragments(ctrl, Mode.None)) ? (item = __ks_858, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(statements.slice(index + 1));
				}
				if(this._state === TryState.Catch) {
					if(KSType.isValue(this._finallyVarname)) {
						ctrl.line(this._finallyVarname + "()");
					}
					else if(KSType.isValue(this._continueVarname)) {
						ctrl.line(this._continueVarname + "()");
					}
				}
				else if(this._state === TryState.Finally) {
					if(KSType.isValue(this._continueVarname)) {
						ctrl.line(this._continueVarname + "()");
					}
				}
			}
			ctrl.done();
			block.done();
			fragments.code(")").done();
		},
		toAwaitExpressionFragments: function() {
			if(arguments.length === 3) {
				return TryStatement.prototype.__ks_func_toAwaitExpressionFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitExpressionFragments) {
				return Statement.prototype.toAwaitExpressionFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toCatchFragments_0: function(fragments, error) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			var async = false;
			if(this._catchClauses.length !== 0) {
				this.module().flag("Type");
				var ifs = fragments.newControl();
				for(var i = 0, __ks_859 = this._data.catchClauses.length, clause; i < __ks_859; ++i) {
					clause = this._data.catchClauses[i];
					if(i) {
						ifs.step().code("else ");
					}
					ifs.code("if(", $runtime.type(this), ".is(", error, ", ").compile(this._catchClauses[i].type).code("))").step();
					if(KSType.isValue(clause.binding)) {
						ifs.line($runtime.scope(this), clause.binding.name, " = ", error);
					}
					ifs.compile(this._catchClauses[i].body);
					if(!this._catchClauses[i].body.isAwait() && KSType.isValue(this._continueVarname)) {
						ifs.line(this._continueVarname + "()");
					}
				}
				if(KSType.isValue(this._catchClause)) {
					ifs.step().code("else").step();
					if(KSType.isValue(this._data.catchClause.binding)) {
						ifs.line($runtime.scope(this), this._data.catchClause.binding.name, " = ", error);
					}
					ifs.compile(this._catchClause);
					if(!this._catchClause.isAwait() && KSType.isValue(this._continueVarname)) {
						ifs.line(this._continueVarname + "()");
					}
				}
				else if(KSType.isValue(this._continueVarname)) {
					ifs.step().code("else").step();
					ifs.line(this._continueVarname + "()");
				}
				ifs.done();
			}
			else if(KSType.isValue(this._catchClause)) {
				fragments.compile(this._catchClause);
				if(!this._catchClause.isAwait()) {
					if(KSType.isValue(this._finallyVarname)) {
						fragments.line(this._finallyVarname + "()");
					}
					else if(KSType.isValue(this._continueVarname)) {
						fragments.line(this._continueVarname + "()");
					}
				}
			}
			else if(KSType.isValue(this._finallyVarname)) {
				fragments.line(this._finallyVarname + "()");
			}
			else if(KSType.isValue(this._continueVarname)) {
				fragments.line(this._continueVarname + "()");
			}
		},
		toCatchFragments: function() {
			if(arguments.length === 2) {
				return TryStatement.prototype.__ks_func_toCatchFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toCatchFragments) {
				return Statement.prototype.toCatchFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFinallyFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code("finally").step().compile(this._finalizer);
		},
		toFinallyFragments: function() {
			if(arguments.length === 1) {
				return TryStatement.prototype.__ks_func_toFinallyFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toFinallyFragments) {
				return Statement.prototype.toFinallyFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._await) {
				return Helper.vcurry(this.toAwaitStatementFragments, this, fragments);
			}
			else {
				var ctrl = fragments.newControl().code("try").step();
				for(var __ks_860 = 0, __ks_861 = this._statements.length, statement; __ks_860 < __ks_861; ++__ks_860) {
					statement = this._statements[__ks_860];
					ctrl.compile(statement, Mode.None);
				}
				if(KSType.isValue(this._finallyVarname)) {
					ctrl.line(this._finallyVarname + "()");
				}
				ctrl.step();
				var error = this.getErrorVarname();
				if(this._hasCatch) {
					ctrl.code("catch(" + error + ")").step();
					this.toCatchFragments(ctrl, error);
					if(this._hasFinally) {
						ctrl.step();
						this.toFinallyFragments(ctrl);
					}
				}
				else if(this._hasFinally) {
					this.toFinallyFragments(ctrl);
				}
				else {
					ctrl.code("catch(" + error + ")").step();
				}
				this._scope.releaseTempName(error);
				ctrl.done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return TryStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var TypeAliasDeclaration = Helper.class({
		$name: "TypeAliasDeclaration",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			var __ks_862;
			this._variable = this._scope.define(this._name, true, new AliasType(this._scope, Type.fromAST(this._data.type, this)), this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			recipient.export(this._name, this._variable);
		},
		export: function() {
			if(arguments.length === 1) {
				return TypeAliasDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return TypeAliasDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return TypeAliasDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnlessStatement = Helper.class({
		$name: "UnlessStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_863;
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			var __ks_864;
			this._whenFalse = $compile.expression($ast.block(this._data.whenFalse), this);
			this._whenFalse.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UnlessStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._whenFalse.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnlessStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenFalse.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return UnlessStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("if(!").wrapBoolean(this._condition).code(")").step().compile(this._whenFalse).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return UnlessStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UntilStatement = Helper.class({
		$name: "UntilStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_865;
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._body = $compile.expression(this._data.body, this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UntilStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._body.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UntilStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return UntilStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("while(!(").compileBoolean(this._condition).code("))").step().compile(this._body).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return UntilStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var VariableDeclaration = Helper.class({
		$name: "VariableDeclaration",
		$extends: Statement,
		__ks_init_1: function() {
			this._declarators = [];
			this._destructuring = false;
			this._function = null;
			this._hasInit = false;
			this._toDeclareAll = true;
		},
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
			VariableDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			Statement.prototype.__ks_cons.call(this, [data, parent]);
			while(KSType.isValue(parent) && !(KSType.is(parent, FunctionExpression) || KSType.is(parent, LambdaExpression) || KSType.is(parent, FunctionDeclarator) || KSType.is(parent, ClassMethodDeclaration) || KSType.is(parent, ImplementClassMethodDeclaration) || KSType.is(parent, ImplementNamespaceFunctionDeclaration))) {
				if(KSType.is(parent, TryStatement)) {
					this._try = parent;
				}
				var __ks_866;
				parent = parent.parent();
			}
			if(KSType.isValue(parent)) {
				this._function = parent;
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				VariableDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._immutable = !this._data.rebindable;
			this._autotype = this._immutable || this._data.autotype;
			this._await = this._data.await;
			if(this._await && !KSType.isValue(this._function) && !this.module().isBinary()) {
				SyntaxException.throwInvalidAwait(this);
			}
			if(KSType.isValue(this._data.init)) {
				this._hasInit = true;
				this._init = $compile.expression(this._data.init, this);
				this._init.analyse();
			}
			var declarator;
			for(var __ks_867 = 0, __ks_868 = this._data.variables.length, data; __ks_867 < __ks_868; ++__ks_867) {
				data = this._data.variables[__ks_867];
				var __ks_869 = data.name.kind;
				if(__ks_869 === NodeKind.ArrayBinding) {
					declarator = new VariableBindingDeclarator(data, this);
				}
				else if(__ks_869 === NodeKind.Identifier) {
					declarator = new VariableIdentifierDeclarator(data, this);
				}
				else if(__ks_869 === NodeKind.ObjectBinding) {
					declarator = new VariableBindingDeclarator(data, this);
				}
				else {
					throw new NotImplementedException(this);
				}
				declarator.analyse();
				if(this._toDeclareAll && declarator.isAlreadyDeclared()) {
					this._toDeclareAll = false;
				}
				this._declarators.push(declarator);
			}
			if(this._hasInit && (this._declarators.length === 1)) {
				if(KSType.is(this._declarators[0], VariableIdentifierDeclarator)) {
					this.reference(this._declarators[0].name());
				}
				else {
					this._destructuring = true;
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._hasInit) {
				this._init.prepare();
				this._init.acquireReusable(this._destructuring && (this._options.format.destructuring === "es5"));
				this._init.releaseReusable();
				if(this._autotype) {
					this._declarators[0].type(this._init.type());
				}
			}
			for(var __ks_870 = 0, __ks_871 = this._declarators.length, declarator; __ks_870 < __ks_871; ++__ks_870) {
				declarator = this._declarators[__ks_870];
				declarator.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._hasInit) {
				this._init.translate();
			}
			for(var __ks_872 = 0, __ks_873 = this._declarators.length, declarator; __ks_872 < __ks_873; ++__ks_872) {
				declarator = this._declarators[__ks_872];
				declarator.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			for(var __ks_874 = 0, __ks_875 = this._declarators.length, declarator; __ks_874 < __ks_875; ++__ks_874) {
				declarator = this._declarators[__ks_874];
				declarator.export(recipient);
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return VariableDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			return Statement.prototype.export.apply(this, arguments);
		},
		__ks_func_hasInit_0: function() {
			return this._hasInit;
		},
		hasInit: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_hasInit_0.apply(this);
			}
			else if(Statement.prototype.hasInit) {
				return Statement.prototype.hasInit.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_init_0: function() {
			return this._init;
		},
		init: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_init_0.apply(this);
			}
			else if(Statement.prototype.init) {
				return Statement.prototype.init.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			for(var __ks_876 = 0, __ks_877 = this._declarators.length, declarator; __ks_876 < __ks_877; ++__ks_876) {
				declarator = this._declarators[__ks_876];
				if(declarator.isDeclararingVariable(name)) {
					return true;
				}
			}
			return false;
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return VariableDeclaration.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(Statement.prototype.isDeclararingVariable) {
				return Statement.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isImmutable_0: function() {
			return this._immutable;
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return VariableDeclaration.prototype.__ks_func_isImmutable_0.apply(this);
			}
			else if(Statement.prototype.isImmutable) {
				return Statement.prototype.isImmutable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAwaitExpressionFragments_0: function(fragments, parameters, statements) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(parameters === void 0 || parameters === null) {
				throw new TypeError("'parameters' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			fragments.code("(__ks_e");
			for(var __ks_878 = 0, __ks_879 = parameters.length, parameter; __ks_878 < __ks_879; ++__ks_878) {
				parameter = parameters[__ks_878];
				fragments.code($comma).compile(parameter);
			}
			fragments.code(") =>");
			var block = fragments.newBlock();
			for(var __ks_878 = 0, __ks_879 = statements.length, statement; __ks_878 < __ks_879; ++__ks_878) {
				statement = statements[__ks_878];
				block.compile(statement, Mode.None);
			}
			block.done();
			fragments.code(")").done();
		},
		toAwaitExpressionFragments: function() {
			if(arguments.length === 3) {
				return VariableDeclaration.prototype.__ks_func_toAwaitExpressionFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toAwaitExpressionFragments) {
				return Statement.prototype.toAwaitExpressionFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._await) {
				var line = fragments.newLine();
				this._init.toFragments(line, Mode.Async);
				if(KSType.isValue(this._try)) {
					return Helper.vcurry(this._try.toAwaitExpressionFragments, this._try, line, this._declarators);
				}
				else if(KSType.isValue(this._function) ? this._function.type().isAsync() : false) {
					return Helper.vcurry(this._function.toAwaitExpressionFragments, this._function, line, this._declarators);
				}
				else {
					return Helper.vcurry(this.toAwaitExpressionFragments, this, line, this._declarators);
				}
			}
			else {
				if(this._hasInit) {
					var declarator = this._declarators[0];
					var line = fragments.newLine();
					if(this._toDeclareAll) {
						if(this._options.format.variables === "es5") {
							line.code("var ");
						}
						else if(this._data.rebindable) {
							line.code("let ");
						}
						else {
							line.code("const ");
						}
					}
					if(this._destructuring && (this._options.format.destructuring === "es5")) {
						declarator.toFlatFragments(line, this._init);
					}
					else {
						line.compile(declarator).code($equals).compile(this._init);
					}
					line.done();
				}
				else if(this._toDeclareAll) {
					var line = fragments.newLine();
					if(this._options.format.variables === "es5") {
						line.code("var ");
					}
					else if(this._data.rebindable) {
						line.code("let ");
					}
					else {
						line.code("const ");
					}
					for(var index = 0, __ks_880 = this._declarators.length, declarator; index < __ks_880; ++index) {
						declarator = this._declarators[index];
						if(index !== 0) {
							line.code($comma);
						}
						line.compile(declarator);
					}
					line.done();
				}
				else {
					var toDeclare = Helper.mapArray(this._declarators, function(declarator) {
						return declarator;
					}, function(declarator) {
						return !declarator.isAlreadyDeclared();
					});
					if(toDeclare.length !== 0) {
						var line = fragments.newLine();
						if(this._options.format.variables === "es5") {
							line.code("var ");
						}
						else {
							line.code("let ");
						}
						for(var index = 0, __ks_880 = toDeclare.length, declarator; index < __ks_880; ++index) {
							declarator = toDeclare[index];
							if(index !== 0) {
								line.code($comma);
							}
							line.compile(declarator);
						}
						line.done();
					}
				}
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return VariableDeclaration.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var __ks_881 = 0, __ks_882 = this._declarators.length, declarator; __ks_881 < __ks_882; ++__ks_881) {
				declarator = this._declarators[__ks_881];
				declarator.walk(fn);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return VariableDeclaration.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Statement.prototype.walk) {
				return Statement.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var VariableBindingDeclarator = Helper.class({
		$name: "VariableBindingDeclarator",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_883;
			this._binding = $compile.expression(this._data.name, this);
			this._binding.flagAssignement();
			if(this._parent.isImmutable()) {
				this._binding.flagImmutable();
			}
			this._binding.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._binding.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._binding.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			this._binding.export(recipient);
		},
		export: function() {
			if(arguments.length === 1) {
				return VariableBindingDeclarator.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAlreadyDeclared_0: function() {
			return false;
		},
		isAlreadyDeclared: function() {
			if(arguments.length === 0) {
				return VariableBindingDeclarator.prototype.__ks_func_isAlreadyDeclared_0.apply(this);
			}
			else if(AbstractNode.prototype.isAlreadyDeclared) {
				return AbstractNode.prototype.isAlreadyDeclared.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._binding.isDeclararingVariable(name);
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return VariableBindingDeclarator.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.isDeclararingVariable) {
				return AbstractNode.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, init) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(init === void 0 || init === null) {
				throw new TypeError("'init' is not nullable");
			}
			this._binding.toFlatFragments(fragments, init);
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return VariableBindingDeclarator.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFlatFragments) {
				return AbstractNode.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._binding);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return VariableBindingDeclarator.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(!type.isAny()) {
				if(KSType.is(this._binding, ArrayBinding)) {
					if(!type.isArray()) {
						TypeException.throwInvalidBinding("Array", this);
					}
				}
				else if(KSType.is(this._binding, ObjectBinding)) {
					if(!type.isObject()) {
						TypeException.throwInvalidBinding("Object", this);
					}
				}
			}
		},
		type: function() {
			if(arguments.length === 1) {
				return VariableBindingDeclarator.prototype.__ks_func_type_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			this._binding.walk(fn);
		},
		walk: function() {
			if(arguments.length === 1) {
				return VariableBindingDeclarator.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.walk) {
				return AbstractNode.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var VariableIdentifierDeclarator = Helper.class({
		$name: "VariableIdentifierDeclarator",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._alreadyDeclared = false;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			VariableIdentifierDeclarator.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			if(this._scope.hasLocalVariable(this._name)) {
				SyntaxException.throwAlreadyDeclared(this._name, this);
			}
			if(this._options.format.variables === "es5") {
				this._scope.rename(this._name);
			}
			if(this._scope.hasDeclaredLocalVariable(this._name)) {
				this._alreadyDeclared = true;
			}
			var __ks_884, __ks_885;
			this._variable = this._scope.define(this._name, this._parent.isImmutable(), null, this);
			this._identifier = new IdentifierLiteral(this._data.name, this);
			this._identifier.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(KSType.isValue(this._data.type)) {
				this._variable.type(Type.fromAST(this._data.type, this));
			}
			this._identifier.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._identifier.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			recipient.export(this._name, this._variable);
		},
		export: function() {
			if(arguments.length === 1) {
				return VariableIdentifierDeclarator.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.export) {
				return AbstractNode.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAlreadyDeclared_0: function() {
			return this._alreadyDeclared;
		},
		isAlreadyDeclared: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_isAlreadyDeclared_0.apply(this);
			}
			else if(AbstractNode.prototype.isAlreadyDeclared) {
				return AbstractNode.prototype.isAlreadyDeclared.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return this._name === name;
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return VariableIdentifierDeclarator.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.isDeclararingVariable) {
				return AbstractNode.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._identifier);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return VariableIdentifierDeclarator.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return VariableIdentifierDeclarator.prototype.__ks_func_name_0.apply(this);
			}
			else if(AbstractNode.prototype.name) {
				return AbstractNode.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._variable.type(type);
		},
		type: function() {
			if(arguments.length === 1) {
				return VariableIdentifierDeclarator.prototype.__ks_func_type_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			fn(this._name, this._variable.type());
		},
		walk: function() {
			if(arguments.length === 1) {
				return VariableIdentifierDeclarator.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.walk) {
				return AbstractNode.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var WhileStatement = Helper.class({
		$name: "WhileStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_886;
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._body = $compile.expression(this._data.body, this);
			this._body.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._body.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._body.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return WhileStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("while(").compileBoolean(this._condition).code(")").step().compile(this._body).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return WhileStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Expression = Helper.class({
		$name: "Expression",
		$extends: AbstractNode,
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.acquireReusable) {
				return AbstractNode.prototype.acquireReusable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			else if(AbstractNode.prototype.releaseReusable) {
				return AbstractNode.prototype.releaseReusable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return true;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			else if(AbstractNode.prototype.hasExceptions) {
				return AbstractNode.prototype.hasExceptions.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAssignable_0: function() {
			return false;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isAssignable_0.apply(this);
			}
			else if(AbstractNode.prototype.isAssignable) {
				return AbstractNode.prototype.isAssignable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return false;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isAwait_0.apply(this);
			}
			else if(AbstractNode.prototype.isAwait) {
				return AbstractNode.prototype.isAwait.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwaiting_0: function() {
			return false;
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			else if(AbstractNode.prototype.isAwaiting) {
				return AbstractNode.prototype.isAwaiting.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isBooleanComputed_0: function() {
			return this.isComputed();
		},
		isBooleanComputed: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isBooleanComputed_0.apply(this);
			}
			else if(AbstractNode.prototype.isBooleanComputed) {
				return AbstractNode.prototype.isBooleanComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isCallable_0: function() {
			return false;
		},
		isCallable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isCallable_0.apply(this);
			}
			else if(AbstractNode.prototype.isCallable) {
				return AbstractNode.prototype.isCallable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComposite_0: function() {
			return true;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isComposite_0.apply(this);
			}
			else if(AbstractNode.prototype.isComposite) {
				return AbstractNode.prototype.isComposite.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isComputed_0.apply(this);
			}
			else if(AbstractNode.prototype.isComputed) {
				return AbstractNode.prototype.isComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isConditional_0: function() {
			return this.isNullable();
		},
		isConditional: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isConditional_0.apply(this);
			}
			else if(AbstractNode.prototype.isConditional) {
				return AbstractNode.prototype.isConditional.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isEntangled_0: function() {
			return true;
		},
		isEntangled: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isEntangled_0.apply(this);
			}
			else if(AbstractNode.prototype.isEntangled) {
				return AbstractNode.prototype.isEntangled.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(AbstractNode.prototype.isNullable) {
				return AbstractNode.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullableComputed_0: function() {
			return this.isComputed();
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			else if(AbstractNode.prototype.isNullableComputed) {
				return AbstractNode.prototype.isNullableComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reduceTypes_0: function() {
			return {};
		},
		reduceTypes: function() {
			if(arguments.length === 0) {
				return Expression.prototype.__ks_func_reduceTypes_0.apply(this);
			}
			else if(AbstractNode.prototype.reduceTypes) {
				return AbstractNode.prototype.reduceTypes.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_statement_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var expression = this;
			while(!KSType.is(expression._parent, Statement)) {
				expression = expression._parent;
			}
			return expression._parent;
		},
		statement: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_statement_0.apply(this, arguments);
			}
			return AbstractNode.prototype.statement.apply(this, arguments);
		},
		__ks_func_toBooleanFragments_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var fragments = arguments[++__ks_i];
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var __ks__;
			var mode = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Mode.None;
			return this.toFragments(fragments, mode);
		},
		toBooleanFragments: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Expression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			return this.toFragments(fragments, Mode.None);
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toNullableFragments) {
				return AbstractNode.prototype.toNullableFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			return this.toFragments(fragments, Mode.None);
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return Expression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toReusableFragments) {
				return AbstractNode.prototype.toReusableFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Literal = Helper.class({
		$name: "Literal",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(value, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			Expression.prototype.__ks_cons.call(this, [false, parent]);
			this._value = value;
		},
		__ks_cons_1: function(data, parent, scope, value) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
			this._value = value;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				Literal.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 4) {
				Literal.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComposite_0: function() {
			return false;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_isEntangled_0: function() {
			return false;
		},
		isEntangled: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_isEntangled_0.apply(this);
			}
			return Expression.prototype.isEntangled.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return Literal.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._data) {
				fragments.code(this._value, this._data);
			}
			else {
				fragments.code(this._value);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Literal.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_value_0: function() {
			return this._value;
		},
		value: function() {
			if(arguments.length === 0) {
				return Literal.prototype.__ks_func_value_0.apply(this);
			}
			else if(Expression.prototype.value) {
				return Expression.prototype.value.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var IdentifierLiteral = Helper.class({
		$name: "IdentifierLiteral",
		$extends: Literal,
		__ks_init_1: function() {
			this._assignenement = null;
			this._isMacro = false;
			this._isVariable = false;
		},
		__ks_init: function() {
			Literal.prototype.__ks_init.call(this);
			IdentifierLiteral.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			var __ks__;
			var scope = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : parent.scope();
			Literal.prototype.__ks_cons.call(this, [data, parent, scope, data.name]);
			var statement = parent.statement();
			while(parent !== statement) {
				if(KSType.is(parent, AssignmentOperatorExpression)) {
					this._assignenement = parent;
					break;
				}
				var __ks_887;
				parent = parent.parent();
			}
			if((this._assignenement === null) && KSType.is(statement, VariableDeclaration)) {
				this._assignenement = statement;
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				IdentifierLiteral.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			var __ks_888;
			if((this._assignenement !== null) && this._assignenement.isDeclararingVariable(this.name())) {
				ReferenceException.throwSelfDefinedVariable(this._value, this);
			}
			else if(KSType.isValue(__ks_888 = this._scope.getVariable(this._value)) ? (this._variable = __ks_888, true) : false) {
				this._isVariable = true;
			}
			else if($runtime.isDefined(this._value, this._parent)) {
				this._type = Type.Any;
			}
			else if(this._scope.hasMacro(this._value)) {
				this._isMacro = true;
			}
			else {
				ReferenceException.throwNotDefined(this._value, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_analyse_0.apply(this);
			}
			return Literal.prototype.analyse.apply(this, arguments);
		},
		__ks_func_prepare_0: function() {
			if(this._isVariable) {
				var __ks_889;
				this._type = this._variable.type();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_prepare_0.apply(this);
			}
			return Literal.prototype.prepare.apply(this, arguments);
		},
		__ks_func_isMacro_0: function() {
			return this._isMacro;
		},
		isMacro: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_isMacro_0.apply(this);
			}
			else if(Literal.prototype.isMacro) {
				return Literal.prototype.isMacro.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isRenamed_0: function() {
			return this._scope.isRenamedVariable(this._value);
		},
		isRenamed: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_isRenamed_0.apply(this);
			}
			else if(Literal.prototype.isRenamed) {
				return Literal.prototype.isRenamed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._value === name;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return IdentifierLiteral.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Literal.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_name_0: function() {
			return this._value;
		},
		name: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_name_0.apply(this);
			}
			else if(Literal.prototype.name) {
				return Literal.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this._scope.getRenamedVariable(this._value), this._data);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IdentifierLiteral.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Literal.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return IdentifierLiteral.prototype.__ks_func_type_0.apply(this);
			}
			else if(Literal.prototype.type) {
				return Literal.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			if(this._isVariable) {
				fn(this._value, this._type);
			}
			else {
				throw new NotSupportedException();
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return IdentifierLiteral.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Literal.prototype.walk) {
				return Literal.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var NumberLiteral = Helper.class({
		$name: "NumberLiteral",
		$extends: Literal,
		__ks_init: function() {
			Literal.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			var __ks__;
			var scope = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : parent.scope();
			Literal.prototype.__ks_cons.call(this, [data, parent, scope, data.value]);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				NumberLiteral.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return NumberLiteral.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			return Literal.prototype.isUsingVariable.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return NumberLiteral.prototype.__ks_func_type_0.apply(this);
			}
			else if(Literal.prototype.type) {
				return Literal.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var StringLiteral = Helper.class({
		$name: "StringLiteral",
		$extends: Literal,
		__ks_init: function() {
			Literal.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			var __ks__;
			var scope = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : parent.scope();
			Literal.prototype.__ks_cons.call(this, [data, parent, scope, $quote(data.value)]);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				StringLiteral.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_type_0: function() {
			return this._scope.reference("String");
		},
		type: function() {
			if(arguments.length === 0) {
				return StringLiteral.prototype.__ks_func_type_0.apply(this);
			}
			else if(Literal.prototype.type) {
				return Literal.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayExpression = Helper.class({
		$name: "ArrayExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._flatten = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var es5 = this._options.format.spreads === "es5";
			this._values = [];
			for(var __ks_890 = 0, __ks_891 = this._data.values.length, value; __ks_890 < __ks_891; ++__ks_890) {
				value = this._data.values[__ks_890];
				this._values.push(value = $compile.expression(value, this));
				value.analyse();
				if(es5 && KSType.is(value, UnaryOperatorSpread)) {
					this._flatten = true;
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_892 = 0, __ks_893 = this._values.length, value; __ks_892 < __ks_893; ++__ks_892) {
				value = this._values[__ks_892];
				value.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_894 = 0, __ks_895 = this._values.length, value; __ks_894 < __ks_895; ++__ks_894) {
				value = this._values[__ks_894];
				value.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._flatten) {
				CallExpression.toFlattenArgumentsFragments(fragments, this._values);
			}
			else {
				fragments.code("[");
				for(var index = 0, __ks_896 = this._values.length, value; index < __ks_896; ++index) {
					value = this._values[index];
					if(index !== 0) {
						fragments.code($comma);
					}
					fragments.compile(value);
				}
				fragments.code("]");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Array");
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayRange = Helper.class({
		$name: "ArrayRange",
		$extends: Expression,
		__ks_init_1: function() {
			this._by = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayRange.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_897;
			this._from = $compile.expression(KSType.isValue(this._data.from) ? this._data.from : this._data.then, this);
			this._from.analyse();
			this._to = $compile.expression(KSType.isValue(this._data.to) ? this._data.to : this._data.til, this);
			this._to.analyse();
			if(KSType.isValue(this._data.by)) {
				this._by = $compile.expression(this._data.by, this);
				this._by.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var __ks_898, __ks_899;
			this._type = Type.arrayOf(this._scope.reference("Number"), this._scope);
			this._from.prepare();
			this._to.prepare();
			if(KSType.isValue(this._by)) {
				this._by.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._from.translate();
			this._to.translate();
			if(this._by !== null) {
				this._by.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			fragments.code($runtime.helper(this), ".newArrayRange(").compile(this._from).code($comma).compile(this._to);
			if(this._by === null) {
				fragments.code(", 1");
			}
			else {
				fragments.code(", ").compile(this._by);
			}
			fragments.code($comma, KSType.isValue(this._data.from), $comma, KSType.isValue(this._data.to), ")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayRange.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayRange.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	function $return(data) {
		if(data === void 0) {
			data = null;
		}
		return {
			kind: NodeKind.ReturnStatement,
			value: data
		};
	}
	var ArrayComprehensionForFrom = Helper.class({
		$name: "ArrayComprehensionForFrom",
		$extends: Expression,
		__ks_init_1: function() {
			this._by = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayComprehensionForFrom.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, parent.newScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ArrayComprehensionForFrom.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._scope.define(this._data.loop.variable.name, false, this._scope.reference("Number"), this);
			var __ks_900;
			this._variable = $compile.expression(this._data.loop.variable, this);
			this._variable.analyse();
			this._from = $compile.expression(this._data.loop.from, this);
			this._from.analyse();
			this._to = $compile.expression(KSType.isValue(this._data.loop.to) ? this._data.loop.to : this._data.loop.til, this);
			this._to.analyse();
			if(KSType.isValue(this._data.loop.by)) {
				this._by = $compile.expression(this._data.loop.by, this);
				this._by.analyse();
			}
			var __ks_901;
			this._body = $compile.statement($return(this._data.body), this);
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				var __ks_902;
				this._when = $compile.statement($return(this._data.loop.when), this);
				this._when.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._variable.prepare();
			this._from.prepare();
			this._to.prepare();
			if(KSType.isValue(this._by)) {
				this._by.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._variable.translate();
			this._from.translate();
			this._to.translate();
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapRange(").compile(this._from).code($comma).compile(this._to);
			if(this._by === null) {
				fragments.code(", 1");
			}
			else {
				fragments.code($comma).compile(this._by);
			}
			fragments.code($comma, KSType.isValue(this._data.loop.from), $comma, KSType.isValue(this._data.loop.to), $comma);
			fragments.code(surround.beforeParameters).compile(this._variable).code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(this._variable).code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForFrom.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Array");
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForFrom.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayComprehensionForIn = Helper.class({
		$name: "ArrayComprehensionForIn",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, parent.newScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ArrayComprehensionForIn.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			var __ks_903;
			this._expression = $compile.expression(this._data.loop.expression, this);
			this._expression.analyse();
			if(KSType.isValue(this._data.loop.value)) {
				this._valueVariable = this._scope.define(this._data.loop.value.name, false, this);
				this._value = $compile.expression(this._data.loop.value, this);
				this._value.analyse();
			}
			else {
				this._valueName = this._scope.acquireTempName();
			}
			if(KSType.isValue(this._data.loop.index)) {
				var __ks_904;
				this._indexVariable = this._scope.define(this._data.loop.index.name, false, this._scope.reference("Number"), this);
				this._index = $compile.expression(this._data.loop.index, this);
				this._index.analyse();
			}
			var __ks_905;
			this._body = $compile.statement($return(this._data.body), this);
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				var __ks_906;
				this._when = $compile.statement($return(this._data.loop.when), this);
				this._when.analyse();
			}
			if(KSType.isValue(this._valueName)) {
				this._scope.releaseTempName(this._valueName);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
			if(KSType.isValue(this._value)) {
				this._valueVariable.type(this._expression.type().parameter());
				this._value.prepare();
			}
			if(KSType.isValue(this._index)) {
				this._index.prepare();
			}
			this._body.prepare();
			var __ks_907, __ks_908;
			this._type = Type.arrayOf(this._body.type(), this._scope);
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			if(KSType.isValue(this._index)) {
				this._index.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapArray(").compile(this._expression).code(", ");
			fragments.code(surround.beforeParameters).compile(KSType.isValue(this._value) ? this._value : this._valueName);
			if(KSType.isValue(this._index)) {
				fragments.code($comma).compile(this._index);
			}
			fragments.code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(KSType.isValue(this._value) ? this._value : this._valueName);
				if(KSType.isValue(this._index)) {
					fragments.code($comma).compile(this._index);
				}
				fragments.code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForIn.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForIn.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayComprehensionForOf = Helper.class({
		$name: "ArrayComprehensionForOf",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, parent.newScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ArrayComprehensionForOf.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			var __ks_909;
			this._expression = $compile.expression(this._data.loop.expression, this);
			this._expression.analyse();
			if(KSType.isValue(this._data.loop.key)) {
				this._scope.define(this._data.loop.key.name, false, this._scope.reference("String"), this);
				this._key = $compile.expression(this._data.loop.key, this);
				this._key.analyse();
			}
			else {
				this._keyName = this._scope.acquireTempName();
			}
			if(KSType.isValue(this._data.loop.value)) {
				this._scope.define(this._data.loop.value.name, false, this);
				this._value = $compile.expression(this._data.loop.value, this);
				this._value.analyse();
			}
			var __ks_910;
			this._body = $compile.statement($return(this._data.body), this);
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				var __ks_911;
				this._when = $compile.statement($return(this._data.loop.when), this);
				this._when.analyse();
			}
			if(KSType.isValue(this._keyName)) {
				this._scope.releaseTempName(this._keyName);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._expression.prepare();
			if(KSType.isValue(this._key)) {
				this._key.prepare();
			}
			if(KSType.isValue(this._value)) {
				this._value.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
			if(KSType.isValue(this._key)) {
				this._key.translate();
			}
			if(KSType.isValue(this._value)) {
				this._value.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapObject(").compile(this._expression).code(", ");
			fragments.code(surround.beforeParameters).compile(KSType.isValue(this._key) ? this._key : this._keyName);
			if(KSType.isValue(this._value)) {
				fragments.code($comma).compile(this._value);
			}
			fragments.code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(KSType.isValue(this._key) ? this._key : this._keyName);
				if(KSType.isValue(this._value)) {
					fragments.code($comma).compile(this._value);
				}
				fragments.code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForOf.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Array");
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForOf.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayComprehensionForRange = Helper.class({
		$name: "ArrayComprehensionForRange",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, parent.newScope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ArrayComprehensionForRange.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._scope.define(this._data.loop.value.name, false, this._scope.reference("Number"), this);
			var __ks_912;
			this._value = $compile.expression(this._data.loop.value, this);
			this._value.analyse();
			this._from = $compile.expression(this._data.loop.from, this);
			this._from.analyse();
			this._to = $compile.expression(this._data.loop.to, this);
			this._to.analyse();
			if(KSType.isValue(this._data.loop.by)) {
				this._by = $compile.expression(this._data.loop.by, this);
				this._body.analyse();
			}
			var __ks_913;
			this._body = $compile.statement($return(this._data.body), this);
			this._body.analyse();
			if(KSType.isValue(this._data.loop.when)) {
				var __ks_914;
				this._when = $compile.statement($return(this._data.loop.when), this);
				this._when.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
			this._from.prepare();
			this._to.prepare();
			if(KSType.isValue(this._by)) {
				this._by.prepare();
			}
			this._body.prepare();
			if(KSType.isValue(this._when)) {
				this._when.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
			this._from.translate();
			this._to.translate();
			if(KSType.isValue(this._by)) {
				this._by.translate();
			}
			this._body.translate();
			if(KSType.isValue(this._when)) {
				this._when.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Helper");
			var surround = $function.surround(this);
			fragments.code($runtime.helper(this), ".mapRange(").compile(this._from).code($comma).compile(this._to);
			if(KSType.isValue(this._by)) {
				fragments.code(", ").compile(this._by);
			}
			else {
				fragments.code(", 1");
			}
			fragments.code($comma, "true", $comma, "true", $comma).code(surround.beforeParameters).compile(this._value).code(surround.afterParameters).newBlock().compile(this._body).done();
			fragments.code(surround.footer);
			if(KSType.isValue(this._when)) {
				fragments.code($comma).code(surround.beforeParameters).compile(this._value).code(surround.afterParameters).newBlock().compile(this._when).done();
				fragments.code(surround.footer);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayComprehensionForRange.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Array");
		},
		type: function() {
			if(arguments.length === 0) {
				return ArrayComprehensionForRange.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AwaitExpression = Helper.class({
		$name: "AwaitExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._awaiting = true;
			this._reuseName = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			AwaitExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			var scope;
			if(arguments.length > 2 && (scope = arguments[++__ks_i]) !== void 0) {
				if(scope !== null && !KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
			}
			else {
				scope = null;
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
			while(KSType.isValue(parent) && !(KSType.is(parent, FunctionExpression) || KSType.is(parent, LambdaExpression) || KSType.is(parent, FunctionDeclarator) || KSType.is(parent, ClassMethodDeclaration) || KSType.is(parent, ImplementClassMethodDeclaration) || KSType.is(parent, ImplementNamespaceFunctionDeclaration))) {
				if(KSType.is(parent, TryStatement)) {
					this._try = parent;
				}
				var __ks_915;
				parent = parent.parent();
			}
			if(KSType.isValue(parent)) {
				this._function = parent;
			}
			else if(!this.module().isBinary()) {
				SyntaxException.throwInvalidAwait(this);
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				AwaitExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			var __ks_916;
			this._operation = $compile.expression(this._data.operation, this);
			this._operation.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._operation.prepare();
			var __ks_917;
			this._reuseName = this._scope.acquireTempName();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._operation.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return true;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isAwaiting_0: function() {
			return this._awaiting;
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			return Expression.prototype.isAwaiting.apply(this, arguments);
		},
		__ks_func_toAwaitExpressionFragments_0: function(fragments, statements) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(statements === void 0 || statements === null) {
				throw new TypeError("'statements' is not nullable");
			}
			fragments.code("(__ks_e, " + this._reuseName + ") =>");
			var block = fragments.newBlock();
			var index = -1;
			var item;
			for(var i = 0, __ks_918 = statements.length, statement; index === -1 && i < __ks_918; ++i) {
				statement = statements[i];
				var __ks_919;
				if(KSType.isValue(__ks_919 = statement.toFragments(block, Mode.None)) ? (item = __ks_919, true) : false) {
					index = i;
				}
			}
			if(index !== -1) {
				item(statements.slice(index + 1));
			}
			block.done();
			fragments.code(")").done();
		},
		toAwaitExpressionFragments: function() {
			if(arguments.length === 2) {
				return AwaitExpression.prototype.__ks_func_toAwaitExpressionFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAwaitExpressionFragments) {
				return Expression.prototype.toAwaitExpressionFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._awaiting) {
				var item, __ks_920;
				if(KSType.isValue(__ks_920 = this._operation.toFragments(fragments, Mode.Async)) ? (item = __ks_920, true) : false) {
					return item;
				}
				else {
					this._awaiting = false;
					if(KSType.isValue(this._try)) {
						return Helper.vcurry(this._try.toAwaitExpressionFragments, this._try, fragments, [new Literal(this._reuseName, this)]);
					}
					else if(KSType.isValue(this._function) ? this._function.type().isAsync() : false) {
						return Helper.vcurry(this._function.toAwaitExpressionFragments, this._function, fragments, [new Literal(this._reuseName, this)]);
					}
					else {
						return Helper.vcurry(this.toAwaitExpressionFragments, this, fragments);
					}
				}
			}
			else {
				fragments.code(this._reuseName);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AwaitExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._operation.type();
		},
		type: function() {
			if(arguments.length === 0) {
				return AwaitExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ArrayBinding = Helper.class({
		$name: "ArrayBinding",
		$extends: Expression,
		__ks_init_1: function() {
			this._assignement = false;
			this._elements = [];
			this._exists = false;
			this._existing = {};
			this._immutable = false;
			this._nonexists = false;
			this._variables = {};
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ArrayBinding.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			for(var index = 0, __ks_921 = this._data.elements.length, element; index < __ks_921; ++index) {
				element = this._data.elements[index];
				if((element.kind === NodeKind.BindingElement) && (element.name.kind === NodeKind.Identifier)) {
					if(this._scope.hasVariable(element.name.name)) {
						this._existing[element.name.name] = true;
						this._exists = true;
					}
					else {
						this._nonexists = true;
					}
				}
				else if(element.kind !== NodeKind.OmittedExpression) {
					this._nonexists = true;
				}
				var __ks_922;
				this._elements.push(element = $compile.expression(element, this, this.bindingScope()));
				element.analyse();
				if(KSType.is(element, BindingElement)) {
					element.index(index);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_923 = 0, __ks_924 = this._elements.length, element; __ks_923 < __ks_924; ++__ks_923) {
				element = this._elements[__ks_923];
				element.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_925 = 0, __ks_926 = this._elements.length, element; __ks_925 < __ks_926; ++__ks_925) {
				element = this._elements[__ks_925];
				element.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			for(var __ks_927 = 0, __ks_928 = this._elements.length, element; __ks_927 < __ks_928; ++__ks_927) {
				element = this._elements[__ks_927];
				element.export(recipient);
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Expression.prototype.export) {
				return Expression.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagAssignement_0: function() {
			this._assignement = true;
		},
		flagAssignement: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_flagAssignement_0.apply(this);
			}
			else if(Expression.prototype.flagAssignement) {
				return Expression.prototype.flagAssignement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagImmutable_0: function() {
			this._immutable = true;
		},
		flagImmutable: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_flagImmutable_0.apply(this);
			}
			else if(Expression.prototype.flagImmutable) {
				return Expression.prototype.flagImmutable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAssignement_0: function() {
			return this._assignement;
		},
		isAssignement: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_isAssignement_0.apply(this);
			}
			else if(Expression.prototype.isAssignement) {
				return Expression.prototype.isAssignement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isImmutable_0: function() {
			return this._immutable;
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return ArrayBinding.prototype.__ks_func_isImmutable_0.apply(this);
			}
			else if(Expression.prototype.isImmutable) {
				return Expression.prototype.isImmutable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			for(var __ks_929 = 0, __ks_930 = this._elements.length, element; __ks_929 < __ks_930; ++__ks_929) {
				element = this._elements[__ks_929];
				if(element.isDeclararingVariable(name)) {
					return true;
				}
			}
			return false;
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isDeclararingVariable) {
				return Expression.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._exists && this._nonexists) {
				fragments.code("[");
				var name;
				for(var i = 0, __ks_931 = this._data.elements.length, element; i < __ks_931; ++i) {
					element = this._data.elements[i];
					if(i) {
						fragments.code(", ");
					}
					if((element.kind === NodeKind.BindingElement) && (element.name.kind === NodeKind.Identifier) && this._existing[element.name.name]) {
						name = this._scope.acquireTempName();
						this._elements[i].toExistFragments(fragments, name);
						this._variables[name] = element.name.name;
					}
					else {
						this._elements[i].toFragments(fragments);
					}
				}
				fragments.code("]");
				this.statement().afterward(this);
			}
			else {
				fragments.code("[");
				for(var i = 0, __ks_931 = this._elements.length; i < __ks_931; ++i) {
					if(i) {
						fragments.code(", ");
					}
					this._elements[i].toFragments(fragments);
				}
				fragments.code("]");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ArrayBinding.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAfterwardFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var name in this._variables) {
				var variable = this._variables[name];
				fragments.line(variable, " = ", name);
				this._scope.releaseTempName(name);
			}
		},
		toAfterwardFragments: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_toAfterwardFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAfterwardFragments) {
				return Expression.prototype.toAfterwardFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(this._nonexists) {
				if((this._options.format.variables === "es5") || this._exists) {
					fragments.code("var ");
				}
				else {
					fragments.code("let ");
				}
			}
			if(this._options.format.destructuring === "es5") {
				this.toFlatFragments(fragments, value);
			}
			else {
				fragments.compile(this).code($equals).compile(value);
			}
		},
		toAssignmentFragments: function() {
			if(arguments.length === 2) {
				return ArrayBinding.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAssignmentFragments) {
				return Expression.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(value.isComposite()) {
				this._elements[0].toFlatFragments(fragments, new FlatReusableBindingElement(value, this));
				for(var i = 1, __ks_932 = this._elements.length; i < __ks_932; ++i) {
					fragments.code(", ");
					this._elements[i].toFlatFragments(fragments, value);
				}
			}
			else {
				for(var i = 0, __ks_932 = this._elements.length; i < __ks_932; ++i) {
					if(i !== 0) {
						fragments.code(", ");
					}
					this._elements[i].toFlatFragments(fragments, value);
				}
			}
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return ArrayBinding.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFlatFragments) {
				return Expression.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var __ks_933 = 0, __ks_934 = this._elements.length, element; __ks_933 < __ks_934; ++__ks_933) {
				element = this._elements[__ks_933];
				element.walk(fn);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ArrayBinding.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Expression.prototype.walk) {
				return Expression.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BindingElement = Helper.class({
		$name: "BindingElement",
		$extends: Expression,
		__ks_init_1: function() {
			this._defaultValue = null;
			this._index = -1;
			this._variable = null;
			this._variables = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			BindingElement.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(this._data.name.kind === NodeKind.Identifier) {
				var variable, __ks_935;
				if(KSType.isValue(__ks_935 = this._scope.getVariable(this._data.name.name)) ? (variable = __ks_935, true) : false) {
					if(this.isAssignement()) {
						SyntaxException.throwAlreadyDeclared(variable.name(), this);
					}
					else if(variable.isImmutable()) {
						ReferenceException.throwImmutable(variable.name(), this);
					}
				}
				else {
					var __ks_936;
					this._variable = this._scope.define(this._data.name.name, this.isImmutable(), this);
					this._variables.push(this._data.name.name);
				}
			}
			if(KSType.isValue(this._data.alias) ? this._data.alias.kind === NodeKind.Identifier : false) {
				if(!this._data.alias.computed) {
					var __ks_937;
					this._variable = this._scope.define(this._data.alias.name, this.isImmutable(), this);
					this._variables.push(this._data.alias.name);
				}
				this._alias = $compile.expression(this._data.alias, this);
				this._alias.analyse();
			}
			this._name = $compile.expression(this._data.name, this);
			this._name.analyse();
			if(KSType.isValue(this._data.defaultValue)) {
				this._defaultValue = $compile.expression(this._data.defaultValue, this);
				this._defaultValue.analyse();
				if(this._options.format.destructuring === "es5") {
					var __ks_938;
					this._tempName = this._scope.acquireTempName(this.statement());
					this._scope.releaseTempName(this._tempName);
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BindingElement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(KSType.isValue(this._alias)) {
				this._alias.prepare();
			}
			this._name.prepare();
			if(KSType.isValue(this._defaultValue)) {
				this._defaultValue.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BindingElement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(KSType.isValue(this._alias)) {
				this._alias.translate();
			}
			this._name.translate();
			if(KSType.isValue(this._defaultValue)) {
				this._defaultValue.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return BindingElement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			if(this._variable !== null) {
				recipient.export(this._variable.name(), this._variable);
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return BindingElement.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Expression.prototype.export) {
				return Expression.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_index_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			this._index = index;
			return this;
		},
		index: function() {
			if(arguments.length === 1) {
				return BindingElement.prototype.__ks_func_index_0.apply(this, arguments);
			}
			else if(Expression.prototype.index) {
				return Expression.prototype.index.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAssignement_0: function() {
			return this._parent.isAssignement();
		},
		isAssignement: function() {
			if(arguments.length === 0) {
				return BindingElement.prototype.__ks_func_isAssignement_0.apply(this);
			}
			else if(Expression.prototype.isAssignement) {
				return Expression.prototype.isAssignement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isImmutable_0: function() {
			return this._parent.isImmutable();
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return BindingElement.prototype.__ks_func_isImmutable_0.apply(this);
			}
			else if(Expression.prototype.isImmutable) {
				return Expression.prototype.isImmutable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return __ks_Array._im_contains(this._variables, name);
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return BindingElement.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isDeclararingVariable) {
				return Expression.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._data.spread) {
				fragments.code("...");
			}
			if(KSType.isValue(this._alias)) {
				if(this._data.alias.computed) {
					fragments.code("[").compile(this._alias).code("]: ");
				}
				else {
					fragments.compile(this._alias).code(": ");
				}
			}
			fragments.compile(this._name);
			if(KSType.isValue(this._defaultValue)) {
				fragments.code(" = ").compile(this._defaultValue);
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return BindingElement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toExistFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(this._data.spread) {
				fragments.code("...");
			}
			if(KSType.isValue(this._alias)) {
				if(this._data.alias.computed) {
					fragments.code("[").compile(this._alias).code("]: ");
				}
				else {
					fragments.compile(this._alias).code(": ");
				}
			}
			if(this._index === -1) {
				fragments.compile(this._name).code(": ", name);
			}
			else {
				fragments.code(name);
			}
			if(this._defaultValue !== null) {
				fragments.code(" = ").compile(this._defaultValue);
			}
		},
		toExistFragments: function() {
			if(arguments.length === 2) {
				return BindingElement.prototype.__ks_func_toExistFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toExistFragments) {
				return Expression.prototype.toExistFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(KSType.is(this._name, ArrayBinding)) {
				this._name.toFlatFragments(fragments, new FlatArrayBindingElement(value, this._index, this));
			}
			else if(KSType.is(this._name, ObjectBinding)) {
				this._name.toFlatFragments(fragments, new FlatObjectBindingElement(value, KSType.isValue(this._alias) ? this._alias : this._name, this));
			}
			else if(KSType.isValue(this._defaultValue)) {
				var variable = new Literal(false, this, this._scope, this._tempName);
				fragments.compile(this._name).code($equals, "Type.isValue(").compile(variable).code($equals).compile(new FlatObjectBindingElement(value, KSType.isValue(this._alias) ? this._alias : this._name, this)).code(") ? ").compile(variable).code(" : ").compile(this._defaultValue);
			}
			else if(this._index === -1) {
				fragments.compile(this._name).code($equals).wrap(value).code(".").compile(KSType.isValue(this._alias) ? this._alias : this._name);
			}
			else {
				fragments.compile(this._name).code($equals).wrap(value).code("[" + this._index + "]");
			}
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return BindingElement.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFlatFragments) {
				return Expression.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			this._name.walk(fn);
		},
		walk: function() {
			if(arguments.length === 1) {
				return BindingElement.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Expression.prototype.walk) {
				return Expression.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var FlatArrayBindingElement = Helper.class({
		$name: "FlatArrayBindingElement",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(array, index, parent) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(array === void 0 || array === null) {
				throw new TypeError("'array' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [{}, parent]);
			this._array = array;
			this._index = index;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				FlatArrayBindingElement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FlatArrayBindingElement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FlatArrayBindingElement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return FlatArrayBindingElement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComposite_0: function() {
			return false;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return FlatArrayBindingElement.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrap(this._array).code("[").compile(this._index).code("]");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FlatArrayBindingElement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var FlatObjectBindingElement = Helper.class({
		$name: "FlatObjectBindingElement",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(item, property, parent) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(item === void 0 || item === null) {
				throw new TypeError("'item' is not nullable");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [{}, parent]);
			this._item = item;
			this._property = property;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				FlatObjectBindingElement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FlatObjectBindingElement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FlatObjectBindingElement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return FlatObjectBindingElement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComposite_0: function() {
			return false;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return FlatObjectBindingElement.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrap(this._item).code(".").compile(this._property);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FlatObjectBindingElement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var FlatReusableBindingElement = Helper.class({
		$name: "FlatReusableBindingElement",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(value, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [{}, parent]);
			this._value = value;
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				FlatReusableBindingElement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FlatReusableBindingElement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FlatReusableBindingElement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return FlatReusableBindingElement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComposite_0: function() {
			return false;
		},
		isComposite: function() {
			if(arguments.length === 0) {
				return FlatReusableBindingElement.prototype.__ks_func_isComposite_0.apply(this);
			}
			return Expression.prototype.isComposite.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("(").compileReusable(this._value).code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FlatReusableBindingElement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ObjectBinding = Helper.class({
		$name: "ObjectBinding",
		$extends: Expression,
		__ks_init_1: function() {
			this._assignement = false;
			this._elements = [];
			this._exists = false;
			this._existing = {};
			this._immutable = false;
			this._name = null;
			this._variables = {};
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ObjectBinding.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, parent.statement().scope()]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				ObjectBinding.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			if((this._options.format.destructuring === "es5") && (this._data.elements.length > 1)) {
				this._name = this._scope.acquireTempName(this.statement());
			}
			for(var __ks_939 = 0, __ks_940 = this._data.elements.length, element; __ks_939 < __ks_940; ++__ks_939) {
				element = this._data.elements[__ks_939];
				if((element.kind === NodeKind.BindingElement) && (element.name.kind === NodeKind.Identifier) && this._scope.hasVariable(element.name.name)) {
					this._exists = true;
					this._existing[element.name.name] = true;
				}
				var __ks_941;
				this._elements.push(element = $compile.expression(element, this, this.bindingScope()));
				element.analyse();
			}
			if(this._name !== null) {
				this._scope.releaseTempName(this._name);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_942 = 0, __ks_943 = this._elements.length, element; __ks_942 < __ks_943; ++__ks_942) {
				element = this._elements[__ks_942];
				element.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_944 = 0, __ks_945 = this._elements.length, element; __ks_944 < __ks_945; ++__ks_944) {
				element = this._elements[__ks_944];
				element.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function(recipient) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			for(var __ks_946 = 0, __ks_947 = this._elements.length, element; __ks_946 < __ks_947; ++__ks_946) {
				element = this._elements[__ks_946];
				element.export(recipient);
			}
		},
		export: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_export_0.apply(this, arguments);
			}
			else if(Expression.prototype.export) {
				return Expression.prototype.export.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagAssignement_0: function() {
			this._assignement = true;
		},
		flagAssignement: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_flagAssignement_0.apply(this);
			}
			else if(Expression.prototype.flagAssignement) {
				return Expression.prototype.flagAssignement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_flagImmutable_0: function() {
			this._immutable = true;
		},
		flagImmutable: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_flagImmutable_0.apply(this);
			}
			else if(Expression.prototype.flagImmutable) {
				return Expression.prototype.flagImmutable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAssignement_0: function() {
			return this._assignement;
		},
		isAssignement: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_isAssignement_0.apply(this);
			}
			else if(Expression.prototype.isAssignement) {
				return Expression.prototype.isAssignement.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isImmutable_0: function() {
			return this._immutable;
		},
		isImmutable: function() {
			if(arguments.length === 0) {
				return ObjectBinding.prototype.__ks_func_isImmutable_0.apply(this);
			}
			else if(Expression.prototype.isImmutable) {
				return Expression.prototype.isImmutable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			for(var __ks_948 = 0, __ks_949 = this._elements.length, element; __ks_948 < __ks_949; ++__ks_948) {
				element = this._elements[__ks_948];
				if(element.isDeclararingVariable(name)) {
					return true;
				}
			}
			return false;
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isDeclararingVariable) {
				return Expression.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._exists) {
				fragments.code("{");
				var name;
				for(var i = 0, __ks_950 = this._data.elements.length, element; i < __ks_950; ++i) {
					element = this._data.elements[i];
					if(i) {
						fragments.code(", ");
					}
					if(this._existing[element.name.name]) {
						name = this._scope.acquireTempName();
						this._elements[i].toExistFragments(fragments, name);
						this._variables[name] = element.name.name;
					}
					else {
						this._elements[i].toFragments(fragments);
					}
				}
				fragments.code("}");
				this.statement().afterward(this);
			}
			else {
				fragments.code("{");
				for(var i = 0, __ks_950 = this._elements.length; i < __ks_950; ++i) {
					if(i) {
						fragments.code(", ");
					}
					this._elements[i].toFragments(fragments);
				}
				fragments.code("}");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ObjectBinding.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAfterwardFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var name in this._variables) {
				var variable = this._variables[name];
				fragments.line(variable, " = ", name);
				this._scope.releaseTempName(name);
			}
		},
		toAfterwardFragments: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_toAfterwardFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAfterwardFragments) {
				return Expression.prototype.toAfterwardFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if((this._options.format.variables === "es5") || this._exists) {
				fragments.code("var ");
			}
			else {
				fragments.code("let ");
			}
			if(this._options.format.destructuring === "es5") {
				this.toFlatFragments(fragments, value);
			}
			else {
				fragments.compile(this).code($equals).compile(value);
			}
		},
		toAssignmentFragments: function() {
			if(arguments.length === 2) {
				return ObjectBinding.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toAssignmentFragments) {
				return Expression.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFlatFragments_0: function(fragments, value) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(value.isComposite()) {
				if(this._elements.length === 1) {
					this._elements[0].toFlatFragments(fragments, value);
				}
				else {
					var variable = new Literal(false, this, this._scope, this._name);
					this._elements[0].toFlatFragments(fragments, new TempBinding(variable, value, this));
					for(var i = 1, __ks_951 = this._elements.length; i < __ks_951; ++i) {
						fragments.code(", ");
						this._elements[i].toFlatFragments(fragments, variable);
					}
				}
			}
			else {
				for(var i = 0, __ks_951 = this._elements.length; i < __ks_951; ++i) {
					if(i) {
						fragments.code(", ");
					}
					this._elements[i].toFlatFragments(fragments, value);
				}
			}
		},
		toFlatFragments: function() {
			if(arguments.length === 2) {
				return ObjectBinding.prototype.__ks_func_toFlatFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFlatFragments) {
				return Expression.prototype.toFlatFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_walk_0: function(fn) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fn === void 0 || fn === null) {
				throw new TypeError("'fn' is not nullable");
			}
			for(var __ks_952 = 0, __ks_953 = this._elements.length, element; __ks_952 < __ks_953; ++__ks_952) {
				element = this._elements[__ks_952];
				element.walk(fn);
			}
		},
		walk: function() {
			if(arguments.length === 1) {
				return ObjectBinding.prototype.__ks_func_walk_0.apply(this, arguments);
			}
			else if(Expression.prototype.walk) {
				return Expression.prototype.walk.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var TempBinding = Helper.class({
		$name: "TempBinding",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(name, value, parent) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [{}, parent]);
			this._name = name;
			this._value = value;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				TempBinding.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TempBinding.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TempBinding.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return TempBinding.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return TempBinding.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._name).code($equals).compile(this._value);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return TempBinding.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BlockExpression = Helper.class({
		$name: "BlockExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._await = false;
			this._exit = false;
			this._statements = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			BlockExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(this._data.statements) {
				for(var __ks_954 = 0, __ks_955 = this._data.statements.length, statement; __ks_954 < __ks_955; ++__ks_954) {
					statement = this._data.statements[__ks_954];
					this._statements.push(statement = $compile.statement(statement, this));
					statement.analyse();
					if(statement.isAwait()) {
						this._await = true;
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BlockExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_956 = 0, __ks_957 = this._statements.length, statement; __ks_956 < __ks_957; ++__ks_956) {
				statement = this._statements[__ks_956];
				statement.prepare();
				if(this._exit) {
					SyntaxException.throwDeadCode(statement);
				}
				else {
					this._exit = statement.isExit();
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BlockExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_958 = 0, __ks_959 = this._statements.length, statement; __ks_958 < __ks_959; ++__ks_958) {
				statement = this._statements[__ks_958];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return BlockExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return BlockExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			return this._exit;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return BlockExpression.prototype.__ks_func_isExit_0.apply(this);
			}
			else if(Expression.prototype.isExit) {
				return Expression.prototype.isExit.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isReturning_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			for(var __ks_960 = 0, __ks_961 = this._statements.length, statement; __ks_960 < __ks_961; ++__ks_960) {
				statement = this._statements[__ks_960];
				if(!statement.isReturning(type)) {
					return false;
				}
			}
			return true;
		},
		isReturning: function() {
			if(arguments.length === 1) {
				return BlockExpression.prototype.__ks_func_isReturning_0.apply(this, arguments);
			}
			else if(Expression.prototype.isReturning) {
				return Expression.prototype.isReturning.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._await) {
				var index = -1;
				var item;
				for(var i = 0, __ks_962 = this._statements.length, statement; index === -1 && i < __ks_962; ++i) {
					statement = this._statements[i];
					var __ks_963;
					if(KSType.isValue(__ks_963 = statement.toFragments(fragments, Mode.None)) ? (item = __ks_963, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(this._statements.slice(index + 1));
				}
			}
			else {
				for(var __ks_962 = 0, __ks_963 = this._statements.length, statement; __ks_962 < __ks_963; ++__ks_962) {
					statement = this._statements[__ks_962];
					statement.toFragments(fragments, mode);
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BlockExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CallExpression = Helper.class({
		$name: "CallExpression",
		$extends: Expression,
		$static: {
			__ks_sttc_toFlattenArgumentsFragments_0: function() {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				var __ks_i = -1;
				var fragments = arguments[++__ks_i];
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				var __ks_arguments_1 = arguments[++__ks_i];
				if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
					throw new TypeError("'arguments' is not nullable");
				}
				var __ks__;
				var prefill = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
				if((__ks_arguments_1.length === 1) && (prefill === null) && __ks_arguments_1[0].argument().type().isArray()) {
					fragments.compile(__ks_arguments_1[0].argument());
				}
				else {
					if(prefill === null) {
						fragments.code("[].concat(");
					}
					else {
						fragments.code("[").compile(prefill).code("].concat(");
					}
					var opened = false;
					for(var index = 0, __ks_989 = __ks_arguments_1.length, argument; index < __ks_989; ++index) {
						argument = __ks_arguments_1[index];
						if(KSType.is(argument, UnaryOperatorSpread)) {
							if(opened) {
								fragments.code("], ");
								opened = false;
							}
							else if(index !== 0) {
								fragments.code($comma);
							}
							fragments.compile(argument.argument());
						}
						else {
							if(index !== 0) {
								fragments.code($comma);
							}
							if(!opened) {
								fragments.code("[");
								opened = true;
							}
							fragments.compile(argument);
						}
					}
					if(opened) {
						fragments.code("]");
					}
					fragments.code(")");
				}
			},
			toFlattenArgumentsFragments: function() {
				if(arguments.length >= 2 && arguments.length <= 3) {
					return CallExpression.__ks_sttc_toFlattenArgumentsFragments_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._arguments = [];
			this._await = false;
			this._callees = [];
			this._flatten = false;
			this._hasDefaultCallee = false;
			this._nullable = false;
			this._nullableComputed = false;
			this._reusable = false;
			this._reuseName = null;
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			CallExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			if(this._data.arguments.length === 1) {
				var argument;
				this._arguments.push(argument = $compile.expression(this._data.arguments[0], this));
				argument.analyse();
				if(argument.isAwait()) {
					this._await = true;
				}
			}
			else {
				var es5 = this._options.format.spreads === "es5";
				for(var __ks_964 = 0, __ks_965 = this._data.arguments.length, argument; __ks_964 < __ks_965; ++__ks_964) {
					argument = this._data.arguments[__ks_964];
					this._arguments.push(argument = $compile.expression(argument, this));
					argument.analyse();
					if(es5 && KSType.is(argument, UnaryOperatorSpread)) {
						this._flatten = true;
					}
					else if(argument.isAwait()) {
						this._await = true;
					}
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_966 = 0, __ks_967 = this._arguments.length, argument; __ks_966 < __ks_967; ++__ks_966) {
				argument = this._arguments[__ks_966];
				argument.prepare();
			}
			if(this._options.format.spreads === "es5") {
				for(var __ks_966 = 0, __ks_967 = this._arguments.length, argument; !(this._flatten) && __ks_966 < __ks_967; ++__ks_966) {
					argument = this._arguments[__ks_966];
					if(KSType.is(argument, UnaryOperatorSpread)) {
						this._flatten = true;
					}
				}
			}
			else {
				for(var __ks_966 = 0, __ks_967 = this._arguments.length, argument; !(this._flatten) && __ks_966 < __ks_967; ++__ks_966) {
					argument = this._arguments[__ks_966];
					if(KSType.is(argument, UnaryOperatorSpread) && !argument.argument().type().isArray()) {
						this._flatten = true;
					}
				}
			}
			if((this._data.callee.kind === NodeKind.MemberExpression) && !this._data.callee.computed) {
				this._object = $compile.expression(this._data.callee.object, this);
				this._object.analyse();
				this._object.prepare();
				this._property = this._data.callee.property.name;
				this.makeMemberCallee(this._object.type());
			}
			else {
				var variable;
				if((this._data.callee.kind === NodeKind.Identifier) && (KSType.isValue(__ks_966 = this._scope.getVariable(this._data.callee.name)) ? (variable = __ks_966, true) : false)) {
					var type = variable.type();
					if(type.isFunction()) {
						if(type.isAsync()) {
							if(KSType.is(this._parent, VariableDeclaration)) {
								if(!this._parent.isAwait()) {
									TypeException.throwNotSyncFunction(this._data.callee.name, this);
								}
							}
							else if(!KSType.is(this._parent, AwaitExpression)) {
								TypeException.throwNotSyncFunction(this._data.callee.name, this);
							}
						}
						else {
							if(KSType.is(this._parent, VariableDeclaration)) {
								if(this._parent.isAwait()) {
									TypeException.throwNotAsyncFunction(this._data.callee.name, this);
								}
							}
							else if(KSType.is(this._parent, AwaitExpression)) {
								TypeException.throwNotAsyncFunction(this._data.callee.name, this);
							}
						}
					}
					if(KSType.is(type, FunctionType)) {
						this.makeCallee(type);
					}
					else if(KSType.is(type, OverloadedFunctionType)) {
						this.makeCallee(type);
					}
					else {
						var substitute;
						if(KSType.isFunction(variable.replaceCall) && KSType.isValue(__ks_966 = variable.replaceCall(this._data, this._arguments)) ? (substitute = __ks_966, true) : false) {
							this.addCallee(new SubstituteCallee(this._data, substitute, this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, this));
						}
					}
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this));
				}
			}
			if(this._hasDefaultCallee) {
				this._callees.push(this._defaultCallee);
			}
			if(this._callees.length === 1) {
				this._nullable = this._callees[0].isNullable();
				this._nullableComputed = this._callees[0].isNullableComputed();
				this._type = this._callees[0].type();
			}
			else {
				this._nullable = this._callees[0].isNullable();
				this._nullableComputed = this._callees[0].isNullableComputed();
				var types = [this._callees[0].type()];
				var type;
				for(var i = 1, __ks_966 = this._callees.length; i < __ks_966; ++i) {
					type = this._callees[i].type();
					if(!__ks_Array._im_any(types, function(item) {
						if(arguments.length < 1) {
							throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
						}
						if(item === void 0 || item === null) {
							throw new TypeError("'item' is not nullable");
						}
						return type.equals(item);
					})) {
						types.push(type);
					}
					if(this._callees[i].isNullable()) {
						this._nullable = true;
					}
					if(this._callees[i].isNullableComputed()) {
						this._nullableComputed = true;
					}
				}
				if(types.length === 1) {
					this._type = types[0];
				}
				else {
					this._type = new UnionType(this.scope(), types);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_968 = 0, __ks_969 = this._arguments.length, argument; __ks_968 < __ks_969; ++__ks_968) {
				argument = this._arguments[__ks_968];
				argument.translate();
			}
			for(var __ks_968 = 0, __ks_969 = this._callees.length, callee; __ks_968 < __ks_969; ++__ks_968) {
				callee = this._callees[__ks_968];
				callee.translate();
			}
			if(this._data.scope.kind === ScopeKind.Argument) {
				this._callScope = $compile.expression(this._data.scope.value, this);
				this._callScope.analyse();
				this._callScope.prepare();
				this._callScope.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			if(acquire) {
				this._reuseName = this.statement().scope().acquireTempName(this.statement());
			}
			for(var __ks_970 = 0, __ks_971 = this._callees.length, callee; __ks_970 < __ks_971; ++__ks_970) {
				callee = this._callees[__ks_970];
				callee.acquireReusable(acquire);
			}
			for(var __ks_970 = 0, __ks_971 = this._arguments.length, argument; __ks_970 < __ks_971; ++__ks_970) {
				argument = this._arguments[__ks_970];
				argument.acquireReusable(acquire);
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_addCallee_0: function(callee) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(callee === void 0 || callee === null) {
				throw new TypeError("'callee' is not nullable");
			}
			else if(!KSType.is(callee, Callee)) {
				throw new TypeError("'callee' is not of type 'Callee'");
			}
			if(KSType.is(callee, DefaultCallee)) {
				if(this._hasDefaultCallee) {
					var t1 = this._defaultCallee.type();
					if(!t1.isAny()) {
						var t2 = callee.type();
						if(t2.isAny()) {
							this._defaultCallee = t2;
						}
						else if(KSType.is(t1, UnionType)) {
							t1.addType(t2);
						}
						else if(KSType.is(t2, UnionType)) {
							t2.addType(t1);
							this._defaultCallee = t2;
						}
						else if(t1.isInstanceOf(t2, this)) {
							this._defaultCallee = t2;
						}
						else if(!t2.isInstanceOf(t1, this)) {
							this._defaultCallee.type(new UnionType(this.scope(), [t1, t2]));
						}
					}
				}
				else {
					this._defaultCallee = callee;
					this._hasDefaultCallee = true;
				}
			}
			else {
				this._callees.push(callee);
			}
		},
		addCallee: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_addCallee_0.apply(this, arguments);
			}
			else if(Expression.prototype.addCallee) {
				return Expression.prototype.addCallee.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_arguments_0: function() {
			return this._arguments;
		},
		arguments: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_arguments_0.apply(this);
			}
			else if(Expression.prototype.arguments) {
				return Expression.prototype.arguments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isAwaiting_0: function() {
			for(var __ks_972 = 0, __ks_973 = this._arguments.length, argument; __ks_972 < __ks_973; ++__ks_972) {
				argument = this._arguments[__ks_972];
				if(argument.isAwaiting()) {
					return true;
				}
			}
			return false;
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			return Expression.prototype.isAwaiting.apply(this, arguments);
		},
		__ks_func_isCallable_0: function() {
			return !this._reusable;
		},
		isCallable: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isCallable_0.apply(this);
			}
			return Expression.prototype.isCallable.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return (this._nullable || (this._callees.length > 1)) && !this._tested;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNullableComputed_0: function() {
			return this._nullableComputed;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			return Expression.prototype.isNullableComputed.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.isValue(this._object)) {
				if(this._object.isUsingVariable(name)) {
					return true;
				}
			}
			else if((this._data.callee.kind === NodeKind.Identifier) && (this._data.callee.name === name)) {
				return true;
			}
			for(var __ks_974 = 0, __ks_975 = this._arguments.length, argument; __ks_974 < __ks_975; ++__ks_974) {
				argument = this._arguments[__ks_974];
				if(argument.isUsingVariable(name)) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_makeCallee_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			if(KSType.is(type, FunctionType)) {
				if(!type.matchArguments(Helper.mapArray(this._arguments, function(argument) {
					return argument.type();
				}))) {
					TypeException.throwNoMatchingFunction(this);
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this._object, type, this));
				}
			}
			else if(KSType.is(type, OverloadedFunctionType)) {
				var args = Helper.mapArray(this._arguments, function(argument) {
					return argument.type();
				});
				var matches = [];
				var __ks_976 = type.functions();
				for(var __ks_977 = 0, __ks_978 = __ks_976.length, __ks_function_1; __ks_977 < __ks_978; ++__ks_977) {
					__ks_function_1 = __ks_976[__ks_977];
					if(__ks_function_1.matchArguments(args)) {
						matches.push(__ks_function_1);
					}
				}
				if(matches.length === 0) {
					TypeException.throwNoMatchingFunction(this);
				}
				else if(matches.length === 1) {
					this.addCallee(new DefaultCallee(this._data, matches[0], this));
				}
				else {
					var __ks_type_1 = new UnionType(this.scope());
					for(var __ks_976 = 0, __ks_977 = matches.length, __ks_function_1; __ks_976 < __ks_977; ++__ks_976) {
						__ks_function_1 = matches[__ks_976];
						__ks_type_1.addType(__ks_function_1.returnType());
					}
					this.addCallee(new DefaultCallee(this._data, this._object, __ks_type_1, this));
				}
			}
			else {
				this.addCallee(new DefaultCallee(this._data, this._object, this));
			}
		},
		makeCallee: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_makeCallee_0.apply(this, arguments);
			}
			else if(Expression.prototype.makeCallee) {
				return Expression.prototype.makeCallee.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_makeMemberCallee_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var value = arguments[++__ks_i];
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			var name;
			if(arguments.length > 1 && (name = arguments[++__ks_i]) !== void 0) {
				if(name !== null && !KSType.is(name, NamedType)) {
					throw new TypeError("'name' is not of type 'NamedType'");
				}
			}
			else {
				name = null;
			}
			if(KSType.is(value, AliasType)) {
				throw new NotImplementedException(this);
			}
			else if(KSType.is(value, ClassVariableType)) {
				this.makeMemberCalleeFromReference(value.type());
			}
			else if(KSType.is(value, ClassType)) {
				var methods, __ks_979;
				if(KSType.isValue(__ks_979 = value.getClassMethods(this._property)) ? (methods = __ks_979, true) : false) {
					var __ks_sealed_1 = false;
					var types = [];
					var m = [];
					var args = Helper.mapArray(this._arguments, function(argument) {
						return argument.type();
					});
					var type;
					for(var __ks_979 = 0, __ks_980 = methods.length, method; __ks_979 < __ks_980; ++__ks_979) {
						method = methods[__ks_979];
						if(method.isSealed()) {
							__ks_sealed_1 = true;
						}
						if(method.matchArguments(args)) {
							m.push(method);
							type = method.returnType();
							if(!type.isContainedIn(types)) {
								types.push(type);
							}
						}
					}
					if(types.length === 0) {
						if(__ks_sealed_1) {
							this.addCallee(new SealedMethodCallee(this._data, name, false, this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, this._object, this));
						}
					}
					else if(types.length === 1) {
						if(__ks_sealed_1) {
							this.addCallee(new SealedMethodCallee(this._data, name, false, m, types[0], this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, this._object, m, types[0], this));
						}
					}
					else {
						throw new NotImplementedException(this);
					}
				}
				else if(value.isExtending()) {
					this.makeMemberCallee(value.extends(), name);
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this._object, this));
				}
			}
			else if(KSType.is(value, FunctionType)) {
				this.makeMemberCalleeFromReference(this._scope.reference("Function"));
			}
			else if(KSType.is(value, NamedType)) {
				this.makeMemberCallee(value.type(), value);
			}
			else if(KSType.is(value, NamespaceType)) {
				var property;
				if(KSType.isValue(__ks_979 = value.getProperty(this._property)) ? (property = __ks_979, true) : false) {
					if(KSType.is(property, SealableType)) {
						this.makeNamespaceCallee(property.type(), property.isSealed(), name);
					}
					else {
						this.makeNamespaceCallee(property, value.isSealedProperty(this._property), name);
					}
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this._object, this));
				}
			}
			else if(KSType.is(value, ObjectType)) {
				var property;
				if(KSType.isValue(__ks_979 = value.getProperty(this._property)) ? (property = __ks_979, true) : false) {
					if(KSType.is(property, FunctionType)) {
						this.makeCallee(property);
					}
					else if(KSType.is(property, OverloadedFunctionType)) {
						this.makeCallee(property);
					}
					else {
						this.addCallee(new DefaultCallee(this._data, this._object, property, this));
					}
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this._object, this));
				}
			}
			else if(KSType.is(value, ParameterType)) {
				this.makeMemberCallee(value.type(), name);
			}
			else if(KSType.is(value, ReferenceType)) {
				this.makeMemberCalleeFromReference(value);
			}
			else if(KSType.is(value, SealableType)) {
				this.makeMemberCallee(value.type(), name);
			}
			else if(KSType.is(value, UnionType)) {
				var __ks_979 = value.types();
				for(var __ks_980 = 0, __ks_981 = __ks_979.length, type; __ks_980 < __ks_981; ++__ks_980) {
					type = __ks_979[__ks_980];
					this.makeMemberCallee(type);
				}
			}
			else {
				this.addCallee(new DefaultCallee(this._data, this._object, this));
			}
		},
		makeMemberCallee: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return CallExpression.prototype.__ks_func_makeMemberCallee_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_makeMemberCalleeFromReference_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var value = arguments[++__ks_i];
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			var reference;
			if(arguments.length > 1 && (reference = arguments[++__ks_i]) !== void 0 && reference !== null) {
				if(!KSType.is(reference, ReferenceType)) {
					throw new TypeError("'reference' is not of type 'ReferenceType'");
				}
			}
			else {
				reference = value;
			}
			if(KSType.is(value, AliasType)) {
				this.makeMemberCalleeFromReference(value.type());
			}
			else if(KSType.is(value, ClassType)) {
				var methods, __ks_982, callee, substitute;
				if(KSType.isValue(__ks_982 = value.getInstanceMethods(this._property)) ? (methods = __ks_982, true) : false) {
					var __ks_sealed_1 = false;
					var types = [];
					var m = [];
					var type;
					for(var __ks_982 = 0, __ks_983 = methods.length, method; __ks_982 < __ks_983; ++__ks_982) {
						method = methods[__ks_982];
						if(method.isSealed()) {
							__ks_sealed_1 = true;
						}
						if(method.matchArguments(Helper.mapArray(this._arguments, function(argument) {
							return argument.type();
						}))) {
							m.push(method);
							type = method.returnType();
							if(!type.isContainedIn(types)) {
								types.push(type);
							}
						}
					}
					if(types.length === 0) {
						if(__ks_sealed_1) {
							this.addCallee(new SealedMethodCallee(this._data, reference.type(), true, this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, this._object, this));
						}
					}
					else if(types.length === 1) {
						var callee, substitute;
						if(__ks_sealed_1) {
							this.addCallee(new SealedMethodCallee(this._data, reference.type(), true, m, types[0], this));
						}
						else if((this._data.callee.object.kind === NodeKind.Identifier) && (KSType.isValue(__ks_982 = this._scope.getVariable(this._data.callee.object.name)) ? (callee = __ks_982, true) : false) && (KSType.isFunction(callee.replaceMemberCall) && KSType.isValue(__ks_982 = callee.replaceMemberCall(this._property, this._arguments)) ? (substitute = __ks_982, true) : false)) {
							this.addCallee(new SubstituteCallee(this._data, substitute, types[0], this));
						}
						else {
							this.addCallee(new DefaultCallee(this._data, this._object, m, types[0], this));
						}
					}
					else {
						throw new NotImplementedException(this);
					}
				}
				else if(value.isExtending()) {
					this.makeMemberCalleeFromReference(value.extends(), reference);
				}
				else if((this._data.callee.object.kind === NodeKind.Identifier) && (KSType.isValue(__ks_982 = this._scope.getVariable(this._data.callee.object.name)) ? (callee = __ks_982, true) : false) && (KSType.isFunction(callee.replaceMemberCall) && KSType.isValue(__ks_982 = callee.replaceMemberCall(this._property, this._arguments)) ? (substitute = __ks_982, true) : false)) {
					this.addCallee(new SubstituteCallee(this._data, substitute, Type.Any, this));
				}
				else {
					this.addCallee(new DefaultCallee(this._data, this._object, this));
				}
			}
			else if(KSType.is(value, FunctionType)) {
				throw new NotImplementedException(this);
			}
			else if(KSType.is(value, NamedType)) {
				this.makeMemberCalleeFromReference(value.type(), reference);
			}
			else if(KSType.is(value, ParameterType)) {
				throw new NotImplementedException(this);
			}
			else if(KSType.is(value, ReferenceType)) {
				this.makeMemberCalleeFromReference(value.type(), value);
			}
			else if(KSType.is(value, UnionType)) {
				var __ks_982 = value.types();
				for(var __ks_983 = 0, __ks_984 = __ks_982.length, type; __ks_983 < __ks_984; ++__ks_983) {
					type = __ks_982[__ks_983];
					this.makeMemberCallee(type);
				}
			}
			else {
				this.addCallee(new DefaultCallee(this._data, this._object, this));
			}
		},
		makeMemberCalleeFromReference: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return CallExpression.prototype.__ks_func_makeMemberCalleeFromReference_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_makeNamespaceCallee_0: function(property, __ks_sealed_1, name) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(property === void 0 || property === null) {
				throw new TypeError("'property' is not nullable");
			}
			if(__ks_sealed_1 === void 0 || __ks_sealed_1 === null) {
				throw new TypeError("'sealed' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			if(KSType.is(property, FunctionType)) {
				if(__ks_sealed_1) {
					this.addCallee(new SealedFunctionCallee(this._data, name, property, property.returnType(), this));
				}
				else {
					this.makeCallee(property);
				}
			}
			else if(KSType.is(property, OverloadedFunctionType)) {
				this.makeCallee(property);
			}
			else {
				this.addCallee(new DefaultCallee(this._data, this._object, property, this));
			}
		},
		makeNamespaceCallee: function() {
			if(arguments.length === 3) {
				return CallExpression.prototype.__ks_func_makeNamespaceCallee_0.apply(this, arguments);
			}
			else if(Expression.prototype.makeNamespaceCallee) {
				return Expression.prototype.makeNamespaceCallee.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			if(KSType.isValue(this._reuseName)) {
				this.statement().scope().releaseTempName(this._reuseName);
			}
			for(var __ks_985 = 0, __ks_986 = this._callees.length, callee; __ks_985 < __ks_986; ++__ks_985) {
				callee = this._callees[__ks_985];
				callee.releaseReusable();
			}
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(mode === Mode.Async) {
				for(var __ks_987 = 0, __ks_988 = this._arguments.length, argument; __ks_987 < __ks_988; ++__ks_987) {
					argument = this._arguments[__ks_987];
					if(argument.isAwaiting()) {
						return argument.toFragments(fragments, mode);
					}
				}
				this.toCallFragments(fragments, mode);
				if(this._arguments.length) {
					fragments.code(", ");
				}
			}
			else {
				if(this._reusable) {
					fragments.code(this._reuseName);
				}
				else if(this.isNullable() && !this._tested) {
					fragments.wrapNullable(this).code(" ? ");
					this._tested = true;
					this.toFragments(fragments, mode);
					fragments.code(" : undefined");
				}
				else {
					for(var __ks_987 = 0, __ks_988 = this._arguments.length, argument; __ks_987 < __ks_988; ++__ks_987) {
						argument = this._arguments[__ks_987];
						if(argument.isAwaiting()) {
							return argument.toFragments(fragments, mode);
						}
					}
					this.toCallFragments(fragments, mode);
					fragments.code(")");
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(mode === Mode.Async) {
				this.toCallFragments(fragments, mode);
				if(this._arguments.length) {
					fragments.code(", ");
				}
			}
			else {
				if(this._reusable) {
					fragments.code(this._reuseName);
				}
				else if(this.isNullable() && !this._tested) {
					fragments.wrapNullable(this).code(" ? ");
					this._tested = true;
					this.toFragments(fragments, mode);
					fragments.code(" : false");
				}
				else {
					this.toCallFragments(fragments, mode);
					fragments.code(")");
				}
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return CallExpression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_toCallFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._callees.length === 1) {
				this._callees[0].toFragments(fragments, mode, this);
			}
			else if(this._callees.length === 2) {
				this.module().flag("Type");
				this._callees[0].toTestFragments(fragments, this);
				fragments.code(" ? ");
				this._callees[0].toFragments(fragments, mode, this);
				fragments.code(") : ");
				this._callees[1].toFragments(fragments, mode, this);
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		toCallFragments: function() {
			if(arguments.length === 2) {
				return CallExpression.prototype.__ks_func_toCallFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toCallFragments) {
				return Expression.prototype.toCallFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(!this._tested) {
				this._tested = true;
				if(this._callees.length === 1) {
					this._callees[0].toNullableFragments(fragments, this);
				}
				else {
					throw new NotImplementedException(this);
				}
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.code(this._reuseName, $equals).compile(this);
			this._reusable = true;
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return CallExpression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toReusableFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return CallExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var Callee = Helper.class({
		$name: "Callee",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons: function(args) {
			if(args.length !== 0) {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return Callee.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return Callee.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_validate_0: function(type, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, FunctionType)) {
				throw new TypeError("'type' is not of type 'FunctionType'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			var __ks_990 = type.throws();
			for(var __ks_991 = 0, __ks_992 = __ks_990.length, __ks_throw_1; __ks_991 < __ks_992; ++__ks_991) {
				__ks_throw_1 = __ks_990[__ks_991];
				Exception.validateReportedError(__ks_throw_1.discardReference(), node);
			}
		},
		validate: function() {
			if(arguments.length === 2) {
				return Callee.prototype.__ks_func_validate_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var DefaultCallee = Helper.class({
		$name: "DefaultCallee",
		$extends: Callee,
		__ks_init: function() {
			Callee.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var __ks__;
			var object = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._data = data;
			if(object === null) {
				var __ks_993;
				this._expression = $compile.expression(data.callee, node);
			}
			else {
				this._expression = new MemberExpression(data.callee, node, node.scope(), object);
			}
			this._expression.analyse();
			this._expression.prepare();
			this._flatten = node._flatten;
			this._nullable = data.nullable || this._expression.isNullable();
			this._nullableComputed = data.nullable && this._expression.isNullable();
			this._scope = data.scope.kind;
			var type = this._expression.type();
			if(type.isClass()) {
				TypeException.throwConstructorWithoutNew(type.name(), node);
			}
			else if(KSType.is(type, FunctionType)) {
				this.validate(type, node);
				this._type = type.returnType();
			}
			else {
				this._type = Type.Any;
			}
		},
		__ks_cons_1: function() {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var __ks__;
			var object = arguments.length > 3 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var type = arguments[++__ks_i];
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._data = data;
			if(object === null) {
				var __ks_994;
				this._expression = $compile.expression(data.callee, node);
			}
			else {
				this._expression = new MemberExpression(data.callee, node, node.scope(), object);
			}
			this._expression.analyse();
			this._expression.prepare();
			this._flatten = node._flatten;
			this._nullable = data.nullable || this._expression.isNullable();
			this._nullableComputed = data.nullable && this._expression.isNullable();
			this._scope = data.scope.kind;
			if(type.isClass()) {
				TypeException.throwConstructorWithoutNew(type.name(), node);
			}
			else if(KSType.is(type, FunctionType)) {
				this.validate(type, node);
				this._type = type.returnType();
			}
			else {
				this._type = Type.Any;
			}
		},
		__ks_cons_2: function(data, object, methods, type, node) {
			if(arguments.length < 5) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(object === void 0 || object === null) {
				throw new TypeError("'object' is not nullable");
			}
			if(methods === void 0 || methods === null) {
				throw new TypeError("'methods' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._data = data;
			this._type = type;
			this._expression = new MemberExpression(data.callee, node, node.scope(), object);
			this._expression.analyse();
			this._expression.prepare();
			this._flatten = node._flatten;
			this._nullable = data.nullable || this._expression.isNullable();
			this._nullableComputed = data.nullable && this._expression.isNullable();
			this._scope = data.scope.kind;
			for(var __ks_995 = 0, __ks_996 = methods.length, method; __ks_995 < __ks_996; ++__ks_995) {
				method = methods[__ks_995];
				this.validate(method, node);
			}
			if(this._type.isClass()) {
				TypeException.throwConstructorWithoutNew(this._type.name(), node);
			}
		},
		__ks_cons: function(args) {
			if(args.length === 2) {
				DefaultCallee.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 3) {
				if(KSType.is(args[1], Type)) {
					DefaultCallee.prototype.__ks_cons_1.apply(this, args);
				}
				else {
					DefaultCallee.prototype.__ks_cons_0.apply(this, args);
				}
			}
			else if(args.length === 4) {
				DefaultCallee.prototype.__ks_cons_1.apply(this, args);
			}
			else if(args.length === 5) {
				DefaultCallee.prototype.__ks_cons_2.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._expression.acquireReusable(this._data.nullable || (this._flatten && (this._scope === ScopeKind.This)));
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return DefaultCallee.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Callee.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return DefaultCallee.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Callee.prototype.isNullable) {
				return Callee.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullableComputed_0: function() {
			return this._nullableComputed;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return DefaultCallee.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			else if(Callee.prototype.isNullableComputed) {
				return Callee.prototype.isNullableComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			this._expression.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return DefaultCallee.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Callee.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(this._flatten) {
				if(this._scope === ScopeKind.Argument) {
					fragments.compileReusable(this._expression).code(".apply(").compile(node._callScope, mode);
				}
				else if((this._scope === ScopeKind.Null) || !KSType.is(this._expression, MemberExpression)) {
					fragments.compileReusable(this._expression).code(".apply(null");
				}
				else {
					fragments.compileReusable(this._expression).code(".apply(").compile(this._expression.caller(), mode);
				}
				CallExpression.toFlattenArgumentsFragments(fragments.code($comma), node._arguments);
			}
			else {
				var __ks_997 = this._scope;
				if(__ks_997 === ScopeKind.Argument) {
					fragments.wrap(this._expression, mode).code(".call(").compile(node._callScope, mode);
					for(var __ks_998 = 0, __ks_999 = node._arguments.length, argument; __ks_998 < __ks_999; ++__ks_998) {
						argument = node._arguments[__ks_998];
						fragments.code($comma).compile(argument, mode);
					}
				}
				else if(__ks_997 === ScopeKind.Null) {
					fragments.wrap(this._expression, mode).code(".call(null");
					for(var __ks_998 = 0, __ks_999 = node._arguments.length, argument; __ks_998 < __ks_999; ++__ks_998) {
						argument = node._arguments[__ks_998];
						fragments.code($comma).compile(argument, mode);
					}
				}
				else if(__ks_997 === ScopeKind.This) {
					fragments.wrap(this._expression, mode).code("(");
					for(var index = 0, __ks_998 = node._arguments.length, argument; index < __ks_998; ++index) {
						argument = node._arguments[index];
						if(index) {
							fragments.code($comma);
						}
						fragments.compile(argument, mode);
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 3) {
				return DefaultCallee.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toFragments) {
				return Callee.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toCurryFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			node.module().flag("Helper");
			var __ks_arguments_1 = node._arguments;
			if(this._flatten) {
				var __ks_1000 = this._scope;
				if(__ks_1000 === ScopeKind.Argument) {
					fragments.code($runtime.helper(node), ".curry(").compile(this._expression).code($comma).compile(node._callScope).code($comma);
				}
				else if(__ks_1000 === ScopeKind.Null) {
					fragments.code($runtime.helper(node), ".curry(").compile(this._expression).code(", null, ");
				}
				else if(__ks_1000 === ScopeKind.This) {
					fragments.code($runtime.helper(node), ".curry(").compile(this._expression).code($comma).compile(this._expression.caller()).code($comma);
				}
				CallExpression.toFlattenArgumentsFragments(fragments, __ks_arguments_1);
			}
			else {
				var __ks_1000 = this._scope;
				if(__ks_1000 === ScopeKind.Argument) {
					fragments.code($runtime.helper(node), ".vcurry(").compile(this._expression).code($comma).compile(node._callScope);
				}
				else if(__ks_1000 === ScopeKind.Null) {
					fragments.code($runtime.helper(node), ".vcurry(").compile(this._expression).code(", null");
				}
				else if(__ks_1000 === ScopeKind.This) {
					fragments.code($runtime.helper(node), ".vcurry(").compile(this._expression).code(", ").compile(this._expression.caller());
				}
				for(var __ks_1000 = 0, __ks_1001 = __ks_arguments_1.length, argument; __ks_1000 < __ks_1001; ++__ks_1000) {
					argument = __ks_arguments_1[__ks_1000];
					fragments.code($comma).compile(argument);
				}
			}
		},
		toCurryFragments: function() {
			if(arguments.length === 3) {
				return DefaultCallee.prototype.__ks_func_toCurryFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toCurryFragments) {
				return Callee.prototype.toCurryFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(this._data.nullable) {
				if(this._expression.isNullable()) {
					fragments.compileNullable(this._expression).code(" && ");
				}
				fragments.code($runtime.type(node) + ".isFunction(").compileReusable(this._expression).code(")");
			}
			else if(this._expression.isNullable()) {
				fragments.compileNullable(this._expression);
			}
			else {
				fragments.code($runtime.type(node) + ".isValue(").compileReusable(node).code(")");
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 2) {
				return DefaultCallee.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toNullableFragments) {
				return Callee.prototype.toNullableFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._expression.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return DefaultCallee.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Callee.prototype.translate) {
				return Callee.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		__ks_func_type_1: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			this._type = type;
			return this;
		},
		type: function() {
			if(arguments.length === 0) {
				return DefaultCallee.prototype.__ks_func_type_0.apply(this);
			}
			else if(arguments.length === 1) {
				return DefaultCallee.prototype.__ks_func_type_1.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SealedFunctionCallee = Helper.class({
		$name: "SealedFunctionCallee",
		$extends: Callee,
		__ks_init: function() {
			Callee.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, variable, __ks_function_1, type, node) {
			if(arguments.length < 5) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, NamedType)) {
				throw new TypeError("'variable' is not of type 'NamedType'");
			}
			if(__ks_function_1 === void 0 || __ks_function_1 === null) {
				throw new TypeError("'function' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._variable = variable;
			this._type = type;
			this._object = node._object;
			this._property = node._property;
			var nullable = data.nullable || node._object.isNullable();
			var nullableComputed = data.nullable && node._object.isNullable();
			this.validate(__ks_function_1, node);
		},
		__ks_cons: function(args) {
			if(args.length === 5) {
				SealedFunctionCallee.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_translate_0: function() {
			this._object.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SealedFunctionCallee.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Callee.prototype.translate) {
				return Callee.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return SealedFunctionCallee.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Callee.prototype.isNullable) {
				return Callee.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullableComputed_0: function() {
			return this._nullableComputed;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return SealedFunctionCallee.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			else if(Callee.prototype.isNullableComputed) {
				return Callee.prototype.isNullableComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(node._flatten) {
				var __ks_1002 = node._data.scope.kind;
				if(__ks_1002 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1002 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1002 === ScopeKind.This) {
					throw new NotImplementedException(node);
				}
			}
			else {
				var __ks_1002 = node._data.scope.kind;
				if(__ks_1002 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1002 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1002 === ScopeKind.This) {
					fragments.code("" + this._variable.getSealedName() + "." + this._property + "(");
					for(var i = 0, __ks_1003 = node._arguments.length; i < __ks_1003; ++i) {
						if(i !== 0) {
							fragments.code($comma);
						}
						fragments.compile(node._arguments[i]);
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 3) {
				return SealedFunctionCallee.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toFragments) {
				return Callee.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._type.toTestFragments(fragments, this._object);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return SealedFunctionCallee.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toTestFragments) {
				return Callee.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return SealedFunctionCallee.prototype.__ks_func_type_0.apply(this);
			}
			else if(Callee.prototype.type) {
				return Callee.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SealedMethodCallee = Helper.class({
		$name: "SealedMethodCallee",
		$extends: Callee,
		__ks_init: function() {
			Callee.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var variable = arguments[++__ks_i];
			if(variable === void 0 || variable === null) {
				throw new TypeError("'variable' is not nullable");
			}
			else if(!KSType.is(variable, NamedType)) {
				throw new TypeError("'variable' is not of type 'NamedType'");
			}
			var instance = arguments[++__ks_i];
			if(instance === void 0 || instance === null) {
				throw new TypeError("'instance' is not nullable");
			}
			else if(!KSType.isBoolean(instance)) {
				throw new TypeError("'instance' is not of type 'Boolean'");
			}
			var __ks__;
			var methods = arguments.length > 4 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : [];
			var type;
			if(arguments.length > 5 && (type = arguments[++__ks_i]) !== void 0 && type !== null) {
				if(!KSType.is(type, Type)) {
					throw new TypeError("'type' is not of type 'Type'");
				}
			}
			else {
				type = Type.Any;
			}
			var node = arguments[++__ks_i];
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._variable = variable;
			this._instance = instance;
			this._type = type;
			this._node = node;
			this._object = node._object;
			this._property = node._property;
			var nullable = data.nullable || node._object.isNullable();
			var nullableComputed = data.nullable && node._object.isNullable();
			for(var __ks_1004 = 0, __ks_1005 = methods.length, method; __ks_1004 < __ks_1005; ++__ks_1004) {
				method = methods[__ks_1004];
				this.validate(method, node);
			}
		},
		__ks_cons: function(args) {
			if(args.length >= 4 && args.length <= 6) {
				SealedMethodCallee.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_translate_0: function() {
			this._object.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return SealedMethodCallee.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Callee.prototype.translate) {
				return Callee.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return SealedMethodCallee.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Callee.prototype.isNullable) {
				return Callee.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullableComputed_0: function() {
			return this._nullableComputed;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return SealedMethodCallee.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			else if(Callee.prototype.isNullableComputed) {
				return Callee.prototype.isNullableComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			if(node._flatten) {
				var __ks_1006 = node._data.scope.kind;
				if(__ks_1006 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1006 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1006 === ScopeKind.This) {
					if(this._instance) {
						fragments.code("" + this._variable.getSealedPath() + "._im_" + this._property + ".apply(null, ");
						CallExpression.toFlattenArgumentsFragments(fragments, node._arguments, this._object);
					}
					else {
						fragments.code("" + this._variable.getSealedPath() + "._cm_" + this._property + ".apply(null, ");
						CallExpression.toFlattenArgumentsFragments(fragments, node._arguments);
					}
				}
			}
			else {
				var __ks_1006 = node._data.scope.kind;
				if(__ks_1006 === ScopeKind.Argument) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1006 === ScopeKind.Null) {
					throw new NotImplementedException(node);
				}
				else if(__ks_1006 === ScopeKind.This) {
					if(this._instance) {
						fragments.code("" + this._variable.getSealedPath() + "._im_" + this._property + "(").compile(this._object);
						for(var i = 0, __ks_1007 = node._arguments.length; i < __ks_1007; ++i) {
							fragments.code($comma).compile(node._arguments[i]);
						}
					}
					else {
						fragments.code("" + this._variable.getSealedPath() + "._cm_" + this._property + "(");
						for(var i = 0, __ks_1007 = node._arguments.length; i < __ks_1007; ++i) {
							if(i !== 0) {
								fragments.code($comma);
							}
							fragments.compile(node._arguments[i]);
						}
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 3) {
				return SealedMethodCallee.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toFragments) {
				return Callee.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toTestFragments_0: function(fragments, node) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._node.scope().reference(this._variable).toTestFragments(fragments, this._object);
		},
		toTestFragments: function() {
			if(arguments.length === 2) {
				return SealedMethodCallee.prototype.__ks_func_toTestFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toTestFragments) {
				return Callee.prototype.toTestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return SealedMethodCallee.prototype.__ks_func_type_0.apply(this);
			}
			else if(Callee.prototype.type) {
				return Callee.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SubstituteCallee = Helper.class({
		$name: "SubstituteCallee",
		$extends: Callee,
		__ks_init: function() {
			Callee.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(data, substitute, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(substitute === void 0 || substitute === null) {
				throw new TypeError("'substitute' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._substitute = substitute;
			this._nullable = data.nullable || substitute.isNullable();
			this._nullableComputed = data.nullable && substitute.isNullable();
			var __ks_1008;
			this._type = this._substitute.type();
		},
		__ks_cons_1: function(data, substitute, type, node) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(substitute === void 0 || substitute === null) {
				throw new TypeError("'substitute' is not nullable");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			else if(!KSType.is(type, Type)) {
				throw new TypeError("'type' is not of type 'Type'");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			Callee.prototype.__ks_cons.call(this, []);
			this._substitute = substitute;
			this._type = type;
			this._nullable = data.nullable || substitute.isNullable();
			this._nullableComputed = data.nullable && substitute.isNullable();
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				SubstituteCallee.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 4) {
				SubstituteCallee.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return SubstituteCallee.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(Callee.prototype.isNullable) {
				return Callee.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullableComputed_0: function() {
			return this._nullableComputed;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return SubstituteCallee.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			else if(Callee.prototype.isNullableComputed) {
				return Callee.prototype.isNullableComputed.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode, node) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(node === void 0 || node === null) {
				throw new TypeError("'node' is not nullable");
			}
			this._substitute.toFragments(fragments, mode);
		},
		toFragments: function() {
			if(arguments.length === 3) {
				return SubstituteCallee.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Callee.prototype.toFragments) {
				return Callee.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return SubstituteCallee.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Callee.prototype.translate) {
				return Callee.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return SubstituteCallee.prototype.__ks_func_type_0.apply(this);
			}
			else if(Callee.prototype.type) {
				return Callee.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ConditionalExpression = Helper.class({
		$name: "ConditionalExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_1009;
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenTrue = $compile.expression(this._data.whenTrue, this);
			this._whenTrue.analyse();
			this._whenFalse = $compile.expression(this._data.whenFalse, this);
			this._whenFalse.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._whenTrue.prepare();
			this._whenFalse.prepare();
			var t = this._whenTrue.type();
			var f = this._whenFalse.type();
			this._type = t.equals(f) ? t : new UnionType(this.scope(), [t, f]);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenTrue.translate();
			this._whenFalse.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrapBoolean(this._condition).code(" ? ").compile(this._whenTrue).code(" : ").compile(this._whenFalse);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ConditionalExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ConditionalExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CreateExpression = Helper.class({
		$name: "CreateExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._arguments = [];
			this._flatten = false;
			this._type = Type.Any;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			CreateExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._class = $compile.expression(this._data.class, this);
			this._class.analyse();
			var es5 = this._options.format.spreads === "es5";
			for(var __ks_1010 = 0, __ks_1011 = this._data.arguments.length, argument; __ks_1010 < __ks_1011; ++__ks_1010) {
				argument = this._data.arguments[__ks_1010];
				this._arguments.push(argument = $compile.expression(argument, this));
				argument.analyse();
				if(es5 && KSType.is(argument, UnaryOperatorSpread)) {
					this._flatten = true;
				}
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._class.prepare();
			for(var __ks_1012 = 0, __ks_1013 = this._arguments.length, argument; __ks_1012 < __ks_1013; ++__ks_1012) {
				argument = this._arguments[__ks_1012];
				argument.prepare();
			}
			var type;
			if(KSType.isValue(__ks_1012 = this._class.type()) ? (type = __ks_1012, false) : true) {
				ReferenceException.throwNotDefined(this._class.type().name(), this);
			}
			else if(type.isNamed() && KSType.is(type.type(), ClassType)) {
				if(type.type().isAbstract()) {
					TypeException.throwCannotBeInstantiated(type.name(), this);
				}
				else if(!type.type().matchArguments(Helper.mapArray(this._arguments, function(argument) {
					return argument.type();
				}))) {
					TypeException.throwNoMatchingConstructor(type.name(), this);
				}
				this._type = this._scope.reference(type);
			}
			else if(!type.isAny() && !type.isClass()) {
				TypeException.throwNotClass(type.name(), this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._class.translate();
			for(var __ks_1014 = 0, __ks_1015 = this._arguments.length, argument; __ks_1014 < __ks_1015; ++__ks_1014) {
				argument = this._arguments[__ks_1014];
				argument.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._flatten) {
				this.module().flag("Helper");
				fragments.code("" + $runtime.helper(this) + ".create(").compile(this._class);
				CallExpression.toFlattenArgumentsFragments(fragments.code($comma), this._arguments);
				fragments.code(")");
			}
			else {
				fragments.code("new ").compile(this._class).code("(");
				for(var i = 0, __ks_1016 = this._arguments.length; i < __ks_1016; ++i) {
					if(i !== 0) {
						fragments.code($comma);
					}
					fragments.compile(this._arguments[i]);
				}
				fragments.code(")");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CreateExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return CreateExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var CurryExpression = Helper.class({
		$name: "CurryExpression",
		$extends: CallExpression,
		__ks_init: function() {
			CallExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			CallExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_makeCallee_0: function(type) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(type === void 0 || type === null) {
				throw new TypeError("'type' is not nullable");
			}
			this.addCallee(new DefaultCallee(this._data, this._object, this));
		},
		makeCallee: function() {
			if(arguments.length === 1) {
				return CurryExpression.prototype.__ks_func_makeCallee_0.apply(this, arguments);
			}
			return CallExpression.prototype.makeCallee.apply(this, arguments);
		},
		__ks_func_toCallFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._callees.length === 1) {
				this._callees[0].toCurryFragments(fragments, mode, this);
			}
			else if(this._callees.length === 2) {
				this.module().flag("Type");
				this._callees[0].toTestFragments(fragments, this);
				fragments.code(" ? ");
				this._callees[0].toCurryFragments(fragments, mode, this);
				fragments.code(") : ");
				this._callees[1].toCurryFragments(fragments, mode, this);
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		toCallFragments: function() {
			if(arguments.length === 2) {
				return CurryExpression.prototype.__ks_func_toCallFragments_0.apply(this, arguments);
			}
			return CallExpression.prototype.toCallFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Function");
		},
		type: function() {
			if(arguments.length === 0) {
				return CurryExpression.prototype.__ks_func_type_0.apply(this);
			}
			return CallExpression.prototype.type.apply(this, arguments);
		}
	});
	var EnumExpression = Helper.class({
		$name: "EnumExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_1017;
			this._enum = $compile.expression(this._data.enum, this);
			this._enum.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._enum.prepare();
			var named = this._enum.type();
			if(!named.type().hasElement(this._data.member.name)) {
				ReferenceException.throwNotDefinedEnumElement(this._data.member.name, named.name(), this);
			}
			var __ks_1018;
			this._type = named.type().type();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._enum.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._enum).code(".", this._data.member.name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return EnumExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return EnumExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var FunctionExpression = Helper.class({
		$name: "FunctionExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._awaiting = false;
			this._exit = false;
			this._isObjectMember = false;
			this._statements = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			FunctionExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, new Scope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				FunctionExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._scope.define("this", true, this);
			this._parameters = [];
			for(var __ks_1019 = 0, __ks_1020 = this._data.parameters.length, parameter; __ks_1019 < __ks_1020; ++__ks_1019) {
				parameter = this._data.parameters[__ks_1019];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
			this._isObjectMember = KSType.is(this._parent.parent(), ObjectExpression);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_1021 = 0, __ks_1022 = this._parameters.length, parameter; __ks_1021 < __ks_1022; ++__ks_1021) {
				parameter = this._parameters[__ks_1021];
				parameter.prepare();
			}
			this._type = new FunctionType(Helper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_1023 = 0, __ks_1024 = this._parameters.length, parameter; __ks_1023 < __ks_1024; ++__ks_1023) {
				parameter = this._parameters[__ks_1023];
				parameter.translate();
			}
			this._statements = [];
			var __ks_1023 = $ast.body(this._data.body);
			for(var __ks_1024 = 0, __ks_1025 = __ks_1023.length, statement; __ks_1024 < __ks_1025; ++__ks_1024) {
				statement = __ks_1023[__ks_1024];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
				if(statement.isAwait()) {
					this._awaiting = true;
				}
			}
			var rtype = this._type.returnType();
			var na = !rtype.isAny();
			for(var __ks_1023 = 0, __ks_1024 = this._statements.length, statement; __ks_1023 < __ks_1024; ++__ks_1023) {
				statement = this._statements[__ks_1023];
				statement.prepare();
				if(this._exit) {
					SyntaxException.throwDeadCode(statement);
				}
				else if(na && !statement.isReturning(rtype)) {
					TypeException.throwUnexpectedReturnedType(rtype, statement);
				}
				else {
					this._exit = statement.isExit();
				}
			}
			for(var __ks_1023 = 0, __ks_1024 = this._statements.length, statement; __ks_1023 < __ks_1024; ++__ks_1023) {
				statement = this._statements[__ks_1023];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isConsumedError_0: function(error) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(error === void 0 || error === null) {
				throw new TypeError("'error' is not nullable");
			}
			return this._type.isCatchingError(error);
		},
		isConsumedError: function() {
			if(arguments.length === 1) {
				return FunctionExpression.prototype.__ks_func_isConsumedError_0.apply(this, arguments);
			}
			return Expression.prototype.isConsumedError.apply(this, arguments);
		},
		__ks_func_isInstanceMethod_0: function() {
			return false;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Expression.prototype.isInstanceMethod) {
				return Expression.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return FunctionExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Expression.prototype.parameters) {
				return Expression.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var surround;
			if(this._options.format.functions === "es5") {
				if(this._isObjectMember && !this._parent.parent().hasComputedProperties()) {
					surround = {
						beforeParameters: ": function(",
						afterParameters: ")",
						footer: ""
					};
				}
				else {
					surround = {
						beforeParameters: "function(",
						afterParameters: ")",
						footer: ""
					};
				}
			}
			else {
				if(this._isObjectMember) {
					surround = {
						beforeParameters: "(",
						afterParameters: ")",
						footer: ""
					};
				}
				else {
					surround = {
						beforeParameters: "function(",
						afterParameters: ")",
						footer: ""
					};
				}
			}
			fragments.code(surround.beforeParameters);
			var block = Parameter.toFragments(this, fragments, ParameterMode.Default, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code(surround.afterParameters).newBlock();
			});
			if(this._awaiting) {
				var index = -1;
				var item;
				for(var i = 0, __ks_1026 = this._statements.length, statement; index === -1 && i < __ks_1026; ++i) {
					statement = this._statements[i];
					var __ks_1027;
					if(KSType.isValue(__ks_1027 = statement.toFragments(block, Mode.None)) ? (item = __ks_1027, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(this._statements.slice(index + 1));
				}
			}
			else {
				for(var __ks_1026 = 0, __ks_1027 = this._statements.length, statement; __ks_1026 < __ks_1027; ++__ks_1026) {
					statement = this._statements[__ks_1026];
					block.compile(statement);
				}
				if(!this._exit && this._type.isAsync()) {
					block.line("__ks_cb()");
				}
			}
			block.done();
			if(surround.footer.length > 0) {
				fragments.code(surround.footer);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return FunctionExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return FunctionExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var LambdaExpression = Helper.class({
		$name: "LambdaExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._awaiting = false;
			this._exit = false;
			this._statements = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			LambdaExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, new Scope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				LambdaExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._parameters = [];
			for(var __ks_1028 = 0, __ks_1029 = this._data.parameters.length, parameter; __ks_1028 < __ks_1029; ++__ks_1028) {
				parameter = this._data.parameters[__ks_1028];
				this._parameters.push(parameter = new Parameter(parameter, this));
				parameter.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_1030 = 0, __ks_1031 = this._parameters.length, parameter; __ks_1030 < __ks_1031; ++__ks_1030) {
				parameter = this._parameters[__ks_1030];
				parameter.prepare();
			}
			this._type = new FunctionType(Helper.mapArray(this._parameters, function(parameter) {
				return parameter.type();
			}), this._data, this);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_1032 = 0, __ks_1033 = this._parameters.length, parameter; __ks_1032 < __ks_1033; ++__ks_1032) {
				parameter = this._parameters[__ks_1032];
				parameter.translate();
			}
			this._statements = [];
			var __ks_1032 = $ast.body(this._data.body);
			for(var __ks_1033 = 0, __ks_1034 = __ks_1032.length, statement; __ks_1033 < __ks_1034; ++__ks_1033) {
				statement = __ks_1032[__ks_1033];
				this._statements.push(statement = $compile.statement(statement, this));
				statement.analyse();
				if(statement.isAwait()) {
					this._awaiting = true;
				}
			}
			var rtype = this._type.returnType();
			var na = !rtype.isAny();
			for(var __ks_1032 = 0, __ks_1033 = this._statements.length, statement; __ks_1032 < __ks_1033; ++__ks_1032) {
				statement = this._statements[__ks_1032];
				statement.prepare();
				if(this._exit) {
					SyntaxException.throwDeadCode(statement);
				}
				else if(na && !statement.isReturning(rtype)) {
					TypeException.throwUnexpectedReturnedType(rtype, statement);
				}
				else {
					this._exit = statement.isExit();
				}
			}
			for(var __ks_1032 = 0, __ks_1033 = this._statements.length, statement; __ks_1032 < __ks_1033; ++__ks_1032) {
				statement = this._statements[__ks_1032];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isInstanceMethod_0: function() {
			return false;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(Expression.prototype.isInstanceMethod) {
				return Expression.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			for(var __ks_1035 = 0, __ks_1036 = this._parameters.length, parameter; __ks_1035 < __ks_1036; ++__ks_1035) {
				parameter = this._parameters[__ks_1035];
				if(parameter.isUsingVariable(name)) {
					return true;
				}
			}
			for(var __ks_1035 = 0, __ks_1036 = this._statements.length, statement; __ks_1035 < __ks_1036; ++__ks_1035) {
				statement = this._statements[__ks_1035];
				if(statement.isUsingVariable(name)) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return LambdaExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_parameters_0: function() {
			return this._parameters;
		},
		parameters: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_parameters_0.apply(this);
			}
			else if(Expression.prototype.parameters) {
				return Expression.prototype.parameters.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var surround = $function.surround(this);
			fragments.code(surround.beforeParameters);
			var block = Parameter.toFragments(this, fragments, surround.arrow ? ParameterMode.ArrowFunction : ParameterMode.Default, function(fragments) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				return fragments.code(surround.afterParameters).newBlock();
			});
			if(this._awaiting) {
				var index = -1;
				var item;
				for(var i = 0, __ks_1037 = this._statements.length, statement; index === -1 && i < __ks_1037; ++i) {
					statement = this._statements[i];
					var __ks_1038;
					if(KSType.isValue(__ks_1038 = statement.toFragments(block, Mode.None)) ? (item = __ks_1038, true) : false) {
						index = i;
					}
				}
				if(index !== -1) {
					item(this._statements.slice(index + 1));
				}
			}
			else {
				for(var __ks_1037 = 0, __ks_1038 = this._statements.length, statement; __ks_1037 < __ks_1038; ++__ks_1037) {
					statement = this._statements[__ks_1037];
					block.compile(statement);
				}
				if(!this._exit && this._type.isAsync()) {
					block.line("__ks_cb()");
				}
			}
			block.done();
			if(surround.footer.length > 0) {
				fragments.code(surround.footer);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return LambdaExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return LambdaExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var IfExpression = Helper.class({
		$name: "IfExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_1039;
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenTrue = $compile.expression(this._data.whenTrue, this);
			this._whenTrue.analyse();
			if(KSType.isValue(this._data.whenFalse)) {
				this._whenFalse = $compile.expression(this._data.whenFalse, this);
				this._whenFalse.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._whenTrue.prepare();
			if(KSType.isValue(this._whenFalse)) {
				this._whenFalse.prepare();
				var t = this._whenTrue.type();
				var f = this._whenFalse.type();
				if(t.equals(f)) {
					this._type = t;
				}
				else {
					var __ks_1040;
					this._type = Type.union(this._scope, t, f);
				}
			}
			else {
				this._type = this._whenTrue.type();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenTrue.translate();
			if(KSType.isValue(this._whenFalse)) {
				this._whenFalse.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(KSType.isValue(this._whenFalse)) {
				fragments.wrapBoolean(this._condition).code(" ? ").compile(this._whenTrue).code(" : ").compile(this._whenFalse);
			}
			else {
				fragments.wrapBoolean(this._condition).code(" ? ").compile(this._whenTrue).code(" : undefined");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return IfExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			ctrl.code("if(");
			if(this._condition.isAssignable()) {
				ctrl.code("(").compileBoolean(this._condition).code(")");
			}
			else {
				ctrl.compileBoolean(this._condition);
			}
			ctrl.code(")").step().line(this._whenTrue).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return IfExpression.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toStatementFragments) {
				return Expression.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return IfExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var MemberExpression = Helper.class({
		$name: "MemberExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._prepareObject = true;
			this._tested = false;
			this._type = Type.Any;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			MemberExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function(data, parent, scope) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
		},
		__ks_cons_1: function(data, parent, scope, object) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			if(scope === void 0 || scope === null) {
				throw new TypeError("'scope' is not nullable");
			}
			else if(!KSType.is(scope, AbstractScope)) {
				throw new TypeError("'scope' is not of type 'AbstractScope'");
			}
			if(object === void 0 || object === null) {
				throw new TypeError("'object' is not nullable");
			}
			Expression.prototype.__ks_cons.call(this, [data, parent, scope]);
			this._object = object;
			this._prepareObject = false;
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				MemberExpression.prototype.__ks_cons_0.apply(this, args);
			}
			else if(args.length === 4) {
				MemberExpression.prototype.__ks_cons_1.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			if(this._prepareObject) {
				var __ks_1041;
				this._object = $compile.expression(this._data.object, this);
				this._object.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._prepareObject) {
				this._object.prepare();
				if(this._data.computed) {
					this._property = $compile.expression(this._data.property, this);
					this._property.analyse();
					this._property.prepare();
					if(this._object.type().isArray()) {
						this._type = this._object.type().parameter();
					}
				}
				else {
					this._property = this._data.property.name;
					var type = this._object.type();
					var property, __ks_1042;
					if(KSType.isValue(__ks_1042 = type.getProperty(this._property)) ? (property = __ks_1042, false) : true) {
						if(type.isEnum()) {
							SyntaxException.throwInvalidEnumAccess(this);
						}
						else {
							ReferenceException.throwNotDefinedProperty(this._property, this);
						}
					}
					this._type = property.discardVariable();
				}
			}
			else if(this._data.computed) {
				this._property = $compile.expression(this._data.property, this);
				this._property.analyse();
				this._property.prepare();
			}
			else {
				this._property = this._data.property.name;
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._object.translate();
			if(this._data.computed) {
				this._property.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			if(this._object.isCallable()) {
				this._object.acquireReusable(this._data.nullable || acquire);
			}
			if(this._data.computed && !KSType.isString(this._property) && this._property.isCallable()) {
				this._property.acquireReusable(this._data.nullable || acquire);
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_caller_0: function() {
			return this._object;
		},
		caller: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_caller_0.apply(this);
			}
			else if(Expression.prototype.caller) {
				return Expression.prototype.caller.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isCallable_0: function() {
			return this._object.isCallable() || (this._data.computed && this._property.isCallable());
		},
		isCallable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isCallable_0.apply(this);
			}
			return Expression.prototype.isCallable.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return this.isNullable() && !this._tested;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isEntangled_0: function() {
			return this.isCallable() || this.isNullable();
		},
		isEntangled: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isEntangled_0.apply(this);
			}
			return Expression.prototype.isEntangled.apply(this, arguments);
		},
		__ks_func_isMacro_0: function() {
			return false;
		},
		isMacro: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isMacro_0.apply(this);
			}
			else if(Expression.prototype.isMacro) {
				return Expression.prototype.isMacro.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return this._data.nullable || this._object.isNullable() || (this._data.computed && this._property.isNullable());
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNullableComputed_0: function() {
			return ((this._object.isNullable() ? 1 : 0) + (this._data.nullable ? 1 : 0) + ((this._data.computed && this._property.isNullable()) ? 1 : 0)) > 1;
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			return Expression.prototype.isNullableComputed.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._object.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			if(this._object.isCallable()) {
				this._object.releaseReusable();
			}
			if(this._data.computed && !KSType.isString(this._property) && this._property.isCallable()) {
				this._property.releaseReusable();
			}
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this.isNullable() && !this._tested) {
				fragments.wrapNullable(this).code(" ? ").compile(this._object);
				if(this._data.computed) {
					fragments.code("[").compile(this._property).code("] : undefined");
				}
				else {
					fragments.code($dot).compile(this._property).code(" : undefined");
				}
			}
			else {
				var type = this._object.type();
				if(this._object.isComputed() || (this._object._data.kind === NodeKind.NumericExpression)) {
					fragments.code("(").compile(this._object).code(")");
				}
				else if(type.isNamespace() && type.isSealed() && type.type().isSealedProperty(this._property)) {
					fragments.code(type.getSealedName());
				}
				else {
					fragments.compile(this._object);
				}
				if(this._data.computed) {
					fragments.code("[").compile(this._property).code("]");
				}
				else {
					fragments.code($dot).compile(this._property);
				}
				if(KSType.is(this._type, ClassMethodSetType)) {
					if(!KSType.is(this._parent, UnaryOperatorExpression)) {
						fragments.code(".bind(").compile(this._object).code(")");
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return MemberExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this.isNullable() && !this._tested) {
				if(this._data.computed) {
					fragments.compileNullable(this).code(" ? ").compile(this._object).code("[").compile(this._property).code("]").code(" : false");
				}
				else {
					fragments.compileNullable(this).code(" ? ").compile(this._object).code($dot).compile(this._property).code(" : false");
				}
			}
			else {
				if(this._data.computed) {
					fragments.wrap(this._object).code("[").compile(this._property).code("]");
				}
				else {
					fragments.wrap(this._object).code($dot).compile(this._property);
				}
			}
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return MemberExpression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(!this._tested) {
				this._tested = true;
				var conditional = false;
				if(this._object.isNullable()) {
					fragments.compileNullable(this._object);
					conditional = true;
				}
				if(this._data.nullable) {
					if(conditional) {
						fragments.code(" && ");
					}
					fragments.code($runtime.type(this) + ".isValue(").compileReusable(this._object).code(")");
					conditional = true;
				}
				if(this._data.computed && this._property.isNullable()) {
					if(conditional) {
						fragments.code(" && ");
					}
					fragments.compileNullable(this._property);
				}
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		},
		__ks_func_toReusableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var objectCallable = this._object.isCallable();
			if(objectCallable) {
				fragments.code("(").compileReusable(this._object).code(", ").compile(this._object);
			}
			else {
				fragments.wrap(this._object);
			}
			if(this._data.computed) {
				if(this._property.isCallable()) {
					fragments.code("[").compileReusable(this._property).code("]");
				}
				else {
					fragments.code("[").compile(this._property).code("]");
				}
			}
			else {
				fragments.code($dot).compile(this._property);
			}
			if(objectCallable) {
				fragments.code(")");
			}
		},
		toReusableFragments: function() {
			if(arguments.length === 1) {
				return MemberExpression.prototype.__ks_func_toReusableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toReusableFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return MemberExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ObjectExpression = Helper.class({
		$name: "ObjectExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._computed = false;
			this._names = {};
			this._properties = [];
			this._reuseName = null;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ObjectExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var ref;
			for(var __ks_1043 = 0, __ks_1044 = this._data.properties.length, property; __ks_1043 < __ks_1044; ++__ks_1043) {
				property = this._data.properties[__ks_1043];
				if((property.name.kind === NodeKind.Identifier) || (property.name.kind === NodeKind.Literal)) {
					property = new ObjectLiteralMember(property, this);
					property.analyse();
					if(this._names[property.reference()] === true) {
						SyntaxException.throwDuplicateKey(property);
					}
					this._names[property.reference()] = true;
				}
				else {
					property = new ObjectComputedMember(property, this);
					property.analyse();
					this._computed = true;
				}
				this._properties.push(property);
			}
			if(this._computed) {
				this._computed = this._options.format.properties === "es5";
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_1045 = 0, __ks_1046 = this._properties.length, property; __ks_1045 < __ks_1046; ++__ks_1045) {
				property = this._properties[__ks_1045];
				property.prepare();
			}
			this._type = this._scope.reference("Object");
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_1047 = 0, __ks_1048 = this._properties.length, property; __ks_1047 < __ks_1048; ++__ks_1047) {
				property = this._properties[__ks_1047];
				property.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			if(this._computed) {
				this._reuseName = this.statement().scope().acquireTempName(this.statement());
			}
			for(var __ks_1049 = 0, __ks_1050 = this._properties.length, property; __ks_1049 < __ks_1050; ++__ks_1049) {
				property = this._properties[__ks_1049];
				property.acquireReusable(acquire);
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return ObjectExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			for(var __ks_1051 = 0, __ks_1052 = this._properties.length, property; __ks_1051 < __ks_1052; ++__ks_1051) {
				property = this._properties[__ks_1051];
				if(property.isUsingVariable(name)) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ObjectExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasComputedProperties_0: function() {
			return this._computed;
		},
		hasComputedProperties: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_hasComputedProperties_0.apply(this);
			}
			else if(Expression.prototype.hasComputedProperties) {
				return Expression.prototype.hasComputedProperties.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_reference_0: function() {
			return this._parent.reference();
		},
		reference: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_reference_0.apply(this);
			}
			return Expression.prototype.reference.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			if(this._computed) {
				this.statement().scope().releaseTempName(this._reuseName);
			}
			for(var __ks_1053 = 0, __ks_1054 = this._properties.length, property; __ks_1053 < __ks_1054; ++__ks_1053) {
				property = this._properties[__ks_1053];
				property.releaseReusable();
			}
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._computed) {
				fragments.code("(", this._reuseName, " = {}", $comma);
				for(var __ks_1055 = 0, __ks_1056 = this._properties.length, property; __ks_1055 < __ks_1056; ++__ks_1055) {
					property = this._properties[__ks_1055];
					property.toComputedFragments(fragments, this._reuseName);
				}
				fragments.code(this._reuseName, ")");
			}
			else {
				var object = fragments.newObject();
				for(var __ks_1055 = 0, __ks_1056 = this._properties.length, property; __ks_1055 < __ks_1056; ++__ks_1055) {
					property = this._properties[__ks_1055];
					object.newLine().compile(property);
				}
				object.done();
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ObjectExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ObjectExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ObjectLiteralMember = Helper.class({
		$name: "ObjectLiteralMember",
		$extends: Expression,
		__ks_init_1: function() {
			this._function = false;
			this._shorthand = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ObjectLiteralMember.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_1057;
			this._options = Attribute.configure(this._data, this._options, true, AttributeTarget.Property);
			if(this._data.name.kind === NodeKind.Identifier) {
				this._name = new Literal(this._data.name, this, this._scope, this._data.name.name);
				this.reference("." + this._data.name.name);
			}
			else {
				this._name = new StringLiteral(this._data.name, this);
				this.reference("[" + $quote(this._data.name.value) + "]");
			}
			if(this._data.kind === NodeKind.ObjectMember) {
				this._value = $compile.expression(this._data.value, this);
				this._function = this._data.value.kind === NodeKind.FunctionExpression;
				this._shorthand = (this._options.format.properties !== "es5") && (this._data.name.kind === NodeKind.Identifier) && (this._data.value.kind === NodeKind.Identifier) && (this._data.name.name === this._data.value.name);
			}
			else {
				this._value = $compile.expression(this._data.name, this);
				this._shorthand = this._options.format.properties !== "es5";
			}
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectLiteralMember.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._value.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ObjectLiteralMember.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ObjectLiteralMember.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			return this._value.acquireReusable(acquire);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return ObjectLiteralMember.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._value.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ObjectLiteralMember.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			return this._value.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return ObjectLiteralMember.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toComputedFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			fragments.code(name).code(this._reference).code($equals).compile(this._value).code($comma);
		},
		toComputedFragments: function() {
			if(arguments.length === 2) {
				return ObjectLiteralMember.prototype.__ks_func_toComputedFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toComputedFragments) {
				return Expression.prototype.toComputedFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._name);
			if(!this._shorthand || this._value.isRenamed()) {
				if(!this._function) {
					fragments.code(": ");
				}
				fragments.compile(this._value);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ObjectLiteralMember.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ObjectComputedMember = Helper.class({
		$name: "ObjectComputedMember",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_1058;
			this._options = Attribute.configure(this._data, this._options, true, AttributeTarget.Property);
			if(this._data.name.kind === NodeKind.ComputedPropertyName) {
				this._name = $compile.expression(this._data.name.expression, this);
			}
			else {
				this._name = new TemplateExpression(this._data.name, this);
				this._name.computing(true);
			}
			this._name.analyse();
			this._value = $compile.expression(this._data.value, this);
			this._value.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ObjectComputedMember.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._name.prepare();
			this._value.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ObjectComputedMember.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._name.translate();
			this._value.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return ObjectComputedMember.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._name.acquireReusable(acquire);
			this._value.acquireReusable(acquire);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return ObjectComputedMember.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._name.isUsingVariable(name) || this._value.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ObjectComputedMember.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_releaseReusable_0: function() {
			this._name.releaseReusable();
			this._value.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return ObjectComputedMember.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toComputedFragments_0: function(fragments, name) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			fragments.code(name).code("[").compile(this._name).code("]").code($equals).compile(this._value).code($comma);
		},
		toComputedFragments: function() {
			if(arguments.length === 2) {
				return ObjectComputedMember.prototype.__ks_func_toComputedFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toComputedFragments) {
				return Expression.prototype.toComputedFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("[").compile(this._name).code("]");
			if(this._data.value.kind !== NodeKind.FunctionExpression) {
				fragments.code(": ");
			}
			fragments.compile(this._value);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ObjectComputedMember.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var OmittedExpression = Helper.class({
		$name: "OmittedExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return OmittedExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return OmittedExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return OmittedExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._data.spread) {
				fragments.code("...");
			}
		},
		toFragments: function() {
			if(arguments.length === 1) {
				return OmittedExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var RegularExpression = Helper.class({
		$name: "RegularExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this._data.value);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return RegularExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("RegExp");
		},
		type: function() {
			if(arguments.length === 0) {
				return RegularExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var SequenceExpression = Helper.class({
		$name: "SequenceExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._expressions = [];
			for(var __ks_1059 = 0, __ks_1060 = this._data.expressions.length, expression; __ks_1059 < __ks_1060; ++__ks_1059) {
				expression = this._data.expressions[__ks_1059];
				this._expressions.push(expression = $compile.expression(expression, this));
				expression.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return SequenceExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_1061 = 0, __ks_1062 = this._expressions.length, expression; __ks_1061 < __ks_1062; ++__ks_1061) {
				expression = this._expressions[__ks_1061];
				expression.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return SequenceExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_1063 = 0, __ks_1064 = this._expressions.length, expression; __ks_1063 < __ks_1064; ++__ks_1063) {
				expression = this._expressions[__ks_1063];
				expression.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return SequenceExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("(");
			for(var i = 0, __ks_1065 = this._expressions.length; i < __ks_1065; ++i) {
				if(i !== 0) {
					fragments.code($comma);
				}
				fragments.compile(this._expressions[i]);
			}
			fragments.code(")");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return SequenceExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("(");
			for(var i = 0, __ks_1066 = this._expressions.length; i < __ks_1066; ++i) {
				if(i !== 0) {
					fragments.code($comma);
				}
				fragments.compileBoolean(this._expressions[i]);
			}
			fragments.code(")");
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return SequenceExpression.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toBooleanFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._expressions[this._expressions.length - 1].type();
		},
		type: function() {
			if(arguments.length === 0) {
				return SequenceExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ThisExpression = Helper.class({
		$name: "ThisExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._calling = false;
			this._entangled = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			ThisExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._name = this._data.name.name;
			var parent = this._parent;
			var __ks_1067;
			do {
				if(KSType.is(parent, CallExpression) && (parent.data().callee === this._data)) {
					this._calling = true;
				}
				else if(KSType.is(parent, ClassMethodDeclaration) || KSType.is(parent, ClassVariableDeclaration)) {
					if(!parent.isInstance()) {
						SyntaxException.throwUnexpectedAlias(this._name, this);
					}
					this._class = parent.parent().type();
					break;
				}
				else if(KSType.is(parent, ClassConstructorDeclaration) || KSType.is(parent, ClassDestructorDeclaration)) {
					this._class = parent.parent().type();
					break;
				}
				else if(KSType.is(parent, ImplementClassMethodDeclaration)) {
					if(!parent.isInstance()) {
						SyntaxException.throwUnexpectedAlias(this._name, this);
					}
					this._class = parent.class();
					break;
				}
			}
			while(KSType.isValue(__ks_1067 = parent.parent()) ? (parent = __ks_1067, true) : false)
			if(!KSType.isValue(this._class)) {
				SyntaxException.throwUnexpectedAlias(this._name, this);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			if(this._calling) {
				var __ks_1068;
				if(KSType.isValue(__ks_1068 = this._class.type().getInstanceMethod(this._name, Helper.mapArray(this._parent.arguments(), function(argument) {
					return argument.type();
				}))) ? (this._type = __ks_1068, true) : false) {
					this._fragment = "this." + this._name;
				}
				else if(KSType.isValue(__ks_1068 = this._class.type().getInstanceVariable(this._name)) ? (this._type = __ks_1068, true) : false) {
					this._fragment = "this." + this._name;
				}
				else if(KSType.isValue(__ks_1068 = this._class.type().getInstanceVariable("_" + this._name)) ? (this._type = __ks_1068, true) : false) {
					this._fragment = "this._" + this._name;
				}
				else {
					ReferenceException.throwNotDefinedField(this._name, this);
				}
			}
			else {
				var variable;
				if(KSType.isValue(__ks_1068 = this._class.type().getInstanceVariable(this._name)) ? (variable = __ks_1068, true) : false) {
					this._fragment = "this." + this._name;
					this._type = variable.type();
				}
				else if(KSType.isValue(__ks_1068 = this._class.type().getInstanceVariable("_" + this._name)) ? (variable = __ks_1068, true) : false) {
					this._fragment = "this._" + this._name;
					this._type = variable.type();
				}
				else if(KSType.isValue(__ks_1068 = this._class.type().getPropertyGetter(this._name)) ? (this._type = __ks_1068, true) : false) {
					this._fragment = "this." + this._name + "()";
					this._entangled = true;
				}
				else {
					ReferenceException.throwNotDefinedField(this._name, this);
				}
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isEntangled_0: function() {
			return this._entangled;
		},
		isEntangled: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_isEntangled_0.apply(this);
			}
			return Expression.prototype.isEntangled.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return ThisExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code(this._fragment);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return ThisExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return ThisExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var TemplateExpression = Helper.class({
		$name: "TemplateExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._computing = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			TemplateExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._elements = [];
			for(var __ks_1069 = 0, __ks_1070 = this._data.elements.length, element; __ks_1069 < __ks_1070; ++__ks_1069) {
				element = this._data.elements[__ks_1069];
				this._elements.push(element = $compile.expression(element, this));
				element.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_1071 = 0, __ks_1072 = this._elements.length, element; __ks_1071 < __ks_1072; ++__ks_1071) {
				element = this._elements[__ks_1071];
				element.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_1073 = 0, __ks_1074 = this._elements.length, element; __ks_1073 < __ks_1074; ++__ks_1073) {
				element = this._elements[__ks_1073];
				element.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_computing_0: function(computing) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(computing === void 0 || computing === null) {
				throw new TypeError("'computing' is not nullable");
			}
			else if(!KSType.isBoolean(computing)) {
				throw new TypeError("'computing' is not of type 'Boolean'");
			}
			this._computing = computing;
		},
		computing: function() {
			if(arguments.length === 1) {
				return TemplateExpression.prototype.__ks_func_computing_0.apply(this, arguments);
			}
			else if(Expression.prototype.computing) {
				return Expression.prototype.computing.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return this._elements.length > 1;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._computing) {
				for(var index = 0, __ks_1075 = this._elements.length, element; index < __ks_1075; ++index) {
					element = this._elements[index];
					if(index === 0) {
						fragments.wrap(element);
					}
					else {
						fragments.code(" + ").wrap(element);
					}
				}
			}
			else {
				for(var index = 0, __ks_1075 = this._elements.length, element; index < __ks_1075; ++index) {
					element = this._elements[index];
					if(index === 0) {
						if(element.type().isString()) {
							fragments.wrap(element);
						}
						else {
							fragments.code("\"\" + ").wrap(element);
						}
					}
					else {
						fragments.code(" + ").wrap(element);
					}
				}
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return TemplateExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("String");
		},
		type: function() {
			if(arguments.length === 0) {
				return TemplateExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnlessExpression = Helper.class({
		$name: "UnlessExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_1076;
			this._condition = $compile.expression(this._data.condition, this);
			this._condition.analyse();
			this._whenFalse = $compile.expression(this._data.whenFalse, this);
			this._whenFalse.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._condition.prepare();
			this._whenFalse.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._condition.translate();
			this._whenFalse.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return UnlessExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrapBoolean(this._condition).code(" ? undefined : ").compile(this._whenFalse);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnlessExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.newControl().code("if(!").wrapBoolean(this._condition).code(")").step().line(this._whenFalse).done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return UnlessExpression.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toStatementFragments) {
				return Expression.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var ParameterMode = {
		ArrowFunction: 0,
		Default: 1,
		HybridConstructor: 2,
		OverloadedFunction: 3
	};
	var ParameterWrongDoing = {
		BadType: 0,
		NotNullable: 1
	};
	var Parameter = Helper.class({
		$name: "Parameter",
		$extends: AbstractNode,
		$static: {
			__ks_sttc_toFragments_0: function() {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				var __ks_i = -1;
				var node = arguments[++__ks_i];
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				var fragments = arguments[++__ks_i];
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				var mode = arguments[++__ks_i];
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				var fn = arguments[++__ks_i];
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				var __ks__;
				var wrongdoer = arguments.length > 4 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : Parameter.toWrongDoingFragments;
				if(node._options.parse.parameters === "es5") {
					return Parameter.toES5Fragments(node, fragments, fn);
				}
				else if(node._options.parse.parameters === "es6") {
					return Parameter.toES6Fragments(node, fragments, fn);
				}
				else {
					return Parameter.toKSFragments(node, fragments, mode, fn, wrongdoer);
				}
			},
			toFragments: function() {
				if(arguments.length >= 4 && arguments.length <= 5) {
					return Parameter.__ks_sttc_toFragments_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_toES5Fragments_0: function(node, fragments, fn) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				var data = node.data();
				var __ks_1085 = node.parameters();
				for(var i = 0, __ks_1086 = __ks_1085.length, parameter; i < __ks_1086; ++i) {
					parameter = __ks_1085[i];
					if(parameter.isRest()) {
						SyntaxException.throwNoRestParameter(node);
					}
					else if(parameter.hasDefaultValue()) {
						SyntaxException.throwNoDefaultParameter(node);
					}
					else if(parameter.isNullable()) {
						SyntaxException.throwNoNullParameter(node);
					}
					else if(parameter.isAnonymous()) {
						SyntaxException.throwNotNamedParameter(node);
					}
					if(i) {
						fragments.code($comma);
					}
					parameter.toParameterFragments(fragments);
				}
				return fn(fragments);
			},
			toES5Fragments: function() {
				if(arguments.length === 3) {
					return Parameter.__ks_sttc_toES5Fragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toES5Fragments) {
					return AbstractNode.toES5Fragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_toES6Fragments_0: function(node, fragments, fn) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				var data = node.data();
				var rest = false;
				var __ks_1087 = node.parameters();
				for(var i = 0, __ks_1088 = __ks_1087.length, parameter; i < __ks_1088; ++i) {
					parameter = __ks_1087[i];
					if(parameter.isAnonymous()) {
						SyntaxException.throwNotNamedParameter(node);
					}
					if(i) {
						fragments.code($comma);
					}
					if(parameter.isRest()) {
						parameter.toParameterFragments(fragments);
						rest = true;
					}
					else if(rest) {
						SyntaxException.throwAfterRestParameter();
					}
					else {
						parameter.toParameterFragments(fragments);
					}
					if(parameter.hasDefaultValue()) {
						fragments.code(" = ").compile(parameter._defaultValue);
					}
				}
				return fn(fragments);
			},
			toES6Fragments: function() {
				if(arguments.length === 3) {
					return Parameter.__ks_sttc_toES6Fragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toES6Fragments) {
					return AbstractNode.toES6Fragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_toKSFragments_0: function(node, fragments, mode, fn, wrongdoer) {
				if(arguments.length < 5) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(mode === void 0 || mode === null) {
					throw new TypeError("'mode' is not nullable");
				}
				else if(!KSType.is(mode, ParameterMode)) {
					throw new TypeError("'mode' is not of type 'ParameterMode'");
				}
				if(fn === void 0 || fn === null) {
					throw new TypeError("'fn' is not nullable");
				}
				if(wrongdoer === void 0 || wrongdoer === null) {
					throw new TypeError("'wrongdoer' is not nullable");
				}
				var data = node.data();
				var parameters = node.parameters();
				var signature = node.type();
				var async = signature.isAsync();
				var name = ((mode === ParameterMode.Default) || (mode === ParameterMode.OverloadedFunction)) ? "arguments" : "__ks_arguments";
				var parameter, ctrl;
				var maxb = 0;
				var rb = 0;
				var db = 0;
				var rr = 0;
				var maxa = 0;
				var ra = 0;
				var fr = false;
				var rest = -1;
				var type;
				for(var i = 0, __ks_1089 = parameters.length; i < __ks_1089; ++i) {
					parameter = parameters[i];
					type = parameter.type();
					if(rest !== -1) {
						if(type.min() !== 0) {
							ra += type.min();
						}
						maxa += type.max();
						if(parameter.isRest()) {
							fr = true;
						}
					}
					else if(type.max() === Infinity) {
						rest = i;
						rr = type.min();
					}
					else {
						if(type.min() === 0) {
							++db;
						}
						else {
							rb += type.min();
						}
						maxb += type.max();
						if(parameter.isRest()) {
							fr = true;
						}
					}
				}
				if(async) {
					if(rest !== -1) {
						++ra;
						++maxa;
					}
					else {
						++rb;
						++maxb;
					}
				}
				var l = (rest !== -1) ? rest : parameters.length;
				var context;
				if((mode === ParameterMode.Default) && (((rest !== -1) && !fr && ((db === 0) || ((db + 1) === rest))) || ((rest === -1) && (signature.max() === l) && ((db === 0) || (db === l))))) {
					for(var i = 0, __ks_1089 = parameters.length; i < l && i < __ks_1089; ++i) {
						parameter = parameters[i];
						if(i > 0) {
							fragments.code($comma);
						}
						parameter.toParameterFragments(fragments);
					}
					if((ra === 0) && (rest !== -1) && (parameters[rest].type().isAny() || (maxa === 0)) && (node._options.format.parameters === "es6")) {
						parameter = parameters[rest];
						if(rest > 0) {
							fragments.code($comma);
						}
						parameter.toParameterFragments(fragments);
					}
					else if(async && (ra === 0)) {
						if(l > 0) {
							fragments.code($comma);
						}
						fragments.code("__ks_cb");
					}
					fragments = fn(fragments);
					if((rb + ra) > 0) {
						if(async) {
							node.module().flag("Type");
							if(rest !== -1) {
								fragments.line("" + $runtime.scope(node) + "__ks_cb = arguments.length > 0 ? arguments[arguments.length - 1] : null");
							}
							var __ks_ctrl_1 = fragments.newControl().code("if(arguments.length < " + (signature.min() + 1) + ")").step().line("" + $runtime.scope(node) + "__ks_error = new SyntaxError(\"wrong number of arguments (\" + arguments.length + \" for " + signature.min() + " + 1)\")");
							if(rest === -1) {
								__ks_ctrl_1.newControl().code("if(arguments.length > 0 && Type.isFunction((__ks_cb = arguments[arguments.length - 1])))").step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
							}
							else {
								__ks_ctrl_1.newControl().code("if(Type.isFunction(__ks_cb))").step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
							}
							__ks_ctrl_1.step().code("else if(!Type.isFunction(__ks_cb))").step().line("throw new TypeError(\"'callback' must be a function\")");
							__ks_ctrl_1.done();
						}
						else {
							fragments.newControl().code("if(arguments.length < " + signature.min() + ")").step().line("throw new SyntaxError(\"wrong number of arguments (\" + arguments.length + \" for " + signature.min() + ")\")").done();
						}
					}
					for(var i = 0, __ks_1089 = parameters.length; i < l && i < __ks_1089; ++i) {
						parameter = parameters[i];
						parameter.toValidationFragments(fragments, wrongdoer);
					}
					if(rest !== -1) {
						parameter = parameters[rest];
						if(ra > 0) {
							if(parameter._anonymous) {
								fragments.line("" + $runtime.scope(node) + " __ks_i = arguments.length > " + (maxb + ra) + " ? arguments.length - " + ra + " : " + maxb);
							}
							else {
								fragments.line($runtime.scope(node), "__ks_i");
								if(parameter.type().isAny()) {
									fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = arguments.length > " + (maxb + ra) + " ? Array.prototype.slice.call(arguments, " + maxb + ", __ks_i = arguments.length - " + ra + ") : (__ks_i = " + maxb + ", [])").done();
								}
								else {
									fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = []").done();
								}
							}
						}
						else if((maxa > 0) && !parameter.type().isAny()) {
							if(maxb > 0) {
								throw new NotImplementedException(node);
							}
							else {
								fragments.line($runtime.scope(node), "__ks_i = -1");
							}
							if(parameter._anonymous) {
								ctrl = fragments.newControl().code("while(");
								parameter.type().toTestFragments(ctrl, new Literal(false, node, node.scope(), "arguments[++__ks_i]"));
								ctrl.code(")").step().done();
							}
							else {
								fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = []").done();
								ctrl = fragments.newControl().code("while(");
								parameter.type().toTestFragments(ctrl, new Literal(false, node, node.scope(), "arguments[++__ks_i]"));
								ctrl.code(")").step();
								ctrl.newLine().compile(parameter).code(".push(arguments[__ks_i])").done();
								ctrl.done();
							}
						}
						else if(node._options.format.parameters === "es5") {
							fragments.newLine().code($runtime.scope(node)).compile(parameter).code($equals, "Array.prototype.slice.call(arguments, " + maxb + ", arguments.length)").done();
						}
						if(parameter.hasDefaultValue()) {
							ctrl = fragments.newControl().code("if(").compile(parameter).code(".length === 0)").step();
							ctrl.newLine().compile(parameter).code($equals).compile(parameter._defaultValue).done();
							ctrl.done();
						}
						var arity;
						if((KSType.isValue(__ks_1089 = parameter.arity()) ? (arity = __ks_1089, true) : false) && (arity.min > 0)) {
							ctrl = fragments.newControl().code("if(").compile(parameter).code(".length < " + arity.min + ")").step();
							if(async) {
								ctrl.newLine().code("return __ks_cb(new SyntaxError(\"wrong number of rest values (\" + ").compile(parameter).code(".length + \" for at least " + arity.min + ")\"))").done();
							}
							else {
								ctrl.newLine().code("throw new SyntaxError(\"wrong number of rest values (\" + ").compile(parameter).code(".length + \" for at least " + arity.min + ")\")").done();
							}
							ctrl.done();
						}
					}
				}
				else {
					if(mode === ParameterMode.ArrowFunction) {
						fragments.code("..." + name);
					}
					else if(mode === ParameterMode.HybridConstructor) {
						fragments.code(name);
					}
					fragments = fn(fragments);
					if((rb + ra) > 0) {
						if(async) {
							node.module().flag("Type");
							fragments.line("" + $runtime.scope(node) + "__ks_cb = arguments.length > 0 ? arguments[arguments.length - 1] : null");
							var __ks_ctrl_2 = fragments.newControl().code("if(arguments.length < " + (signature.min() + 1) + ")").step().line("" + $runtime.scope(node) + "__ks_error = new SyntaxError(\"wrong number of arguments (\" + arguments.length + \" for " + signature.min() + " + 1)\")");
							__ks_ctrl_2.newControl().code("if(Type.isFunction(__ks_cb))").step().line("return __ks_cb(__ks_error)").step().code("else").step().line("throw __ks_error").done();
							__ks_ctrl_2.step().code("else if(!Type.isFunction(__ks_cb))").step().line("throw new TypeError(\"'callback' must be a function\")");
							__ks_ctrl_2.done();
						}
						else if((mode === ParameterMode.Default) || (mode === ParameterMode.ArrowFunction)) {
							fragments.newControl().code("if(" + name + ".length < " + signature.min() + ")").step().line("throw new SyntaxError(\"wrong number of arguments (\" + " + name + ".length + \" for " + signature.min() + ")\")").done();
						}
					}
					fragments.line($runtime.scope(node), "__ks_i = -1");
					context = {
						name: name,
						required: rb,
						optional: signature.min(),
						temp: false,
						length: data.parameters.length,
						async: async
					};
					for(var i = 0; i < l; ++i) {
						parameters[i].toBeforeRestFragments(fragments, context, i, wrongdoer);
					}
					if(rest !== -1) {
						parameter = parameters[rest];
						if(ra > 0) {
							if(parameter._anonymous) {
								if((l + 1) < data.parameters.length) {
									fragments.newControl().code("if(" + name + ".length > __ks_i + " + (ra + 1) + ")").step().line("__ks_i = " + name + ".length - " + (ra + 1)).done();
								}
							}
							else {
								fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = " + name + ".length > __ks_i + " + (ra + 1) + " ? Array.prototype.slice.call(" + name + ", __ks_i + 1, " + name + ".length - " + ra + ") : []").done();
								if((l + 1) < data.parameters.length) {
									fragments.newLine().code("__ks_i += ").compile(parameter).code(".length").done();
								}
							}
						}
						else {
							if(!parameter._anonymous) {
								fragments.newLine().code($runtime.scope(node)).compile(parameter).code(" = " + name + ".length > ++__ks_i ? Array.prototype.slice.call(" + name + ", __ks_i, __ks_i = " + name + ".length) : []").done();
								if(!parameter.type().isAny() && ((l + 1) < data.parameters.length)) {
									fragments.newLine().code("__ks_i += ").compile(parameter).code(".length").done();
								}
							}
						}
					}
				}
				if((ra !== 0) || (maxa !== 0)) {
					parameter = parameters[rest];
					if((ra !== maxa) && !parameter.type().isAny()) {
						if(ra) {
							fragments.line($runtime.scope(node), "__ks_m = __ks_i + ", ra);
						}
						else {
							fragments.line($runtime.scope(node), "__ks_m = __ks_i");
						}
					}
					context = {
						name: name,
						any: parameter.type().isAny(),
						increment: false,
						temp: KSType.isValue(context) ? context.temp : false,
						length: parameters.length
					};
					for(var i = rest + 1, __ks_1089 = parameters.length; i < __ks_1089; ++i) {
						parameters[i].toAfterRestFragments(fragments, context, i, wrongdoer);
					}
				}
				return fragments;
			},
			toKSFragments: function() {
				if(arguments.length === 5) {
					return Parameter.__ks_sttc_toKSFragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toKSFragments) {
					return AbstractNode.toKSFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_toWrongDoingFragments_0: function(fragments, wrongdoing, data) {
				if(arguments.length < 3) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
				}
				if(fragments === void 0 || fragments === null) {
					throw new TypeError("'fragments' is not nullable");
				}
				if(wrongdoing === void 0 || wrongdoing === null) {
					throw new TypeError("'wrongdoing' is not nullable");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(wrongdoing === ParameterWrongDoing.BadType) {
					if(KSType.isValue(data.name)) {
						if(data.async) {
							fragments.line("return __ks_cb(new TypeError(\"'" + data.name + "' is not of type " + data.type.toQuote() + "\"))");
						}
						else {
							fragments.line("throw new TypeError(\"'" + data.name + "' is not of type " + data.type.toQuote() + "\")");
						}
					}
					else {
						if(data.async) {
							fragments.line("return __ks_cb(new TypeError(\"anonymous argument is not of type " + data.type.toQuote() + "\"))");
						}
						else {
							fragments.line("throw new TypeError(\"anonymous argument is not of type " + data.type.toQuote() + "\")");
						}
					}
				}
				else if(wrongdoing === ParameterWrongDoing.NotNullable) {
					if(data.async) {
						fragments.line("return __ks_cb(new TypeError(\"'" + data.name + "' is not nullable\"))");
					}
					else {
						fragments.line("throw new TypeError(\"'" + data.name + "' is not nullable\")");
					}
				}
			},
			toWrongDoingFragments: function() {
				if(arguments.length === 3) {
					return Parameter.__ks_sttc_toWrongDoingFragments_0.apply(this, arguments);
				}
				else if(AbstractNode.toWrongDoingFragments) {
					return AbstractNode.toWrongDoingFragments.apply(null, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_init_1: function() {
			this._defaultValue = null;
			this._hasDefaultValue = false;
			this._header = false;
			this._maybeHeadedDefaultValue = false;
			this._nullable = false;
			this._rest = false;
			this._setterAlias = false;
			this._thisAlias = false;
			this._variable = null;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			Parameter.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			AbstractNode.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._anonymous = !KSType.isValue(this._data.name);
			if(KSType.isValue(this._data.defaultValue)) {
				var __ks_1077;
				this._defaultValue = $compile.expression(this._data.defaultValue, this._parent);
				this._hasDefaultValue = true;
				this._defaultValue.analyse();
			}
			if(this._anonymous) {
				var name = this._scope.acquireTempName();
				this._variable = this._scope.define(name, false, this);
				var __ks_1078;
				this._name = $compile.expression($ast.identifier(name), this._parent);
			}
			else {
				this._variable = this._scope.define(this._data.name.name, false, this);
				this._name = $compile.expression(this._data.name, this._parent);
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			var type = null;
			if(this._parent.isInstanceMethod()) {
				if(!this._anonymous) {
					for(var __ks_1079 = 0, __ks_1080 = this._data.modifiers.length, modifier; __ks_1079 < __ks_1080; ++__ks_1079) {
						modifier = this._data.modifiers[__ks_1079];
						if(modifier.kind === ModifierKind.SetterAlias) {
							this._setterAlias = true;
						}
						else if(modifier.kind === ModifierKind.ThisAlias) {
							this._thisAlias = true;
						}
					}
					if(this._thisAlias) {
						var alias = new AliasStatement(this._data.name.name, this._setterAlias, this);
						type = this._scope.reference(alias.type());
					}
				}
				if(!KSType.isValue(type)) {
					type = Type.fromAST(this._data.type, this);
				}
			}
			else {
				for(var __ks_1079 = 0, __ks_1080 = this._data.modifiers.length, modifier; __ks_1079 < __ks_1080; ++__ks_1079) {
					modifier = this._data.modifiers[__ks_1079];
					if(modifier.kind === ModifierKind.ThisAlias) {
						SyntaxException.throwUnexpectedAlias(this._data.name.name, this);
					}
				}
				type = Type.fromAST(this._data.type, this);
			}
			this._nullable = type.isNullable();
			var min = 1;
			var max = 1;
			var nf = true;
			for(var __ks_1079 = 0, __ks_1080 = this._data.modifiers.length, modifier; nf && __ks_1079 < __ks_1080; ++__ks_1079) {
				modifier = this._data.modifiers[__ks_1079];
				if(modifier.kind === ModifierKind.Rest) {
					this._rest = true;
					if(modifier.arity) {
						min = modifier.arity.min;
						max = modifier.arity.max;
					}
					else {
						min = 0;
						max = Infinity;
					}
					nf = true;
				}
			}
			if(this._hasDefaultValue) {
				if(!this._nullable && (this._data.defaultValue.kind === NodeKind.Identifier) && (this._data.defaultValue.name === "null")) {
					this._nullable = true;
				}
				this._maybeHeadedDefaultValue = (this._options.format.parameters === "es6") && this._nullable;
				this._defaultValue.prepare();
				min = 0;
			}
			this._type = new ParameterType(this._scope, type, min, max);
			this._variable.type(this._rest ? Type.arrayOf(type, this._scope) : type);
		},
		prepare: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			if(this._hasDefaultValue) {
				this._defaultValue.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_arity_0: function() {
			if(this._rest) {
				for(var i = 0, __ks_1081 = this._data.modifiers.length; i < __ks_1081; ++i) {
					if(this._data.modifiers[i].kind === ModifierKind.Rest) {
						return this._data.modifiers[i].arity;
					}
				}
			}
			return null;
		},
		arity: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_arity_0.apply(this);
			}
			else if(AbstractNode.prototype.arity) {
				return AbstractNode.prototype.arity.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasDefaultValue_0: function() {
			return this._hasDefaultValue;
		},
		hasDefaultValue: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_hasDefaultValue_0.apply(this);
			}
			else if(AbstractNode.prototype.hasDefaultValue) {
				return AbstractNode.prototype.hasDefaultValue.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAnonymous_0: function() {
			return this._anonymous;
		},
		isAnonymous: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_isAnonymous_0.apply(this);
			}
			else if(AbstractNode.prototype.isAnonymous) {
				return AbstractNode.prototype.isAnonymous.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return this._nullable;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_isNullable_0.apply(this);
			}
			else if(AbstractNode.prototype.isNullable) {
				return AbstractNode.prototype.isNullable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isRest_0: function() {
			return this._rest;
		},
		isRest: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_isRest_0.apply(this);
			}
			else if(AbstractNode.prototype.isRest) {
				return AbstractNode.prototype.isRest.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isSetterAlias_0: function() {
			return this._setterAlias;
		},
		isSetterAlias: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_isSetterAlias_0.apply(this);
			}
			else if(AbstractNode.prototype.isSetterAlias) {
				return AbstractNode.prototype.isSetterAlias.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isThisAlias_0: function() {
			return this._thisAlias;
		},
		isThisAlias: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_isThisAlias_0.apply(this);
			}
			else if(AbstractNode.prototype.isThisAlias) {
				return AbstractNode.prototype.isThisAlias.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._hasDefaultValue && this._defaultValue.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return Parameter.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.isUsingVariable) {
				return AbstractNode.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_returnType_0: function() {
			return this._type.returnType();
		},
		returnType: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_returnType_0.apply(this);
			}
			else if(AbstractNode.prototype.returnType) {
				return AbstractNode.prototype.returnType.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._name);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return Parameter.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toParameterFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._rest) {
				fragments.code("...");
			}
			fragments.compile(this._name);
			if(this._maybeHeadedDefaultValue) {
				if(this._hasDefaultValue) {
					fragments.code($equals).compile(this._defaultValue);
				}
				else {
					fragments.code(" = null");
				}
			}
			this._header = true;
		},
		toParameterFragments: function() {
			if(arguments.length === 1) {
				return Parameter.prototype.__ks_func_toParameterFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toParameterFragments) {
				return AbstractNode.prototype.toParameterFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toValidationFragments_0: function(fragments, wrongdoer) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			var async = this._parent.type().isAsync();
			if(this._anonymous) {
				if(!this._type.type().isAny() && !this._hasDefaultValue) {
					var ctrl = fragments.newControl().code("if(");
					if(this._nullable) {
						ctrl.compile(this._name).code(" !== null && ");
					}
					ctrl.code("!");
					this._variable.type().toTestFragments(ctrl, this);
					ctrl.code(")").step();
					wrongdoer(ctrl, ParameterWrongDoing.BadType, {
						async: async,
						type: this._type
					});
					ctrl.done();
				}
			}
			else {
				var ctrl = null;
				if(this._hasDefaultValue) {
					if(!this._header || !this._maybeHeadedDefaultValue) {
						var __ks_1082;
						ctrl = fragments.newControl().code("if(").compile(this._name).code(" === void 0");
						if(!this._nullable) {
							ctrl.code(" || ").compile(this._name).code(" === null");
						}
						ctrl.code(")").step();
						ctrl.newLine().compile(this._name).code($equals).compile(this._defaultValue).done();
					}
				}
				else {
					ctrl = fragments.newControl();
					if(this._nullable) {
						ctrl.code("if(").compile(this._name).code(" === void 0").code(")").step().newLine().compile(this._name).code(" = null").done();
					}
					else {
						ctrl.code("if(").compile(this._name).code(" === void 0").code(" || ").compile(this._name).code(" === null").code(")").step();
						wrongdoer(ctrl, ParameterWrongDoing.NotNullable, {
							async: async,
							name: this._variable.name()
						});
					}
				}
				if(this._rest) {
					if(!this._variable.type().parameter().isAny()) {
						throw new NotImplementedException(this);
					}
				}
				else if(!this._variable.type().isAny()) {
					if(KSType.isValue(ctrl)) {
						ctrl.step().code("else ");
					}
					else {
						ctrl = fragments.newControl();
					}
					ctrl.code("if(");
					if(this._nullable) {
						ctrl.compile(this._name).code(" !== null && ");
					}
					ctrl.code("!");
					this._variable.type().toTestFragments(ctrl, this);
					ctrl.code(")").step();
					wrongdoer(ctrl, ParameterWrongDoing.BadType, {
						async: async,
						name: this._variable.name(),
						type: this._type
					});
				}
				if(ctrl !== null) {
					ctrl.done();
				}
			}
		},
		toValidationFragments: function() {
			if(arguments.length === 2) {
				return Parameter.prototype.__ks_func_toValidationFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toValidationFragments) {
				return AbstractNode.prototype.toValidationFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAfterRestFragments_0: function(fragments, context, index, wrongdoer) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(context === void 0 || context === null) {
				throw new TypeError("'context' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			var arity, __ks_1083;
			if(KSType.isValue(__ks_1083 = this.arity()) ? (arity = __ks_1083, true) : false) {
				if(this._anonymous) {
					throw new NotImplementedException(this);
				}
				else {
					if(this._type.isAny()) {
						fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = Array.prototype.slice.call(" + context.name + ", __ks_i + 1, __ks_i + " + (arity.min + 1) + ")").done();
						if((index + 1) < context.length) {
							fragments.newLine().code("__ks_i += ").compile(this._name).code(".length").done();
						}
					}
					else {
						throw new NotImplementedException(this);
					}
				}
			}
			else if(this._hasDefaultValue) {
				if(context.any) {
					if(!this._anonymous) {
						fragments.newLine().code($runtime.scope(this)).compile(this._name).code($equals).compile(this._defaultValue).done();
					}
				}
				else {
					if(this._type.isAny()) {
						if(!context.temp) {
							fragments.line("" + $runtime.scope(this) + "__ks__");
							context.temp = true;
						}
						var line = fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = " + context.name + ".length > __ks_m && (__ks__ = " + context.name + "[" + (context.increment ? "++" : "") + "__ks_i]) !== void 0");
						if(!this._nullable) {
							line.code(" && __ks__ !== null");
						}
						line.code(" ? __ks__ : ").compile(this._defaultValue).done();
					}
					else {
						if(!context.temp) {
							fragments.line("" + $runtime.scope(this) + "__ks__");
							context.temp = true;
						}
						var line = fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = " + context.name + ".length > __ks_m && (__ks__ = " + context.name + "[__ks_i" + (context.increment ? " + 1" : "") + "]) !== void 0 && ");
						if(this._nullable) {
							line.code("(__ks__ === null || ");
							this._type.toTestFragments(line, new Literal(false, this, this._scope, "__ks__"));
							line.code(")");
						}
						else {
							this._type.toTestFragments(line, new Literal(false, this, this._scope, "__ks__"));
						}
						line.code(context.increment ? " ? (++__ks_i, __ks__) : " : " ? __ks__ : ").compile(this._defaultValue).done();
					}
					context.increment = true;
				}
			}
			else {
				if(this._anonymous) {
					if(context.increment) {
						fragments.line("++__ks_i");
					}
				}
				else {
					fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = " + context.name + "[", context.increment ? "++" : "", "__ks_i]").done();
					this.toValidationFragments(fragments, wrongdoer);
				}
				context.increment = true;
			}
		},
		toAfterRestFragments: function() {
			if(arguments.length === 4) {
				return Parameter.prototype.__ks_func_toAfterRestFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toAfterRestFragments) {
				return AbstractNode.prototype.toAfterRestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBeforeRestFragments_0: function(fragments, context, index, wrongdoer) {
			if(arguments.length < 4) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(context === void 0 || context === null) {
				throw new TypeError("'context' is not nullable");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			if(wrongdoer === void 0 || wrongdoer === null) {
				throw new TypeError("'wrongdoer' is not nullable");
			}
			var arity, __ks_1084;
			if(KSType.isValue(__ks_1084 = this.arity()) ? (arity = __ks_1084, true) : false) {
				context.required -= arity.min;
				if(this._anonymous) {
					throw new NotImplementedException(this);
				}
				else {
					if(this._type.isAny()) {
						if(context.required > 0) {
							fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = Array.prototype.slice.call(" + context.name + ", __ks_i + 1, Math.min(" + context.name + ".length - " + context.required + ", __ks_i + " + (arity.max + 1) + "))").done();
						}
						else {
							fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = Array.prototype.slice.call(" + context.name + ", __ks_i + 1, Math.min(" + context.name + ".length, __ks_i + " + (arity.max + 1) + "))").done();
						}
						if((index + 1) < context.length) {
							fragments.newLine().code("__ks_i += ").compile(this._name).code(".length").done();
						}
					}
					else {
						throw new NotImplementedException(this);
					}
				}
				context.optional += arity.max - arity.min;
			}
			else {
				if(this._hasDefaultValue) {
					if(this._type.isAny()) {
						if(!context.temp) {
							fragments.line("" + $runtime.scope(this) + "__ks__");
							context.temp = true;
						}
						var line = fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = " + context.name + ".length > " + context.optional + " && (__ks__ = " + context.name + "[++__ks_i]) !== void 0");
						if(!this._nullable) {
							line.code(" && __ks__ !== null");
						}
						line.code(" ? __ks__ : ").compile(this._defaultValue).done();
					}
					else {
						fragments.newLine().code($runtime.scope(this)).compile(this._name).done();
						var ctrl = fragments.newControl().code("if(" + context.name + ".length > " + context.optional + " && (").compile(this._name).code(" = " + context.name + "[++__ks_i]) !== void 0");
						if(!this._nullable) {
							ctrl.code(" && ").compile(this._name).code(" !== null");
						}
						ctrl.code(")").step();
						if(this._nullable) {
							var ctrl2 = ctrl.newControl().code("if(").compile(this._name).code(" !== null && !");
							this._type.toTestFragments(ctrl2, this);
							ctrl2.code(")").step();
							wrongdoer(ctrl2, ParameterWrongDoing.BadType, {
								async: context.async,
								name: this._variable.name(),
								type: this._type
							});
							ctrl2.done();
						}
						else {
							var ctrl2 = ctrl.newControl().code("if(!");
							this._type.toTestFragments(ctrl2, this);
							ctrl2.code(")").step();
							wrongdoer(ctrl2, ParameterWrongDoing.BadType, {
								async: context.async,
								name: this._variable.name(),
								type: this._type
							});
							ctrl2.done();
						}
						ctrl.step().code("else").step();
						ctrl.newLine().compile(this._name).code($equals).compile(this._defaultValue).done();
						ctrl.done();
					}
					++context.optional;
				}
				else {
					if(this._type.isAny()) {
						if(this._anonymous) {
							fragments.line("++__ks_i");
						}
						else {
							fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = " + context.name + "[++__ks_i]").done();
							this.toValidationFragments(fragments, wrongdoer);
						}
					}
					else {
						fragments.newLine().code($runtime.scope(this)).compile(this._name).code(" = " + context.name + "[++__ks_i]").done();
						this.toValidationFragments(fragments, wrongdoer);
					}
					--context.required;
				}
			}
		},
		toBeforeRestFragments: function() {
			if(arguments.length === 4) {
				return Parameter.prototype.__ks_func_toBeforeRestFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toBeforeRestFragments) {
				return AbstractNode.prototype.toBeforeRestFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return Parameter.prototype.__ks_func_type_0.apply(this);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AliasStatement = Helper.class({
		$name: "AliasStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function(name, setter, parameter) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			if(setter === void 0 || setter === null) {
				throw new TypeError("'setter' is not nullable");
			}
			else if(!KSType.isBoolean(setter)) {
				throw new TypeError("'setter' is not of type 'Boolean'");
			}
			if(parameter === void 0 || parameter === null) {
				throw new TypeError("'parameter' is not nullable");
			}
			else if(!KSType.is(parameter, Parameter)) {
				throw new TypeError("'parameter' is not of type 'Parameter'");
			}
			Statement.prototype.__ks_cons.call(this, [{}, parameter.parent()]);
			this._name = name;
			this._setter = setter;
			this._parameter = parameter;
			parameter.parent().addAliasStatement(this);
			var __ks_class_1 = parameter.parent().parent().type().discardAlias();
			if(setter) {
				var __ks_1090;
				if(KSType.isValue(__ks_1090 = __ks_class_1.getPropertySetter(name)) ? (this._type = __ks_1090, false) : true) {
					ReferenceException.throwNotDefinedMember(name, this._parameter);
				}
			}
			else {
				if(KSType.isValue(__ks_1090 = __ks_class_1.getInstanceVariable(name)) ? (this._type = __ks_1090, true) : false) {
					this._variableName = name;
				}
				else if(KSType.isValue(__ks_1090 = __ks_class_1.getInstanceVariable("_" + name)) ? (this._type = __ks_1090, true) : false) {
					this._variableName = "_" + name;
				}
				else if(KSType.isValue(__ks_1090 = __ks_class_1.getPropertySetter(name)) ? (this._type = __ks_1090, true) : false) {
					this._setter = true;
				}
				else {
					ReferenceException.throwNotDefinedMember(name, this._parameter);
				}
			}
		},
		__ks_cons: function(args) {
			if(args.length === 3) {
				AliasStatement.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_name_0.apply(this);
			}
			else if(Statement.prototype.name) {
				return Statement.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._setter) {
				fragments.newLine().code("this." + this._name + "(").compile(this._parameter).code(")").done();
			}
			else {
				fragments.newLine().code("this." + this._variableName + " = ").compile(this._parameter).done();
			}
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return AliasStatement.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(Statement.prototype.toStatementFragments) {
				return Statement.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return AliasStatement.prototype.__ks_func_type_0.apply(this);
			}
			else if(Statement.prototype.type) {
				return Statement.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorExpression = Helper.class({
		$name: "AssignmentOperatorExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._await = false;
			this._variables = [];
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			AssignmentOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var variables = this.assignment(this._data);
			var __ks_1091;
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
			if(KSType.isValue(variables)) {
				this._variables = variables;
			}
			this._right = $compile.expression(this._data.right, this);
			this._right.analyse();
			this._await = this._right.isAwait();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			this._right.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
			this._right.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_assignment_0: function(data) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var expression = this;
			while(!KSType.is(expression._parent, Statement)) {
				expression = expression._parent;
			}
			return expression._parent.assignment(data, expression);
		},
		assignment: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_assignment_0.apply(this, arguments);
			}
			else if(Expression.prototype.assignment) {
				return Expression.prototype.assignment.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAssignable_0: function() {
			return true;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return Expression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isAwaiting_0: function() {
			return this._right.isAwaiting();
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			return Expression.prototype.isAwaiting.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isDeclararingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			else if(!KSType.isString(name)) {
				throw new TypeError("'name' is not of type 'String'");
			}
			return __ks_Array._im_contains(this._variables, name);
		},
		isDeclararingVariable: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_isDeclararingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isDeclararingVariable) {
				return Expression.prototype.isDeclararingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isNullable_0: function() {
			return this._right.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._left.isUsingVariable(name) || this._right.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.compileNullable(this._right);
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._left.type();
		},
		type: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_variable_0: function() {
			return this._left.variable();
		},
		variable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExpression.prototype.__ks_func_variable_0.apply(this);
			}
			else if(Expression.prototype.variable) {
				return Expression.prototype.variable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorAddition = Helper.class({
		$name: "AssignmentOperatorAddition",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" += ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorAddition.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseAnd = Helper.class({
		$name: "AssignmentOperatorBitwiseAnd",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" &= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseAnd.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseLeftShift = Helper.class({
		$name: "AssignmentOperatorBitwiseLeftShift",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" <<= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseLeftShift.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseOr = Helper.class({
		$name: "AssignmentOperatorBitwiseOr",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" |= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseOr.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseRightShift = Helper.class({
		$name: "AssignmentOperatorBitwiseRightShift",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" >>= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseRightShift.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorBitwiseXor = Helper.class({
		$name: "AssignmentOperatorBitwiseXor",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" ^= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorBitwiseXor.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorDivision = Helper.class({
		$name: "AssignmentOperatorDivision",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" /= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorDivision.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorEquality = Helper.class({
		$name: "AssignmentOperatorEquality",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			if(this._options.format.destructuring === "es5") {
				this._right.acquireReusable(true);
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorEquality.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			if(this._options.format.destructuring === "es5") {
				this._right.releaseReusable();
			}
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorEquality.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_hasExceptions_0: function() {
			return this._right.isAwaiting() && this._right.hasExceptions();
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorEquality.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isAwaiting()) {
				return this._right.toFragments(fragments, mode);
			}
			else {
				fragments.compile(this._left).code($equals).compile(this._right);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorEquality.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toAssignmentFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(KSType.isValue(this._left.toAssignmentFragments)) {
				this._left.toAssignmentFragments(fragments, this._right);
			}
			else {
				fragments.compile(this._left).code($equals).compile(this._right);
			}
		},
		toAssignmentFragments: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorEquality.prototype.__ks_func_toAssignmentFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toAssignmentFragments) {
				return AssignmentOperatorExpression.prototype.toAssignmentFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code($equals).wrap(this._right);
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorEquality.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.toBooleanFragments.apply(this, arguments);
		}
	});
	var AssignmentOperatorExistential = Helper.class({
		$name: "AssignmentOperatorExistential",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			this._right.prepare();
			this._right.acquireReusable(true);
			this._right.releaseReusable();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExistential.prototype.__ks_func_prepare_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._right.acquireReusable(true);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorExistential.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._right.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExistential.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_isAssignable_0: function() {
			return false;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorExistential.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isNullable()) {
				fragments.wrapNullable(this._right).code(" && ").code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? ").compile(this._left).code($equals).wrap(this._right).code(" : undefined");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorExistential.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isNullable()) {
				fragments.wrapNullable(this._right).code(" && ").code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? (").compile(this._left).code($equals).wrap(this._right).code(", true) : false");
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorExistential.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.toBooleanFragments.apply(this, arguments);
		}
	});
	var AssignmentOperatorModulo = Helper.class({
		$name: "AssignmentOperatorModulo",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" %= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorModulo.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorMultiplication = Helper.class({
		$name: "AssignmentOperatorMultiplication",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" *= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorMultiplication.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorNonExistential = Helper.class({
		$name: "AssignmentOperatorNonExistential",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			this._right.prepare();
			this._right.acquireReusable(true);
			this._right.releaseReusable();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_prepare_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._right.acquireReusable(true);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._right.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_isAssignable_0: function() {
			return false;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isNullable()) {
				fragments.wrapNullable(this._right).code(" && ").code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? ").compile(this._left).code($equals).wrap(this._right).code(" : undefined");
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toBooleanFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._right.isNullable()) {
				fragments.wrapNullable(this._right).code(" && ").code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(", this._data.operator).compileReusable(this._right).code(")", this._data.operator);
			}
			fragments.code(" ? (").compile(this._left).code($equals).wrap(this._right).code(", false) : true");
		},
		toBooleanFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNonExistential.prototype.__ks_func_toBooleanFragments_0.apply(this, arguments);
			}
			return AssignmentOperatorExpression.prototype.toBooleanFragments.apply(this, arguments);
		}
	});
	var AssignmentOperatorNullCoalescing = Helper.class({
		$name: "AssignmentOperatorNullCoalescing",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isAssignable_0: function() {
			return false;
		},
		isAssignable: function() {
			if(arguments.length === 0) {
				return AssignmentOperatorNullCoalescing.prototype.__ks_func_isAssignable_0.apply(this);
			}
			return AssignmentOperatorExpression.prototype.isAssignable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._left.isNullable()) {
				fragments.code("(");
				this._left.toNullableFragments(fragments);
				fragments.code(" && " + $runtime.type(this) + ".isValue(").compile(this._left).code("))");
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(").compile(this._left).code(")");
			}
			fragments.code(" ? undefined : ").compile(this._left).code($equals).compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNullCoalescing.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toStatementFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var ctrl = fragments.newControl();
			ctrl.code("if(!");
			if(this._left.isNullable()) {
				ctrl.code("(");
				this._left.toNullableFragments(ctrl);
				ctrl.code(" && " + $runtime.type(this) + ".isValue(").compile(this._left).code("))");
			}
			else {
				ctrl.code($runtime.type(this) + ".isValue(").compile(this._left).code(")");
			}
			ctrl.code(")").step().newLine().compile(this._left).code($equals).compile(this._right).done();
			ctrl.done();
		},
		toStatementFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorNullCoalescing.prototype.__ks_func_toStatementFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toStatementFragments) {
				return AssignmentOperatorExpression.prototype.toStatementFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var AssignmentOperatorSubtraction = Helper.class({
		$name: "AssignmentOperatorSubtraction",
		$extends: AssignmentOperatorExpression,
		__ks_init: function() {
			AssignmentOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			AssignmentOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left).code(" -= ").compile(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return AssignmentOperatorSubtraction.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AssignmentOperatorExpression.prototype.toFragments) {
				return AssignmentOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorExpression = Helper.class({
		$name: "BinaryOperatorExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._await = false;
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			BinaryOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_1092;
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
			this._right = $compile.expression(this._data.right, this);
			this._right.analyse();
			this._await = this._left.isAwait() || this._right.isAwait();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			this._right.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
			this._right.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isAwait_0: function() {
			return this._await;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Expression.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isAwaiting_0: function() {
			return this._left.isAwaiting() || this._right.isAwaiting();
		},
		isAwaiting: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isAwaiting_0.apply(this);
			}
			return Expression.prototype.isAwaiting.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._left.isNullable() || this._right.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isNullableComputed_0: function() {
			return (this._left.isNullable() && this._right.isNullable()) || this._left.isNullableComputed() || this._right.isNullableComputed();
		},
		isNullableComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_isNullableComputed_0.apply(this);
			}
			return Expression.prototype.isNullableComputed.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._left.isUsingVariable(name) || this._right.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return BinaryOperatorExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._left.acquireReusable(false);
			this._right.acquireReusable(false);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return BinaryOperatorExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._left.releaseReusable();
			this._right.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._await) {
				if(this._left.isAwaiting()) {
					return this._left.toFragments(fragments, mode);
				}
				else if(this._right.isAwaiting()) {
					return this._right.toFragments(fragments, mode);
				}
				else {
					this.toOperatorFragments(fragments);
				}
			}
			else if(this.isNullable() && !this._tested) {
				fragments.wrapNullable(this).code(" ? ");
				this.toOperatorFragments(fragments);
				fragments.code(" : false");
			}
			else {
				this.toOperatorFragments(fragments);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(!this._tested) {
				if(this._left.isNullable()) {
					fragments.compileNullable(this._left);
					if(this._right.isNullable()) {
						fragments.code(" && ").compileNullable(this._right);
					}
				}
				else {
					fragments.compileNullable(this._right);
				}
				this._tested = true;
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		}
	});
	var BinaryOperatorAddition = Helper.class({
		$name: "BinaryOperatorAddition",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("+", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorAddition.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			if(this._left.type().isNumber() || this._left.type().isString()) {
				return this._left.type();
			}
			else {
				return new UnionType(this._scope, [this._scope.reference("Number"), this._scope.reference("String")]);
			}
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorAddition.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorAnd = Helper.class({
		$name: "BinaryOperatorAnd",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			var __ks__;
			var scope = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : parent.scope();
			BinaryOperatorExpression.prototype.__ks_cons.call(this, [data, parent, new Scope(scope)]);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				BinaryOperatorAnd.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			var variables = this._left.reduceTypes();
			for(var name in variables) {
				var type = variables[name];
				if(!type.isAny()) {
					this._scope.define(name, true, type, this);
				}
			}
			this._right.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorAnd.prototype.__ks_func_prepare_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_reduceTypes_0: function() {
			var variables = {};
			var __ks_1093 = this._left.reduceTypes();
			for(var name in __ks_1093) {
				var type = __ks_1093[name];
				variables[name] = type;
			}
			__ks_1093 = this._right.reduceTypes();
			for(var name in __ks_1093) {
				var type = __ks_1093[name];
				variables[name] = type;
			}
			return variables;
		},
		reduceTypes: function() {
			if(arguments.length === 0) {
				return BinaryOperatorAnd.prototype.__ks_func_reduceTypes_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.reduceTypes.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrapBoolean(this._left).code($space).code("&&", this._data.operator).code($space).wrapBoolean(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorAnd.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorAnd.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseAnd = Helper.class({
		$name: "BinaryOperatorBitwiseAnd",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("&", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseAnd.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseAnd.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseLeftShift = Helper.class({
		$name: "BinaryOperatorBitwiseLeftShift",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("<<", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseLeftShift.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseLeftShift.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseOr = Helper.class({
		$name: "BinaryOperatorBitwiseOr",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("|", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseOr.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseOr.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseRightShift = Helper.class({
		$name: "BinaryOperatorBitwiseRightShift",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code(">>", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseRightShift.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseRightShift.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorBitwiseXor = Helper.class({
		$name: "BinaryOperatorBitwiseXor",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("^", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorBitwiseXor.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorBitwiseXor.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorDivision = Helper.class({
		$name: "BinaryOperatorDivision",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("/", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorDivision.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorDivision.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorEquality = Helper.class({
		$name: "BinaryOperatorEquality",
		$extends: BinaryOperatorExpression,
		__ks_init_1: function() {
			this._isLeftNaN = false;
			this._isRightNaN = false;
		},
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
			BinaryOperatorEquality.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			this._right.prepare();
			this._isLeftNaN = KSType.is(this._left, IdentifierLiteral) && (this._left.value() === "NaN");
			this._isRightNaN = KSType.is(this._right, IdentifierLiteral) && (this._right.value() === "NaN");
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorEquality.prototype.__ks_func_prepare_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return !this._isLeftNaN && !this._isRightNaN;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorEquality.prototype.__ks_func_isComputed_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._isLeftNaN) {
				fragments.code("isNaN(").compile(this._right).code(")");
			}
			else if(this._isRightNaN) {
				fragments.code("isNaN(").compile(this._left).code(")");
			}
			else {
				fragments.wrap(this._left).code($space).code("===", this._data.operator).code($space).wrap(this._right);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorEquality.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorEquality.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorGreaterThan = Helper.class({
		$name: "BinaryOperatorGreaterThan",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code(">", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorGreaterThan.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorGreaterThan.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorGreaterThanOrEqual = Helper.class({
		$name: "BinaryOperatorGreaterThanOrEqual",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code(">=", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorGreaterThanOrEqual.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorGreaterThanOrEqual.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorInequality = Helper.class({
		$name: "BinaryOperatorInequality",
		$extends: BinaryOperatorExpression,
		__ks_init_1: function() {
			this._isLeftNaN = false;
			this._isRightNaN = false;
		},
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
			BinaryOperatorInequality.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			this._right.prepare();
			this._isLeftNaN = KSType.is(this._left, IdentifierLiteral) && (this._left.value() === "NaN");
			this._isRightNaN = KSType.is(this._right, IdentifierLiteral) && (this._right.value() === "NaN");
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorInequality.prototype.__ks_func_prepare_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return !this._isLeftNaN && !this._isRightNaN;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorInequality.prototype.__ks_func_isComputed_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(this._isLeftNaN) {
				fragments.code("!isNaN(").compile(this._right).code(")");
			}
			else if(this._isRightNaN) {
				fragments.code("!isNaN(").compile(this._left).code(")");
			}
			else {
				fragments.wrap(this._left).code($space).code("!==", this._data.operator).code($space).wrap(this._right);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorInequality.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorInequality.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorLessThan = Helper.class({
		$name: "BinaryOperatorLessThan",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("<", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorLessThan.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorLessThan.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorLessThanOrEqual = Helper.class({
		$name: "BinaryOperatorLessThanOrEqual",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("<=", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorLessThanOrEqual.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorLessThanOrEqual.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorModulo = Helper.class({
		$name: "BinaryOperatorModulo",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("%", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorModulo.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorModulo.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorMultiplication = Helper.class({
		$name: "BinaryOperatorMultiplication",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space).code("*", this._data.operator).code($space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorMultiplication.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorMultiplication.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorNullCoalescing = Helper.class({
		$name: "BinaryOperatorNullCoalescing",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			BinaryOperatorExpression.prototype.prepare.apply(this, []);
			this._left.acquireReusable(true);
			this._left.releaseReusable();
			if(this._left.type().equals(this._right.type())) {
				var __ks_1094;
				this._type = this._left.type();
			}
			else {
				this._type = new UnionType(this._scope, [this._left.type(), this._right.type()]);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_prepare_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			this._left.acquireReusable(true);
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
			this._left.releaseReusable();
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._left.isNullable()) {
				fragments.code("(");
				this._left.toNullableFragments(fragments);
				fragments.code(" && " + $runtime.type(this) + ".isValue(").compileReusable(this._left).code("))");
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(").compileReusable(this._left).code(")");
			}
			fragments.code(" ? ").compile(this._left).code(" : ").wrap(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorNullCoalescing.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorOr = Helper.class({
		$name: "BinaryOperatorOr",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_reduceTypes_0: function() {
			var variables = {};
			var right = this._right.reduceTypes();
			var rtype;
			var __ks_1095 = this._left.reduceTypes();
			for(var name in __ks_1095) {
				var type = __ks_1095[name];
				if((KSType.isValue(right[name]) ? (rtype = right[name], true) : false) && !type.isAny() && !rtype.isAny()) {
					if(type.equals(right[name])) {
						variables[name] = type;
					}
					else {
						variables[name] = Type.union(this._scope, type, rtype);
					}
				}
			}
			return variables;
		},
		reduceTypes: function() {
			if(arguments.length === 0) {
				return BinaryOperatorOr.prototype.__ks_func_reduceTypes_0.apply(this);
			}
			return BinaryOperatorExpression.prototype.reduceTypes.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrapBoolean(this._left).code($space).code("||", this._data.operator).code($space).wrapBoolean(this._right);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorOr.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return BinaryOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorOr.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorSubtraction = Helper.class({
		$name: "BinaryOperatorSubtraction",
		$extends: BinaryOperatorExpression,
		__ks_init: function() {
			BinaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			BinaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			fragments.wrap(this._left).code($space, "-", this._data.operator, $space).wrap(this._right);
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return BinaryOperatorSubtraction.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(BinaryOperatorExpression.prototype.toOperatorFragments) {
				return BinaryOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorSubtraction.prototype.__ks_func_type_0.apply(this);
			}
			else if(BinaryOperatorExpression.prototype.type) {
				return BinaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorTypeCasting = Helper.class({
		$name: "BinaryOperatorTypeCasting",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_1096;
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
			this._type = Type.fromAST(this._data.right, this);
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			var type = this._left.type();
			if(!(KSType.is(type, ReferenceType) || KSType.is(type, UnionType) || type.isAny())) {
				TypeException.throwInvalidCasting(this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return this._left.isNullable();
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.compile(this._left);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeCasting.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorTypeEquality = Helper.class({
		$name: "BinaryOperatorTypeEquality",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_1097;
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			if((this._data.right.kind === NodeKind.TypeReference) && (KSType.isValue(this._data.right.typeName) ? this._data.right.typeName.kind === NodeKind.Identifier : false)) {
				var variable, __ks_1098;
				if(KSType.isValue(__ks_1098 = this._scope.getVariable(this._data.right.typeName.name)) ? (variable = __ks_1098, true) : false) {
					var type = variable.type();
					if(type.isClass()) {
						if(!this._left.type().isAny() && !this._left.type().matchContentTo(type)) {
							TypeException.throwInvalidTypeChecking(this);
						}
					}
					else if(!type.isAny()) {
						TypeException.throwNotClass(variable.name(), this);
					}
					this._type = Type.fromAST(this._data.right, this);
				}
				else {
					ReferenceException.throwNotDefined(this._data.right.typeName.name, this);
				}
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_reduceTypes_0: function() {
			var variables = {};
			if(KSType.is(this._left, IdentifierLiteral)) {
				variables[this._left.value()] = this._type;
			}
			return variables;
		},
		reduceTypes: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_reduceTypes_0.apply(this);
			}
			return Expression.prototype.reduceTypes.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this._type.toTestFragments(fragments, this._left);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeEquality.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var BinaryOperatorTypeInequality = Helper.class({
		$name: "BinaryOperatorTypeInequality",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_1099;
			this._left = $compile.expression(this._data.left, this);
			this._left.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._left.prepare();
			if((this._data.right.kind === NodeKind.TypeReference) && (KSType.isValue(this._data.right.typeName) ? this._data.right.typeName.kind === NodeKind.Identifier : false)) {
				var variable, __ks_1100;
				if(KSType.isValue(__ks_1100 = this._scope.getVariable(this._data.right.typeName.name)) ? (variable = __ks_1100, true) : false) {
					var type = variable.type();
					if(type.isClass()) {
						if(!this._left.type().isAny() && type.matchContentTo(this._left.type())) {
							TypeException.throwInvalidTypeChecking(this);
						}
					}
					else if(!type.isAny()) {
						TypeException.throwNotClass(variable.name(), this);
					}
					this._type = Type.fromAST(this._data.right, this);
				}
				else {
					ReferenceException.throwNotDefined(this._data.right.typeName.name, this);
				}
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._left.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return false;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._data.right.kind === NodeKind.TypeReference) {
				fragments.code("!");
				this._type.toTestFragments(fragments, this._left);
			}
			else if(KSType.isValue(this._data.right.types)) {
				fragments.code("!(");
				this._type.toTestFragments(fragments, this._left);
				fragments.code(")");
			}
			else {
				throw new NotImplementedException(this);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return BinaryOperatorTypeInequality.prototype.__ks_func_type_0.apply(this);
			}
			else if(Expression.prototype.type) {
				return Expression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorExpression = Helper.class({
		$name: "PolyadicOperatorExpression",
		$extends: Expression,
		__ks_init_1: function() {
			this._tested = false;
		},
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
			PolyadicOperatorExpression.prototype.__ks_init_1.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			this._operands = [];
			for(var __ks_1101 = 0, __ks_1102 = this._data.operands.length, operand; __ks_1101 < __ks_1102; ++__ks_1101) {
				operand = this._data.operands[__ks_1101];
				this._operands.push(operand = $compile.expression(operand, this));
				operand.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_1103 = 0, __ks_1104 = this._operands.length, operand; __ks_1103 < __ks_1104; ++__ks_1103) {
				operand = this._operands[__ks_1103];
				operand.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_1105 = 0, __ks_1106 = this._operands.length, operand; __ks_1105 < __ks_1106; ++__ks_1105) {
				operand = this._operands[__ks_1105];
				operand.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			for(var i = 0, __ks_1107 = this._operands.length; i < __ks_1107; ++i) {
				this._operands[i].acquireReusable(false);
				this._operands[i].releaseReusable();
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorExpression.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return Expression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return Expression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isComputed_0: function() {
			return true;
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_isComputed_0.apply(this);
			}
			return Expression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_isNullable_0: function() {
			for(var __ks_1108 = 0, __ks_1109 = this._operands.length, operand; __ks_1108 < __ks_1109; ++__ks_1108) {
				operand = this._operands[__ks_1108];
				if(operand.isNullable()) {
					return true;
				}
			}
			return false;
		},
		isNullable: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorExpression.prototype.__ks_func_isNullable_0.apply(this);
			}
			return Expression.prototype.isNullable.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			for(var __ks_1110 = 0, __ks_1111 = this._operands.length, operand; __ks_1110 < __ks_1111; ++__ks_1110) {
				operand = this._operands[__ks_1110];
				if(operand.isUsingVariable(name)) {
					return true;
				}
			}
			return false;
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var test = this.isNullable() && !this._tested;
			if(test) {
				fragments.compileNullable(this).code(" ? ");
			}
			this.toOperatorFragments(fragments);
			if(test) {
				fragments.code(" : false");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorExpression.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(Expression.prototype.toFragments) {
				return Expression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toNullableFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(!this._tested) {
				var nf = false;
				for(var __ks_1112 = 0, __ks_1113 = this._operands.length, operand; __ks_1112 < __ks_1113; ++__ks_1112) {
					operand = this._operands[__ks_1112];
					if(operand.isNullable()) {
						if(nf) {
							fragments.code(" && ");
						}
						else {
							nf = true;
						}
						fragments.compileNullable(operand);
					}
				}
				this._tested = true;
			}
		},
		toNullableFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorExpression.prototype.__ks_func_toNullableFragments_0.apply(this, arguments);
			}
			return Expression.prototype.toNullableFragments.apply(this, arguments);
		}
	});
	var PolyadicOperatorAddition = Helper.class({
		$name: "PolyadicOperatorAddition",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_1114 = 0, __ks_1115 = this._operands.length, operand; __ks_1114 < __ks_1115; ++__ks_1114) {
				operand = this._operands[__ks_1114];
				if(nf) {
					fragments.code($space).code("+", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorAddition.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			if(this._operands[0].type().isNumber() || this._operands[0].type().isString()) {
				return this._operands[0].type();
			}
			else {
				return new UnionType(this._scope, [this._scope.reference("Number"), this._scope.reference("String")]);
			}
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorAddition.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorAnd = Helper.class({
		$name: "PolyadicOperatorAnd",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var nf = false;
			for(var __ks_1116 = 0, __ks_1117 = this._operands.length, operand; __ks_1116 < __ks_1117; ++__ks_1116) {
				operand = this._operands[__ks_1116];
				if(nf) {
					fragments.code($space).code("&&", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrapBoolean(operand);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorAnd.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorAnd.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseAnd = Helper.class({
		$name: "PolyadicOperatorBitwiseAnd",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_1118 = 0, __ks_1119 = this._operands.length, operand; __ks_1118 < __ks_1119; ++__ks_1118) {
				operand = this._operands[__ks_1118];
				if(nf) {
					fragments.code($space).code("&", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorBitwiseAnd.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseAnd.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseLeftShift = Helper.class({
		$name: "PolyadicOperatorBitwiseLeftShift",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_1120 = 0, __ks_1121 = this._operands.length, operand; __ks_1120 < __ks_1121; ++__ks_1120) {
				operand = this._operands[__ks_1120];
				if(nf) {
					fragments.code($space).code("<<", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorBitwiseLeftShift.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseLeftShift.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseOr = Helper.class({
		$name: "PolyadicOperatorBitwiseOr",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_1122 = 0, __ks_1123 = this._operands.length, operand; __ks_1122 < __ks_1123; ++__ks_1122) {
				operand = this._operands[__ks_1122];
				if(nf) {
					fragments.code($space).code("|", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorBitwiseOr.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseOr.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseRightShift = Helper.class({
		$name: "PolyadicOperatorBitwiseRightShift",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_1124 = 0, __ks_1125 = this._operands.length, operand; __ks_1124 < __ks_1125; ++__ks_1124) {
				operand = this._operands[__ks_1124];
				if(nf) {
					fragments.code($space).code(">>", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorBitwiseRightShift.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseRightShift.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorBitwiseXor = Helper.class({
		$name: "PolyadicOperatorBitwiseXor",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_1126 = 0, __ks_1127 = this._operands.length, operand; __ks_1126 < __ks_1127; ++__ks_1126) {
				operand = this._operands[__ks_1126];
				if(nf) {
					fragments.code($space).code("^", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorBitwiseXor.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorBitwiseXor.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorDivision = Helper.class({
		$name: "PolyadicOperatorDivision",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_1128 = 0, __ks_1129 = this._operands.length, operand; __ks_1128 < __ks_1129; ++__ks_1128) {
				operand = this._operands[__ks_1128];
				if(nf) {
					fragments.code($space).code("/", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorDivision.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorDivision.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorEquality = Helper.class({
		$name: "PolyadicOperatorEquality",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var l = this._operands.length - 1;
			for(var i = 0; i < l; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.compile(this._operands[i]).code(" === ").compile(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorEquality.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorEquality.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorGreaterThan = Helper.class({
		$name: "PolyadicOperatorGreaterThan",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var i = 0, __ks_1130 = this._operands.length - 1; i < __ks_1130; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.wrap(this._operands[i]).code($space).code(">", this._data.operator).code($space).wrap(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorGreaterThan.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorGreaterThan.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorGreaterThanOrEqual = Helper.class({
		$name: "PolyadicOperatorGreaterThanOrEqual",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var i = 0, __ks_1131 = this._operands.length - 1; i < __ks_1131; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.wrap(this._operands[i]).code($space).code(">=", this._data.operator).code($space).wrap(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorGreaterThanOrEqual.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorGreaterThanOrEqual.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorLessThan = Helper.class({
		$name: "PolyadicOperatorLessThan",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var i = 0, __ks_1132 = this._operands.length - 1; i < __ks_1132; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.wrap(this._operands[i]).code($space).code("<", this._data.operator).code($space).wrap(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorLessThan.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorLessThan.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorLessThanOrEqual = Helper.class({
		$name: "PolyadicOperatorLessThanOrEqual",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			for(var i = 0, __ks_1133 = this._operands.length - 1; i < __ks_1133; ++i) {
				if(i) {
					fragments.code(" && ");
				}
				fragments.wrap(this._operands[i]).code($space).code("<=", this._data.operator).code($space).wrap(this._operands[i + 1]);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorLessThanOrEqual.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorLessThanOrEqual.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorMultiplication = Helper.class({
		$name: "PolyadicOperatorMultiplication",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_1134 = 0, __ks_1135 = this._operands.length, operand; __ks_1134 < __ks_1135; ++__ks_1134) {
				operand = this._operands[__ks_1134];
				if(nf) {
					fragments.code($space).code("*", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorMultiplication.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorMultiplication.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorModulo = Helper.class({
		$name: "PolyadicOperatorModulo",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_1136 = 0, __ks_1137 = this._operands.length, operand; __ks_1136 < __ks_1137; ++__ks_1136) {
				operand = this._operands[__ks_1136];
				if(nf) {
					fragments.code($space).code("%", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorModulo.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorModulo.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorNullCoalescing = Helper.class({
		$name: "PolyadicOperatorNullCoalescing",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			var scope;
			if(arguments.length > 2 && (scope = arguments[++__ks_i]) !== void 0 && scope !== null) {
				if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
			}
			else {
				scope = new Scope(parent.scope());
			}
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, [data, parent, scope]);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				PolyadicOperatorNullCoalescing.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
			this._operands = [];
			for(var __ks_1138 = 0, __ks_1139 = this._data.operands.length, operand; __ks_1138 < __ks_1139; ++__ks_1138) {
				operand = this._data.operands[__ks_1138];
				this._operands.push(operand = $compile.expression(operand, this, this.newScope()));
				operand.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_analyse_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.analyse.apply(this, arguments);
		},
		__ks_func_prepare_0: function() {
			var types = [];
			var operandType, type, ne;
			for(var __ks_1140 = 0, __ks_1141 = this._operands.length, operand; __ks_1140 < __ks_1141; ++__ks_1140) {
				operand = this._operands[__ks_1140];
				operand.prepare();
				operand.acquireReusable(true);
				operand.releaseReusable();
				operandType = operand.type();
				ne = true;
				for(var __ks_1142 = 0, __ks_1143 = types.length; ne && __ks_1142 < __ks_1143; ++__ks_1142) {
					type = types[__ks_1142];
					if(type.equals(operandType)) {
						ne = false;
					}
				}
				if(ne) {
					types.push(operandType);
				}
			}
			if(types.length === 1) {
				this._type = types[0];
			}
			else {
				this._type = new UnionType(this._scope, types);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_prepare_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_acquireReusable_0: function(acquire) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(acquire === void 0 || acquire === null) {
				throw new TypeError("'acquire' is not nullable");
			}
			for(var i = 0, __ks_1144 = this._operands.length - 2; i <= __ks_1144; ++i) {
				this._operands[i].acquireReusable(true);
				this._operands[i].releaseReusable();
			}
		},
		acquireReusable: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_acquireReusable_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.acquireReusable.apply(this, arguments);
		},
		__ks_func_releaseReusable_0: function() {
		},
		releaseReusable: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_releaseReusable_0.apply(this);
			}
			return PolyadicOperatorExpression.prototype.releaseReusable.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			this.module().flag("Type");
			var l = this._operands.length - 1;
			var operand;
			for(var i = 0; i < l; ++i) {
				operand = this._operands[i];
				if(operand.isNullable()) {
					fragments.code("(");
					operand.toNullableFragments(fragments);
					fragments.code(" && " + $runtime.type(this) + ".isValue(").compileReusable(operand).code("))");
				}
				else {
					fragments.code($runtime.type(this) + ".isValue(").compileReusable(operand).code(")");
				}
				fragments.code(" ? ").compile(operand).code(" : ");
			}
			fragments.compile(this._operands[l]);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorNullCoalescing.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorOr = Helper.class({
		$name: "PolyadicOperatorOr",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			var nf = false;
			for(var __ks_1145 = 0, __ks_1146 = this._operands.length, operand; __ks_1145 < __ks_1146; ++__ks_1145) {
				operand = this._operands[__ks_1145];
				if(nf) {
					fragments.code($space).code("||", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrapBoolean(operand);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return PolyadicOperatorOr.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return PolyadicOperatorExpression.prototype.toFragments.apply(this, arguments);
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorOr.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var PolyadicOperatorSubtraction = Helper.class({
		$name: "PolyadicOperatorSubtraction",
		$extends: PolyadicOperatorExpression,
		__ks_init: function() {
			PolyadicOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			PolyadicOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toOperatorFragments_0: function(fragments) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			var nf = false;
			for(var __ks_1147 = 0, __ks_1148 = this._operands.length, operand; __ks_1147 < __ks_1148; ++__ks_1147) {
				operand = this._operands[__ks_1147];
				if(nf) {
					fragments.code($space).code("-", this._data.operator).code($space);
				}
				else {
					nf = true;
				}
				fragments.wrap(operand);
			}
		},
		toOperatorFragments: function() {
			if(arguments.length === 1) {
				return PolyadicOperatorSubtraction.prototype.__ks_func_toOperatorFragments_0.apply(this, arguments);
			}
			else if(PolyadicOperatorExpression.prototype.toOperatorFragments) {
				return PolyadicOperatorExpression.prototype.toOperatorFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return PolyadicOperatorSubtraction.prototype.__ks_func_type_0.apply(this);
			}
			else if(PolyadicOperatorExpression.prototype.type) {
				return PolyadicOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorExpression = Helper.class({
		$name: "UnaryOperatorExpression",
		$extends: Expression,
		__ks_init: function() {
			Expression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Expression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var __ks_1149;
			this._argument = $compile.expression(this._data.argument, this);
			this._argument.analyse();
		},
		analyse: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Expression.prototype.analyse) {
				return Expression.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			this._argument.prepare();
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Expression.prototype.prepare) {
				return Expression.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			this._argument.translate();
		},
		translate: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Expression.prototype.translate) {
				return Expression.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_argument_0: function() {
			return this._argument;
		},
		argument: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_argument_0.apply(this);
			}
			else if(Expression.prototype.argument) {
				return Expression.prototype.argument.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_hasExceptions_0: function() {
			return false;
		},
		hasExceptions: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExpression.prototype.__ks_func_hasExceptions_0.apply(this);
			}
			return Expression.prototype.hasExceptions.apply(this, arguments);
		},
		__ks_func_isUsingVariable_0: function(name) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(name === void 0 || name === null) {
				throw new TypeError("'name' is not nullable");
			}
			return this._argument.isUsingVariable(name);
		},
		isUsingVariable: function() {
			if(arguments.length === 1) {
				return UnaryOperatorExpression.prototype.__ks_func_isUsingVariable_0.apply(this, arguments);
			}
			else if(Expression.prototype.isUsingVariable) {
				return Expression.prototype.isUsingVariable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorBitwiseNot = Helper.class({
		$name: "UnaryOperatorBitwiseNot",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("~", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorBitwiseNot.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorBitwiseNot.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorDecrementPostfix = Helper.class({
		$name: "UnaryOperatorDecrementPostfix",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrap(this._argument).code("--", this._data.operator);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorDecrementPostfix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorDecrementPostfix.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorDecrementPrefix = Helper.class({
		$name: "UnaryOperatorDecrementPrefix",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("--", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorDecrementPrefix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorDecrementPrefix.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorExistential = Helper.class({
		$name: "UnaryOperatorExistential",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_isComputed_0: function() {
			return this._argument.isNullable();
		},
		isComputed: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExistential.prototype.__ks_func_isComputed_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.isComputed.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._argument.isNullable()) {
				fragments.wrapNullable(this._argument).code(" && ").code($runtime.type(this) + ".isValue(", this._data.operator).compile(this._argument).code(")", this._data.operator);
			}
			else {
				fragments.code($runtime.type(this) + ".isValue(", this._data.operator).compile(this._argument).code(")", this._data.operator);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorExistential.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorExistential.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorIncrementPostfix = Helper.class({
		$name: "UnaryOperatorIncrementPostfix",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.wrap(this._argument).code("++", this._data.operator);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorIncrementPostfix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorIncrementPostfix.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorIncrementPrefix = Helper.class({
		$name: "UnaryOperatorIncrementPrefix",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("++", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorIncrementPrefix.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorIncrementPrefix.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorNegation = Helper.class({
		$name: "UnaryOperatorNegation",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("!", this._data.operator).wrapBoolean(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorNegation.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Boolean");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorNegation.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorNegative = Helper.class({
		$name: "UnaryOperatorNegative",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			fragments.code("-", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorNegative.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Number");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorNegative.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var UnaryOperatorSpread = Helper.class({
		$name: "UnaryOperatorSpread",
		$extends: UnaryOperatorExpression,
		__ks_init: function() {
			UnaryOperatorExpression.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			UnaryOperatorExpression.prototype.__ks_cons.call(this, args);
		},
		__ks_func_prepare_0: function() {
			this._argument.prepare();
			var type = this._argument.type();
			if(!(type.isArray() || type.isAny())) {
				TypeException.throwInvalidSpread(this);
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return UnaryOperatorSpread.prototype.__ks_func_prepare_0.apply(this);
			}
			return UnaryOperatorExpression.prototype.prepare.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			if(this._options.format.spreads === "es5") {
				throw new NotSupportedException(this);
			}
			fragments.code("...", this._data.operator).wrap(this._argument);
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return UnaryOperatorSpread.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(UnaryOperatorExpression.prototype.toFragments) {
				return UnaryOperatorExpression.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._scope.reference("Array");
		},
		type: function() {
			if(arguments.length === 0) {
				return UnaryOperatorSpread.prototype.__ks_func_type_0.apply(this);
			}
			else if(UnaryOperatorExpression.prototype.type) {
				return UnaryOperatorExpression.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var MacroVariableKind = {
		AST: 0,
		AutoEvaluated: 1
	};
	var $target = (parseInt(/^v(\d+)\./.exec(process.version)[1]) >= 6) ? "ecma-v6" : "ecma-v5";
	function $evaluate(source) {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		if(source === void 0 || source === null) {
			throw new TypeError("'source' is not nullable");
		}
		var compiler = new Compiler("__ks__", {
			register: false,
			target: $target
		});
		compiler.compile("#![bin]\nextern console, JSON, __ks_marker\nreturn " + source);
		return eval("(function(__ks_marker) {" + compiler.toSource() + "})")(MacroMarker);
	}
	var MacroMarker = Helper.class({
		$name: "MacroMarker",
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			else if(!KSType.isNumber(index)) {
				throw new TypeError("'index' is not of type 'Number'");
			}
			this.index = index;
		},
		__ks_cons: function(args) {
			if(args.length === 1) {
				MacroMarker.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		}
	});
	function $reificate(macro, node, data, ast, reification) {
		if(arguments.length < 5) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 5)");
		}
		if(macro === void 0 || macro === null) {
			throw new TypeError("'macro' is not nullable");
		}
		if(node === void 0 || node === null) {
			throw new TypeError("'node' is not nullable");
		}
		if(data === void 0 || data === null) {
			throw new TypeError("'data' is not nullable");
		}
		if(ast === void 0 || ast === null) {
			throw new TypeError("'ast' is not nullable");
		}
		if(reification === void 0 || reification === null) {
			throw new TypeError("'reification' is not nullable");
		}
		if(ast) {
			return Generator.generate(data, {
				transformers: {
					expression: Helper.vcurry($transformExpression, null, macro, node)
				}
			});
		}
		else {
			if(reification === ReificationKind.Block) {
				var src = "";
				for(var __ks_1150 = 0, __ks_1151 = data.length, element; __ks_1150 < __ks_1151; ++__ks_1150) {
					element = data[__ks_1150];
					src += element + "\n";
				}
				return src;
			}
			else if(reification === ReificationKind.Expression) {
				var context = {
					data: ""
				};
				$serialize(macro, data, context);
				return context.data;
			}
			else if(reification === ReificationKind.Identifier) {
				return data;
			}
		}
	}
	function $serialize(macro, data, context) {
		if(arguments.length < 3) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
		}
		if(macro === void 0 || macro === null) {
			throw new TypeError("'macro' is not nullable");
		}
		if(data === void 0 || data === null) {
			throw new TypeError("'data' is not nullable");
		}
		if(context === void 0 || context === null) {
			throw new TypeError("'context' is not nullable");
		}
		if((data === null) || KSType.isBoolean(data)) {
			context.data += JSON.stringify(data);
		}
		else if(KSType.isArray(data)) {
			if(data.length === 0) {
				context.data += "[]";
			}
			else {
				context.data += "[";
				$serialize(macro, data[0], context);
				for(var i = 1, __ks_1152 = data.length; i < __ks_1152; ++i) {
					context.data += ", ";
					$serialize(macro, data[i], context);
				}
				context.data += "]";
			}
		}
		else if(KSType.is(data, MacroMarker)) {
			context.data += Generator.generate(macro.getMark(data.index));
		}
		else if(KSType.isNumber(data)) {
			context.data += isNaN(data) ? "NaN" : data;
		}
		else if(KSType.isRegExp(data)) {
			context.data += data;
		}
		else if(KSType.isString(data)) {
			context.data += $quote(data);
		}
		else {
			var empty = true;
			var computed, name;
			context.data += "{";
			for(var key in data) {
				var value = data[key];
				if(empty) {
					empty = false;
					context.data += "\n";
				}
				computed = /^\_ks\_property\_name\_mark\_(\d+)$/.exec(key);
				if(KSType.is(value, MacroMarker)) {
					if(KSType.isValue(computed)) {
						name = "" + Generator.generate(macro.getMark(computed[1]), {
							mode: Generator.KSWriterMode.Property
						});
					}
					else {
						name = key;
					}
					if(macro.getMark(value.index + 1) === NodeKind.ObjectMember) {
						context.data += "" + name + ": " + Generator.generate(macro.getMark(value.index), {
							mode: Generator.KSWriterMode.Property
						});
					}
					else {
						context.data += "" + name + Generator.generate(macro.getMark(value.index), {
							mode: Generator.KSWriterMode.Property
						});
					}
				}
				else if(KSType.isValue(computed)) {
					context.data += "" + Generator.generate(macro.getMark(computed[1]), {
						mode: Generator.KSWriterMode.Property
					}) + ": ";
					$serialize(macro, value, context);
				}
				else {
					context.data += "" + $quote(key) + ": ";
					$serialize(macro, value, context);
				}
				context.data += "\n";
			}
			context.data += "}";
		}
	}
	function $transformExpression(macro, node, data, writer) {
		if(arguments.length < 4) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
		}
		if(macro === void 0 || macro === null) {
			throw new TypeError("'macro' is not nullable");
		}
		if(node === void 0 || node === null) {
			throw new TypeError("'node' is not nullable");
		}
		if(data === void 0 || data === null) {
			throw new TypeError("'data' is not nullable");
		}
		if(writer === void 0 || writer === null) {
			throw new TypeError("'writer' is not nullable");
		}
		var __ks_1153 = data.kind;
		if(__ks_1153 === NodeKind.EnumExpression) {
			return macro.addMark(data);
		}
		else if(__ks_1153 === NodeKind.FunctionExpression) {
			return macro.addMark(data);
		}
		else if(__ks_1153 === NodeKind.LambdaExpression) {
			return macro.addMark(data);
		}
		else if(__ks_1153 === NodeKind.ObjectMember) {
			var name = (data.name.kind === NodeKind.ComputedPropertyName) || (data.name.kind === NodeKind.TemplateExpression);
			var value = (data.value.kind === NodeKind.EnumExpression) || ((data.value.kind === NodeKind.Identifier) && !node.scope().isPredefinedVariable(data.value.name)) || (data.value.kind === NodeKind.LambdaExpression) || (data.value.kind === NodeKind.MemberExpression);
			if(name || value) {
				return {
					kind: NodeKind.ObjectMember,
					name: name ? macro.addPropertyNameMark(data.name) : data.name,
					value: value ? macro.addMark(data.value, NodeKind.ObjectMember) : data.value,
					start: data.start,
					end: data.end
				};
			}
		}
		return data;
	}
	var MacroDeclaration = Helper.class({
		$name: "MacroDeclaration",
		$extends: AbstractNode,
		__ks_init_1: function() {
			this._executeCount = 0;
			this._marks = [];
			this._parameters = {};
			this._referenceIndex = -1;
		},
		__ks_init: function() {
			AbstractNode.prototype.__ks_init.call(this);
			MacroDeclaration.prototype.__ks_init_1.call(this);
		},
		__ks_cons_0: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			else if(!KSType.is(parent, AbstractNode)) {
				throw new TypeError("'parent' is not of type 'AbstractNode'");
			}
			var name;
			if(arguments.length > 2 && (name = arguments[++__ks_i]) !== void 0 && name !== null) {
				if(!KSType.isString(name)) {
					throw new TypeError("'name' is not of type 'String'");
				}
			}
			else {
				name = data.name.name;
			}
			AbstractNode.prototype.__ks_cons.call(this, [data, parent, new Scope()]);
			this._name = name;
			this._scope.addNative("Identifier");
			this._scope.addNative("Expression");
			this._type = MacroType.fromAST(data, this);
			var builder = new Generator.KSWriter({
				filters: {
					expression: Helper.vcurry(this.filter, this, false),
					statement: Helper.vcurry(this.filter, this, true)
				}
			});
			var line = builder.newLine().code("func(__ks_evaluate, __ks_reificate");
			var auto;
			for(var __ks_1154 = 0, __ks_1155 = this._data.parameters.length; __ks_1154 < __ks_1155; ++__ks_1154) {
				data = this._data.parameters[__ks_1154];
				line.code(", ", data.name.name);
				if(KSType.isValue(data.defaultValue)) {
					line.code(" = ").expression(data.defaultValue);
				}
				auto = false;
				for(var __ks_1156 = 0, __ks_1157 = data.modifiers.length, modifier; !(auto) && __ks_1156 < __ks_1157; ++__ks_1156) {
					modifier = data.modifiers[__ks_1156];
					if(modifier.kind === ModifierKind.AutoEvaluate) {
						auto = true;
					}
				}
				this._parameters[data.name.name] = auto ? MacroVariableKind.AutoEvaluated : MacroVariableKind.AST;
			}
			var block = line.code(")").newBlock();
			for(name in this._parameters) {
				var kind = this._parameters[name];
				if(kind === MacroVariableKind.AutoEvaluated) {
					block.line(name + " = __ks_evaluate(__ks_reificate(" + name + ", true, 3))");
				}
			}
			block.line("let __ks_src = \"\"");
			var __ks_1154 = $ast.block(this._data.body).statements;
			for(var __ks_1155 = 0, __ks_1156 = __ks_1154.length, statement; __ks_1155 < __ks_1156; ++__ks_1155) {
				statement = __ks_1154[__ks_1155];
				block.statement(statement);
			}
			block.line("return __ks_src").done();
			line.done();
			var source = "";
			__ks_1154 = builder.toArray();
			for(var __ks_1155 = 0, __ks_1156 = __ks_1154.length, fragment; __ks_1155 < __ks_1156; ++__ks_1155) {
				fragment = __ks_1154[__ks_1155];
				source += fragment.code;
			}
			this._fn = $evaluate(source);
			this._parent.scope().addMacro(this._name, this);
		},
		__ks_cons: function(args) {
			if(args.length >= 2 && args.length <= 3) {
				MacroDeclaration.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_analyse_0: function() {
		},
		analyse: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(AbstractNode.prototype.analyse) {
				return AbstractNode.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
		},
		prepare: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(AbstractNode.prototype.prepare) {
				return AbstractNode.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
		},
		translate: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_translate_0.apply(this);
			}
			else if(AbstractNode.prototype.translate) {
				return AbstractNode.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addMark_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var __ks__;
			var kind = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var index = this._marks.length;
			this._marks.push(data, kind);
			return {
				kind: NodeKind.CreateExpression,
				class: {
					kind: NodeKind.Identifier,
					name: "__ks_marker"
				},
				arguments: [{
					kind: NodeKind.NumericExpression,
					value: index
				}]
			};
		},
		addMark: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return MacroDeclaration.prototype.__ks_func_addMark_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_addPropertyNameMark_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var __ks__;
			var kind = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var index = this._marks.length;
			this._marks.push(data, kind);
			return {
				kind: NodeKind.Identifier,
				name: "_ks_property_name_mark_" + index
			};
		},
		addPropertyNameMark: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return MacroDeclaration.prototype.__ks_func_addPropertyNameMark_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_execute_0: function(__ks_arguments_1, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			var module = this.module();
			++this._executeCount;
			var args = [$evaluate, Helper.vcurry($reificate, null, this, parent)].concat(__ks_arguments_1);
			var data = this._fn.apply(null, [].concat(args));
			try {
				data = Parser.parse(data);
			}
			catch(error) {
				error.filename = "" + this._parent.file() + "$" + this._name + "$" + this._executeCount;
				error.message += " (file \"" + error.filename + "\")";
				throw error;
			}
			var statements = [];
			var __ks_1160;
			for(var __ks_1158 = 0, __ks_1159 = data.body.length, statement; __ks_1158 < __ks_1159; ++__ks_1158) {
				statement = data.body[__ks_1158];
				if(KSType.isValue(__ks_1160 = $compile.statement(statement, parent)) ? (statement = __ks_1160, true) : false) {
					statements.push(statement);
				}
			}
			return statements;
		},
		execute: function() {
			if(arguments.length === 2) {
				return MacroDeclaration.prototype.__ks_func_execute_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.execute) {
				return AbstractNode.prototype.execute.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_export_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var recipient = arguments[++__ks_i];
			if(recipient === void 0 || recipient === null) {
				throw new TypeError("'recipient' is not nullable");
			}
			var __ks__;
			var name = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : this._name;
			var data = {
				parameters: this._data.parameters,
				body: this._data.body
			};
			recipient.exportMacro(name, Buffer.from(JSON.stringify(data)).toString("base64"));
		},
		export: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return MacroDeclaration.prototype.__ks_func_export_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_filter_0: function(statement, data, fragments) {
			if(arguments.length < 3) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
			}
			if(statement === void 0 || statement === null) {
				throw new TypeError("'statement' is not nullable");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(data.kind === NodeKind.MacroExpression) {
				if(statement) {
					fragments = fragments.newLine().code("__ks_src += ");
				}
				for(var index = 0, __ks_1161 = data.elements.length, element; index < __ks_1161; ++index) {
					element = data.elements[index];
					if(index !== 0) {
						fragments.code(" + ");
					}
					var __ks_1162 = element.kind;
					if(__ks_1162 === MacroElementKind.Expression) {
						fragments.code("__ks_reificate(").expression(element.expression).code(", " + ((element.expression.kind === NodeKind.Identifier) && (this._parameters[element.expression.name] === MacroVariableKind.AST)) + ", " + element.reification.kind + ")");
					}
					else if(__ks_1162 === MacroElementKind.Literal) {
						fragments.code($quote(element.value.replace(/\\/g, "\\\\")));
					}
					else if(__ks_1162 === MacroElementKind.NewLine) {
						fragments.code("\"\\n\"");
					}
				}
				if(statement) {
					fragments.done();
				}
				return true;
			}
			else {
				return false;
			}
		},
		filter: function() {
			if(arguments.length === 3) {
				return MacroDeclaration.prototype.__ks_func_filter_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.filter) {
				return AbstractNode.prototype.filter.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_getMark_0: function(index) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(index === void 0 || index === null) {
				throw new TypeError("'index' is not nullable");
			}
			return this._marks[index];
		},
		getMark: function() {
			if(arguments.length === 1) {
				return MacroDeclaration.prototype.__ks_func_getMark_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.getMark) {
				return AbstractNode.prototype.getMark.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isExportable_0: function() {
			return false;
		},
		isExportable: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_isExportable_0.apply(this);
			}
			else if(AbstractNode.prototype.isExportable) {
				return AbstractNode.prototype.isExportable.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isInstanceMethod_0: function() {
			return false;
		},
		isInstanceMethod: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_isInstanceMethod_0.apply(this);
			}
			else if(AbstractNode.prototype.isInstanceMethod) {
				return AbstractNode.prototype.isInstanceMethod.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_matchArguments_0: function(__ks_arguments_1) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(__ks_arguments_1 === void 0 || __ks_arguments_1 === null) {
				throw new TypeError("'arguments' is not nullable");
			}
			else if(!KSType.isArray(__ks_arguments_1)) {
				throw new TypeError("'arguments' is not of type 'Array'");
			}
			return this._type.matchArguments(__ks_arguments_1);
		},
		matchArguments: function() {
			if(arguments.length === 1) {
				return MacroDeclaration.prototype.__ks_func_matchArguments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.matchArguments) {
				return AbstractNode.prototype.matchArguments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_name_0: function() {
			return this._name;
		},
		name: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_name_0.apply(this);
			}
			else if(AbstractNode.prototype.name) {
				return AbstractNode.prototype.name.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_statement_0: function() {
			return this;
		},
		statement: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_statement_0.apply(this);
			}
			return AbstractNode.prototype.statement.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return MacroDeclaration.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			else if(AbstractNode.prototype.toFragments) {
				return AbstractNode.prototype.toFragments.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_type_0: function() {
			return this._type;
		},
		type: function() {
			if(arguments.length === 0) {
				return MacroDeclaration.prototype.__ks_func_type_0.apply(this);
			}
			else if(AbstractNode.prototype.type) {
				return AbstractNode.prototype.type.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	var MacroType = Helper.class({
		$name: "MacroType",
		$extends: FunctionType,
		$static: {
			__ks_sttc_fromAST_0: function(data, node) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var scope = node.scope();
				return new MacroType(Helper.mapArray(data.parameters, function(parameter) {
					return MacroParameterType.fromAST(parameter, scope, false, node);
				}), data, node);
			},
			fromAST: function() {
				if(arguments.length === 2) {
					return MacroType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return FunctionType.fromAST.apply(null, arguments);
			},
			__ks_sttc_import_0: function(data, references, scope, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(references === void 0 || references === null) {
					throw new TypeError("'references' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = new MacroType(scope);
				type._min = data.min;
				type._max = data.max;
				type._parameters = Helper.mapArray(data.parameters, function(parameter) {
					return MacroParameterType.import(parameter, references, scope, node);
				});
				type.updateArguments();
				return type;
			},
			import: function() {
				if(arguments.length === 4) {
					return MacroType.__ks_sttc_import_0.apply(this, arguments);
				}
				return FunctionType.import.apply(null, arguments);
			}
		},
		__ks_init: function() {
			FunctionType.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			FunctionType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_export_0: function() {
			return {
				min: this._min,
				max: this._max,
				parameters: Helper.mapArray(this._parameters, function(parameter) {
					return parameter.export();
				})
			};
		},
		export: function() {
			if(arguments.length === 0) {
				return MacroType.prototype.__ks_func_export_0.apply(this);
			}
			return FunctionType.prototype.export.apply(this, arguments);
		},
		__ks_func_matchContentTo_0: function(that) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(that === void 0 || that === null) {
				throw new TypeError("'that' is not nullable");
			}
			else if(!KSType.is(that, MacroType)) {
				throw new TypeError("'that' is not of type 'MacroType'");
			}
			if((that.min() < this._min) || (that.max() > this._max)) {
				return false;
			}
			var params = that.parameters();
			if(this._parameters.length === params.length) {
				for(var i = 0, __ks_1163 = this._parameters.length, parameter; i < __ks_1163; ++i) {
					parameter = this._parameters[i];
					if(!parameter.matchContentTo(params[i])) {
						return false;
					}
				}
			}
			else if(this._hasRest) {
				throw new NotImplementedException();
			}
			else {
				throw new NotImplementedException();
			}
			return true;
		},
		matchContentTo: function() {
			if(arguments.length === 1) {
				return MacroType.prototype.__ks_func_matchContentTo_0.apply(this, arguments);
			}
			return FunctionType.prototype.matchContentTo.apply(this, arguments);
		}
	});
	var MacroParameterType = Helper.class({
		$name: "MacroParameterType",
		$extends: ParameterType,
		$static: {
			__ks_sttc_fromAST_0: function(data, scope, defined, node) {
				if(arguments.length < 4) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 4)");
				}
				if(data === void 0 || data === null) {
					throw new TypeError("'data' is not nullable");
				}
				if(scope === void 0 || scope === null) {
					throw new TypeError("'scope' is not nullable");
				}
				else if(!KSType.is(scope, AbstractScope)) {
					throw new TypeError("'scope' is not of type 'AbstractScope'");
				}
				if(defined === void 0 || defined === null) {
					throw new TypeError("'defined' is not nullable");
				}
				else if(!KSType.isBoolean(defined)) {
					throw new TypeError("'defined' is not of type 'Boolean'");
				}
				if(node === void 0 || node === null) {
					throw new TypeError("'node' is not nullable");
				}
				else if(!KSType.is(node, AbstractNode)) {
					throw new TypeError("'node' is not of type 'AbstractNode'");
				}
				var type = Type.fromAST(data.type, scope, false, node);
				var min = KSType.isValue(data.defaultValue) ? 0 : 1;
				var max = 1;
				var nf = true;
				for(var __ks_1165 = 0, __ks_1166 = data.modifiers.length, modifier; nf && __ks_1165 < __ks_1166; ++__ks_1165) {
					modifier = data.modifiers[__ks_1165];
					if(modifier.kind === ModifierKind.Rest) {
						if(modifier.arity) {
							min = modifier.arity.min;
							max = modifier.arity.max;
						}
						else {
							min = 0;
							max = Infinity;
						}
						nf = true;
					}
				}
				return new MacroParameterType(scope, type, min, max);
			},
			fromAST: function() {
				if(arguments.length === 4) {
					return MacroParameterType.__ks_sttc_fromAST_0.apply(this, arguments);
				}
				return ParameterType.fromAST.apply(null, arguments);
			}
		},
		__ks_init: function() {
			ParameterType.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			ParameterType.prototype.__ks_cons.call(this, args);
		},
		__ks_func_clone_0: function() {
			return new MacroParameterType(this._scope, this._type, this._min, this._max);
		},
		clone: function() {
			if(arguments.length === 0) {
				return MacroParameterType.prototype.__ks_func_clone_0.apply(this);
			}
			return ParameterType.prototype.clone.apply(this, arguments);
		},
		__ks_func_matchContentTo_0: function(value) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(value === void 0 || value === null) {
				throw new TypeError("'value' is not nullable");
			}
			if(this._type.isAny()) {
				return true;
			}
			var __ks_1164 = this._type.name();
			if(__ks_1164 === "Expression") {
				return (value.kind === NodeKind.UnaryExpression) || (value.kind === NodeKind.BinaryExpression) || (value.kind === NodeKind.PolyadicExpression) || KSType.isValue($expressions[value.kind]);
			}
			else if(__ks_1164 === "Identifier") {
				return value.kind === NodeKind.Identifier;
			}
			else if(__ks_1164 === "Number") {
				return value.kind === NodeKind.NumericExpression;
			}
			else if(__ks_1164 === "Object") {
				return value.kind === NodeKind.ObjectExpression;
			}
			else if(__ks_1164 === "String") {
				return value.kind === NodeKind.Literal;
			}
			return false;
		},
		matchContentTo: function() {
			if(arguments.length === 1) {
				return MacroParameterType.prototype.__ks_func_matchContentTo_0.apply(this, arguments);
			}
			return ParameterType.prototype.matchContentTo.apply(this, arguments);
		}
	});
	var CallMacroStatement = Helper.class({
		$name: "CallMacroStatement",
		$extends: Statement,
		__ks_init: function() {
			Statement.prototype.__ks_init.call(this);
		},
		__ks_cons: function(args) {
			Statement.prototype.__ks_cons.call(this, args);
		},
		__ks_func_analyse_0: function() {
			var macro = this.scope().getMacro(this._data, this);
			this._statements = macro.execute(this._data.arguments, this);
			for(var __ks_1167 = 0, __ks_1168 = this._statements.length, statement; __ks_1167 < __ks_1168; ++__ks_1167) {
				statement = this._statements[__ks_1167];
				statement.analyse();
			}
		},
		analyse: function() {
			if(arguments.length === 0) {
				return CallMacroStatement.prototype.__ks_func_analyse_0.apply(this);
			}
			else if(Statement.prototype.analyse) {
				return Statement.prototype.analyse.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_prepare_0: function() {
			for(var __ks_1169 = 0, __ks_1170 = this._statements.length, statement; __ks_1169 < __ks_1170; ++__ks_1169) {
				statement = this._statements[__ks_1169];
				statement.prepare();
			}
		},
		prepare: function() {
			if(arguments.length === 0) {
				return CallMacroStatement.prototype.__ks_func_prepare_0.apply(this);
			}
			else if(Statement.prototype.prepare) {
				return Statement.prototype.prepare.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_translate_0: function() {
			for(var __ks_1171 = 0, __ks_1172 = this._statements.length, statement; __ks_1171 < __ks_1172; ++__ks_1171) {
				statement = this._statements[__ks_1171];
				statement.translate();
			}
		},
		translate: function() {
			if(arguments.length === 0) {
				return CallMacroStatement.prototype.__ks_func_translate_0.apply(this);
			}
			else if(Statement.prototype.translate) {
				return Statement.prototype.translate.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_isAwait_0: function() {
			for(var __ks_1173 = 0, __ks_1174 = this._statements.length, statement; __ks_1173 < __ks_1174; ++__ks_1173) {
				statement = this._statements[__ks_1173];
				if(statement.isAwait()) {
					return true;
				}
			}
			return false;
		},
		isAwait: function() {
			if(arguments.length === 0) {
				return CallMacroStatement.prototype.__ks_func_isAwait_0.apply(this);
			}
			return Statement.prototype.isAwait.apply(this, arguments);
		},
		__ks_func_isExit_0: function() {
			for(var __ks_1175 = 0, __ks_1176 = this._statements.length, statement; __ks_1175 < __ks_1176; ++__ks_1175) {
				statement = this._statements[__ks_1175];
				if(statement.isExit()) {
					return true;
				}
			}
			return false;
		},
		isExit: function() {
			if(arguments.length === 0) {
				return CallMacroStatement.prototype.__ks_func_isExit_0.apply(this);
			}
			return Statement.prototype.isExit.apply(this, arguments);
		},
		__ks_func_toFragments_0: function(fragments, mode) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(fragments === void 0 || fragments === null) {
				throw new TypeError("'fragments' is not nullable");
			}
			if(mode === void 0 || mode === null) {
				throw new TypeError("'mode' is not nullable");
			}
			for(var __ks_1177 = 0, __ks_1178 = this._statements.length, statement; __ks_1177 < __ks_1178; ++__ks_1177) {
				statement = this._statements[__ks_1177];
				statement.toFragments(fragments, mode);
			}
		},
		toFragments: function() {
			if(arguments.length === 2) {
				return CallMacroStatement.prototype.__ks_func_toFragments_0.apply(this, arguments);
			}
			return Statement.prototype.toFragments.apply(this, arguments);
		}
	});
	var $compile = {
		expression: function() {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			var __ks_i = -1;
			var data = arguments[++__ks_i];
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			var parent = arguments[++__ks_i];
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			var __ks__;
			var scope = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : parent.scope();
			var expression;
			var clazz = $expressions[data.kind];
			if(KSType.isValue(clazz)) {
				expression = KSType.isClass(clazz) ? new clazz(data, parent, scope) : clazz(data, parent, scope);
			}
			else if(data.kind === NodeKind.BinaryExpression) {
				if(KSType.isValue($binaryOperators[data.operator.kind]) ? (clazz = $binaryOperators[data.operator.kind], true) : false) {
					expression = new clazz(data, parent, scope);
				}
				else if(data.operator.kind === BinaryOperatorKind.Assignment) {
					if((clazz = $assignmentOperators[data.operator.assignment])) {
						expression = new clazz(data, parent, scope);
					}
					else {
						throw new NotSupportedException("Unexpected assignment operator " + data.operator.assignment, parent);
					}
				}
				else {
					throw new NotSupportedException("Unexpected binary operator " + data.operator.kind, parent);
				}
			}
			else if(data.kind === NodeKind.PolyadicExpression) {
				if(KSType.isValue($polyadicOperators[data.operator.kind]) ? (clazz = $polyadicOperators[data.operator.kind], true) : false) {
					expression = new clazz(data, parent, scope);
				}
				else {
					throw new NotSupportedException("Unexpected polyadic operator " + data.operator.kind, parent);
				}
			}
			else if(data.kind === NodeKind.UnaryExpression) {
				if(KSType.isValue($unaryOperators[data.operator.kind]) ? (clazz = $unaryOperators[data.operator.kind], true) : false) {
					expression = new clazz(data, parent, scope);
				}
				else {
					throw new NotSupportedException("Unexpected unary operator " + data.operator.kind, parent);
				}
			}
			else {
				throw new NotSupportedException("Unexpected expression/statement " + data.kind, parent);
			}
			return expression;
		},
		statement: function(data, parent) {
			if(arguments.length < 2) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
			}
			if(data === void 0 || data === null) {
				throw new TypeError("'data' is not nullable");
			}
			if(parent === void 0 || parent === null) {
				throw new TypeError("'parent' is not nullable");
			}
			if(Attribute.conditional(data, parent.module()._compiler._target)) {
				var clazz = KSType.isValue($statements[data.kind]) ? $statements[data.kind] : $statements.default;
				return new clazz(data, parent);
			}
			else {
				return null;
			}
		}
	};
	var __ks_5;
	var $assignmentOperators = (__ks_5 = {}, __ks_5[AssignmentOperatorKind.Addition] = AssignmentOperatorAddition, __ks_5[AssignmentOperatorKind.BitwiseAnd] = AssignmentOperatorBitwiseAnd, __ks_5[AssignmentOperatorKind.BitwiseLeftShift] = AssignmentOperatorBitwiseLeftShift, __ks_5[AssignmentOperatorKind.BitwiseOr] = AssignmentOperatorBitwiseOr, __ks_5[AssignmentOperatorKind.BitwiseRightShift] = AssignmentOperatorBitwiseRightShift, __ks_5[AssignmentOperatorKind.BitwiseXor] = AssignmentOperatorBitwiseXor, __ks_5[AssignmentOperatorKind.Division] = AssignmentOperatorDivision, __ks_5[AssignmentOperatorKind.Equality] = AssignmentOperatorEquality, __ks_5[AssignmentOperatorKind.Existential] = AssignmentOperatorExistential, __ks_5[AssignmentOperatorKind.Modulo] = AssignmentOperatorModulo, __ks_5[AssignmentOperatorKind.Multiplication] = AssignmentOperatorMultiplication, __ks_5[AssignmentOperatorKind.NonExistential] = AssignmentOperatorNonExistential, __ks_5[AssignmentOperatorKind.NullCoalescing] = AssignmentOperatorNullCoalescing, __ks_5[AssignmentOperatorKind.Subtraction] = AssignmentOperatorSubtraction, __ks_5);
	var $binaryOperators = (__ks_5 = {}, __ks_5[BinaryOperatorKind.Addition] = BinaryOperatorAddition, __ks_5[BinaryOperatorKind.And] = BinaryOperatorAnd, __ks_5[BinaryOperatorKind.BitwiseAnd] = BinaryOperatorBitwiseAnd, __ks_5[BinaryOperatorKind.BitwiseLeftShift] = BinaryOperatorBitwiseLeftShift, __ks_5[BinaryOperatorKind.BitwiseOr] = BinaryOperatorBitwiseOr, __ks_5[BinaryOperatorKind.BitwiseRightShift] = BinaryOperatorBitwiseRightShift, __ks_5[BinaryOperatorKind.BitwiseXor] = BinaryOperatorBitwiseXor, __ks_5[BinaryOperatorKind.Division] = BinaryOperatorDivision, __ks_5[BinaryOperatorKind.Equality] = BinaryOperatorEquality, __ks_5[BinaryOperatorKind.GreaterThan] = BinaryOperatorGreaterThan, __ks_5[BinaryOperatorKind.GreaterThanOrEqual] = BinaryOperatorGreaterThanOrEqual, __ks_5[BinaryOperatorKind.Inequality] = BinaryOperatorInequality, __ks_5[BinaryOperatorKind.LessThan] = BinaryOperatorLessThan, __ks_5[BinaryOperatorKind.LessThanOrEqual] = BinaryOperatorLessThanOrEqual, __ks_5[BinaryOperatorKind.Modulo] = BinaryOperatorModulo, __ks_5[BinaryOperatorKind.Multiplication] = BinaryOperatorMultiplication, __ks_5[BinaryOperatorKind.NullCoalescing] = BinaryOperatorNullCoalescing, __ks_5[BinaryOperatorKind.Or] = BinaryOperatorOr, __ks_5[BinaryOperatorKind.Subtraction] = BinaryOperatorSubtraction, __ks_5[BinaryOperatorKind.TypeCasting] = BinaryOperatorTypeCasting, __ks_5[BinaryOperatorKind.TypeEquality] = BinaryOperatorTypeEquality, __ks_5[BinaryOperatorKind.TypeInequality] = BinaryOperatorTypeInequality, __ks_5);
	var $expressions = (__ks_5 = {}, __ks_5[NodeKind.ArrayBinding] = ArrayBinding, __ks_5[NodeKind.ArrayComprehension] = function(data, parent, scope) {
		if(arguments.length < 3) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
		}
		if(data === void 0 || data === null) {
			throw new TypeError("'data' is not nullable");
		}
		if(parent === void 0 || parent === null) {
			throw new TypeError("'parent' is not nullable");
		}
		if(scope === void 0 || scope === null) {
			throw new TypeError("'scope' is not nullable");
		}
		if(data.loop.kind === NodeKind.ForFromStatement) {
			return new ArrayComprehensionForFrom(data, parent, scope);
		}
		else if(data.loop.kind === NodeKind.ForInStatement) {
			return new ArrayComprehensionForIn(data, parent, scope);
		}
		else if(data.loop.kind === NodeKind.ForOfStatement) {
			return new ArrayComprehensionForOf(data, parent, scope);
		}
		else if(data.loop.kind === NodeKind.ForRangeStatement) {
			return new ArrayComprehensionForRange(data, parent, scope);
		}
		else {
			throw new NotSupportedException("Unexpected kind " + data.loop.kind, parent);
		}
	}, __ks_5[NodeKind.ArrayExpression] = ArrayExpression, __ks_5[NodeKind.ArrayRange] = ArrayRange, __ks_5[NodeKind.AwaitExpression] = AwaitExpression, __ks_5[NodeKind.BindingElement] = BindingElement, __ks_5[NodeKind.Block] = BlockExpression, __ks_5[NodeKind.CallExpression] = CallExpression, __ks_5[NodeKind.CallMacroExpression] = function(data, parent, scope) {
		if(arguments.length < 3) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
		}
		if(data === void 0 || data === null) {
			throw new TypeError("'data' is not nullable");
		}
		if(parent === void 0 || parent === null) {
			throw new TypeError("'parent' is not nullable");
		}
		if(scope === void 0 || scope === null) {
			throw new TypeError("'scope' is not nullable");
		}
		var macro = scope.getMacro(data, parent);
		var statements = macro.execute(data.arguments, parent);
		if((statements.length === 1) && KSType.is(statements[0], ExpressionStatement)) {
			return $compile.expression(statements[0].data(), parent);
		}
		else {
			throw new NotImplementedException(parent);
		}
	}, __ks_5[NodeKind.ConditionalExpression] = ConditionalExpression, __ks_5[NodeKind.CreateExpression] = CreateExpression, __ks_5[NodeKind.CurryExpression] = CurryExpression, __ks_5[NodeKind.EnumExpression] = EnumExpression, __ks_5[NodeKind.FunctionExpression] = FunctionExpression, __ks_5[NodeKind.Identifier] = IdentifierLiteral, __ks_5[NodeKind.IfExpression] = IfExpression, __ks_5[NodeKind.LambdaExpression] = LambdaExpression, __ks_5[NodeKind.Literal] = StringLiteral, __ks_5[NodeKind.MemberExpression] = MemberExpression, __ks_5[NodeKind.NumericExpression] = NumberLiteral, __ks_5[NodeKind.ObjectBinding] = ObjectBinding, __ks_5[NodeKind.ObjectExpression] = ObjectExpression, __ks_5[NodeKind.OmittedExpression] = OmittedExpression, __ks_5[NodeKind.RegularExpression] = RegularExpression, __ks_5[NodeKind.SequenceExpression] = SequenceExpression, __ks_5[NodeKind.TemplateExpression] = TemplateExpression, __ks_5[NodeKind.ThisExpression] = ThisExpression, __ks_5[NodeKind.UnlessExpression] = UnlessExpression, __ks_5);
	var $statements = (__ks_5 = {}, __ks_5[NodeKind.BreakStatement] = BreakStatement, __ks_5[NodeKind.CallMacroExpression] = CallMacroStatement, __ks_5[NodeKind.ClassDeclaration] = ClassDeclaration, __ks_5[NodeKind.ContinueStatement] = ContinueStatement, __ks_5[NodeKind.DestroyStatement] = DestroyStatement, __ks_5[NodeKind.DoUntilStatement] = DoUntilStatement, __ks_5[NodeKind.DoWhileStatement] = DoWhileStatement, __ks_5[NodeKind.EnumDeclaration] = EnumDeclaration, __ks_5[NodeKind.ExportDeclaration] = ExportDeclaration, __ks_5[NodeKind.ExternDeclaration] = ExternDeclaration, __ks_5[NodeKind.ExternOrRequireDeclaration] = ExternOrRequireDeclaration, __ks_5[NodeKind.ForFromStatement] = ForFromStatement, __ks_5[NodeKind.ForInStatement] = ForInStatement, __ks_5[NodeKind.ForOfStatement] = ForOfStatement, __ks_5[NodeKind.ForRangeStatement] = ForRangeStatement, __ks_5[NodeKind.FunctionDeclaration] = FunctionDeclaration, __ks_5[NodeKind.IfStatement] = IfStatement, __ks_5[NodeKind.ImplementDeclaration] = ImplementDeclaration, __ks_5[NodeKind.ImportDeclaration] = ImportDeclaration, __ks_5[NodeKind.IncludeDeclaration] = IncludeDeclaration, __ks_5[NodeKind.IncludeAgainDeclaration] = IncludeAgainDeclaration, __ks_5[NodeKind.MacroDeclaration] = MacroDeclaration, __ks_5[NodeKind.NamespaceDeclaration] = NamespaceDeclaration, __ks_5[NodeKind.RequireDeclaration] = RequireDeclaration, __ks_5[NodeKind.RequireOrExternDeclaration] = RequireOrExternDeclaration, __ks_5[NodeKind.RequireOrImportDeclaration] = RequireOrImportDeclaration, __ks_5[NodeKind.ReturnStatement] = ReturnStatement, __ks_5[NodeKind.SwitchStatement] = SwitchStatement, __ks_5[NodeKind.ThrowStatement] = ThrowStatement, __ks_5[NodeKind.TryStatement] = TryStatement, __ks_5[NodeKind.TypeAliasDeclaration] = TypeAliasDeclaration, __ks_5[NodeKind.UnlessStatement] = UnlessStatement, __ks_5[NodeKind.UntilStatement] = UntilStatement, __ks_5[NodeKind.VariableDeclaration] = VariableDeclaration, __ks_5[NodeKind.WhileStatement] = WhileStatement, __ks_5["default"] = ExpressionStatement, __ks_5);
	var $polyadicOperators = (__ks_5 = {}, __ks_5[BinaryOperatorKind.Addition] = PolyadicOperatorAddition, __ks_5[BinaryOperatorKind.And] = PolyadicOperatorAnd, __ks_5[BinaryOperatorKind.BitwiseAnd] = PolyadicOperatorBitwiseAnd, __ks_5[BinaryOperatorKind.BitwiseLeftShift] = PolyadicOperatorBitwiseLeftShift, __ks_5[BinaryOperatorKind.BitwiseOr] = PolyadicOperatorBitwiseOr, __ks_5[BinaryOperatorKind.BitwiseRightShift] = PolyadicOperatorBitwiseRightShift, __ks_5[BinaryOperatorKind.BitwiseXor] = PolyadicOperatorBitwiseXor, __ks_5[BinaryOperatorKind.Division] = PolyadicOperatorDivision, __ks_5[BinaryOperatorKind.Equality] = PolyadicOperatorEquality, __ks_5[BinaryOperatorKind.GreaterThan] = PolyadicOperatorGreaterThan, __ks_5[BinaryOperatorKind.GreaterThanOrEqual] = PolyadicOperatorGreaterThanOrEqual, __ks_5[BinaryOperatorKind.LessThan] = PolyadicOperatorLessThan, __ks_5[BinaryOperatorKind.LessThanOrEqual] = PolyadicOperatorLessThanOrEqual, __ks_5[BinaryOperatorKind.Modulo] = PolyadicOperatorModulo, __ks_5[BinaryOperatorKind.Multiplication] = PolyadicOperatorMultiplication, __ks_5[BinaryOperatorKind.NullCoalescing] = PolyadicOperatorNullCoalescing, __ks_5[BinaryOperatorKind.Or] = PolyadicOperatorOr, __ks_5[BinaryOperatorKind.Subtraction] = PolyadicOperatorSubtraction, __ks_5);
	var $unaryOperators = (__ks_5 = {}, __ks_5[UnaryOperatorKind.BitwiseNot] = UnaryOperatorBitwiseNot, __ks_5[UnaryOperatorKind.DecrementPostfix] = UnaryOperatorDecrementPostfix, __ks_5[UnaryOperatorKind.DecrementPrefix] = UnaryOperatorDecrementPrefix, __ks_5[UnaryOperatorKind.Existential] = UnaryOperatorExistential, __ks_5[UnaryOperatorKind.IncrementPostfix] = UnaryOperatorIncrementPostfix, __ks_5[UnaryOperatorKind.IncrementPrefix] = UnaryOperatorIncrementPrefix, __ks_5[UnaryOperatorKind.Negation] = UnaryOperatorNegation, __ks_5[UnaryOperatorKind.Negative] = UnaryOperatorNegative, __ks_5[UnaryOperatorKind.Spread] = UnaryOperatorSpread, __ks_5);
	var $targets = {
		ecma: {
			"5": {
				format: {
					classes: "es5",
					destructuring: "es5",
					functions: "es5",
					parameters: "es5",
					properties: "es5",
					spreads: "es5",
					variables: "es5"
				}
			},
			"6": {
				format: {
					classes: "es6",
					destructuring: "es6",
					functions: "es6",
					parameters: "es6",
					properties: "es6",
					spreads: "es6",
					variables: "es6"
				}
			}
		}
	};
	var Compiler = Helper.class({
		$name: "Compiler",
		$static: {
			__ks_sttc_registerTarget_0: function(target, options) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(target === void 0 || target === null) {
					throw new TypeError("'target' is not nullable");
				}
				if(options === void 0 || options === null) {
					throw new TypeError("'options' is not nullable");
				}
				var __ks_1183;
				if(KSType.isValue(__ks_1183 = $targetRegex.exec(target)) ? (target = __ks_1183, false) : true) {
					throw new Error("Invalid target syntax: " + target);
				}
				if(!KSType.isValue($targets[target[1]])) {
					$targets[target[1]] = {};
				}
				$targets[target[1]][target[2]] = options;
			},
			registerTarget: function() {
				if(arguments.length === 2) {
					return Compiler.__ks_sttc_registerTarget_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_registerTargets_0: function(targets) {
				if(arguments.length < 1) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
				}
				if(targets === void 0 || targets === null) {
					throw new TypeError("'targets' is not nullable");
				}
				for(var name in targets) {
					var data = targets[name];
					if(KSType.isString(data)) {
						Compiler.registerTargetAlias(name, data);
					}
					else {
						Compiler.registerTarget(name, data);
					}
				}
			},
			registerTargets: function() {
				if(arguments.length === 1) {
					return Compiler.__ks_sttc_registerTargets_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			},
			__ks_sttc_registerTargetAlias_0: function(target, alias) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(target === void 0 || target === null) {
					throw new TypeError("'target' is not nullable");
				}
				if(alias === void 0 || alias === null) {
					throw new TypeError("'alias' is not nullable");
				}
				var __ks_1184;
				if(KSType.isValue(__ks_1184 = $targetRegex.exec(target)) ? (target = __ks_1184, false) : true) {
					throw new Error("Invalid target syntax: " + target);
				}
				if(KSType.isValue(__ks_1184 = $targetRegex.exec(alias)) ? (alias = __ks_1184, false) : true) {
					throw new Error("Invalid target syntax: " + alias);
				}
				if(!KSType.isValue($targets[alias[1]])) {
					throw new Error("Undefined target '" + alias[1] + "'");
				}
				else if(!KSType.isValue($targets[alias[1]][alias[2]])) {
					throw new Error("Undefined target's version '" + alias[2] + "'");
				}
				if(!KSType.isValue($targets[target[1]])) {
					$targets[target[1]] = {};
				}
				$targets[target[1]][target[2]] = $targets[alias[1]][alias[2]];
			},
			registerTargetAlias: function() {
				if(arguments.length === 2) {
					return Compiler.__ks_sttc_registerTargetAlias_0.apply(this, arguments);
				}
				throw new SyntaxError("wrong number of arguments");
			}
		},
		$create: function() {
			this.__ks_init();
			this.__ks_cons(arguments);
		},
		__ks_init: function() {
		},
		__ks_cons_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var file = arguments[++__ks_i];
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			else if(!KSType.isString(file)) {
				throw new TypeError("'file' is not of type 'String'");
			}
			var __ks__;
			var options = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			var hashes = arguments.length > 2 && (__ks__ = arguments[++__ks_i]) !== void 0 && __ks__ !== null ? __ks__ : {};
			this._file = file;
			this._hashes = hashes;
			this._options = __ks_Object._cm_merge({
				target: "ecma-v6",
				register: true,
				config: {
					header: true,
					error: {
						level: "fatal",
						ignore: [],
						raise: []
					},
					parse: {
						parameters: "kaoscript"
					},
					format: {},
					runtime: {
						helper: {
							alias: "Helper",
							member: "Helper",
							package: "@kaoscript/runtime"
						},
						type: {
							alias: "Type",
							member: "Type",
							package: "@kaoscript/runtime"
						}
					}
				}
			}, options);
			var target, __ks_1179;
			if(KSType.isValue(__ks_1179 = $targetRegex.exec(this._options.target)) ? (target = __ks_1179, false) : true) {
				throw new Error("Invalid target syntax: " + this._options.target);
			}
			this._target = {
				name: target[1],
				version: target[2]
			};
			if(!KSType.isValue($targets[this._target.name])) {
				throw new Error("Undefined target '" + this._target.name + "'");
			}
			else if(!KSType.isValue($targets[this._target.name][this._target.version])) {
				throw new Error("Undefined target's version '" + this._target.version + "'");
			}
			this._options.target = "" + this._target.name + "-v" + this._target.version;
			this._options.config = __ks_Object._cm_defaults($targets[this._target.name][this._target.version], this._options.config);
		},
		__ks_cons: function(args) {
			if(args.length >= 1 && args.length <= 3) {
				Compiler.prototype.__ks_cons_0.apply(this, args);
			}
			else {
				throw new SyntaxError("wrong number of arguments");
			}
		},
		__ks_func_compile_0: function(data) {
			if(data === void 0) {
				data = null;
			}
			this._module = new Module(KSType.isValue(data) ? data : fs.readFile(this._file), this, this._file);
			this._module.compile();
			var __ks_1180;
			this._fragments = this._module.toFragments();
			return this;
		},
		compile: function() {
			if(arguments.length >= 0 && arguments.length <= 1) {
				return Compiler.prototype.__ks_func_compile_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_createServant_0: function(file) {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			return new Compiler(file, {
				config: this._options.config,
				register: false,
				target: this._options.target
			}, this._hashes);
		},
		createServant: function() {
			if(arguments.length === 1) {
				return Compiler.prototype.__ks_func_createServant_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_readFile_0: function() {
			return fs.readFile(this._file);
		},
		readFile: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_readFile_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_sha256_0: function() {
			if(arguments.length < 1) {
				throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
			}
			var __ks_i = -1;
			var file = arguments[++__ks_i];
			if(file === void 0 || file === null) {
				throw new TypeError("'file' is not nullable");
			}
			var __ks__;
			var data = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
			return KSType.isValue(this._hashes[file]) ? this._hashes[file] : (this._hashes[file] = fs.sha256(KSType.isValue(data) ? data : fs.readFile(file)));
		},
		sha256: function() {
			if(arguments.length >= 1 && arguments.length <= 2) {
				return Compiler.prototype.__ks_func_sha256_0.apply(this, arguments);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toHashes_0: function() {
			return this._module.toHashes();
		},
		toHashes: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toHashes_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toMetadata_0: function() {
			return this._module.toMetadata();
		},
		toMetadata: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toMetadata_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toSource_0: function() {
			var source = "";
			for(var __ks_1181 = 0, __ks_1182 = this._fragments.length, fragment; __ks_1181 < __ks_1182; ++__ks_1181) {
				fragment = this._fragments[__ks_1181];
				source += fragment.code;
			}
			if(source.length) {
				return source.substr(0, source.length - 1);
			}
			else {
				return source;
			}
		},
		toSource: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toSource_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_toSourceMap_0: function() {
			return this._module.toSourceMap();
		},
		toSourceMap: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_toSourceMap_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_writeFiles_0: function() {
			fs.mkdir(path.dirname(this._file));
			fs.writeFile(getBinaryPath(this._file, this._options.target), this.toSource());
			if(!this._module._binary) {
				var metadata = this.toMetadata();
				fs.writeFile(getMetadataPath(this._file, this._options.target), JSON.stringify(metadata, function(key, value) {
					if(arguments.length < 2) {
						throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
					}
					if(key === void 0 || key === null) {
						throw new TypeError("'key' is not nullable");
					}
					if(value === void 0 || value === null) {
						throw new TypeError("'value' is not nullable");
					}
					return ((key === "max") && (value === Infinity)) ? "Infinity" : value;
				}));
			}
			fs.writeFile(getHashPath(this._file, this._options.target), JSON.stringify(this._module.toHashes()));
		},
		writeFiles: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_writeFiles_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_writeMetadata_0: function() {
			if(!this._options.output) {
				throw new Error("Undefined option: output");
			}
			var metadata = this.toMetadata();
			var filename = path.join(this._options.output, path.basename(this._file)).slice(0, -3) + ".json";
			fs.writeFile(filename, JSON.stringify(metadata, function(key, value) {
				if(arguments.length < 2) {
					throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
				}
				if(key === void 0 || key === null) {
					throw new TypeError("'key' is not nullable");
				}
				if(value === void 0 || value === null) {
					throw new TypeError("'value' is not nullable");
				}
				return ((key === "max") && (value === Infinity)) ? "Infinity" : value;
			}));
			return this;
		},
		writeMetadata: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_writeMetadata_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		},
		__ks_func_writeOutput_0: function() {
			if(!this._options.output) {
				throw new Error("Undefined option: output");
			}
			fs.mkdir(this._options.output);
			var filename = path.join(this._options.output, path.basename(this._file)).slice(0, -3) + ".js";
			fs.writeFile(filename, this.toSource());
			return this;
		},
		writeOutput: function() {
			if(arguments.length === 0) {
				return Compiler.prototype.__ks_func_writeOutput_0.apply(this);
			}
			throw new SyntaxError("wrong number of arguments");
		}
	});
	function compileFile() {
		if(arguments.length < 1) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 1)");
		}
		var __ks_i = -1;
		var file = arguments[++__ks_i];
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		var __ks__;
		var options = arguments.length > 1 && (__ks__ = arguments[++__ks_i]) !== void 0 ? __ks__ : null;
		var compiler = new Compiler(file, options);
		return compiler.compile().toSource();
	}
	function getBinaryPath(file, target) {
		if(arguments.length < 2) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		if(target === void 0 || target === null) {
			throw new TypeError("'target' is not nullable");
		}
		return fs.hidden(file, target, $extensions.binary);
	}
	function getHashPath(file, target) {
		if(arguments.length < 2) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		if(target === void 0 || target === null) {
			throw new TypeError("'target' is not nullable");
		}
		return fs.hidden(file, target, $extensions.hash);
	}
	function getMetadataPath(file, target) {
		if(arguments.length < 2) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 2)");
		}
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		if(target === void 0 || target === null) {
			throw new TypeError("'target' is not nullable");
		}
		return fs.hidden(file, target, $extensions.metadata);
	}
	function isUpToDate(file, target, source) {
		if(arguments.length < 3) {
			throw new SyntaxError("wrong number of arguments (" + arguments.length + " for 3)");
		}
		if(file === void 0 || file === null) {
			throw new TypeError("'file' is not nullable");
		}
		if(target === void 0 || target === null) {
			throw new TypeError("'target' is not nullable");
		}
		if(source === void 0 || source === null) {
			throw new TypeError("'source' is not nullable");
		}
		var hashes;
		try {
			var __ks_1185, __ks_1186, __ks_1187;
			hashes = JSON.parse(fs.readFile(getHashPath(file, target)));
		}
		catch(__ks_5) {
			return false;
		}
		var root = path.dirname(file);
		for(var name in hashes) {
			var hash = hashes[name];
			if(name === ".") {
				if(fs.sha256(source) !== hash) {
					return null;
				}
			}
			else {
				if(fs.sha256(fs.readFile(path.join(root, name))) !== hash) {
					return null;
				}
			}
		}
		return true;
	}
	return {
		Exception: Exception,
		IOException: IOException,
		NotImplementedException: NotImplementedException,
		NotSupportedException: NotSupportedException,
		ReferenceException: ReferenceException,
		SyntaxException: SyntaxException,
		TypeException: TypeException,
		Module: Module,
		Compiler: Compiler,
		compileFile: compileFile,
		getBinaryPath: getBinaryPath,
		getHashPath: getHashPath,
		getMetadataPath: getMetadataPath,
		isUpToDate: isUpToDate,
		extensions: $extensions,
		AssignmentOperatorKind: AssignmentOperatorKind,
		BinaryOperatorKind: BinaryOperatorKind,
		MacroElementKind: MacroElementKind,
		ModifierKind: ModifierKind,
		NodeKind: NodeKind,
		ReificationKind: ReificationKind,
		ScopeKind: ScopeKind,
		UnaryOperatorKind: UnaryOperatorKind,
		FragmentBuilder: FragmentBuilder
	};
};